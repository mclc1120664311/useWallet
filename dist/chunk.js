/*! For license information please see chunk.js.LICENSE.txt */
(self.webpackChunkcosDesign=self.webpackChunkcosDesign||[]).push([[284],{591:(e,t,r)=>{var n=r(8).default;function i(){"use strict";e.exports=i=function(){return t},e.exports.__esModule=!0,e.exports.default=e.exports;var t={},r=Object.prototype,o=r.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},s=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag";function c(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,r){return e[t]=r}}function f(e,t,r,n){var i=t&&t.prototype instanceof p?t:p,o=Object.create(i.prototype),a=new P(n||[]);return o._invoke=function(e,t,r){var n="suspendedStart";return function(i,o){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===i)throw o;return{value:void 0,done:!0}}for(r.method=i,r.arg=o;;){var a=r.delegate;if(a){var s=x(a,r);if(s){if(s===d)continue;return s}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n="executing";var l=h(e,t,r);if("normal"===l.type){if(n=r.done?"completed":"suspendedYield",l.arg===d)continue;return{value:l.arg,done:r.done}}"throw"===l.type&&(n="completed",r.method="throw",r.arg=l.arg)}}}(e,r,a),o}function h(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}t.wrap=f;var d={};function p(){}function m(){}function g(){}var v={};c(v,s,(function(){return this}));var y=Object.getPrototypeOf,b=y&&y(y(N([])));b&&b!==r&&o.call(b,s)&&(v=b);var w=g.prototype=p.prototype=Object.create(v);function k(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function r(i,a,s,l){var u=h(e[i],e,a);if("throw"!==u.type){var c=u.arg,f=c.value;return f&&"object"==n(f)&&o.call(f,"__await")?t.resolve(f.__await).then((function(e){r("next",e,s,l)}),(function(e){r("throw",e,s,l)})):t.resolve(f).then((function(e){c.value=e,s(c)}),(function(e){return r("throw",e,s,l)}))}l(u.arg)}var i;this._invoke=function(e,n){function o(){return new t((function(t,i){r(e,n,t,i)}))}return i=i?i.then(o,o):o()}}function x(e,t){var r=e.iterator[t.method];if(void 0===r){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,x(e,t),"throw"===t.method))return d;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var n=h(r,e.iterator,t.arg);if("throw"===n.type)return t.method="throw",t.arg=n.arg,t.delegate=null,d;var i=n.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,d):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,d)}function _(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function S(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function P(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(_,this),this.reset(!0)}function N(e){if(e){var t=e[s];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,n=function t(){for(;++r<e.length;)if(o.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return n.next=n}}return{next:M}}function M(){return{value:void 0,done:!0}}return m.prototype=g,c(w,"constructor",g),c(g,"constructor",m),m.displayName=c(g,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===m||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,g):(e.__proto__=g,c(e,u,"GeneratorFunction")),e.prototype=Object.create(w),e},t.awrap=function(e){return{__await:e}},k(E.prototype),c(E.prototype,l,(function(){return this})),t.AsyncIterator=E,t.async=function(e,r,n,i,o){void 0===o&&(o=Promise);var a=new E(f(e,r,n,i),o);return t.isGeneratorFunction(r)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},k(w),c(w,u,"Generator"),c(w,s,(function(){return this})),c(w,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function r(){for(;t.length;){var n=t.pop();if(n in e)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=N,P.prototype={constructor:P,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(S),!e)for(var t in this)"t"===t.charAt(0)&&o.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(r,n){return a.type="throw",a.arg=e,t.next=r,n&&(t.method="next",t.arg=void 0),!!n}for(var n=this.tryEntries.length-1;n>=0;--n){var i=this.tryEntries[n],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var s=o.call(i,"catchLoc"),l=o.call(i,"finallyLoc");if(s&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&o.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var i=n;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,d):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),d},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),S(r),d}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var i=n.arg;S(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,r){return this.delegate={iterator:N(e),resultName:t,nextLoc:r},"next"===this.method&&(this.arg=void 0),d}},t}e.exports=i,e.exports.__esModule=!0,e.exports.default=e.exports},8:e=>{function t(r){return e.exports=t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e.exports.__esModule=!0,e.exports.default=e.exports,t(r)}e.exports=t,e.exports.__esModule=!0,e.exports.default=e.exports},757:(e,t,r)=>{var n=r(591)();e.exports=n;try{regeneratorRuntime=n}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=n:Function("r","regeneratorRuntime = r")(n)}},310:(e,t,r)=>{"use strict";r.d(t,{Q:()=>En});let n=!1,i=!1;const o={debug:1,default:2,info:2,warning:3,error:4,off:5};let a=o.default,s=null;const l=function(){try{const e=[];if(["NFD","NFC","NFKD","NFKC"].forEach((t=>{try{if("test"!=="test".normalize(t))throw new Error("bad normalize")}catch(r){e.push(t)}})),e.length)throw new Error("missing "+e.join(", "));if(String.fromCharCode(233).normalize("NFD")!==String.fromCharCode(101,769))throw new Error("broken implementation")}catch(e){return e.message}return null}();var u,c;!function(e){e.DEBUG="DEBUG",e.INFO="INFO",e.WARNING="WARNING",e.ERROR="ERROR",e.OFF="OFF"}(u||(u={})),function(e){e.UNKNOWN_ERROR="UNKNOWN_ERROR",e.NOT_IMPLEMENTED="NOT_IMPLEMENTED",e.UNSUPPORTED_OPERATION="UNSUPPORTED_OPERATION",e.NETWORK_ERROR="NETWORK_ERROR",e.SERVER_ERROR="SERVER_ERROR",e.TIMEOUT="TIMEOUT",e.BUFFER_OVERRUN="BUFFER_OVERRUN",e.NUMERIC_FAULT="NUMERIC_FAULT",e.MISSING_NEW="MISSING_NEW",e.INVALID_ARGUMENT="INVALID_ARGUMENT",e.MISSING_ARGUMENT="MISSING_ARGUMENT",e.UNEXPECTED_ARGUMENT="UNEXPECTED_ARGUMENT",e.CALL_EXCEPTION="CALL_EXCEPTION",e.INSUFFICIENT_FUNDS="INSUFFICIENT_FUNDS",e.NONCE_EXPIRED="NONCE_EXPIRED",e.REPLACEMENT_UNDERPRICED="REPLACEMENT_UNDERPRICED",e.UNPREDICTABLE_GAS_LIMIT="UNPREDICTABLE_GAS_LIMIT",e.TRANSACTION_REPLACED="TRANSACTION_REPLACED"}(c||(c={}));const f="0123456789abcdef";class h{constructor(e){Object.defineProperty(this,"version",{enumerable:!0,value:e,writable:!1})}_log(e,t){const r=e.toLowerCase();null==o[r]&&this.throwArgumentError("invalid log level name","logLevel",e),a>o[r]||console.log.apply(console,t)}debug(...e){this._log(h.levels.DEBUG,e)}info(...e){this._log(h.levels.INFO,e)}warn(...e){this._log(h.levels.WARNING,e)}makeError(e,t,r){if(i)return this.makeError("censored error",t,{});t||(t=h.errors.UNKNOWN_ERROR),r||(r={});const n=[];Object.keys(r).forEach((e=>{const t=r[e];try{if(t instanceof Uint8Array){let r="";for(let e=0;e<t.length;e++)r+=f[t[e]>>4],r+=f[15&t[e]];n.push(e+"=Uint8Array(0x"+r+")")}else n.push(e+"="+JSON.stringify(t))}catch(t){n.push(e+"="+JSON.stringify(r[e].toString()))}})),n.push(`code=${t}`),n.push(`version=${this.version}`);const o=e;let a="";switch(t){case c.NUMERIC_FAULT:{a="NUMERIC_FAULT";const t=e;switch(t){case"overflow":case"underflow":case"division-by-zero":a+="-"+t;break;case"negative-power":case"negative-width":a+="-unsupported";break;case"unbound-bitwise-result":a+="-unbound-result"}break}case c.CALL_EXCEPTION:case c.INSUFFICIENT_FUNDS:case c.MISSING_NEW:case c.NONCE_EXPIRED:case c.REPLACEMENT_UNDERPRICED:case c.TRANSACTION_REPLACED:case c.UNPREDICTABLE_GAS_LIMIT:a=t}a&&(e+=" [ See: https://links.ethers.org/v5-errors-"+a+" ]"),n.length&&(e+=" ("+n.join(", ")+")");const s=new Error(e);return s.reason=o,s.code=t,Object.keys(r).forEach((function(e){s[e]=r[e]})),s}throwError(e,t,r){throw this.makeError(e,t,r)}throwArgumentError(e,t,r){return this.throwError(e,h.errors.INVALID_ARGUMENT,{argument:t,value:r})}assert(e,t,r,n){e||this.throwError(t,r,n)}assertArgument(e,t,r,n){e||this.throwArgumentError(t,r,n)}checkNormalize(e){null==e&&(e="platform missing String.prototype.normalize"),l&&this.throwError("platform missing String.prototype.normalize",h.errors.UNSUPPORTED_OPERATION,{operation:"String.prototype.normalize",form:l})}checkSafeUint53(e,t){"number"==typeof e&&(null==t&&(t="value not safe"),(e<0||e>=9007199254740991)&&this.throwError(t,h.errors.NUMERIC_FAULT,{operation:"checkSafeInteger",fault:"out-of-safe-range",value:e}),e%1&&this.throwError(t,h.errors.NUMERIC_FAULT,{operation:"checkSafeInteger",fault:"non-integer",value:e}))}checkArgumentCount(e,t,r){r=r?": "+r:"",e<t&&this.throwError("missing argument"+r,h.errors.MISSING_ARGUMENT,{count:e,expectedCount:t}),e>t&&this.throwError("too many arguments"+r,h.errors.UNEXPECTED_ARGUMENT,{count:e,expectedCount:t})}checkNew(e,t){e!==Object&&null!=e||this.throwError("missing new",h.errors.MISSING_NEW,{name:t.name})}checkAbstract(e,t){e===t?this.throwError("cannot instantiate abstract class "+JSON.stringify(t.name)+" directly; use a sub-class",h.errors.UNSUPPORTED_OPERATION,{name:e.name,operation:"new"}):e!==Object&&null!=e||this.throwError("missing new",h.errors.MISSING_NEW,{name:t.name})}static globalLogger(){return s||(s=new h("logger/5.6.0")),s}static setCensorship(e,t){if(!e&&t&&this.globalLogger().throwError("cannot permanently disable censorship",h.errors.UNSUPPORTED_OPERATION,{operation:"setCensorship"}),n){if(!e)return;this.globalLogger().throwError("error censorship permanent",h.errors.UNSUPPORTED_OPERATION,{operation:"setCensorship"})}i=!!e,n=!!t}static setLogLevel(e){const t=o[e.toLowerCase()];null!=t?a=t:h.globalLogger().warn("invalid log level - "+e)}static from(e){return new h(e)}}h.errors=c,h.levels=u;const d=new h("properties/5.6.0");function p(e,t,r){Object.defineProperty(e,t,{enumerable:!0,value:r,writable:!1})}function m(e,t){for(let r=0;r<32;r++){if(e[t])return e[t];if(!e.prototype||"object"!=typeof e.prototype)break;e=Object.getPrototypeOf(e.prototype).constructor}return null}function g(e){return t=this,r=void 0,i=function*(){const t=Object.keys(e).map((t=>{const r=e[t];return Promise.resolve(r).then((e=>({key:t,value:e})))}));return(yield Promise.all(t)).reduce(((e,t)=>(e[t.key]=t.value,e)),{})},new((n=void 0)||(n=Promise))((function(e,o){function a(e){try{l(i.next(e))}catch(e){o(e)}}function s(e){try{l(i.throw(e))}catch(e){o(e)}}function l(t){var r;t.done?e(t.value):(r=t.value,r instanceof n?r:new n((function(e){e(r)}))).then(a,s)}l((i=i.apply(t,r||[])).next())}));var t,r,n,i}function v(e){const t={};for(const r in e)t[r]=e[r];return t}const y={bigint:!0,boolean:!0,function:!0,number:!0,string:!0};function b(e){if(null==e||y[typeof e])return!0;if(Array.isArray(e)||"object"==typeof e){if(!Object.isFrozen(e))return!1;const t=Object.keys(e);for(let r=0;r<t.length;r++){let n=null;try{n=e[t[r]]}catch(e){continue}if(!b(n))return!1}return!0}return d.throwArgumentError("Cannot deepCopy "+typeof e,"object",e)}function w(e){if(b(e))return e;if(Array.isArray(e))return Object.freeze(e.map((e=>k(e))));if("object"==typeof e){const t={};for(const r in e){const n=e[r];void 0!==n&&p(t,r,k(n))}return t}return d.throwArgumentError("Cannot deepCopy "+typeof e,"object",e)}function k(e){return w(e)}const E="providers/5.6.8";var x=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function a(e){try{l(n.next(e))}catch(e){o(e)}}function s(e){try{l(n.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}l((n=n.apply(e,t||[])).next())}))};const _=new h("abstract-signer/5.6.2"),S=["accessList","ccipReadEnabled","chainId","customData","data","from","gasLimit","gasPrice","maxFeePerGas","maxPriorityFeePerGas","nonce","to","type","value"],P=[h.errors.INSUFFICIENT_FUNDS,h.errors.NONCE_EXPIRED,h.errors.REPLACEMENT_UNDERPRICED];class N{constructor(){_.checkAbstract(new.target,N),p(this,"_isSigner",!0)}getBalance(e){return x(this,void 0,void 0,(function*(){return this._checkProvider("getBalance"),yield this.provider.getBalance(this.getAddress(),e)}))}getTransactionCount(e){return x(this,void 0,void 0,(function*(){return this._checkProvider("getTransactionCount"),yield this.provider.getTransactionCount(this.getAddress(),e)}))}estimateGas(e){return x(this,void 0,void 0,(function*(){this._checkProvider("estimateGas");const t=yield g(this.checkTransaction(e));return yield this.provider.estimateGas(t)}))}call(e,t){return x(this,void 0,void 0,(function*(){this._checkProvider("call");const r=yield g(this.checkTransaction(e));return yield this.provider.call(r,t)}))}sendTransaction(e){return x(this,void 0,void 0,(function*(){this._checkProvider("sendTransaction");const t=yield this.populateTransaction(e),r=yield this.signTransaction(t);return yield this.provider.sendTransaction(r)}))}getChainId(){return x(this,void 0,void 0,(function*(){return this._checkProvider("getChainId"),(yield this.provider.getNetwork()).chainId}))}getGasPrice(){return x(this,void 0,void 0,(function*(){return this._checkProvider("getGasPrice"),yield this.provider.getGasPrice()}))}getFeeData(){return x(this,void 0,void 0,(function*(){return this._checkProvider("getFeeData"),yield this.provider.getFeeData()}))}resolveName(e){return x(this,void 0,void 0,(function*(){return this._checkProvider("resolveName"),yield this.provider.resolveName(e)}))}checkTransaction(e){for(const t in e)-1===S.indexOf(t)&&_.throwArgumentError("invalid transaction key: "+t,"transaction",e);const t=v(e);return null==t.from?t.from=this.getAddress():t.from=Promise.all([Promise.resolve(t.from),this.getAddress()]).then((t=>(t[0].toLowerCase()!==t[1].toLowerCase()&&_.throwArgumentError("from address mismatch","transaction",e),t[0]))),t}populateTransaction(e){return x(this,void 0,void 0,(function*(){const t=yield g(this.checkTransaction(e));null!=t.to&&(t.to=Promise.resolve(t.to).then((e=>x(this,void 0,void 0,(function*(){if(null==e)return null;const t=yield this.resolveName(e);return null==t&&_.throwArgumentError("provided ENS name resolves to null","tx.to",e),t})))),t.to.catch((e=>{})));const r=null!=t.maxFeePerGas||null!=t.maxPriorityFeePerGas;if(null==t.gasPrice||2!==t.type&&!r?0!==t.type&&1!==t.type||!r||_.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas","transaction",e):_.throwArgumentError("eip-1559 transaction do not support gasPrice","transaction",e),2!==t.type&&null!=t.type||null==t.maxFeePerGas||null==t.maxPriorityFeePerGas)if(0===t.type||1===t.type)null==t.gasPrice&&(t.gasPrice=this.getGasPrice());else{const e=yield this.getFeeData();if(null==t.type)if(null!=e.maxFeePerGas&&null!=e.maxPriorityFeePerGas)if(t.type=2,null!=t.gasPrice){const e=t.gasPrice;delete t.gasPrice,t.maxFeePerGas=e,t.maxPriorityFeePerGas=e}else null==t.maxFeePerGas&&(t.maxFeePerGas=e.maxFeePerGas),null==t.maxPriorityFeePerGas&&(t.maxPriorityFeePerGas=e.maxPriorityFeePerGas);else null!=e.gasPrice?(r&&_.throwError("network does not support EIP-1559",h.errors.UNSUPPORTED_OPERATION,{operation:"populateTransaction"}),null==t.gasPrice&&(t.gasPrice=e.gasPrice),t.type=0):_.throwError("failed to get consistent fee data",h.errors.UNSUPPORTED_OPERATION,{operation:"signer.getFeeData"});else 2===t.type&&(null==t.maxFeePerGas&&(t.maxFeePerGas=e.maxFeePerGas),null==t.maxPriorityFeePerGas&&(t.maxPriorityFeePerGas=e.maxPriorityFeePerGas))}else t.type=2;return null==t.nonce&&(t.nonce=this.getTransactionCount("pending")),null==t.gasLimit&&(t.gasLimit=this.estimateGas(t).catch((e=>{if(P.indexOf(e.code)>=0)throw e;return _.throwError("cannot estimate gas; transaction may fail or may require manual gas limit",h.errors.UNPREDICTABLE_GAS_LIMIT,{error:e,tx:t})}))),null==t.chainId?t.chainId=this.getChainId():t.chainId=Promise.all([Promise.resolve(t.chainId),this.getChainId()]).then((t=>(0!==t[1]&&t[0]!==t[1]&&_.throwArgumentError("chainId address mismatch","transaction",e),t[0]))),yield g(t)}))}_checkProvider(e){this.provider||_.throwError("missing provider",h.errors.UNSUPPORTED_OPERATION,{operation:e||"_checkProvider"})}static isSigner(e){return!(!e||!e._isSigner)}}var M=r(550),C=r.n(M);const A=new h("bytes/5.6.1");function F(e){return!!e.toHexString}function R(e){return e.slice||(e.slice=function(){const t=Array.prototype.slice.call(arguments);return R(new Uint8Array(Array.prototype.slice.apply(e,t)))}),e}function I(e){return D(e)&&!(e.length%2)||O(e)}function T(e){return"number"==typeof e&&e==e&&e%1==0}function O(e){if(null==e)return!1;if(e.constructor===Uint8Array)return!0;if("string"==typeof e)return!1;if(!T(e.length)||e.length<0)return!1;for(let t=0;t<e.length;t++){const r=e[t];if(!T(r)||r<0||r>=256)return!1}return!0}function L(e,t){if(t||(t={}),"number"==typeof e){A.checkSafeUint53(e,"invalid arrayify value");const t=[];for(;e;)t.unshift(255&e),e=parseInt(String(e/256));return 0===t.length&&t.push(0),R(new Uint8Array(t))}if(t.allowMissingPrefix&&"string"==typeof e&&"0x"!==e.substring(0,2)&&(e="0x"+e),F(e)&&(e=e.toHexString()),D(e)){let r=e.substring(2);r.length%2&&("left"===t.hexPad?r="0"+r:"right"===t.hexPad?r+="0":A.throwArgumentError("hex data is odd-length","value",e));const n=[];for(let e=0;e<r.length;e+=2)n.push(parseInt(r.substring(e,e+2),16));return R(new Uint8Array(n))}return O(e)?R(new Uint8Array(e)):A.throwArgumentError("invalid arrayify value","value",e)}function B(e){const t=e.map((e=>L(e))),r=t.reduce(((e,t)=>e+t.length),0),n=new Uint8Array(r);return t.reduce(((e,t)=>(n.set(t,e),e+t.length)),0),R(n)}function z(e){let t=L(e);if(0===t.length)return t;let r=0;for(;r<t.length&&0===t[r];)r++;return r&&(t=t.slice(r)),t}function D(e,t){return!("string"!=typeof e||!e.match(/^0x[0-9A-Fa-f]*$/)||t&&e.length!==2+2*t)}const U="0123456789abcdef";function j(e,t){if(t||(t={}),"number"==typeof e){A.checkSafeUint53(e,"invalid hexlify value");let t="";for(;e;)t=U[15&e]+t,e=Math.floor(e/16);return t.length?(t.length%2&&(t="0"+t),"0x"+t):"0x00"}if("bigint"==typeof e)return(e=e.toString(16)).length%2?"0x0"+e:"0x"+e;if(t.allowMissingPrefix&&"string"==typeof e&&"0x"!==e.substring(0,2)&&(e="0x"+e),F(e))return e.toHexString();if(D(e))return e.length%2&&("left"===t.hexPad?e="0x0"+e.substring(2):"right"===t.hexPad?e+="0":A.throwArgumentError("hex data is odd-length","value",e)),e.toLowerCase();if(O(e)){let t="0x";for(let r=0;r<e.length;r++){let n=e[r];t+=U[(240&n)>>4]+U[15&n]}return t}return A.throwArgumentError("invalid hexlify value","value",e)}function V(e){if("string"!=typeof e)e=j(e);else if(!D(e)||e.length%2)return null;return(e.length-2)/2}function q(e,t,r){return"string"!=typeof e?e=j(e):(!D(e)||e.length%2)&&A.throwArgumentError("invalid hexData","value",e),t=2+2*t,null!=r?"0x"+e.substring(t,2+2*r):"0x"+e.substring(t)}function $(e){let t="0x";return e.forEach((e=>{t+=j(e).substring(2)})),t}function H(e){const t=function(e){"string"!=typeof e&&(e=j(e)),D(e)||A.throwArgumentError("invalid hex string","value",e),e=e.substring(2);let t=0;for(;t<e.length&&"0"===e[t];)t++;return"0x"+e.substring(t)}(j(e,{hexPad:"left"}));return"0x"===t?"0x0":t}function W(e,t){for("string"!=typeof e?e=j(e):D(e)||A.throwArgumentError("invalid hex string","value",e),e.length>2*t+2&&A.throwArgumentError("value out of range","value",arguments[1]);e.length<2*t+2;)e="0x0"+e.substring(2);return e}function G(e){const t={r:"0x",s:"0x",_vs:"0x",recoveryParam:0,v:0,yParityAndS:"0x",compact:"0x"};if(I(e)){let r=L(e);64===r.length?(t.v=27+(r[32]>>7),r[32]&=127,t.r=j(r.slice(0,32)),t.s=j(r.slice(32,64))):65===r.length?(t.r=j(r.slice(0,32)),t.s=j(r.slice(32,64)),t.v=r[64]):A.throwArgumentError("invalid signature string","signature",e),t.v<27&&(0===t.v||1===t.v?t.v+=27:A.throwArgumentError("signature invalid v byte","signature",e)),t.recoveryParam=1-t.v%2,t.recoveryParam&&(r[32]|=128),t._vs=j(r.slice(32,64))}else{if(t.r=e.r,t.s=e.s,t.v=e.v,t.recoveryParam=e.recoveryParam,t._vs=e._vs,null!=t._vs){const r=function(e,t){(e=L(e)).length>t&&A.throwArgumentError("value out of range","value",arguments[0]);const r=new Uint8Array(t);return r.set(e,t-e.length),R(r)}(L(t._vs),32);t._vs=j(r);const n=r[0]>=128?1:0;null==t.recoveryParam?t.recoveryParam=n:t.recoveryParam!==n&&A.throwArgumentError("signature recoveryParam mismatch _vs","signature",e),r[0]&=127;const i=j(r);null==t.s?t.s=i:t.s!==i&&A.throwArgumentError("signature v mismatch _vs","signature",e)}if(null==t.recoveryParam)null==t.v?A.throwArgumentError("signature missing v and recoveryParam","signature",e):0===t.v||1===t.v?t.recoveryParam=t.v:t.recoveryParam=1-t.v%2;else if(null==t.v)t.v=27+t.recoveryParam;else{const r=0===t.v||1===t.v?t.v:1-t.v%2;t.recoveryParam!==r&&A.throwArgumentError("signature recoveryParam mismatch v","signature",e)}null!=t.r&&D(t.r)?t.r=W(t.r,32):A.throwArgumentError("signature missing or invalid r","signature",e),null!=t.s&&D(t.s)?t.s=W(t.s,32):A.throwArgumentError("signature missing or invalid s","signature",e);const r=L(t.s);r[0]>=128&&A.throwArgumentError("signature s out of range","signature",e),t.recoveryParam&&(r[0]|=128);const n=j(r);t._vs&&(D(t._vs)||A.throwArgumentError("signature invalid _vs","signature",e),t._vs=W(t._vs,32)),null==t._vs?t._vs=n:t._vs!==n&&A.throwArgumentError("signature _vs mismatch v and s","signature",e)}return t.yParityAndS=t._vs,t.compact=t.r+t.yParityAndS.substring(2),t}var K=C().BN;const Q=new h("bignumber/5.6.2"),X={},J=9007199254740991;let Y=!1;class Z{constructor(e,t){e!==X&&Q.throwError("cannot call constructor directly; use BigNumber.from",h.errors.UNSUPPORTED_OPERATION,{operation:"new (BigNumber)"}),this._hex=t,this._isBigNumber=!0,Object.freeze(this)}fromTwos(e){return te(re(this).fromTwos(e))}toTwos(e){return te(re(this).toTwos(e))}abs(){return"-"===this._hex[0]?Z.from(this._hex.substring(1)):this}add(e){return te(re(this).add(re(e)))}sub(e){return te(re(this).sub(re(e)))}div(e){return Z.from(e).isZero()&&ne("division-by-zero","div"),te(re(this).div(re(e)))}mul(e){return te(re(this).mul(re(e)))}mod(e){const t=re(e);return t.isNeg()&&ne("division-by-zero","mod"),te(re(this).umod(t))}pow(e){const t=re(e);return t.isNeg()&&ne("negative-power","pow"),te(re(this).pow(t))}and(e){const t=re(e);return(this.isNegative()||t.isNeg())&&ne("unbound-bitwise-result","and"),te(re(this).and(t))}or(e){const t=re(e);return(this.isNegative()||t.isNeg())&&ne("unbound-bitwise-result","or"),te(re(this).or(t))}xor(e){const t=re(e);return(this.isNegative()||t.isNeg())&&ne("unbound-bitwise-result","xor"),te(re(this).xor(t))}mask(e){return(this.isNegative()||e<0)&&ne("negative-width","mask"),te(re(this).maskn(e))}shl(e){return(this.isNegative()||e<0)&&ne("negative-width","shl"),te(re(this).shln(e))}shr(e){return(this.isNegative()||e<0)&&ne("negative-width","shr"),te(re(this).shrn(e))}eq(e){return re(this).eq(re(e))}lt(e){return re(this).lt(re(e))}lte(e){return re(this).lte(re(e))}gt(e){return re(this).gt(re(e))}gte(e){return re(this).gte(re(e))}isNegative(){return"-"===this._hex[0]}isZero(){return re(this).isZero()}toNumber(){try{return re(this).toNumber()}catch(e){ne("overflow","toNumber",this.toString())}return null}toBigInt(){try{return BigInt(this.toString())}catch(e){}return Q.throwError("this platform does not support BigInt",h.errors.UNSUPPORTED_OPERATION,{value:this.toString()})}toString(){return arguments.length>0&&(10===arguments[0]?Y||(Y=!0,Q.warn("BigNumber.toString does not accept any parameters; base-10 is assumed")):16===arguments[0]?Q.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()",h.errors.UNEXPECTED_ARGUMENT,{}):Q.throwError("BigNumber.toString does not accept parameters",h.errors.UNEXPECTED_ARGUMENT,{})),re(this).toString(10)}toHexString(){return this._hex}toJSON(e){return{type:"BigNumber",hex:this.toHexString()}}static from(e){if(e instanceof Z)return e;if("string"==typeof e)return e.match(/^-?0x[0-9a-f]+$/i)?new Z(X,ee(e)):e.match(/^-?[0-9]+$/)?new Z(X,ee(new K(e))):Q.throwArgumentError("invalid BigNumber string","value",e);if("number"==typeof e)return e%1&&ne("underflow","BigNumber.from",e),(e>=J||e<=-J)&&ne("overflow","BigNumber.from",e),Z.from(String(e));const t=e;if("bigint"==typeof t)return Z.from(t.toString());if(O(t))return Z.from(j(t));if(t)if(t.toHexString){const e=t.toHexString();if("string"==typeof e)return Z.from(e)}else{let e=t._hex;if(null==e&&"BigNumber"===t.type&&(e=t.hex),"string"==typeof e&&(D(e)||"-"===e[0]&&D(e.substring(1))))return Z.from(e)}return Q.throwArgumentError("invalid BigNumber value","value",e)}static isBigNumber(e){return!(!e||!e._isBigNumber)}}function ee(e){if("string"!=typeof e)return ee(e.toString(16));if("-"===e[0])return"-"===(e=e.substring(1))[0]&&Q.throwArgumentError("invalid hex","value",e),"0x00"===(e=ee(e))?e:"-"+e;if("0x"!==e.substring(0,2)&&(e="0x"+e),"0x"===e)return"0x00";for(e.length%2&&(e="0x0"+e.substring(2));e.length>4&&"0x00"===e.substring(0,4);)e="0x"+e.substring(4);return e}function te(e){return Z.from(ee(e))}function re(e){const t=Z.from(e).toHexString();return"-"===t[0]?new K("-"+t.substring(3),16):new K(t.substring(2),16)}function ne(e,t,r){const n={fault:e,operation:t};return null!=r&&(n.value=r),Q.throwError(e,h.errors.NUMERIC_FAULT,n)}var ie=r(94),oe=r.n(ie);function ae(e){return"0x"+oe().keccak_256(L(e))}const se=new h("rlp/5.6.1");function le(e){const t=[];for(;e;)t.unshift(255&e),e>>=8;return t}function ue(e,t,r){let n=0;for(let i=0;i<r;i++)n=256*n+e[t+i];return n}function ce(e){if(Array.isArray(e)){let t=[];if(e.forEach((function(e){t=t.concat(ce(e))})),t.length<=55)return t.unshift(192+t.length),t;const r=le(t.length);return r.unshift(247+r.length),r.concat(t)}I(e)||se.throwArgumentError("RLP object must be BytesLike","object",e);const t=Array.prototype.slice.call(L(e));if(1===t.length&&t[0]<=127)return t;if(t.length<=55)return t.unshift(128+t.length),t;const r=le(t.length);return r.unshift(183+r.length),r.concat(t)}function fe(e){return j(ce(e))}function he(e,t,r,n){const i=[];for(;r<t+1+n;){const o=de(e,r);i.push(o.result),(r+=o.consumed)>t+1+n&&se.throwError("child data too short",h.errors.BUFFER_OVERRUN,{})}return{consumed:1+n,result:i}}function de(e,t){if(0===e.length&&se.throwError("data too short",h.errors.BUFFER_OVERRUN,{}),e[t]>=248){const r=e[t]-247;t+1+r>e.length&&se.throwError("data short segment too short",h.errors.BUFFER_OVERRUN,{});const n=ue(e,t+1,r);return t+1+r+n>e.length&&se.throwError("data long segment too short",h.errors.BUFFER_OVERRUN,{}),he(e,t,t+1+r,r+n)}if(e[t]>=192){const r=e[t]-192;return t+1+r>e.length&&se.throwError("data array too short",h.errors.BUFFER_OVERRUN,{}),he(e,t,t+1,r)}if(e[t]>=184){const r=e[t]-183;t+1+r>e.length&&se.throwError("data array too short",h.errors.BUFFER_OVERRUN,{});const n=ue(e,t+1,r);return t+1+r+n>e.length&&se.throwError("data array too short",h.errors.BUFFER_OVERRUN,{}),{consumed:1+r+n,result:j(e.slice(t+1+r,t+1+r+n))}}if(e[t]>=128){const r=e[t]-128;return t+1+r>e.length&&se.throwError("data too short",h.errors.BUFFER_OVERRUN,{}),{consumed:1+r,result:j(e.slice(t+1,t+1+r))}}return{consumed:1,result:j(e[t])}}function pe(e){const t=L(e),r=de(t,0);return r.consumed!==t.length&&se.throwArgumentError("invalid rlp data","data",e),r.result}const me=new h("address/5.6.1");function ge(e){D(e,20)||me.throwArgumentError("invalid address","address",e);const t=(e=e.toLowerCase()).substring(2).split(""),r=new Uint8Array(40);for(let e=0;e<40;e++)r[e]=t[e].charCodeAt(0);const n=L(ae(r));for(let e=0;e<40;e+=2)n[e>>1]>>4>=8&&(t[e]=t[e].toUpperCase()),(15&n[e>>1])>=8&&(t[e+1]=t[e+1].toUpperCase());return"0x"+t.join("")}const ve={};for(let e=0;e<10;e++)ve[String(e)]=String(e);for(let e=0;e<26;e++)ve[String.fromCharCode(65+e)]=String(10+e);const ye=Math.floor((be=9007199254740991,Math.log10?Math.log10(be):Math.log(be)/Math.LN10));var be;function we(e){let t=null;if("string"!=typeof e&&me.throwArgumentError("invalid address","address",e),e.match(/^(0x)?[0-9a-fA-F]{40}$/))"0x"!==e.substring(0,2)&&(e="0x"+e),t=ge(e),e.match(/([A-F].*[a-f])|([a-f].*[A-F])/)&&t!==e&&me.throwArgumentError("bad address checksum","address",e);else if(e.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)){for(e.substring(2,4)!==function(e){let t=(e=(e=e.toUpperCase()).substring(4)+e.substring(0,2)+"00").split("").map((e=>ve[e])).join("");for(;t.length>=ye;){let e=t.substring(0,ye);t=parseInt(e,10)%97+t.substring(e.length)}let r=String(98-parseInt(t,10)%97);for(;r.length<2;)r="0"+r;return r}(e)&&me.throwArgumentError("bad icap checksum","address",e),r=e.substring(4),t=new K(r,36).toString(16);t.length<40;)t="0"+t;t=ge("0x"+t)}else me.throwArgumentError("invalid address","address",e);var r;return t}const ke="hash/5.6.1",Ee=new h("strings/5.6.1");var xe,_e;function Se(e,t,r,n,i){if(e===_e.BAD_PREFIX||e===_e.UNEXPECTED_CONTINUE){let e=0;for(let n=t+1;n<r.length&&r[n]>>6==2;n++)e++;return e}return e===_e.OVERRUN?r.length-t-1:0}!function(e){e.current="",e.NFC="NFC",e.NFD="NFD",e.NFKC="NFKC",e.NFKD="NFKD"}(xe||(xe={})),function(e){e.UNEXPECTED_CONTINUE="unexpected continuation byte",e.BAD_PREFIX="bad codepoint prefix",e.OVERRUN="string overrun",e.MISSING_CONTINUE="missing continuation byte",e.OUT_OF_RANGE="out of UTF-8 range",e.UTF16_SURROGATE="UTF-16 surrogate",e.OVERLONG="overlong representation"}(_e||(_e={}));const Pe=Object.freeze({error:function(e,t,r,n,i){return Ee.throwArgumentError(`invalid codepoint at offset ${t}; ${e}`,"bytes",r)},ignore:Se,replace:function(e,t,r,n,i){return e===_e.OVERLONG?(n.push(i),0):(n.push(65533),Se(e,t,r))}});function Ne(e,t){null==t&&(t=Pe.error),e=L(e);const r=[];let n=0;for(;n<e.length;){const i=e[n++];if(i>>7==0){r.push(i);continue}let o=null,a=null;if(192==(224&i))o=1,a=127;else if(224==(240&i))o=2,a=2047;else{if(240!=(248&i)){n+=t(128==(192&i)?_e.UNEXPECTED_CONTINUE:_e.BAD_PREFIX,n-1,e,r);continue}o=3,a=65535}if(n-1+o>=e.length){n+=t(_e.OVERRUN,n-1,e,r);continue}let s=i&(1<<8-o-1)-1;for(let i=0;i<o;i++){let i=e[n];if(128!=(192&i)){n+=t(_e.MISSING_CONTINUE,n,e,r),s=null;break}s=s<<6|63&i,n++}null!==s&&(s>1114111?n+=t(_e.OUT_OF_RANGE,n-1-o,e,r,s):s>=55296&&s<=57343?n+=t(_e.UTF16_SURROGATE,n-1-o,e,r,s):s<=a?n+=t(_e.OVERLONG,n-1-o,e,r,s):r.push(s))}return r}function Me(e,t=xe.current){t!=xe.current&&(Ee.checkNormalize(),e=e.normalize(t));let r=[];for(let t=0;t<e.length;t++){const n=e.charCodeAt(t);if(n<128)r.push(n);else if(n<2048)r.push(n>>6|192),r.push(63&n|128);else if(55296==(64512&n)){t++;const i=e.charCodeAt(t);if(t>=e.length||56320!=(64512&i))throw new Error("invalid utf-8 string");const o=65536+((1023&n)<<10)+(1023&i);r.push(o>>18|240),r.push(o>>12&63|128),r.push(o>>6&63|128),r.push(63&o|128)}else r.push(n>>12|224),r.push(n>>6&63|128),r.push(63&n|128)}return L(r)}function Ce(e){return e.map((e=>e<=65535?String.fromCharCode(e):(e-=65536,String.fromCharCode(55296+(e>>10&1023),56320+(1023&e))))).join("")}function Ae(e,t){return Ce(Ne(e,t))}function Fe(e,t=xe.current){return Ne(Me(e,t))}function Re(e){return ae(Me(e))}const Ie=new h(ke),Te=new Uint8Array(32);Te.fill(0);const Oe=Z.from(-1),Le=Z.from(0),Be=Z.from(1),ze=Z.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),De=W(Be.toHexString(),32),Ue=W(Le.toHexString(),32),je={name:"string",version:"string",chainId:"uint256",verifyingContract:"address",salt:"bytes32"},Ve=["name","version","chainId","verifyingContract","salt"];function qe(e){return function(t){return"string"!=typeof t&&Ie.throwArgumentError(`invalid domain value for ${JSON.stringify(e)}`,`domain.${e}`,t),t}}const $e={name:qe("name"),version:qe("version"),chainId:function(e){try{return Z.from(e).toString()}catch(e){}return Ie.throwArgumentError('invalid domain value for "chainId"',"domain.chainId",e)},verifyingContract:function(e){try{return we(e).toLowerCase()}catch(e){}return Ie.throwArgumentError('invalid domain value "verifyingContract"',"domain.verifyingContract",e)},salt:function(e){try{const t=L(e);if(32!==t.length)throw new Error("bad length");return j(t)}catch(e){}return Ie.throwArgumentError('invalid domain value "salt"',"domain.salt",e)}};function He(e){{const t=e.match(/^(u?)int(\d*)$/);if(t){const r=""===t[1],n=parseInt(t[2]||"256");(n%8!=0||n>256||t[2]&&t[2]!==String(n))&&Ie.throwArgumentError("invalid numeric width","type",e);const i=ze.mask(r?n-1:n),o=r?i.add(Be).mul(Oe):Le;return function(t){const r=Z.from(t);return(r.lt(o)||r.gt(i))&&Ie.throwArgumentError(`value out-of-bounds for ${e}`,"value",t),W(r.toTwos(256).toHexString(),32)}}}{const t=e.match(/^bytes(\d+)$/);if(t){const r=parseInt(t[1]);return(0===r||r>32||t[1]!==String(r))&&Ie.throwArgumentError("invalid bytes width","type",e),function(t){return L(t).length!==r&&Ie.throwArgumentError(`invalid length for ${e}`,"value",t),function(e){const t=L(e),r=t.length%32;return r?$([t,Te.slice(r)]):j(t)}(t)}}}switch(e){case"address":return function(e){return W(we(e),32)};case"bool":return function(e){return e?De:Ue};case"bytes":return function(e){return ae(e)};case"string":return function(e){return Re(e)}}return null}function We(e,t){return`${e}(${t.map((({name:e,type:t})=>t+" "+e)).join(",")})`}class Ge{constructor(e){p(this,"types",Object.freeze(k(e))),p(this,"_encoderCache",{}),p(this,"_types",{});const t={},r={},n={};Object.keys(e).forEach((e=>{t[e]={},r[e]=[],n[e]={}}));for(const n in e){const i={};e[n].forEach((o=>{i[o.name]&&Ie.throwArgumentError(`duplicate variable name ${JSON.stringify(o.name)} in ${JSON.stringify(n)}`,"types",e),i[o.name]=!0;const a=o.type.match(/^([^\x5b]*)(\x5b|$)/)[1];a===n&&Ie.throwArgumentError(`circular type reference to ${JSON.stringify(a)}`,"types",e),He(a)||(r[a]||Ie.throwArgumentError(`unknown type ${JSON.stringify(a)}`,"types",e),r[a].push(n),t[n][a]=!0)}))}const i=Object.keys(r).filter((e=>0===r[e].length));0===i.length?Ie.throwArgumentError("missing primary type","types",e):i.length>1&&Ie.throwArgumentError(`ambiguous primary types or unused types: ${i.map((e=>JSON.stringify(e))).join(", ")}`,"types",e),p(this,"primaryType",i[0]),function i(o,a){a[o]&&Ie.throwArgumentError(`circular type reference to ${JSON.stringify(o)}`,"types",e),a[o]=!0,Object.keys(t[o]).forEach((e=>{r[e]&&(i(e,a),Object.keys(a).forEach((t=>{n[t][e]=!0})))})),delete a[o]}(this.primaryType,{});for(const t in n){const r=Object.keys(n[t]);r.sort(),this._types[t]=We(t,e[t])+r.map((t=>We(t,e[t]))).join("")}}getEncoder(e){let t=this._encoderCache[e];return t||(t=this._encoderCache[e]=this._getEncoder(e)),t}_getEncoder(e){{const t=He(e);if(t)return t}const t=e.match(/^(.*)(\x5b(\d*)\x5d)$/);if(t){const e=t[1],r=this.getEncoder(e),n=parseInt(t[3]);return t=>{n>=0&&t.length!==n&&Ie.throwArgumentError("array length mismatch; expected length ${ arrayLength }","value",t);let i=t.map(r);return this._types[e]&&(i=i.map(ae)),ae($(i))}}const r=this.types[e];if(r){const t=Re(this._types[e]);return e=>{const n=r.map((({name:t,type:r})=>{const n=this.getEncoder(r)(e[t]);return this._types[r]?ae(n):n}));return n.unshift(t),$(n)}}return Ie.throwArgumentError(`unknown type: ${e}`,"type",e)}encodeType(e){const t=this._types[e];return t||Ie.throwArgumentError(`unknown type: ${JSON.stringify(e)}`,"name",e),t}encodeData(e,t){return this.getEncoder(e)(t)}hashStruct(e,t){return ae(this.encodeData(e,t))}encode(e){return this.encodeData(this.primaryType,e)}hash(e){return this.hashStruct(this.primaryType,e)}_visit(e,t,r){if(He(e))return r(e,t);const n=e.match(/^(.*)(\x5b(\d*)\x5d)$/);if(n){const e=n[1],i=parseInt(n[3]);return i>=0&&t.length!==i&&Ie.throwArgumentError("array length mismatch; expected length ${ arrayLength }","value",t),t.map((t=>this._visit(e,t,r)))}const i=this.types[e];return i?i.reduce(((e,{name:n,type:i})=>(e[n]=this._visit(i,t[n],r),e)),{}):Ie.throwArgumentError(`unknown type: ${e}`,"type",e)}visit(e,t){return this._visit(this.primaryType,e,t)}static from(e){return new Ge(e)}static getPrimaryType(e){return Ge.from(e).primaryType}static hashStruct(e,t,r){return Ge.from(t).hashStruct(e,r)}static hashDomain(e){const t=[];for(const r in e){const n=je[r];n||Ie.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(r)}`,"domain",e),t.push({name:r,type:n})}return t.sort(((e,t)=>Ve.indexOf(e.name)-Ve.indexOf(t.name))),Ge.hashStruct("EIP712Domain",{EIP712Domain:t},e)}static encode(e,t,r){return $(["0x1901",Ge.hashDomain(e),Ge.from(t).hash(r)])}static hash(e,t,r){return ae(Ge.encode(e,t,r))}static resolveNames(e,t,r,n){return i=this,o=void 0,s=function*(){e=v(e);const i={};e.verifyingContract&&!D(e.verifyingContract,20)&&(i[e.verifyingContract]="0x");const o=Ge.from(t);o.visit(r,((e,t)=>("address"!==e||D(t,20)||(i[t]="0x"),t)));for(const e in i)i[e]=yield n(e);return e.verifyingContract&&i[e.verifyingContract]&&(e.verifyingContract=i[e.verifyingContract]),r=o.visit(r,((e,t)=>"address"===e&&i[t]?i[t]:t)),{domain:e,value:r}},new((a=void 0)||(a=Promise))((function(e,t){function r(e){try{l(s.next(e))}catch(e){t(e)}}function n(e){try{l(s.throw(e))}catch(e){t(e)}}function l(t){var i;t.done?e(t.value):(i=t.value,i instanceof a?i:new a((function(e){e(i)}))).then(r,n)}l((s=s.apply(i,o||[])).next())}));var i,o,a,s}static getPayload(e,t,r){Ge.hashDomain(e);const n={},i=[];Ve.forEach((t=>{const r=e[t];null!=r&&(n[t]=$e[t](r),i.push({name:t,type:je[t]}))}));const o=Ge.from(t),a=v(t);return a.EIP712Domain?Ie.throwArgumentError("types must not contain EIP712Domain type","types.EIP712Domain",t):a.EIP712Domain=i,o.encode(r),{types:a,domain:n,primaryType:o.primaryType,message:o.visit(r,((e,t)=>{if(e.match(/^bytes(\d*)/))return j(L(t));if(e.match(/^u?int/))return Z.from(t).toString();switch(e){case"address":return t.toLowerCase();case"bool":return!!t;case"string":return"string"!=typeof t&&Ie.throwArgumentError("invalid string","value",t),t}return Ie.throwArgumentError("unsupported type","type",e)}))}}}const Ke=Z.from(0);var Qe=r(715),Xe=r.n(Qe);function Je(e,t,r){return r={path:t,exports:{},require:function(e,t){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==t&&r.path)}},e(r,r.exports),r.exports}"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==r.g?r.g:"undefined"!=typeof self&&self;var Ye=Ze;function Ze(e,t){if(!e)throw new Error(t||"Assertion failed")}Ze.equal=function(e,t,r){if(e!=t)throw new Error(r||"Assertion failed: "+e+" != "+t)};var et=Je((function(e,t){var r=t;function n(e){return 1===e.length?"0"+e:e}function i(e){for(var t="",r=0;r<e.length;r++)t+=n(e[r].toString(16));return t}r.toArray=function(e,t){if(Array.isArray(e))return e.slice();if(!e)return[];var r=[];if("string"!=typeof e){for(var n=0;n<e.length;n++)r[n]=0|e[n];return r}if("hex"===t)for((e=e.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(e="0"+e),n=0;n<e.length;n+=2)r.push(parseInt(e[n]+e[n+1],16));else for(n=0;n<e.length;n++){var i=e.charCodeAt(n),o=i>>8,a=255&i;o?r.push(o,a):r.push(a)}return r},r.zero2=n,r.toHex=i,r.encode=function(e,t){return"hex"===t?i(e):e}})),tt=Je((function(e,t){var r=t;r.assert=Ye,r.toArray=et.toArray,r.zero2=et.zero2,r.toHex=et.toHex,r.encode=et.encode,r.getNAF=function(e,t,r){var n=new Array(Math.max(e.bitLength(),r)+1);n.fill(0);for(var i=1<<t+1,o=e.clone(),a=0;a<n.length;a++){var s,l=o.andln(i-1);o.isOdd()?(s=l>(i>>1)-1?(i>>1)-l:l,o.isubn(s)):s=0,n[a]=s,o.iushrn(1)}return n},r.getJSF=function(e,t){var r=[[],[]];e=e.clone(),t=t.clone();for(var n,i=0,o=0;e.cmpn(-i)>0||t.cmpn(-o)>0;){var a,s,l=e.andln(3)+i&3,u=t.andln(3)+o&3;3===l&&(l=-1),3===u&&(u=-1),a=0==(1&l)?0:3!=(n=e.andln(7)+i&7)&&5!==n||2!==u?l:-l,r[0].push(a),s=0==(1&u)?0:3!=(n=t.andln(7)+o&7)&&5!==n||2!==l?u:-u,r[1].push(s),2*i===a+1&&(i=1-i),2*o===s+1&&(o=1-o),e.iushrn(1),t.iushrn(1)}return r},r.cachedProperty=function(e,t,r){var n="_"+t;e.prototype[t]=function(){return void 0!==this[n]?this[n]:this[n]=r.call(this)}},r.parseBytes=function(e){return"string"==typeof e?r.toArray(e,"hex"):e},r.intFromLE=function(e){return new(C())(e,"hex","le")}})),rt=tt.getNAF,nt=tt.getJSF,it=tt.assert;function ot(e,t){this.type=e,this.p=new(C())(t.p,16),this.red=t.prime?C().red(t.prime):C().mont(this.p),this.zero=new(C())(0).toRed(this.red),this.one=new(C())(1).toRed(this.red),this.two=new(C())(2).toRed(this.red),this.n=t.n&&new(C())(t.n,16),this.g=t.g&&this.pointFromJSON(t.g,t.gRed),this._wnafT1=new Array(4),this._wnafT2=new Array(4),this._wnafT3=new Array(4),this._wnafT4=new Array(4),this._bitLength=this.n?this.n.bitLength():0;var r=this.n&&this.p.div(this.n);!r||r.cmpn(100)>0?this.redN=null:(this._maxwellTrick=!0,this.redN=this.n.toRed(this.red))}var at=ot;function st(e,t){this.curve=e,this.type=t,this.precomputed=null}ot.prototype.point=function(){throw new Error("Not implemented")},ot.prototype.validate=function(){throw new Error("Not implemented")},ot.prototype._fixedNafMul=function(e,t){it(e.precomputed);var r=e._getDoubles(),n=rt(t,1,this._bitLength),i=(1<<r.step+1)-(r.step%2==0?2:1);i/=3;var o,a,s=[];for(o=0;o<n.length;o+=r.step){a=0;for(var l=o+r.step-1;l>=o;l--)a=(a<<1)+n[l];s.push(a)}for(var u=this.jpoint(null,null,null),c=this.jpoint(null,null,null),f=i;f>0;f--){for(o=0;o<s.length;o++)(a=s[o])===f?c=c.mixedAdd(r.points[o]):a===-f&&(c=c.mixedAdd(r.points[o].neg()));u=u.add(c)}return u.toP()},ot.prototype._wnafMul=function(e,t){var r=4,n=e._getNAFPoints(r);r=n.wnd;for(var i=n.points,o=rt(t,r,this._bitLength),a=this.jpoint(null,null,null),s=o.length-1;s>=0;s--){for(var l=0;s>=0&&0===o[s];s--)l++;if(s>=0&&l++,a=a.dblp(l),s<0)break;var u=o[s];it(0!==u),a="affine"===e.type?u>0?a.mixedAdd(i[u-1>>1]):a.mixedAdd(i[-u-1>>1].neg()):u>0?a.add(i[u-1>>1]):a.add(i[-u-1>>1].neg())}return"affine"===e.type?a.toP():a},ot.prototype._wnafMulAdd=function(e,t,r,n,i){var o,a,s,l=this._wnafT1,u=this._wnafT2,c=this._wnafT3,f=0;for(o=0;o<n;o++){var h=(s=t[o])._getNAFPoints(e);l[o]=h.wnd,u[o]=h.points}for(o=n-1;o>=1;o-=2){var d=o-1,p=o;if(1===l[d]&&1===l[p]){var m=[t[d],null,null,t[p]];0===t[d].y.cmp(t[p].y)?(m[1]=t[d].add(t[p]),m[2]=t[d].toJ().mixedAdd(t[p].neg())):0===t[d].y.cmp(t[p].y.redNeg())?(m[1]=t[d].toJ().mixedAdd(t[p]),m[2]=t[d].add(t[p].neg())):(m[1]=t[d].toJ().mixedAdd(t[p]),m[2]=t[d].toJ().mixedAdd(t[p].neg()));var g=[-3,-1,-5,-7,0,7,5,1,3],v=nt(r[d],r[p]);for(f=Math.max(v[0].length,f),c[d]=new Array(f),c[p]=new Array(f),a=0;a<f;a++){var y=0|v[0][a],b=0|v[1][a];c[d][a]=g[3*(y+1)+(b+1)],c[p][a]=0,u[d]=m}}else c[d]=rt(r[d],l[d],this._bitLength),c[p]=rt(r[p],l[p],this._bitLength),f=Math.max(c[d].length,f),f=Math.max(c[p].length,f)}var w=this.jpoint(null,null,null),k=this._wnafT4;for(o=f;o>=0;o--){for(var E=0;o>=0;){var x=!0;for(a=0;a<n;a++)k[a]=0|c[a][o],0!==k[a]&&(x=!1);if(!x)break;E++,o--}if(o>=0&&E++,w=w.dblp(E),o<0)break;for(a=0;a<n;a++){var _=k[a];0!==_&&(_>0?s=u[a][_-1>>1]:_<0&&(s=u[a][-_-1>>1].neg()),w="affine"===s.type?w.mixedAdd(s):w.add(s))}}for(o=0;o<n;o++)u[o]=null;return i?w:w.toP()},ot.BasePoint=st,st.prototype.eq=function(){throw new Error("Not implemented")},st.prototype.validate=function(){return this.curve.validate(this)},ot.prototype.decodePoint=function(e,t){e=tt.toArray(e,t);var r=this.p.byteLength();if((4===e[0]||6===e[0]||7===e[0])&&e.length-1==2*r)return 6===e[0]?it(e[e.length-1]%2==0):7===e[0]&&it(e[e.length-1]%2==1),this.point(e.slice(1,1+r),e.slice(1+r,1+2*r));if((2===e[0]||3===e[0])&&e.length-1===r)return this.pointFromX(e.slice(1,1+r),3===e[0]);throw new Error("Unknown point format")},st.prototype.encodeCompressed=function(e){return this.encode(e,!0)},st.prototype._encode=function(e){var t=this.curve.p.byteLength(),r=this.getX().toArray("be",t);return e?[this.getY().isEven()?2:3].concat(r):[4].concat(r,this.getY().toArray("be",t))},st.prototype.encode=function(e,t){return tt.encode(this._encode(t),e)},st.prototype.precompute=function(e){if(this.precomputed)return this;var t={doubles:null,naf:null,beta:null};return t.naf=this._getNAFPoints(8),t.doubles=this._getDoubles(4,e),t.beta=this._getBeta(),this.precomputed=t,this},st.prototype._hasDoubles=function(e){if(!this.precomputed)return!1;var t=this.precomputed.doubles;return!!t&&t.points.length>=Math.ceil((e.bitLength()+1)/t.step)},st.prototype._getDoubles=function(e,t){if(this.precomputed&&this.precomputed.doubles)return this.precomputed.doubles;for(var r=[this],n=this,i=0;i<t;i+=e){for(var o=0;o<e;o++)n=n.dbl();r.push(n)}return{step:e,points:r}},st.prototype._getNAFPoints=function(e){if(this.precomputed&&this.precomputed.naf)return this.precomputed.naf;for(var t=[this],r=(1<<e)-1,n=1===r?null:this.dbl(),i=1;i<r;i++)t[i]=t[i-1].add(n);return{wnd:e,points:t}},st.prototype._getBeta=function(){return null},st.prototype.dblp=function(e){for(var t=this,r=0;r<e;r++)t=t.dbl();return t};var lt=Je((function(e){"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}}})),ut=tt.assert;function ct(e){at.call(this,"short",e),this.a=new(C())(e.a,16).toRed(this.red),this.b=new(C())(e.b,16).toRed(this.red),this.tinv=this.two.redInvm(),this.zeroA=0===this.a.fromRed().cmpn(0),this.threeA=0===this.a.fromRed().sub(this.p).cmpn(-3),this.endo=this._getEndomorphism(e),this._endoWnafT1=new Array(4),this._endoWnafT2=new Array(4)}lt(ct,at);var ft=ct;function ht(e,t,r,n){at.BasePoint.call(this,e,"affine"),null===t&&null===r?(this.x=null,this.y=null,this.inf=!0):(this.x=new(C())(t,16),this.y=new(C())(r,16),n&&(this.x.forceRed(this.curve.red),this.y.forceRed(this.curve.red)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.inf=!1)}function dt(e,t,r,n){at.BasePoint.call(this,e,"jacobian"),null===t&&null===r&&null===n?(this.x=this.curve.one,this.y=this.curve.one,this.z=new(C())(0)):(this.x=new(C())(t,16),this.y=new(C())(r,16),this.z=new(C())(n,16)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.zOne=this.z===this.curve.one}ct.prototype._getEndomorphism=function(e){if(this.zeroA&&this.g&&this.n&&1===this.p.modn(3)){var t,r;if(e.beta)t=new(C())(e.beta,16).toRed(this.red);else{var n=this._getEndoRoots(this.p);t=(t=n[0].cmp(n[1])<0?n[0]:n[1]).toRed(this.red)}if(e.lambda)r=new(C())(e.lambda,16);else{var i=this._getEndoRoots(this.n);0===this.g.mul(i[0]).x.cmp(this.g.x.redMul(t))?r=i[0]:(r=i[1],ut(0===this.g.mul(r).x.cmp(this.g.x.redMul(t))))}return{beta:t,lambda:r,basis:e.basis?e.basis.map((function(e){return{a:new(C())(e.a,16),b:new(C())(e.b,16)}})):this._getEndoBasis(r)}}},ct.prototype._getEndoRoots=function(e){var t=e===this.p?this.red:C().mont(e),r=new(C())(2).toRed(t).redInvm(),n=r.redNeg(),i=new(C())(3).toRed(t).redNeg().redSqrt().redMul(r);return[n.redAdd(i).fromRed(),n.redSub(i).fromRed()]},ct.prototype._getEndoBasis=function(e){for(var t,r,n,i,o,a,s,l,u,c=this.n.ushrn(Math.floor(this.n.bitLength()/2)),f=e,h=this.n.clone(),d=new(C())(1),p=new(C())(0),m=new(C())(0),g=new(C())(1),v=0;0!==f.cmpn(0);){var y=h.div(f);l=h.sub(y.mul(f)),u=m.sub(y.mul(d));var b=g.sub(y.mul(p));if(!n&&l.cmp(c)<0)t=s.neg(),r=d,n=l.neg(),i=u;else if(n&&2==++v)break;s=l,h=f,f=l,m=d,d=u,g=p,p=b}o=l.neg(),a=u;var w=n.sqr().add(i.sqr());return o.sqr().add(a.sqr()).cmp(w)>=0&&(o=t,a=r),n.negative&&(n=n.neg(),i=i.neg()),o.negative&&(o=o.neg(),a=a.neg()),[{a:n,b:i},{a:o,b:a}]},ct.prototype._endoSplit=function(e){var t=this.endo.basis,r=t[0],n=t[1],i=n.b.mul(e).divRound(this.n),o=r.b.neg().mul(e).divRound(this.n),a=i.mul(r.a),s=o.mul(n.a),l=i.mul(r.b),u=o.mul(n.b);return{k1:e.sub(a).sub(s),k2:l.add(u).neg()}},ct.prototype.pointFromX=function(e,t){(e=new(C())(e,16)).red||(e=e.toRed(this.red));var r=e.redSqr().redMul(e).redIAdd(e.redMul(this.a)).redIAdd(this.b),n=r.redSqrt();if(0!==n.redSqr().redSub(r).cmp(this.zero))throw new Error("invalid point");var i=n.fromRed().isOdd();return(t&&!i||!t&&i)&&(n=n.redNeg()),this.point(e,n)},ct.prototype.validate=function(e){if(e.inf)return!0;var t=e.x,r=e.y,n=this.a.redMul(t),i=t.redSqr().redMul(t).redIAdd(n).redIAdd(this.b);return 0===r.redSqr().redISub(i).cmpn(0)},ct.prototype._endoWnafMulAdd=function(e,t,r){for(var n=this._endoWnafT1,i=this._endoWnafT2,o=0;o<e.length;o++){var a=this._endoSplit(t[o]),s=e[o],l=s._getBeta();a.k1.negative&&(a.k1.ineg(),s=s.neg(!0)),a.k2.negative&&(a.k2.ineg(),l=l.neg(!0)),n[2*o]=s,n[2*o+1]=l,i[2*o]=a.k1,i[2*o+1]=a.k2}for(var u=this._wnafMulAdd(1,n,i,2*o,r),c=0;c<2*o;c++)n[c]=null,i[c]=null;return u},lt(ht,at.BasePoint),ct.prototype.point=function(e,t,r){return new ht(this,e,t,r)},ct.prototype.pointFromJSON=function(e,t){return ht.fromJSON(this,e,t)},ht.prototype._getBeta=function(){if(this.curve.endo){var e=this.precomputed;if(e&&e.beta)return e.beta;var t=this.curve.point(this.x.redMul(this.curve.endo.beta),this.y);if(e){var r=this.curve,n=function(e){return r.point(e.x.redMul(r.endo.beta),e.y)};e.beta=t,t.precomputed={beta:null,naf:e.naf&&{wnd:e.naf.wnd,points:e.naf.points.map(n)},doubles:e.doubles&&{step:e.doubles.step,points:e.doubles.points.map(n)}}}return t}},ht.prototype.toJSON=function(){return this.precomputed?[this.x,this.y,this.precomputed&&{doubles:this.precomputed.doubles&&{step:this.precomputed.doubles.step,points:this.precomputed.doubles.points.slice(1)},naf:this.precomputed.naf&&{wnd:this.precomputed.naf.wnd,points:this.precomputed.naf.points.slice(1)}}]:[this.x,this.y]},ht.fromJSON=function(e,t,r){"string"==typeof t&&(t=JSON.parse(t));var n=e.point(t[0],t[1],r);if(!t[2])return n;function i(t){return e.point(t[0],t[1],r)}var o=t[2];return n.precomputed={beta:null,doubles:o.doubles&&{step:o.doubles.step,points:[n].concat(o.doubles.points.map(i))},naf:o.naf&&{wnd:o.naf.wnd,points:[n].concat(o.naf.points.map(i))}},n},ht.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+">"},ht.prototype.isInfinity=function(){return this.inf},ht.prototype.add=function(e){if(this.inf)return e;if(e.inf)return this;if(this.eq(e))return this.dbl();if(this.neg().eq(e))return this.curve.point(null,null);if(0===this.x.cmp(e.x))return this.curve.point(null,null);var t=this.y.redSub(e.y);0!==t.cmpn(0)&&(t=t.redMul(this.x.redSub(e.x).redInvm()));var r=t.redSqr().redISub(this.x).redISub(e.x),n=t.redMul(this.x.redSub(r)).redISub(this.y);return this.curve.point(r,n)},ht.prototype.dbl=function(){if(this.inf)return this;var e=this.y.redAdd(this.y);if(0===e.cmpn(0))return this.curve.point(null,null);var t=this.curve.a,r=this.x.redSqr(),n=e.redInvm(),i=r.redAdd(r).redIAdd(r).redIAdd(t).redMul(n),o=i.redSqr().redISub(this.x.redAdd(this.x)),a=i.redMul(this.x.redSub(o)).redISub(this.y);return this.curve.point(o,a)},ht.prototype.getX=function(){return this.x.fromRed()},ht.prototype.getY=function(){return this.y.fromRed()},ht.prototype.mul=function(e){return e=new(C())(e,16),this.isInfinity()?this:this._hasDoubles(e)?this.curve._fixedNafMul(this,e):this.curve.endo?this.curve._endoWnafMulAdd([this],[e]):this.curve._wnafMul(this,e)},ht.prototype.mulAdd=function(e,t,r){var n=[this,t],i=[e,r];return this.curve.endo?this.curve._endoWnafMulAdd(n,i):this.curve._wnafMulAdd(1,n,i,2)},ht.prototype.jmulAdd=function(e,t,r){var n=[this,t],i=[e,r];return this.curve.endo?this.curve._endoWnafMulAdd(n,i,!0):this.curve._wnafMulAdd(1,n,i,2,!0)},ht.prototype.eq=function(e){return this===e||this.inf===e.inf&&(this.inf||0===this.x.cmp(e.x)&&0===this.y.cmp(e.y))},ht.prototype.neg=function(e){if(this.inf)return this;var t=this.curve.point(this.x,this.y.redNeg());if(e&&this.precomputed){var r=this.precomputed,n=function(e){return e.neg()};t.precomputed={naf:r.naf&&{wnd:r.naf.wnd,points:r.naf.points.map(n)},doubles:r.doubles&&{step:r.doubles.step,points:r.doubles.points.map(n)}}}return t},ht.prototype.toJ=function(){return this.inf?this.curve.jpoint(null,null,null):this.curve.jpoint(this.x,this.y,this.curve.one)},lt(dt,at.BasePoint),ct.prototype.jpoint=function(e,t,r){return new dt(this,e,t,r)},dt.prototype.toP=function(){if(this.isInfinity())return this.curve.point(null,null);var e=this.z.redInvm(),t=e.redSqr(),r=this.x.redMul(t),n=this.y.redMul(t).redMul(e);return this.curve.point(r,n)},dt.prototype.neg=function(){return this.curve.jpoint(this.x,this.y.redNeg(),this.z)},dt.prototype.add=function(e){if(this.isInfinity())return e;if(e.isInfinity())return this;var t=e.z.redSqr(),r=this.z.redSqr(),n=this.x.redMul(t),i=e.x.redMul(r),o=this.y.redMul(t.redMul(e.z)),a=e.y.redMul(r.redMul(this.z)),s=n.redSub(i),l=o.redSub(a);if(0===s.cmpn(0))return 0!==l.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var u=s.redSqr(),c=u.redMul(s),f=n.redMul(u),h=l.redSqr().redIAdd(c).redISub(f).redISub(f),d=l.redMul(f.redISub(h)).redISub(o.redMul(c)),p=this.z.redMul(e.z).redMul(s);return this.curve.jpoint(h,d,p)},dt.prototype.mixedAdd=function(e){if(this.isInfinity())return e.toJ();if(e.isInfinity())return this;var t=this.z.redSqr(),r=this.x,n=e.x.redMul(t),i=this.y,o=e.y.redMul(t).redMul(this.z),a=r.redSub(n),s=i.redSub(o);if(0===a.cmpn(0))return 0!==s.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var l=a.redSqr(),u=l.redMul(a),c=r.redMul(l),f=s.redSqr().redIAdd(u).redISub(c).redISub(c),h=s.redMul(c.redISub(f)).redISub(i.redMul(u)),d=this.z.redMul(a);return this.curve.jpoint(f,h,d)},dt.prototype.dblp=function(e){if(0===e)return this;if(this.isInfinity())return this;if(!e)return this.dbl();var t;if(this.curve.zeroA||this.curve.threeA){var r=this;for(t=0;t<e;t++)r=r.dbl();return r}var n=this.curve.a,i=this.curve.tinv,o=this.x,a=this.y,s=this.z,l=s.redSqr().redSqr(),u=a.redAdd(a);for(t=0;t<e;t++){var c=o.redSqr(),f=u.redSqr(),h=f.redSqr(),d=c.redAdd(c).redIAdd(c).redIAdd(n.redMul(l)),p=o.redMul(f),m=d.redSqr().redISub(p.redAdd(p)),g=p.redISub(m),v=d.redMul(g);v=v.redIAdd(v).redISub(h);var y=u.redMul(s);t+1<e&&(l=l.redMul(h)),o=m,s=y,u=v}return this.curve.jpoint(o,u.redMul(i),s)},dt.prototype.dbl=function(){return this.isInfinity()?this:this.curve.zeroA?this._zeroDbl():this.curve.threeA?this._threeDbl():this._dbl()},dt.prototype._zeroDbl=function(){var e,t,r;if(this.zOne){var n=this.x.redSqr(),i=this.y.redSqr(),o=i.redSqr(),a=this.x.redAdd(i).redSqr().redISub(n).redISub(o);a=a.redIAdd(a);var s=n.redAdd(n).redIAdd(n),l=s.redSqr().redISub(a).redISub(a),u=o.redIAdd(o);u=(u=u.redIAdd(u)).redIAdd(u),e=l,t=s.redMul(a.redISub(l)).redISub(u),r=this.y.redAdd(this.y)}else{var c=this.x.redSqr(),f=this.y.redSqr(),h=f.redSqr(),d=this.x.redAdd(f).redSqr().redISub(c).redISub(h);d=d.redIAdd(d);var p=c.redAdd(c).redIAdd(c),m=p.redSqr(),g=h.redIAdd(h);g=(g=g.redIAdd(g)).redIAdd(g),e=m.redISub(d).redISub(d),t=p.redMul(d.redISub(e)).redISub(g),r=(r=this.y.redMul(this.z)).redIAdd(r)}return this.curve.jpoint(e,t,r)},dt.prototype._threeDbl=function(){var e,t,r;if(this.zOne){var n=this.x.redSqr(),i=this.y.redSqr(),o=i.redSqr(),a=this.x.redAdd(i).redSqr().redISub(n).redISub(o);a=a.redIAdd(a);var s=n.redAdd(n).redIAdd(n).redIAdd(this.curve.a),l=s.redSqr().redISub(a).redISub(a);e=l;var u=o.redIAdd(o);u=(u=u.redIAdd(u)).redIAdd(u),t=s.redMul(a.redISub(l)).redISub(u),r=this.y.redAdd(this.y)}else{var c=this.z.redSqr(),f=this.y.redSqr(),h=this.x.redMul(f),d=this.x.redSub(c).redMul(this.x.redAdd(c));d=d.redAdd(d).redIAdd(d);var p=h.redIAdd(h),m=(p=p.redIAdd(p)).redAdd(p);e=d.redSqr().redISub(m),r=this.y.redAdd(this.z).redSqr().redISub(f).redISub(c);var g=f.redSqr();g=(g=(g=g.redIAdd(g)).redIAdd(g)).redIAdd(g),t=d.redMul(p.redISub(e)).redISub(g)}return this.curve.jpoint(e,t,r)},dt.prototype._dbl=function(){var e=this.curve.a,t=this.x,r=this.y,n=this.z,i=n.redSqr().redSqr(),o=t.redSqr(),a=r.redSqr(),s=o.redAdd(o).redIAdd(o).redIAdd(e.redMul(i)),l=t.redAdd(t),u=(l=l.redIAdd(l)).redMul(a),c=s.redSqr().redISub(u.redAdd(u)),f=u.redISub(c),h=a.redSqr();h=(h=(h=h.redIAdd(h)).redIAdd(h)).redIAdd(h);var d=s.redMul(f).redISub(h),p=r.redAdd(r).redMul(n);return this.curve.jpoint(c,d,p)},dt.prototype.trpl=function(){if(!this.curve.zeroA)return this.dbl().add(this);var e=this.x.redSqr(),t=this.y.redSqr(),r=this.z.redSqr(),n=t.redSqr(),i=e.redAdd(e).redIAdd(e),o=i.redSqr(),a=this.x.redAdd(t).redSqr().redISub(e).redISub(n),s=(a=(a=(a=a.redIAdd(a)).redAdd(a).redIAdd(a)).redISub(o)).redSqr(),l=n.redIAdd(n);l=(l=(l=l.redIAdd(l)).redIAdd(l)).redIAdd(l);var u=i.redIAdd(a).redSqr().redISub(o).redISub(s).redISub(l),c=t.redMul(u);c=(c=c.redIAdd(c)).redIAdd(c);var f=this.x.redMul(s).redISub(c);f=(f=f.redIAdd(f)).redIAdd(f);var h=this.y.redMul(u.redMul(l.redISub(u)).redISub(a.redMul(s)));h=(h=(h=h.redIAdd(h)).redIAdd(h)).redIAdd(h);var d=this.z.redAdd(a).redSqr().redISub(r).redISub(s);return this.curve.jpoint(f,h,d)},dt.prototype.mul=function(e,t){return e=new(C())(e,t),this.curve._wnafMul(this,e)},dt.prototype.eq=function(e){if("affine"===e.type)return this.eq(e.toJ());if(this===e)return!0;var t=this.z.redSqr(),r=e.z.redSqr();if(0!==this.x.redMul(r).redISub(e.x.redMul(t)).cmpn(0))return!1;var n=t.redMul(this.z),i=r.redMul(e.z);return 0===this.y.redMul(i).redISub(e.y.redMul(n)).cmpn(0)},dt.prototype.eqXToP=function(e){var t=this.z.redSqr(),r=e.toRed(this.curve.red).redMul(t);if(0===this.x.cmp(r))return!0;for(var n=e.clone(),i=this.curve.redN.redMul(t);;){if(n.iadd(this.curve.n),n.cmp(this.curve.p)>=0)return!1;if(r.redIAdd(i),0===this.x.cmp(r))return!0}},dt.prototype.inspect=function(){return this.isInfinity()?"<EC JPoint Infinity>":"<EC JPoint x: "+this.x.toString(16,2)+" y: "+this.y.toString(16,2)+" z: "+this.z.toString(16,2)+">"},dt.prototype.isInfinity=function(){return 0===this.z.cmpn(0)};var pt=Je((function(e,t){var r=t;r.base=at,r.short=ft,r.mont=null,r.edwards=null})),mt=Je((function(e,t){var r,n=t,i=tt.assert;function o(e){"short"===e.type?this.curve=new pt.short(e):"edwards"===e.type?this.curve=new pt.edwards(e):this.curve=new pt.mont(e),this.g=this.curve.g,this.n=this.curve.n,this.hash=e.hash,i(this.g.validate(),"Invalid curve"),i(this.g.mul(this.n).isInfinity(),"Invalid curve, G*N != O")}function a(e,t){Object.defineProperty(n,e,{configurable:!0,enumerable:!0,get:function(){var r=new o(t);return Object.defineProperty(n,e,{configurable:!0,enumerable:!0,value:r}),r}})}n.PresetCurve=o,a("p192",{type:"short",prime:"p192",p:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",a:"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",b:"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",n:"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",hash:Xe().sha256,gRed:!1,g:["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012","07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"]}),a("p224",{type:"short",prime:"p224",p:"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",a:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",b:"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",n:"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",hash:Xe().sha256,gRed:!1,g:["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21","bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"]}),a("p256",{type:"short",prime:null,p:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",a:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",b:"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",n:"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",hash:Xe().sha256,gRed:!1,g:["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296","4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"]}),a("p384",{type:"short",prime:null,p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",a:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",b:"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",n:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",hash:Xe().sha384,gRed:!1,g:["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7","3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"]}),a("p521",{type:"short",prime:null,p:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",a:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",b:"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",n:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",hash:Xe().sha512,gRed:!1,g:["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66","00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"]}),a("curve25519",{type:"mont",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"76d06",b:"1",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:Xe().sha256,gRed:!1,g:["9"]}),a("ed25519",{type:"edwards",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"-1",c:"1",d:"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:Xe().sha256,gRed:!1,g:["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a","6666666666666666666666666666666666666666666666666666666666666658"]});try{r=null.crash()}catch(e){r=void 0}a("secp256k1",{type:"short",prime:"k256",p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",a:"0",b:"7",n:"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",h:"1",hash:Xe().sha256,beta:"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",lambda:"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",basis:[{a:"3086d221a7d46bcde86c90e49284eb15",b:"-e4437ed6010e88286f547fa90abfe4c3"},{a:"114ca50f7a8e2f3f657c1108d9d44cfd8",b:"3086d221a7d46bcde86c90e49284eb15"}],gRed:!1,g:["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798","483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",r]})}));function gt(e){if(!(this instanceof gt))return new gt(e);this.hash=e.hash,this.predResist=!!e.predResist,this.outLen=this.hash.outSize,this.minEntropy=e.minEntropy||this.hash.hmacStrength,this._reseed=null,this.reseedInterval=null,this.K=null,this.V=null;var t=et.toArray(e.entropy,e.entropyEnc||"hex"),r=et.toArray(e.nonce,e.nonceEnc||"hex"),n=et.toArray(e.pers,e.persEnc||"hex");Ye(t.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._init(t,r,n)}var vt=gt;gt.prototype._init=function(e,t,r){var n=e.concat(t).concat(r);this.K=new Array(this.outLen/8),this.V=new Array(this.outLen/8);for(var i=0;i<this.V.length;i++)this.K[i]=0,this.V[i]=1;this._update(n),this._reseed=1,this.reseedInterval=281474976710656},gt.prototype._hmac=function(){return new(Xe().hmac)(this.hash,this.K)},gt.prototype._update=function(e){var t=this._hmac().update(this.V).update([0]);e&&(t=t.update(e)),this.K=t.digest(),this.V=this._hmac().update(this.V).digest(),e&&(this.K=this._hmac().update(this.V).update([1]).update(e).digest(),this.V=this._hmac().update(this.V).digest())},gt.prototype.reseed=function(e,t,r,n){"string"!=typeof t&&(n=r,r=t,t=null),e=et.toArray(e,t),r=et.toArray(r,n),Ye(e.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._update(e.concat(r||[])),this._reseed=1},gt.prototype.generate=function(e,t,r,n){if(this._reseed>this.reseedInterval)throw new Error("Reseed is required");"string"!=typeof t&&(n=r,r=t,t=null),r&&(r=et.toArray(r,n||"hex"),this._update(r));for(var i=[];i.length<e;)this.V=this._hmac().update(this.V).digest(),i=i.concat(this.V);var o=i.slice(0,e);return this._update(r),this._reseed++,et.encode(o,t)};var yt=tt.assert;function bt(e,t){this.ec=e,this.priv=null,this.pub=null,t.priv&&this._importPrivate(t.priv,t.privEnc),t.pub&&this._importPublic(t.pub,t.pubEnc)}var wt=bt;bt.fromPublic=function(e,t,r){return t instanceof bt?t:new bt(e,{pub:t,pubEnc:r})},bt.fromPrivate=function(e,t,r){return t instanceof bt?t:new bt(e,{priv:t,privEnc:r})},bt.prototype.validate=function(){var e=this.getPublic();return e.isInfinity()?{result:!1,reason:"Invalid public key"}:e.validate()?e.mul(this.ec.curve.n).isInfinity()?{result:!0,reason:null}:{result:!1,reason:"Public key * N != O"}:{result:!1,reason:"Public key is not a point"}},bt.prototype.getPublic=function(e,t){return"string"==typeof e&&(t=e,e=null),this.pub||(this.pub=this.ec.g.mul(this.priv)),t?this.pub.encode(t,e):this.pub},bt.prototype.getPrivate=function(e){return"hex"===e?this.priv.toString(16,2):this.priv},bt.prototype._importPrivate=function(e,t){this.priv=new(C())(e,t||16),this.priv=this.priv.umod(this.ec.curve.n)},bt.prototype._importPublic=function(e,t){if(e.x||e.y)return"mont"===this.ec.curve.type?yt(e.x,"Need x coordinate"):"short"!==this.ec.curve.type&&"edwards"!==this.ec.curve.type||yt(e.x&&e.y,"Need both x and y coordinate"),void(this.pub=this.ec.curve.point(e.x,e.y));this.pub=this.ec.curve.decodePoint(e,t)},bt.prototype.derive=function(e){return e.validate()||yt(e.validate(),"public point not validated"),e.mul(this.priv).getX()},bt.prototype.sign=function(e,t,r){return this.ec.sign(e,this,t,r)},bt.prototype.verify=function(e,t){return this.ec.verify(e,t,this)},bt.prototype.inspect=function(){return"<Key priv: "+(this.priv&&this.priv.toString(16,2))+" pub: "+(this.pub&&this.pub.inspect())+" >"};var kt=tt.assert;function Et(e,t){if(e instanceof Et)return e;this._importDER(e,t)||(kt(e.r&&e.s,"Signature without r or s"),this.r=new(C())(e.r,16),this.s=new(C())(e.s,16),void 0===e.recoveryParam?this.recoveryParam=null:this.recoveryParam=e.recoveryParam)}var xt=Et;function _t(){this.place=0}function St(e,t){var r=e[t.place++];if(!(128&r))return r;var n=15&r;if(0===n||n>4)return!1;for(var i=0,o=0,a=t.place;o<n;o++,a++)i<<=8,i|=e[a],i>>>=0;return!(i<=127)&&(t.place=a,i)}function Pt(e){for(var t=0,r=e.length-1;!e[t]&&!(128&e[t+1])&&t<r;)t++;return 0===t?e:e.slice(t)}function Nt(e,t){if(t<128)e.push(t);else{var r=1+(Math.log(t)/Math.LN2>>>3);for(e.push(128|r);--r;)e.push(t>>>(r<<3)&255);e.push(t)}}Et.prototype._importDER=function(e,t){e=tt.toArray(e,t);var r=new _t;if(48!==e[r.place++])return!1;var n=St(e,r);if(!1===n)return!1;if(n+r.place!==e.length)return!1;if(2!==e[r.place++])return!1;var i=St(e,r);if(!1===i)return!1;var o=e.slice(r.place,i+r.place);if(r.place+=i,2!==e[r.place++])return!1;var a=St(e,r);if(!1===a)return!1;if(e.length!==a+r.place)return!1;var s=e.slice(r.place,a+r.place);if(0===o[0]){if(!(128&o[1]))return!1;o=o.slice(1)}if(0===s[0]){if(!(128&s[1]))return!1;s=s.slice(1)}return this.r=new(C())(o),this.s=new(C())(s),this.recoveryParam=null,!0},Et.prototype.toDER=function(e){var t=this.r.toArray(),r=this.s.toArray();for(128&t[0]&&(t=[0].concat(t)),128&r[0]&&(r=[0].concat(r)),t=Pt(t),r=Pt(r);!(r[0]||128&r[1]);)r=r.slice(1);var n=[2];Nt(n,t.length),(n=n.concat(t)).push(2),Nt(n,r.length);var i=n.concat(r),o=[48];return Nt(o,i.length),o=o.concat(i),tt.encode(o,e)};var Mt=function(){throw new Error("unsupported")},Ct=tt.assert;function At(e){if(!(this instanceof At))return new At(e);"string"==typeof e&&(Ct(Object.prototype.hasOwnProperty.call(mt,e),"Unknown curve "+e),e=mt[e]),e instanceof mt.PresetCurve&&(e={curve:e}),this.curve=e.curve.curve,this.n=this.curve.n,this.nh=this.n.ushrn(1),this.g=this.curve.g,this.g=e.curve.g,this.g.precompute(e.curve.n.bitLength()+1),this.hash=e.hash||e.curve.hash}var Ft=At;At.prototype.keyPair=function(e){return new wt(this,e)},At.prototype.keyFromPrivate=function(e,t){return wt.fromPrivate(this,e,t)},At.prototype.keyFromPublic=function(e,t){return wt.fromPublic(this,e,t)},At.prototype.genKeyPair=function(e){e||(e={});for(var t=new vt({hash:this.hash,pers:e.pers,persEnc:e.persEnc||"utf8",entropy:e.entropy||Mt(this.hash.hmacStrength),entropyEnc:e.entropy&&e.entropyEnc||"utf8",nonce:this.n.toArray()}),r=this.n.byteLength(),n=this.n.sub(new(C())(2));;){var i=new(C())(t.generate(r));if(!(i.cmp(n)>0))return i.iaddn(1),this.keyFromPrivate(i)}},At.prototype._truncateToN=function(e,t){var r=8*e.byteLength()-this.n.bitLength();return r>0&&(e=e.ushrn(r)),!t&&e.cmp(this.n)>=0?e.sub(this.n):e},At.prototype.sign=function(e,t,r,n){"object"==typeof r&&(n=r,r=null),n||(n={}),t=this.keyFromPrivate(t,r),e=this._truncateToN(new(C())(e,16));for(var i=this.n.byteLength(),o=t.getPrivate().toArray("be",i),a=e.toArray("be",i),s=new vt({hash:this.hash,entropy:o,nonce:a,pers:n.pers,persEnc:n.persEnc||"utf8"}),l=this.n.sub(new(C())(1)),u=0;;u++){var c=n.k?n.k(u):new(C())(s.generate(this.n.byteLength()));if(!((c=this._truncateToN(c,!0)).cmpn(1)<=0||c.cmp(l)>=0)){var f=this.g.mul(c);if(!f.isInfinity()){var h=f.getX(),d=h.umod(this.n);if(0!==d.cmpn(0)){var p=c.invm(this.n).mul(d.mul(t.getPrivate()).iadd(e));if(0!==(p=p.umod(this.n)).cmpn(0)){var m=(f.getY().isOdd()?1:0)|(0!==h.cmp(d)?2:0);return n.canonical&&p.cmp(this.nh)>0&&(p=this.n.sub(p),m^=1),new xt({r:d,s:p,recoveryParam:m})}}}}}},At.prototype.verify=function(e,t,r,n){e=this._truncateToN(new(C())(e,16)),r=this.keyFromPublic(r,n);var i=(t=new xt(t,"hex")).r,o=t.s;if(i.cmpn(1)<0||i.cmp(this.n)>=0)return!1;if(o.cmpn(1)<0||o.cmp(this.n)>=0)return!1;var a,s=o.invm(this.n),l=s.mul(e).umod(this.n),u=s.mul(i).umod(this.n);return this.curve._maxwellTrick?!(a=this.g.jmulAdd(l,r.getPublic(),u)).isInfinity()&&a.eqXToP(i):!(a=this.g.mulAdd(l,r.getPublic(),u)).isInfinity()&&0===a.getX().umod(this.n).cmp(i)},At.prototype.recoverPubKey=function(e,t,r,n){Ct((3&r)===r,"The recovery param is more than two bits"),t=new xt(t,n);var i=this.n,o=new(C())(e),a=t.r,s=t.s,l=1&r,u=r>>1;if(a.cmp(this.curve.p.umod(this.curve.n))>=0&&u)throw new Error("Unable to find sencond key candinate");a=u?this.curve.pointFromX(a.add(this.curve.n),l):this.curve.pointFromX(a,l);var c=t.r.invm(i),f=i.sub(o).mul(c).umod(i),h=s.mul(c).umod(i);return this.g.mulAdd(f,a,h)},At.prototype.getKeyRecoveryParam=function(e,t,r,n){if(null!==(t=new xt(t,n)).recoveryParam)return t.recoveryParam;for(var i=0;i<4;i++){var o;try{o=this.recoverPubKey(e,t,i)}catch(e){continue}if(o.eq(r))return i}throw new Error("Unable to find valid recovery factor")};var Rt=Je((function(e,t){var r=t;r.version="6.5.4",r.utils=tt,r.rand=function(){throw new Error("unsupported")},r.curve=pt,r.curves=mt,r.ec=Ft,r.eddsa=null})).ec;const It=new h("signing-key/5.6.2");let Tt=null;function Ot(){return Tt||(Tt=new Rt("secp256k1")),Tt}class Lt{constructor(e){p(this,"curve","secp256k1"),p(this,"privateKey",j(e)),32!==V(this.privateKey)&&It.throwArgumentError("invalid private key","privateKey","[[ REDACTED ]]");const t=Ot().keyFromPrivate(L(this.privateKey));p(this,"publicKey","0x"+t.getPublic(!1,"hex")),p(this,"compressedPublicKey","0x"+t.getPublic(!0,"hex")),p(this,"_isSigningKey",!0)}_addPoint(e){const t=Ot().keyFromPublic(L(this.publicKey)),r=Ot().keyFromPublic(L(e));return"0x"+t.pub.add(r.pub).encodeCompressed("hex")}signDigest(e){const t=Ot().keyFromPrivate(L(this.privateKey)),r=L(e);32!==r.length&&It.throwArgumentError("bad digest length","digest",e);const n=t.sign(r,{canonical:!0});return G({recoveryParam:n.recoveryParam,r:W("0x"+n.r.toString(16),32),s:W("0x"+n.s.toString(16),32)})}computeSharedSecret(e){const t=Ot().keyFromPrivate(L(this.privateKey)),r=Ot().keyFromPublic(L(Bt(e)));return W("0x"+t.derive(r.getPublic()).toString(16),32)}static isSigningKey(e){return!(!e||!e._isSigningKey)}}function Bt(e,t){const r=L(e);if(32===r.length){const e=new Lt(r);return t?"0x"+Ot().keyFromPrivate(r).getPublic(!0,"hex"):e.publicKey}return 33===r.length?t?j(r):"0x"+Ot().keyFromPublic(r).getPublic(!1,"hex"):65===r.length?t?"0x"+Ot().keyFromPublic(r).getPublic(!0,"hex"):j(r):It.throwArgumentError("invalid public or private key","key","[REDACTED]")}const zt=new h("transactions/5.6.2");var Dt;function Ut(e){return"0x"===e?null:we(e)}function jt(e){return"0x"===e?Ke:Z.from(e)}function Vt(e,t){return function(e){return we(q(ae(q(Bt(e),1)),12))}(function(e,t){const r=G(t),n={r:L(r.r),s:L(r.s)};return"0x"+Ot().recoverPubKey(L(e),n,r.recoveryParam).encode("hex",!1)}(L(e),t))}function qt(e,t){const r=z(Z.from(e).toHexString());return r.length>32&&zt.throwArgumentError("invalid length for "+t,"transaction:"+t,e),r}function $t(e,t){return{address:we(e),storageKeys:(t||[]).map(((t,r)=>(32!==V(t)&&zt.throwArgumentError("invalid access list storageKey",`accessList[${e}:${r}]`,t),t.toLowerCase())))}}function Ht(e){if(Array.isArray(e))return e.map(((e,t)=>Array.isArray(e)?(e.length>2&&zt.throwArgumentError("access list expected to be [ address, storageKeys[] ]",`value[${t}]`,e),$t(e[0],e[1])):$t(e.address,e.storageKeys)));const t=Object.keys(e).map((t=>{const r=e[t].reduce(((e,t)=>(e[t]=!0,e)),{});return $t(t,Object.keys(r).sort())}));return t.sort(((e,t)=>e.address.localeCompare(t.address))),t}function Wt(e){return Ht(e).map((e=>[e.address,e.storageKeys]))}function Gt(e,t){if(null!=e.gasPrice){const t=Z.from(e.gasPrice),r=Z.from(e.maxFeePerGas||0);t.eq(r)||zt.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas","tx",{gasPrice:t,maxFeePerGas:r})}const r=[qt(e.chainId||0,"chainId"),qt(e.nonce||0,"nonce"),qt(e.maxPriorityFeePerGas||0,"maxPriorityFeePerGas"),qt(e.maxFeePerGas||0,"maxFeePerGas"),qt(e.gasLimit||0,"gasLimit"),null!=e.to?we(e.to):"0x",qt(e.value||0,"value"),e.data||"0x",Wt(e.accessList||[])];if(t){const e=G(t);r.push(qt(e.recoveryParam,"recoveryParam")),r.push(z(e.r)),r.push(z(e.s))}return $(["0x02",fe(r)])}function Kt(e,t){const r=[qt(e.chainId||0,"chainId"),qt(e.nonce||0,"nonce"),qt(e.gasPrice||0,"gasPrice"),qt(e.gasLimit||0,"gasLimit"),null!=e.to?we(e.to):"0x",qt(e.value||0,"value"),e.data||"0x",Wt(e.accessList||[])];if(t){const e=G(t);r.push(qt(e.recoveryParam,"recoveryParam")),r.push(z(e.r)),r.push(z(e.s))}return $(["0x01",fe(r)])}function Qt(e,t,r){try{const r=jt(t[0]).toNumber();if(0!==r&&1!==r)throw new Error("bad recid");e.v=r}catch(e){zt.throwArgumentError("invalid v for transaction type: 1","v",t[0])}e.r=W(t[1],32),e.s=W(t[2],32);try{const t=ae(r(e));e.from=Vt(t,{r:e.r,s:e.s,recoveryParam:e.v})}catch(e){}}function Xt(e){e=atob(e);const t=[];for(let r=0;r<e.length;r++)t.push(e.charCodeAt(r));return L(t)}function Jt(e){e=L(e);let t="";for(let r=0;r<e.length;r++)t+=String.fromCharCode(e[r]);return btoa(t)}!function(e){e[e.legacy=0]="legacy",e[e.eip2930=1]="eip2930",e[e.eip1559=2]="eip1559"}(Dt||(Dt={}));function Yt(e,t){return r=this,n=void 0,o=function*(){null==t&&(t={});const r={method:t.method||"GET",headers:t.headers||{},body:t.body||void 0};!0!==t.skipFetchSetup&&(r.mode="cors",r.cache="no-cache",r.credentials="same-origin",r.redirect="follow",r.referrer="client");const n=yield fetch(e,r),i=yield n.arrayBuffer(),o={};return n.headers.forEach?n.headers.forEach(((e,t)=>{o[t.toLowerCase()]=e})):n.headers.keys().forEach((e=>{o[e.toLowerCase()]=n.headers.get(e)})),{headers:o,statusCode:n.status,statusMessage:n.statusText,body:L(new Uint8Array(i))}},new((i=void 0)||(i=Promise))((function(e,t){function a(e){try{l(o.next(e))}catch(e){t(e)}}function s(e){try{l(o.throw(e))}catch(e){t(e)}}function l(t){var r;t.done?e(t.value):(r=t.value,r instanceof i?r:new i((function(e){e(r)}))).then(a,s)}l((o=o.apply(r,n||[])).next())}));var r,n,i,o}const Zt=new h("web/5.6.1");function er(e){return new Promise((t=>{setTimeout(t,e)}))}function tr(e,t){if(null==e)return null;if("string"==typeof e)return e;if(I(e)){if(t&&("text"===t.split("/")[0]||"application/json"===t.split(";")[0].trim()))try{return Ae(e)}catch(e){}return j(e)}return e}function rr(e,t,r){let n=null;if(null!=t){n=Me(t);const r="string"==typeof e?{url:e}:v(e);r.headers?0!==Object.keys(r.headers).filter((e=>"content-type"===e.toLowerCase())).length||(r.headers=v(r.headers),r.headers["content-type"]="application/json"):r.headers={"content-type":"application/json"},e=r}return function(e,t,r){const n="object"==typeof e&&null!=e.throttleLimit?e.throttleLimit:12;Zt.assertArgument(n>0&&n%1==0,"invalid connection throttle limit","connection.throttleLimit",n);const i="object"==typeof e?e.throttleCallback:null,o="object"==typeof e&&"number"==typeof e.throttleSlotInterval?e.throttleSlotInterval:100;Zt.assertArgument(o>0&&o%1==0,"invalid connection throttle slot interval","connection.throttleSlotInterval",o);const a="object"==typeof e&&!!e.errorPassThrough,s={};let l=null;const u={method:"GET"};let c=!1,f=12e4;if("string"==typeof e)l=e;else if("object"==typeof e){if(null!=e&&null!=e.url||Zt.throwArgumentError("missing URL","connection.url",e),l=e.url,"number"==typeof e.timeout&&e.timeout>0&&(f=e.timeout),e.headers)for(const t in e.headers)s[t.toLowerCase()]={key:t,value:String(e.headers[t])},["if-none-match","if-modified-since"].indexOf(t.toLowerCase())>=0&&(c=!0);if(u.allowGzip=!!e.allowGzip,null!=e.user&&null!=e.password){"https:"!==l.substring(0,6)&&!0!==e.allowInsecureAuthentication&&Zt.throwError("basic authentication requires a secure https url",h.errors.INVALID_ARGUMENT,{argument:"url",url:l,user:e.user,password:"[REDACTED]"});const t=e.user+":"+e.password;s.authorization={key:"Authorization",value:"Basic "+Jt(Me(t))}}null!=e.skipFetchSetup&&(u.skipFetchSetup=!!e.skipFetchSetup)}const d=new RegExp("^data:([a-z0-9-]+/[a-z0-9-]+);base64,(.*)$","i"),p=l?l.match(d):null;if(p)try{const e={statusCode:200,statusMessage:"OK",headers:{"content-type":p[1]},body:Xt(p[2])};let t=e.body;return r&&(t=r(e.body,e)),Promise.resolve(t)}catch(e){Zt.throwError("processing response error",h.errors.SERVER_ERROR,{body:tr(p[1],p[2]),error:e,requestBody:null,requestMethod:"GET",url:l})}t&&(u.method="POST",u.body=t,null==s["content-type"]&&(s["content-type"]={key:"Content-Type",value:"application/octet-stream"}),null==s["content-length"]&&(s["content-length"]={key:"Content-Length",value:String(t.length)}));const m={};Object.keys(s).forEach((e=>{const t=s[e];m[t.key]=t.value})),u.headers=m;const g=function(){let e=null;return{promise:new Promise((function(t,r){f&&(e=setTimeout((()=>{null!=e&&(e=null,r(Zt.makeError("timeout",h.errors.TIMEOUT,{requestBody:tr(u.body,m["content-type"]),requestMethod:u.method,timeout:f,url:l})))}),f))})),cancel:function(){null!=e&&(clearTimeout(e),e=null)}}}(),v=function(){return e=this,t=void 0,f=function*(){for(let e=0;e<n;e++){let t=null;try{if(t=yield Yt(l,u),e<n)if(301===t.statusCode||302===t.statusCode){const e=t.headers.location||"";if("GET"===u.method&&e.match(/^https:/)){l=t.headers.location;continue}}else if(429===t.statusCode){let r=!0;if(i&&(r=yield i(e,l)),r){let r=0;const n=t.headers["retry-after"];r="string"==typeof n&&n.match(/^[1-9][0-9]*$/)?1e3*parseInt(n):o*parseInt(String(Math.random()*Math.pow(2,e))),yield er(r);continue}}}catch(e){t=e.response,null==t&&(g.cancel(),Zt.throwError("missing response",h.errors.SERVER_ERROR,{requestBody:tr(u.body,m["content-type"]),requestMethod:u.method,serverError:e,url:l}))}let s=t.body;if(c&&304===t.statusCode?s=null:!a&&(t.statusCode<200||t.statusCode>=300)&&(g.cancel(),Zt.throwError("bad response",h.errors.SERVER_ERROR,{status:t.statusCode,headers:t.headers,body:tr(s,t.headers?t.headers["content-type"]:null),requestBody:tr(u.body,m["content-type"]),requestMethod:u.method,url:l})),r)try{const e=yield r(s,t);return g.cancel(),e}catch(r){if(r.throttleRetry&&e<n){let t=!0;if(i&&(t=yield i(e,l)),t){const t=o*parseInt(String(Math.random()*Math.pow(2,e)));yield er(t);continue}}g.cancel(),Zt.throwError("processing response error",h.errors.SERVER_ERROR,{body:tr(s,t.headers?t.headers["content-type"]:null),error:r,requestBody:tr(u.body,m["content-type"]),requestMethod:u.method,url:l})}return g.cancel(),s}return Zt.throwError("failed response",h.errors.SERVER_ERROR,{requestBody:tr(u.body,m["content-type"]),requestMethod:u.method,url:l})},new((s=void 0)||(s=Promise))((function(r,n){function i(e){try{a(f.next(e))}catch(e){n(e)}}function o(e){try{a(f.throw(e))}catch(e){n(e)}}function a(e){var t;e.done?r(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(i,o)}a((f=f.apply(e,t||[])).next())}));var e,t,s,f}();return Promise.race([g.promise,v])}(e,n,((e,t)=>{let n=null;if(null!=e)try{n=JSON.parse(Ae(e))}catch(t){Zt.throwError("invalid JSON",h.errors.SERVER_ERROR,{body:e,error:t})}return r&&(n=r(n,t)),n}))}function nr(e,t){return t||(t={}),null==(t=v(t)).floor&&(t.floor=0),null==t.ceiling&&(t.ceiling=1e4),null==t.interval&&(t.interval=250),new Promise((function(r,n){let i=null,o=!1;const a=()=>!o&&(o=!0,i&&clearTimeout(i),!0);t.timeout&&(i=setTimeout((()=>{a()&&n(new Error("timeout"))}),t.timeout));const s=t.retryLimit;let l=0;!function i(){return e().then((function(e){if(void 0!==e)a()&&r(e);else if(t.oncePoll)t.oncePoll.once("poll",i);else if(t.onceBlock)t.onceBlock.once("block",i);else if(!o){if(l++,l>s)return void(a()&&n(new Error("retry limit reached")));let e=t.interval*parseInt(String(Math.random()*Math.pow(2,l)));e<t.floor&&(e=t.floor),e>t.ceiling&&(e=t.ceiling),setTimeout(i,e)}return null}),(function(e){a()&&n(e)}))}()}))}const ir=new h("abstract-provider/5.6.1");class or{constructor(){ir.checkAbstract(new.target,or),p(this,"_isProvider",!0)}getFeeData(){return e=this,t=void 0,n=function*(){const{block:e,gasPrice:t}=yield g({block:this.getBlock("latest"),gasPrice:this.getGasPrice().catch((e=>null))});let r=null,n=null;return e&&e.baseFeePerGas&&(n=Z.from("1500000000"),r=e.baseFeePerGas.mul(2).add(n)),{maxFeePerGas:r,maxPriorityFeePerGas:n,gasPrice:t}},new((r=void 0)||(r=Promise))((function(i,o){function a(e){try{l(n.next(e))}catch(e){o(e)}}function s(e){try{l(n.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}l((n=n.apply(e,t||[])).next())}));var e,t,r,n}addListener(e,t){return this.on(e,t)}removeListener(e,t){return this.off(e,t)}static isProvider(e){return!(!e||!e._isProvider)}}class ar{constructor(e){p(this,"alphabet",e),p(this,"base",e.length),p(this,"_alphabetMap",{}),p(this,"_leader",e.charAt(0));for(let t=0;t<e.length;t++)this._alphabetMap[e.charAt(t)]=t}encode(e){let t=L(e);if(0===t.length)return"";let r=[0];for(let e=0;e<t.length;++e){let n=t[e];for(let e=0;e<r.length;++e)n+=r[e]<<8,r[e]=n%this.base,n=n/this.base|0;for(;n>0;)r.push(n%this.base),n=n/this.base|0}let n="";for(let e=0;0===t[e]&&e<t.length-1;++e)n+=this._leader;for(let e=r.length-1;e>=0;--e)n+=this.alphabet[r[e]];return n}decode(e){if("string"!=typeof e)throw new TypeError("Expected String");let t=[];if(0===e.length)return new Uint8Array(t);t.push(0);for(let r=0;r<e.length;r++){let n=this._alphabetMap[e[r]];if(void 0===n)throw new Error("Non-base"+this.base+" character");let i=n;for(let e=0;e<t.length;++e)i+=t[e]*this.base,t[e]=255&i,i>>=8;for(;i>0;)t.push(255&i),i>>=8}for(let r=0;e[r]===this._leader&&r<e.length-1;++r)t.push(0);return L(new Uint8Array(t.reverse()))}}new ar("abcdefghijklmnopqrstuvwxyz234567");const sr=new ar("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");function lr(e,t){t||(t=function(e){return[parseInt(e,16)]});let r=0,n={};return e.split(",").forEach((e=>{let i=e.split(":");r+=parseInt(i[0],16),n[r]=t(i[1])})),n}function ur(e){let t=0;return e.split(",").map((e=>{let r=e.split("-");1===r.length?r[1]="0":""===r[1]&&(r[1]="1");let n=t+parseInt(r[0],16);return t=parseInt(r[1],16),{l:n,h:t}}))}function cr(e,t){let r=0;for(let n=0;n<t.length;n++){let i=t[n];if(r+=i.l,e>=r&&e<=r+i.h&&(e-r)%(i.d||1)==0){if(i.e&&-1!==i.e.indexOf(e-r))continue;return i}}return null}const fr=ur("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d"),hr="ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((e=>parseInt(e,16))),dr=[{h:25,s:32,l:65},{h:30,s:32,e:[23],l:127},{h:54,s:1,e:[48],l:64,d:2},{h:14,s:1,l:57,d:2},{h:44,s:1,l:17,d:2},{h:10,s:1,e:[2,6,8],l:61,d:2},{h:16,s:1,l:68,d:2},{h:84,s:1,e:[18,24,66],l:19,d:2},{h:26,s:32,e:[17],l:435},{h:22,s:1,l:71,d:2},{h:15,s:80,l:40},{h:31,s:32,l:16},{h:32,s:1,l:80,d:2},{h:52,s:1,l:42,d:2},{h:12,s:1,l:55,d:2},{h:40,s:1,e:[38],l:15,d:2},{h:14,s:1,l:48,d:2},{h:37,s:48,l:49},{h:148,s:1,l:6351,d:2},{h:88,s:1,l:160,d:2},{h:15,s:16,l:704},{h:25,s:26,l:854},{h:25,s:32,l:55915},{h:37,s:40,l:1247},{h:25,s:-119711,l:53248},{h:25,s:-119763,l:52},{h:25,s:-119815,l:52},{h:25,s:-119867,e:[1,4,5,7,8,11,12,17],l:52},{h:25,s:-119919,l:52},{h:24,s:-119971,e:[2,7,8,17],l:52},{h:24,s:-120023,e:[2,7,13,15,16,17],l:52},{h:25,s:-120075,l:52},{h:25,s:-120127,l:52},{h:25,s:-120179,l:52},{h:25,s:-120231,l:52},{h:25,s:-120283,l:52},{h:25,s:-120335,l:52},{h:24,s:-119543,e:[17],l:56},{h:24,s:-119601,e:[17],l:58},{h:24,s:-119659,e:[17],l:58},{h:24,s:-119717,e:[17],l:58},{h:24,s:-119775,e:[17],l:58}],pr=lr("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3"),mr=lr("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7"),gr=lr("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D",(function(e){if(e.length%4!=0)throw new Error("bad data");let t=[];for(let r=0;r<e.length;r+=4)t.push(parseInt(e.substring(r,r+4),16));return t})),vr=ur("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");function yr(e){if(e.match(/^[a-z0-9-]*$/i)&&e.length<=59)return e.toLowerCase();let t=Fe(e);var r;r=t.map((e=>{if(hr.indexOf(e)>=0)return[];if(e>=65024&&e<=65039)return[];let t=function(e){let t=cr(e,dr);if(t)return[e+t.s];let r=pr[e];if(r)return r;let n=mr[e];return n?[e+n[0]]:gr[e]||null}(e);return t||[e]})),t=r.reduce(((e,t)=>(t.forEach((t=>{e.push(t)})),e)),[]),t=Fe(Ce(t),xe.NFKC),t.forEach((e=>{if(cr(e,vr))throw new Error("STRINGPREP_CONTAINS_PROHIBITED")})),t.forEach((e=>{if(cr(e,fr))throw new Error("STRINGPREP_CONTAINS_UNASSIGNED")}));let n=Ce(t);if("-"===n.substring(0,1)||"--"===n.substring(2,4)||"-"===n.substring(n.length-1))throw new Error("invalid hyphen");if(n.length>63)throw new Error("too long");return n}const br=new h(ke),wr=new Uint8Array(32);wr.fill(0);const kr=new RegExp("^((.*)\\.)?([^.]+)$");function Er(e){"string"!=typeof e&&br.throwArgumentError("invalid ENS name; not a string","name",e);let t=e,r=wr;for(;t.length;){const n=t.match(kr);null!=n&&""!==n[2]||br.throwArgumentError("invalid ENS address; missing component","name",e),r=ae(B([r,ae(Me(yr(n[3])))])),t=n[2]||""}return j(r)}const xr=new h("networks/5.6.4");function _r(e){const t=function(t,r){null==r&&(r={});const n=[];if(t.InfuraProvider&&"-"!==r.infura)try{n.push(new t.InfuraProvider(e,r.infura))}catch(e){}if(t.EtherscanProvider&&"-"!==r.etherscan)try{n.push(new t.EtherscanProvider(e,r.etherscan))}catch(e){}if(t.AlchemyProvider&&"-"!==r.alchemy)try{n.push(new t.AlchemyProvider(e,r.alchemy))}catch(e){}if(t.PocketProvider&&"-"!==r.pocket){const i=["goerli","ropsten","rinkeby"];try{const o=new t.PocketProvider(e,r.pocket);o.network&&-1===i.indexOf(o.network.name)&&n.push(o)}catch(e){}}if(t.CloudflareProvider&&"-"!==r.cloudflare)try{n.push(new t.CloudflareProvider(e))}catch(e){}if(t.AnkrProvider&&"-"!==r.ankr)try{const i=["ropsten"],o=new t.AnkrProvider(e,r.ankr);o.network&&-1===i.indexOf(o.network.name)&&n.push(o)}catch(e){}if(0===n.length)return null;if(t.FallbackProvider){let i=1;return null!=r.quorum?i=r.quorum:"homestead"===e&&(i=2),new t.FallbackProvider(n,i)}return n[0]};return t.renetwork=function(e){return _r(e)},t}function Sr(e,t){const r=function(r,n){return r.JsonRpcProvider?new r.JsonRpcProvider(e,t):null};return r.renetwork=function(t){return Sr(e,t)},r}const Pr={chainId:1,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"homestead",_defaultProvider:_r("homestead")},Nr={chainId:3,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"ropsten",_defaultProvider:_r("ropsten")},Mr={chainId:63,name:"classicMordor",_defaultProvider:Sr("https://www.ethercluster.com/mordor","classicMordor")},Cr={unspecified:{chainId:0,name:"unspecified"},homestead:Pr,mainnet:Pr,morden:{chainId:2,name:"morden"},ropsten:Nr,testnet:Nr,rinkeby:{chainId:4,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"rinkeby",_defaultProvider:_r("rinkeby")},kovan:{chainId:42,name:"kovan",_defaultProvider:_r("kovan")},goerli:{chainId:5,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"goerli",_defaultProvider:_r("goerli")},kintsugi:{chainId:1337702,name:"kintsugi"},classic:{chainId:61,name:"classic",_defaultProvider:Sr("https://www.ethercluster.com/etc","classic")},classicMorden:{chainId:62,name:"classicMorden"},classicMordor:Mr,classicTestnet:Mr,classicKotti:{chainId:6,name:"classicKotti",_defaultProvider:Sr("https://www.ethercluster.com/kotti","classicKotti")},xdai:{chainId:100,name:"xdai"},matic:{chainId:137,name:"matic",_defaultProvider:_r("matic")},maticmum:{chainId:80001,name:"maticmum"},optimism:{chainId:10,name:"optimism",_defaultProvider:_r("optimism")},"optimism-kovan":{chainId:69,name:"optimism-kovan"},"optimism-goerli":{chainId:420,name:"optimism-goerli"},arbitrum:{chainId:42161,name:"arbitrum"},"arbitrum-rinkeby":{chainId:421611,name:"arbitrum-rinkeby"},bnb:{chainId:56,name:"bnb"},bnbt:{chainId:97,name:"bnbt"}};function Ar(e){return"0x"+Xe().sha256().update(L(e)).digest("hex")}new h("sha2/5.6.1");var Fr=r(882),Rr=r.n(Fr);const Ir=new h(E);class Tr{constructor(){this.formats=this.getDefaultFormats()}getDefaultFormats(){const e={},t=this.address.bind(this),r=this.bigNumber.bind(this),n=this.blockTag.bind(this),i=this.data.bind(this),o=this.hash.bind(this),a=this.hex.bind(this),s=this.number.bind(this),l=this.type.bind(this);return e.transaction={hash:o,type:l,accessList:Tr.allowNull(this.accessList.bind(this),null),blockHash:Tr.allowNull(o,null),blockNumber:Tr.allowNull(s,null),transactionIndex:Tr.allowNull(s,null),confirmations:Tr.allowNull(s,null),from:t,gasPrice:Tr.allowNull(r),maxPriorityFeePerGas:Tr.allowNull(r),maxFeePerGas:Tr.allowNull(r),gasLimit:r,to:Tr.allowNull(t,null),value:r,nonce:s,data:i,r:Tr.allowNull(this.uint256),s:Tr.allowNull(this.uint256),v:Tr.allowNull(s),creates:Tr.allowNull(t,null),raw:Tr.allowNull(i)},e.transactionRequest={from:Tr.allowNull(t),nonce:Tr.allowNull(s),gasLimit:Tr.allowNull(r),gasPrice:Tr.allowNull(r),maxPriorityFeePerGas:Tr.allowNull(r),maxFeePerGas:Tr.allowNull(r),to:Tr.allowNull(t),value:Tr.allowNull(r),data:Tr.allowNull((e=>this.data(e,!0))),type:Tr.allowNull(s),accessList:Tr.allowNull(this.accessList.bind(this),null)},e.receiptLog={transactionIndex:s,blockNumber:s,transactionHash:o,address:t,topics:Tr.arrayOf(o),data:i,logIndex:s,blockHash:o},e.receipt={to:Tr.allowNull(this.address,null),from:Tr.allowNull(this.address,null),contractAddress:Tr.allowNull(t,null),transactionIndex:s,root:Tr.allowNull(a),gasUsed:r,logsBloom:Tr.allowNull(i),blockHash:o,transactionHash:o,logs:Tr.arrayOf(this.receiptLog.bind(this)),blockNumber:s,confirmations:Tr.allowNull(s,null),cumulativeGasUsed:r,effectiveGasPrice:Tr.allowNull(r),status:Tr.allowNull(s),type:l},e.block={hash:Tr.allowNull(o),parentHash:o,number:s,timestamp:s,nonce:Tr.allowNull(a),difficulty:this.difficulty.bind(this),gasLimit:r,gasUsed:r,miner:Tr.allowNull(t),extraData:i,transactions:Tr.allowNull(Tr.arrayOf(o)),baseFeePerGas:Tr.allowNull(r)},e.blockWithTransactions=v(e.block),e.blockWithTransactions.transactions=Tr.allowNull(Tr.arrayOf(this.transactionResponse.bind(this))),e.filter={fromBlock:Tr.allowNull(n,void 0),toBlock:Tr.allowNull(n,void 0),blockHash:Tr.allowNull(o,void 0),address:Tr.allowNull(t,void 0),topics:Tr.allowNull(this.topics.bind(this),void 0)},e.filterLog={blockNumber:Tr.allowNull(s),blockHash:Tr.allowNull(o),transactionIndex:s,removed:Tr.allowNull(this.boolean.bind(this)),address:t,data:Tr.allowFalsish(i,"0x"),topics:Tr.arrayOf(o),transactionHash:o,logIndex:s},e}accessList(e){return Ht(e||[])}number(e){return"0x"===e?0:Z.from(e).toNumber()}type(e){return"0x"===e||null==e?0:Z.from(e).toNumber()}bigNumber(e){return Z.from(e)}boolean(e){if("boolean"==typeof e)return e;if("string"==typeof e){if("true"===(e=e.toLowerCase()))return!0;if("false"===e)return!1}throw new Error("invalid boolean - "+e)}hex(e,t){return"string"==typeof e&&(t||"0x"===e.substring(0,2)||(e="0x"+e),D(e))?e.toLowerCase():Ir.throwArgumentError("invalid hash","value",e)}data(e,t){const r=this.hex(e,t);if(r.length%2!=0)throw new Error("invalid data; odd-length - "+e);return r}address(e){return we(e)}callAddress(e){if(!D(e,32))return null;const t=we(q(e,12));return"0x0000000000000000000000000000000000000000"===t?null:t}contractAddress(e){return function(e){let t=null;try{t=we(e.from)}catch(t){me.throwArgumentError("missing from address","transaction",e)}return we(q(ae(fe([t,z(L(Z.from(e.nonce).toHexString()))])),12))}(e)}blockTag(e){if(null==e)return"latest";if("earliest"===e)return"0x0";if("latest"===e||"pending"===e)return e;if("number"==typeof e||D(e))return H(e);throw new Error("invalid blockTag")}hash(e,t){const r=this.hex(e,t);return 32!==V(r)?Ir.throwArgumentError("invalid hash","value",e):r}difficulty(e){if(null==e)return null;const t=Z.from(e);try{return t.toNumber()}catch(e){}return null}uint256(e){if(!D(e))throw new Error("invalid uint256");return W(e,32)}_block(e,t){null!=e.author&&null==e.miner&&(e.miner=e.author);const r=null!=e._difficulty?e._difficulty:e.difficulty,n=Tr.check(t,e);return n._difficulty=null==r?null:Z.from(r),n}block(e){return this._block(e,this.formats.block)}blockWithTransactions(e){return this._block(e,this.formats.blockWithTransactions)}transactionRequest(e){return Tr.check(this.formats.transactionRequest,e)}transactionResponse(e){null!=e.gas&&null==e.gasLimit&&(e.gasLimit=e.gas),e.to&&Z.from(e.to).isZero()&&(e.to="0x0000000000000000000000000000000000000000"),null!=e.input&&null==e.data&&(e.data=e.input),null==e.to&&null==e.creates&&(e.creates=this.contractAddress(e)),1!==e.type&&2!==e.type||null!=e.accessList||(e.accessList=[]);const t=Tr.check(this.formats.transaction,e);if(null!=e.chainId){let r=e.chainId;D(r)&&(r=Z.from(r).toNumber()),t.chainId=r}else{let r=e.networkId;null==r&&null==t.v&&(r=e.chainId),D(r)&&(r=Z.from(r).toNumber()),"number"!=typeof r&&null!=t.v&&(r=(t.v-35)/2,r<0&&(r=0),r=parseInt(r)),"number"!=typeof r&&(r=0),t.chainId=r}return t.blockHash&&"x"===t.blockHash.replace(/0/g,"")&&(t.blockHash=null),t}transaction(e){return function(e){const t=L(e);if(t[0]>127)return function(e){const t=pe(e);9!==t.length&&6!==t.length&&zt.throwArgumentError("invalid raw transaction","rawTransaction",e);const r={nonce:jt(t[0]).toNumber(),gasPrice:jt(t[1]),gasLimit:jt(t[2]),to:Ut(t[3]),value:jt(t[4]),data:t[5],chainId:0};if(6===t.length)return r;try{r.v=Z.from(t[6]).toNumber()}catch(e){return r}if(r.r=W(t[7],32),r.s=W(t[8],32),Z.from(r.r).isZero()&&Z.from(r.s).isZero())r.chainId=r.v,r.v=0;else{r.chainId=Math.floor((r.v-35)/2),r.chainId<0&&(r.chainId=0);let n=r.v-27;const i=t.slice(0,6);0!==r.chainId&&(i.push(j(r.chainId)),i.push("0x"),i.push("0x"),n-=2*r.chainId+8);const o=ae(fe(i));try{r.from=Vt(o,{r:j(r.r),s:j(r.s),recoveryParam:n})}catch(e){}r.hash=ae(e)}return r.type=null,r}(t);switch(t[0]){case 1:return function(e){const t=pe(e.slice(1));8!==t.length&&11!==t.length&&zt.throwArgumentError("invalid component count for transaction type: 1","payload",j(e));const r={type:1,chainId:jt(t[0]).toNumber(),nonce:jt(t[1]).toNumber(),gasPrice:jt(t[2]),gasLimit:jt(t[3]),to:Ut(t[4]),value:jt(t[5]),data:t[6],accessList:Ht(t[7])};return 8===t.length||(r.hash=ae(e),Qt(r,t.slice(8),Kt)),r}(t);case 2:return function(e){const t=pe(e.slice(1));9!==t.length&&12!==t.length&&zt.throwArgumentError("invalid component count for transaction type: 2","payload",j(e));const r=jt(t[2]),n=jt(t[3]),i={type:2,chainId:jt(t[0]).toNumber(),nonce:jt(t[1]).toNumber(),maxPriorityFeePerGas:r,maxFeePerGas:n,gasPrice:null,gasLimit:jt(t[4]),to:Ut(t[5]),value:jt(t[6]),data:t[7],accessList:Ht(t[8])};return 9===t.length||(i.hash=ae(e),Qt(i,t.slice(9),Gt)),i}(t)}return zt.throwError(`unsupported transaction type: ${t[0]}`,h.errors.UNSUPPORTED_OPERATION,{operation:"parseTransaction",transactionType:t[0]})}(e)}receiptLog(e){return Tr.check(this.formats.receiptLog,e)}receipt(e){const t=Tr.check(this.formats.receipt,e);if(null!=t.root)if(t.root.length<=4){const e=Z.from(t.root).toNumber();0===e||1===e?(null!=t.status&&t.status!==e&&Ir.throwArgumentError("alt-root-status/status mismatch","value",{root:t.root,status:t.status}),t.status=e,delete t.root):Ir.throwArgumentError("invalid alt-root-status","value.root",t.root)}else 66!==t.root.length&&Ir.throwArgumentError("invalid root hash","value.root",t.root);return null!=t.status&&(t.byzantium=!0),t}topics(e){return Array.isArray(e)?e.map((e=>this.topics(e))):null!=e?this.hash(e,!0):null}filter(e){return Tr.check(this.formats.filter,e)}filterLog(e){return Tr.check(this.formats.filterLog,e)}static check(e,t){const r={};for(const n in e)try{const i=e[n](t[n]);void 0!==i&&(r[n]=i)}catch(e){throw e.checkKey=n,e.checkValue=t[n],e}return r}static allowNull(e,t){return function(r){return null==r?t:e(r)}}static allowFalsish(e,t){return function(r){return r?e(r):t}}static arrayOf(e){return function(t){if(!Array.isArray(t))throw new Error("not an array");const r=[];return t.forEach((function(t){r.push(e(t))})),r}}}var Or=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function a(e){try{l(n.next(e))}catch(e){o(e)}}function s(e){try{l(n.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}l((n=n.apply(e,t||[])).next())}))};const Lr=new h(E);function Br(e){return null==e?"null":(32!==V(e)&&Lr.throwArgumentError("invalid topic","topic",e),e.toLowerCase())}function zr(e){for(e=e.slice();e.length>0&&null==e[e.length-1];)e.pop();return e.map((e=>{if(Array.isArray(e)){const t={};e.forEach((e=>{t[Br(e)]=!0}));const r=Object.keys(t);return r.sort(),r.join("|")}return Br(e)})).join("&")}function Dr(e){if("string"==typeof e){if(32===V(e=e.toLowerCase()))return"tx:"+e;if(-1===e.indexOf(":"))return e}else{if(Array.isArray(e))return"filter:*:"+zr(e);if(class extends class{constructor(e){for(const t in e)this[t]=k(e[t])}}{static isForkEvent(e){return!(!e||!e._isForkEvent)}}.isForkEvent(e))throw Lr.warn("not implemented"),new Error("not implemented");if(e&&"object"==typeof e)return"filter:"+(e.address||"*")+":"+zr(e.topics||[])}throw new Error("invalid event - "+e)}function Ur(){return(new Date).getTime()}function jr(e){return new Promise((t=>{setTimeout(t,e)}))}const Vr=["block","network","pending","poll"];class qr{constructor(e,t,r){p(this,"tag",e),p(this,"listener",t),p(this,"once",r),this._lastBlockNumber=-2,this._inflight=!1}get event(){switch(this.type){case"tx":return this.hash;case"filter":return this.filter}return this.tag}get type(){return this.tag.split(":")[0]}get hash(){const e=this.tag.split(":");return"tx"!==e[0]?null:e[1]}get filter(){const e=this.tag.split(":");if("filter"!==e[0])return null;const t=e[1],r=""===(n=e[2])?[]:n.split(/&/g).map((e=>{if(""===e)return[];const t=e.split("|").map((e=>"null"===e?null:e));return 1===t.length?t[0]:t}));var n;const i={};return r.length>0&&(i.topics=r),t&&"*"!==t&&(i.address=t),i}pollable(){return this.tag.indexOf(":")>=0||Vr.indexOf(this.tag)>=0}}const $r={0:{symbol:"btc",p2pkh:0,p2sh:5,prefix:"bc"},2:{symbol:"ltc",p2pkh:48,p2sh:50,prefix:"ltc"},3:{symbol:"doge",p2pkh:30,p2sh:22},60:{symbol:"eth",ilk:"eth"},61:{symbol:"etc",ilk:"eth"},700:{symbol:"xdai",ilk:"eth"}};function Hr(e){return W(Z.from(e).toHexString(),32)}function Wr(e){return sr.encode(B([e,q(Ar(Ar(e)),0,4)]))}const Gr=new RegExp("^(ipfs)://(.*)$","i"),Kr=[new RegExp("^(https)://(.*)$","i"),new RegExp("^(data):(.*)$","i"),Gr,new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$","i")];function Qr(e,t){try{return Ae(Xr(e,t))}catch(e){}return null}function Xr(e,t){if("0x"===e)return null;const r=Z.from(q(e,t,t+32)).toNumber(),n=Z.from(q(e,r,r+32)).toNumber();return q(e,r+32,r+32+n)}function Jr(e){return e.match(/^ipfs:\/\/ipfs\//i)?e=e.substring(12):e.match(/^ipfs:\/\//i)?e=e.substring(7):Lr.throwArgumentError("unsupported IPFS format","link",e),`https://gateway.ipfs.io/ipfs/${e}`}function Yr(e){const t=L(e);if(t.length>32)throw new Error("internal; should not happen");const r=new Uint8Array(32);return r.set(t,32-t.length),r}function Zr(e){if(e.length%32==0)return e;const t=new Uint8Array(32*Math.ceil(e.length/32));return t.set(e),t}function en(e){const t=[];let r=0;for(let n=0;n<e.length;n++)t.push(null),r+=32;for(let n=0;n<e.length;n++){const i=L(e[n]);t[n]=Yr(r),t.push(Yr(i.length)),t.push(Zr(i)),r+=32+32*Math.ceil(i.length/32)}return $(t)}class tn{constructor(e,t,r,n){p(this,"provider",e),p(this,"name",r),p(this,"address",e.formatter.address(t)),p(this,"_resolvedAddress",n)}supportsWildcard(){return this._supportsEip2544||(this._supportsEip2544=this.provider.call({to:this.address,data:"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000"}).then((e=>Z.from(e).eq(1))).catch((e=>{if(e.code===h.errors.CALL_EXCEPTION)return!1;throw this._supportsEip2544=null,e}))),this._supportsEip2544}_fetch(e,t){return Or(this,void 0,void 0,(function*(){const r={to:this.address,ccipReadEnabled:!0,data:$([e,Er(this.name),t||"0x"])};let n=!1;var i;(yield this.supportsWildcard())&&(n=!0,r.data=$(["0x9061b923",en([(i=this.name,j(B(i.split(".").map((e=>{const t=Me("_"+yr(e));return t[0]=t.length-1,t}))))+"00"),r.data])]));try{let e=yield this.provider.call(r);return L(e).length%32==4&&Lr.throwError("resolver threw error",h.errors.CALL_EXCEPTION,{transaction:r,data:e}),n&&(e=Xr(e,0)),e}catch(e){if(e.code===h.errors.CALL_EXCEPTION)return null;throw e}}))}_fetchBytes(e,t){return Or(this,void 0,void 0,(function*(){const r=yield this._fetch(e,t);return null!=r?Xr(r,0):null}))}_getAddress(e,t){const r=$r[String(e)];if(null==r&&Lr.throwError(`unsupported coin type: ${e}`,h.errors.UNSUPPORTED_OPERATION,{operation:`getAddress(${e})`}),"eth"===r.ilk)return this.provider.formatter.address(t);const n=L(t);if(null!=r.p2pkh){const e=t.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);if(e){const t=parseInt(e[1],16);if(e[2].length===2*t&&t>=1&&t<=75)return Wr(B([[r.p2pkh],"0x"+e[2]]))}}if(null!=r.p2sh){const e=t.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);if(e){const t=parseInt(e[1],16);if(e[2].length===2*t&&t>=1&&t<=75)return Wr(B([[r.p2sh],"0x"+e[2]]))}}if(null!=r.prefix){const e=n[1];let t=n[0];if(0===t?20!==e&&32!==e&&(t=-1):t=-1,t>=0&&n.length===2+e&&e>=1&&e<=75){const e=Rr().toWords(n.slice(2));return e.unshift(t),Rr().encode(r.prefix,e)}}return null}getAddress(e){return Or(this,void 0,void 0,(function*(){if(null==e&&(e=60),60===e)try{const e=yield this._fetch("0x3b3b57de");return"0x"===e||"0x0000000000000000000000000000000000000000000000000000000000000000"===e?null:this.provider.formatter.callAddress(e)}catch(e){if(e.code===h.errors.CALL_EXCEPTION)return null;throw e}const t=yield this._fetchBytes("0xf1cb7e06",Hr(e));if(null==t||"0x"===t)return null;const r=this._getAddress(e,t);return null==r&&Lr.throwError("invalid or unsupported coin data",h.errors.UNSUPPORTED_OPERATION,{operation:`getAddress(${e})`,coinType:e,data:t}),r}))}getAvatar(){return Or(this,void 0,void 0,(function*(){const e=[{type:"name",content:this.name}];try{const t=yield this.getText("avatar");if(null==t)return null;for(let r=0;r<Kr.length;r++){const n=t.match(Kr[r]);if(null==n)continue;const i=n[1].toLowerCase();switch(i){case"https":return e.push({type:"url",content:t}),{linkage:e,url:t};case"data":return e.push({type:"data",content:t}),{linkage:e,url:t};case"ipfs":return e.push({type:"ipfs",content:t}),{linkage:e,url:Jr(t)};case"erc721":case"erc1155":{const r="erc721"===i?"0xc87b56dd":"0x0e89341c";e.push({type:i,content:t});const o=this._resolvedAddress||(yield this.getAddress()),a=(n[2]||"").split("/");if(2!==a.length)return null;const s=yield this.provider.formatter.address(a[0]),l=W(Z.from(a[1]).toHexString(),32);if("erc721"===i){const t=this.provider.formatter.callAddress(yield this.provider.call({to:s,data:$(["0x6352211e",l])}));if(o!==t)return null;e.push({type:"owner",content:t})}else if("erc1155"===i){const t=Z.from(yield this.provider.call({to:s,data:$(["0x00fdd58e",W(o,32),l])}));if(t.isZero())return null;e.push({type:"balance",content:t.toString()})}const u={to:this.provider.formatter.address(a[0]),data:$([r,l])};let c=Qr(yield this.provider.call(u),0);if(null==c)return null;e.push({type:"metadata-url-base",content:c}),"erc1155"===i&&(c=c.replace("{id}",l.substring(2)),e.push({type:"metadata-url-expanded",content:c})),c.match(/^ipfs:/i)&&(c=Jr(c)),e.push({type:"metadata-url",content:c});const f=yield rr(c);if(!f)return null;e.push({type:"metadata",content:JSON.stringify(f)});let h=f.image;if("string"!=typeof h)return null;if(h.match(/^(https:\/\/|data:)/i));else{if(null==h.match(Gr))return null;e.push({type:"url-ipfs",content:h}),h=Jr(h)}return e.push({type:"url",content:h}),{linkage:e,url:h}}}}}catch(e){}return null}))}getContentHash(){return Or(this,void 0,void 0,(function*(){const e=yield this._fetchBytes("0xbc1c58d1");if(null==e||"0x"===e)return null;const t=e.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);if(t){const e=parseInt(t[3],16);if(t[4].length===2*e)return"ipfs://"+sr.encode("0x"+t[1])}const r=e.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);if(r){const e=parseInt(r[3],16);if(r[4].length===2*e)return"ipns://"+sr.encode("0x"+r[1])}const n=e.match(/^0xe40101fa011b20([0-9a-f]*)$/);if(n&&64===n[1].length)return"bzz://"+n[1];const i=e.match(/^0x90b2c605([0-9a-f]*)$/);if(i&&68===i[1].length){const e={"=":"","+":"-","/":"_"};return"sia://"+Jt("0x"+i[1]).replace(/[=+\/]/g,(t=>e[t]))}return Lr.throwError("invalid or unsupported content hash data",h.errors.UNSUPPORTED_OPERATION,{operation:"getContentHash()",data:e})}))}getText(e){return Or(this,void 0,void 0,(function*(){let t=Me(e);t=B([Hr(64),Hr(t.length),t]),t.length%32!=0&&(t=B([t,W("0x",32-e.length%32)]));const r=yield this._fetchBytes("0x59d1d43c",j(t));return null==r||"0x"===r?null:Ae(r)}))}}let rn=null,nn=1;class on extends or{constructor(e){if(super(),this._events=[],this._emitted={block:-2},this.disableCcipRead=!1,this.formatter=new.target.getFormatter(),p(this,"anyNetwork","any"===e),this.anyNetwork&&(e=this.detectNetwork()),e instanceof Promise)this._networkPromise=e,e.catch((e=>{})),this._ready().catch((e=>{}));else{const t=m(new.target,"getNetwork")(e);t?(p(this,"_network",t),this.emit("network",t,null)):Lr.throwArgumentError("invalid network","network",e)}this._maxInternalBlockNumber=-1024,this._lastBlockNumber=-2,this._maxFilterBlockRange=10,this._pollingInterval=4e3,this._fastQueryDate=0}_ready(){return Or(this,void 0,void 0,(function*(){if(null==this._network){let e=null;if(this._networkPromise)try{e=yield this._networkPromise}catch(e){}null==e&&(e=yield this.detectNetwork()),e||Lr.throwError("no network detected",h.errors.UNKNOWN_ERROR,{}),null==this._network&&(this.anyNetwork?this._network=e:p(this,"_network",e),this.emit("network",e,null))}return this._network}))}get ready(){return nr((()=>this._ready().then((e=>e),(e=>{if(e.code!==h.errors.NETWORK_ERROR||"noNetwork"!==e.event)throw e}))))}static getFormatter(){return null==rn&&(rn=new Tr),rn}static getNetwork(e){return function(e){if(null==e)return null;if("number"==typeof e){for(const t in Cr){const r=Cr[t];if(r.chainId===e)return{name:r.name,chainId:r.chainId,ensAddress:r.ensAddress||null,_defaultProvider:r._defaultProvider||null}}return{chainId:e,name:"unknown"}}if("string"==typeof e){const t=Cr[e];return null==t?null:{name:t.name,chainId:t.chainId,ensAddress:t.ensAddress,_defaultProvider:t._defaultProvider||null}}const t=Cr[e.name];if(!t)return"number"!=typeof e.chainId&&xr.throwArgumentError("invalid network chainId","network",e),e;0!==e.chainId&&e.chainId!==t.chainId&&xr.throwArgumentError("network chainId mismatch","network",e);let r=e._defaultProvider||null;var n;return null==r&&t._defaultProvider&&(r=(n=t._defaultProvider)&&"function"==typeof n.renetwork?t._defaultProvider.renetwork(e):t._defaultProvider),{name:e.name,chainId:t.chainId,ensAddress:e.ensAddress||t.ensAddress||null,_defaultProvider:r}}(null==e?"homestead":e)}ccipReadFetch(e,t,r){return Or(this,void 0,void 0,(function*(){if(this.disableCcipRead||0===r.length)return null;const n=e.to.toLowerCase(),i=t.toLowerCase(),o=[];for(let e=0;e<r.length;e++){const t=r[e],a=t.replace("{sender}",n).replace("{data}",i),s=t.indexOf("{data}")>=0?null:JSON.stringify({data:i,sender:n}),l=yield rr({url:a,errorPassThrough:!0},s,((e,t)=>(e.status=t.statusCode,e)));if(l.data)return l.data;const u=l.message||"unknown error";if(l.status>=400&&l.status<500)return Lr.throwError(`response not found during CCIP fetch: ${u}`,h.errors.SERVER_ERROR,{url:t,errorMessage:u});o.push(u)}return Lr.throwError(`error encountered during CCIP fetch: ${o.map((e=>JSON.stringify(e))).join(", ")}`,h.errors.SERVER_ERROR,{urls:r,errorMessages:o})}))}_getInternalBlockNumber(e){return Or(this,void 0,void 0,(function*(){if(yield this._ready(),e>0)for(;this._internalBlockNumber;){const t=this._internalBlockNumber;try{const r=yield t;if(Ur()-r.respTime<=e)return r.blockNumber;break}catch(e){if(this._internalBlockNumber===t)break}}const t=Ur(),r=g({blockNumber:this.perform("getBlockNumber",{}),networkError:this.getNetwork().then((e=>null),(e=>e))}).then((({blockNumber:e,networkError:n})=>{if(n)throw this._internalBlockNumber===r&&(this._internalBlockNumber=null),n;const i=Ur();return(e=Z.from(e).toNumber())<this._maxInternalBlockNumber&&(e=this._maxInternalBlockNumber),this._maxInternalBlockNumber=e,this._setFastBlockNumber(e),{blockNumber:e,reqTime:t,respTime:i}}));return this._internalBlockNumber=r,r.catch((e=>{this._internalBlockNumber===r&&(this._internalBlockNumber=null)})),(yield r).blockNumber}))}poll(){return Or(this,void 0,void 0,(function*(){const e=nn++,t=[];let r=null;try{r=yield this._getInternalBlockNumber(100+this.pollingInterval/2)}catch(e){return void this.emit("error",e)}if(this._setFastBlockNumber(r),this.emit("poll",e,r),r!==this._lastBlockNumber){if(-2===this._emitted.block&&(this._emitted.block=r-1),Math.abs(this._emitted.block-r)>1e3)Lr.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${r})`),this.emit("error",Lr.makeError("network block skew detected",h.errors.NETWORK_ERROR,{blockNumber:r,event:"blockSkew",previousBlockNumber:this._emitted.block})),this.emit("block",r);else for(let e=this._emitted.block+1;e<=r;e++)this.emit("block",e);this._emitted.block!==r&&(this._emitted.block=r,Object.keys(this._emitted).forEach((e=>{if("block"===e)return;const t=this._emitted[e];"pending"!==t&&r-t>12&&delete this._emitted[e]}))),-2===this._lastBlockNumber&&(this._lastBlockNumber=r-1),this._events.forEach((e=>{switch(e.type){case"tx":{const r=e.hash;let n=this.getTransactionReceipt(r).then((e=>e&&null!=e.blockNumber?(this._emitted["t:"+r]=e.blockNumber,this.emit(r,e),null):null)).catch((e=>{this.emit("error",e)}));t.push(n);break}case"filter":if(!e._inflight){e._inflight=!0;const n=e.filter;n.fromBlock=e._lastBlockNumber+1,n.toBlock=r,n.toBlock-this._maxFilterBlockRange>n.fromBlock&&(n.fromBlock=n.toBlock-this._maxFilterBlockRange);const i=this.getLogs(n).then((t=>{e._inflight=!1,0!==t.length&&t.forEach((t=>{t.blockNumber>e._lastBlockNumber&&(e._lastBlockNumber=t.blockNumber),this._emitted["b:"+t.blockHash]=t.blockNumber,this._emitted["t:"+t.transactionHash]=t.blockNumber,this.emit(n,t)}))})).catch((t=>{this.emit("error",t),e._inflight=!1}));t.push(i)}}})),this._lastBlockNumber=r,Promise.all(t).then((()=>{this.emit("didPoll",e)})).catch((e=>{this.emit("error",e)}))}else this.emit("didPoll",e)}))}resetEventsBlock(e){this._lastBlockNumber=e-1,this.polling&&this.poll()}get network(){return this._network}detectNetwork(){return Or(this,void 0,void 0,(function*(){return Lr.throwError("provider does not support network detection",h.errors.UNSUPPORTED_OPERATION,{operation:"provider.detectNetwork"})}))}getNetwork(){return Or(this,void 0,void 0,(function*(){const e=yield this._ready(),t=yield this.detectNetwork();if(e.chainId!==t.chainId){if(this.anyNetwork)return this._network=t,this._lastBlockNumber=-2,this._fastBlockNumber=null,this._fastBlockNumberPromise=null,this._fastQueryDate=0,this._emitted.block=-2,this._maxInternalBlockNumber=-1024,this._internalBlockNumber=null,this.emit("network",t,e),yield jr(0),this._network;const r=Lr.makeError("underlying network changed",h.errors.NETWORK_ERROR,{event:"changed",network:e,detectedNetwork:t});throw this.emit("error",r),r}return e}))}get blockNumber(){return this._getInternalBlockNumber(100+this.pollingInterval/2).then((e=>{this._setFastBlockNumber(e)}),(e=>{})),null!=this._fastBlockNumber?this._fastBlockNumber:-1}get polling(){return null!=this._poller}set polling(e){e&&!this._poller?(this._poller=setInterval((()=>{this.poll()}),this.pollingInterval),this._bootstrapPoll||(this._bootstrapPoll=setTimeout((()=>{this.poll(),this._bootstrapPoll=setTimeout((()=>{this._poller||this.poll(),this._bootstrapPoll=null}),this.pollingInterval)}),0))):!e&&this._poller&&(clearInterval(this._poller),this._poller=null)}get pollingInterval(){return this._pollingInterval}set pollingInterval(e){if("number"!=typeof e||e<=0||parseInt(String(e))!=e)throw new Error("invalid polling interval");this._pollingInterval=e,this._poller&&(clearInterval(this._poller),this._poller=setInterval((()=>{this.poll()}),this._pollingInterval))}_getFastBlockNumber(){const e=Ur();return e-this._fastQueryDate>2*this._pollingInterval&&(this._fastQueryDate=e,this._fastBlockNumberPromise=this.getBlockNumber().then((e=>((null==this._fastBlockNumber||e>this._fastBlockNumber)&&(this._fastBlockNumber=e),this._fastBlockNumber)))),this._fastBlockNumberPromise}_setFastBlockNumber(e){null!=this._fastBlockNumber&&e<this._fastBlockNumber||(this._fastQueryDate=Ur(),(null==this._fastBlockNumber||e>this._fastBlockNumber)&&(this._fastBlockNumber=e,this._fastBlockNumberPromise=Promise.resolve(e)))}waitForTransaction(e,t,r){return Or(this,void 0,void 0,(function*(){return this._waitForTransaction(e,null==t?1:t,r||0,null)}))}_waitForTransaction(e,t,r,n){return Or(this,void 0,void 0,(function*(){const i=yield this.getTransactionReceipt(e);return(i?i.confirmations:0)>=t?i:new Promise(((i,o)=>{const a=[];let s=!1;const l=function(){return!!s||(s=!0,a.forEach((e=>{e()})),!1)},u=e=>{e.confirmations<t||l()||i(e)};if(this.on(e,u),a.push((()=>{this.removeListener(e,u)})),n){let r=n.startBlock,i=null;const u=a=>Or(this,void 0,void 0,(function*(){s||(yield jr(1e3),this.getTransactionCount(n.from).then((c=>Or(this,void 0,void 0,(function*(){if(!s){if(c<=n.nonce)r=a;else{{const t=yield this.getTransaction(e);if(t&&null!=t.blockNumber)return}for(null==i&&(i=r-3,i<n.startBlock&&(i=n.startBlock));i<=a;){if(s)return;const r=yield this.getBlockWithTransactions(i);for(let i=0;i<r.transactions.length;i++){const a=r.transactions[i];if(a.hash===e)return;if(a.from===n.from&&a.nonce===n.nonce){if(s)return;const r=yield this.waitForTransaction(a.hash,t);if(l())return;let i="replaced";return a.data===n.data&&a.to===n.to&&a.value.eq(n.value)?i="repriced":"0x"===a.data&&a.from===a.to&&a.value.isZero()&&(i="cancelled"),void o(Lr.makeError("transaction was replaced",h.errors.TRANSACTION_REPLACED,{cancelled:"replaced"===i||"cancelled"===i,reason:i,replacement:this._wrapTransaction(a),hash:e,receipt:r}))}}i++}}s||this.once("block",u)}}))),(e=>{s||this.once("block",u)})))}));if(s)return;this.once("block",u),a.push((()=>{this.removeListener("block",u)}))}if("number"==typeof r&&r>0){const e=setTimeout((()=>{l()||o(Lr.makeError("timeout exceeded",h.errors.TIMEOUT,{timeout:r}))}),r);e.unref&&e.unref(),a.push((()=>{clearTimeout(e)}))}}))}))}getBlockNumber(){return Or(this,void 0,void 0,(function*(){return this._getInternalBlockNumber(0)}))}getGasPrice(){return Or(this,void 0,void 0,(function*(){yield this.getNetwork();const e=yield this.perform("getGasPrice",{});try{return Z.from(e)}catch(t){return Lr.throwError("bad result from backend",h.errors.SERVER_ERROR,{method:"getGasPrice",result:e,error:t})}}))}getBalance(e,t){return Or(this,void 0,void 0,(function*(){yield this.getNetwork();const r=yield g({address:this._getAddress(e),blockTag:this._getBlockTag(t)}),n=yield this.perform("getBalance",r);try{return Z.from(n)}catch(e){return Lr.throwError("bad result from backend",h.errors.SERVER_ERROR,{method:"getBalance",params:r,result:n,error:e})}}))}getTransactionCount(e,t){return Or(this,void 0,void 0,(function*(){yield this.getNetwork();const r=yield g({address:this._getAddress(e),blockTag:this._getBlockTag(t)}),n=yield this.perform("getTransactionCount",r);try{return Z.from(n).toNumber()}catch(e){return Lr.throwError("bad result from backend",h.errors.SERVER_ERROR,{method:"getTransactionCount",params:r,result:n,error:e})}}))}getCode(e,t){return Or(this,void 0,void 0,(function*(){yield this.getNetwork();const r=yield g({address:this._getAddress(e),blockTag:this._getBlockTag(t)}),n=yield this.perform("getCode",r);try{return j(n)}catch(e){return Lr.throwError("bad result from backend",h.errors.SERVER_ERROR,{method:"getCode",params:r,result:n,error:e})}}))}getStorageAt(e,t,r){return Or(this,void 0,void 0,(function*(){yield this.getNetwork();const n=yield g({address:this._getAddress(e),blockTag:this._getBlockTag(r),position:Promise.resolve(t).then((e=>H(e)))}),i=yield this.perform("getStorageAt",n);try{return j(i)}catch(e){return Lr.throwError("bad result from backend",h.errors.SERVER_ERROR,{method:"getStorageAt",params:n,result:i,error:e})}}))}_wrapTransaction(e,t,r){if(null!=t&&32!==V(t))throw new Error("invalid response - sendTransaction");const n=e;return null!=t&&e.hash!==t&&Lr.throwError("Transaction hash mismatch from Provider.sendTransaction.",h.errors.UNKNOWN_ERROR,{expectedHash:e.hash,returnedHash:t}),n.wait=(t,n)=>Or(this,void 0,void 0,(function*(){let i;null==t&&(t=1),null==n&&(n=0),0!==t&&null!=r&&(i={data:e.data,from:e.from,nonce:e.nonce,to:e.to,value:e.value,startBlock:r});const o=yield this._waitForTransaction(e.hash,t,n,i);return null==o&&0===t?null:(this._emitted["t:"+e.hash]=o.blockNumber,0===o.status&&Lr.throwError("transaction failed",h.errors.CALL_EXCEPTION,{transactionHash:e.hash,transaction:e,receipt:o}),o)})),n}sendTransaction(e){return Or(this,void 0,void 0,(function*(){yield this.getNetwork();const t=yield Promise.resolve(e).then((e=>j(e))),r=this.formatter.transaction(e);null==r.confirmations&&(r.confirmations=0);const n=yield this._getInternalBlockNumber(100+2*this.pollingInterval);try{const e=yield this.perform("sendTransaction",{signedTransaction:t});return this._wrapTransaction(r,e,n)}catch(e){throw e.transaction=r,e.transactionHash=r.hash,e}}))}_getTransactionRequest(e){return Or(this,void 0,void 0,(function*(){const t=yield e,r={};return["from","to"].forEach((e=>{null!=t[e]&&(r[e]=Promise.resolve(t[e]).then((e=>e?this._getAddress(e):null)))})),["gasLimit","gasPrice","maxFeePerGas","maxPriorityFeePerGas","value"].forEach((e=>{null!=t[e]&&(r[e]=Promise.resolve(t[e]).then((e=>e?Z.from(e):null)))})),["type"].forEach((e=>{null!=t[e]&&(r[e]=Promise.resolve(t[e]).then((e=>null!=e?e:null)))})),t.accessList&&(r.accessList=this.formatter.accessList(t.accessList)),["data"].forEach((e=>{null!=t[e]&&(r[e]=Promise.resolve(t[e]).then((e=>e?j(e):null)))})),this.formatter.transactionRequest(yield g(r))}))}_getFilter(e){return Or(this,void 0,void 0,(function*(){e=yield e;const t={};return null!=e.address&&(t.address=this._getAddress(e.address)),["blockHash","topics"].forEach((r=>{null!=e[r]&&(t[r]=e[r])})),["fromBlock","toBlock"].forEach((r=>{null!=e[r]&&(t[r]=this._getBlockTag(e[r]))})),this.formatter.filter(yield g(t))}))}_call(e,t,r){return Or(this,void 0,void 0,(function*(){r>=10&&Lr.throwError("CCIP read exceeded maximum redirections",h.errors.SERVER_ERROR,{redirects:r,transaction:e});const n=e.to,i=yield this.perform("call",{transaction:e,blockTag:t});if(r>=0&&"latest"===t&&null!=n&&"0x556f1830"===i.substring(0,10)&&V(i)%32==4)try{const o=q(i,4),a=q(o,0,32);Z.from(a).eq(n)||Lr.throwError("CCIP Read sender did not match",h.errors.CALL_EXCEPTION,{name:"OffchainLookup",signature:"OffchainLookup(address,string[],bytes,bytes4,bytes)",transaction:e,data:i});const s=[],l=Z.from(q(o,32,64)).toNumber(),u=Z.from(q(o,l,l+32)).toNumber(),c=q(o,l+32);for(let t=0;t<u;t++){const r=Qr(c,32*t);null==r&&Lr.throwError("CCIP Read contained corrupt URL string",h.errors.CALL_EXCEPTION,{name:"OffchainLookup",signature:"OffchainLookup(address,string[],bytes,bytes4,bytes)",transaction:e,data:i}),s.push(r)}const f=Xr(o,64);Z.from(q(o,100,128)).isZero()||Lr.throwError("CCIP Read callback selector included junk",h.errors.CALL_EXCEPTION,{name:"OffchainLookup",signature:"OffchainLookup(address,string[],bytes,bytes4,bytes)",transaction:e,data:i});const d=q(o,96,100),p=Xr(o,128),m=yield this.ccipReadFetch(e,f,s);null==m&&Lr.throwError("CCIP Read disabled or provided no URLs",h.errors.CALL_EXCEPTION,{name:"OffchainLookup",signature:"OffchainLookup(address,string[],bytes,bytes4,bytes)",transaction:e,data:i});const g={to:n,data:$([d,en([m,p])])};return this._call(g,t,r+1)}catch(e){if(e.code===h.errors.SERVER_ERROR)throw e}try{return j(i)}catch(r){return Lr.throwError("bad result from backend",h.errors.SERVER_ERROR,{method:"call",params:{transaction:e,blockTag:t},result:i,error:r})}}))}call(e,t){return Or(this,void 0,void 0,(function*(){yield this.getNetwork();const r=yield g({transaction:this._getTransactionRequest(e),blockTag:this._getBlockTag(t),ccipReadEnabled:Promise.resolve(e.ccipReadEnabled)});return this._call(r.transaction,r.blockTag,r.ccipReadEnabled?0:-1)}))}estimateGas(e){return Or(this,void 0,void 0,(function*(){yield this.getNetwork();const t=yield g({transaction:this._getTransactionRequest(e)}),r=yield this.perform("estimateGas",t);try{return Z.from(r)}catch(e){return Lr.throwError("bad result from backend",h.errors.SERVER_ERROR,{method:"estimateGas",params:t,result:r,error:e})}}))}_getAddress(e){return Or(this,void 0,void 0,(function*(){"string"!=typeof(e=yield e)&&Lr.throwArgumentError("invalid address or ENS name","name",e);const t=yield this.resolveName(e);return null==t&&Lr.throwError("ENS name not configured",h.errors.UNSUPPORTED_OPERATION,{operation:`resolveName(${JSON.stringify(e)})`}),t}))}_getBlock(e,t){return Or(this,void 0,void 0,(function*(){yield this.getNetwork(),e=yield e;let r=-128;const n={includeTransactions:!!t};if(D(e,32))n.blockHash=e;else try{n.blockTag=yield this._getBlockTag(e),D(n.blockTag)&&(r=parseInt(n.blockTag.substring(2),16))}catch(t){Lr.throwArgumentError("invalid block hash or block tag","blockHashOrBlockTag",e)}return nr((()=>Or(this,void 0,void 0,(function*(){const e=yield this.perform("getBlock",n);if(null==e)return null!=n.blockHash&&null==this._emitted["b:"+n.blockHash]||null!=n.blockTag&&r>this._emitted.block?null:void 0;if(t){let t=null;for(let r=0;r<e.transactions.length;r++){const n=e.transactions[r];if(null==n.blockNumber)n.confirmations=0;else if(null==n.confirmations){null==t&&(t=yield this._getInternalBlockNumber(100+2*this.pollingInterval));let e=t-n.blockNumber+1;e<=0&&(e=1),n.confirmations=e}}const r=this.formatter.blockWithTransactions(e);return r.transactions=r.transactions.map((e=>this._wrapTransaction(e))),r}return this.formatter.block(e)}))),{oncePoll:this})}))}getBlock(e){return this._getBlock(e,!1)}getBlockWithTransactions(e){return this._getBlock(e,!0)}getTransaction(e){return Or(this,void 0,void 0,(function*(){yield this.getNetwork(),e=yield e;const t={transactionHash:this.formatter.hash(e,!0)};return nr((()=>Or(this,void 0,void 0,(function*(){const r=yield this.perform("getTransaction",t);if(null==r)return null==this._emitted["t:"+e]?null:void 0;const n=this.formatter.transactionResponse(r);if(null==n.blockNumber)n.confirmations=0;else if(null==n.confirmations){let e=(yield this._getInternalBlockNumber(100+2*this.pollingInterval))-n.blockNumber+1;e<=0&&(e=1),n.confirmations=e}return this._wrapTransaction(n)}))),{oncePoll:this})}))}getTransactionReceipt(e){return Or(this,void 0,void 0,(function*(){yield this.getNetwork(),e=yield e;const t={transactionHash:this.formatter.hash(e,!0)};return nr((()=>Or(this,void 0,void 0,(function*(){const r=yield this.perform("getTransactionReceipt",t);if(null==r)return null==this._emitted["t:"+e]?null:void 0;if(null==r.blockHash)return;const n=this.formatter.receipt(r);if(null==n.blockNumber)n.confirmations=0;else if(null==n.confirmations){let e=(yield this._getInternalBlockNumber(100+2*this.pollingInterval))-n.blockNumber+1;e<=0&&(e=1),n.confirmations=e}return n}))),{oncePoll:this})}))}getLogs(e){return Or(this,void 0,void 0,(function*(){yield this.getNetwork();const t=yield g({filter:this._getFilter(e)}),r=yield this.perform("getLogs",t);return r.forEach((e=>{null==e.removed&&(e.removed=!1)})),Tr.arrayOf(this.formatter.filterLog.bind(this.formatter))(r)}))}getEtherPrice(){return Or(this,void 0,void 0,(function*(){return yield this.getNetwork(),this.perform("getEtherPrice",{})}))}_getBlockTag(e){return Or(this,void 0,void 0,(function*(){if("number"==typeof(e=yield e)&&e<0){e%1&&Lr.throwArgumentError("invalid BlockTag","blockTag",e);let t=yield this._getInternalBlockNumber(100+2*this.pollingInterval);return t+=e,t<0&&(t=0),this.formatter.blockTag(t)}return this.formatter.blockTag(e)}))}getResolver(e){return Or(this,void 0,void 0,(function*(){let t=e;for(;;){if(""===t||"."===t)return null;if("eth"!==e&&"eth"===t)return null;const r=yield this._getResolver(t,"getResolver");if(null!=r){const n=new tn(this,r,e);return t===e||(yield n.supportsWildcard())?n:null}t=t.split(".").slice(1).join(".")}}))}_getResolver(e,t){return Or(this,void 0,void 0,(function*(){null==t&&(t="ENS");const r=yield this.getNetwork();r.ensAddress||Lr.throwError("network does not support ENS",h.errors.UNSUPPORTED_OPERATION,{operation:t,network:r.name});try{const t=yield this.call({to:r.ensAddress,data:"0x0178b8bf"+Er(e).substring(2)});return this.formatter.callAddress(t)}catch(e){}return null}))}resolveName(e){return Or(this,void 0,void 0,(function*(){e=yield e;try{return Promise.resolve(this.formatter.address(e))}catch(t){if(D(e))throw t}"string"!=typeof e&&Lr.throwArgumentError("invalid ENS name","name",e);const t=yield this.getResolver(e);return t?yield t.getAddress():null}))}lookupAddress(e){return Or(this,void 0,void 0,(function*(){e=yield e;const t=(e=this.formatter.address(e)).substring(2).toLowerCase()+".addr.reverse",r=yield this._getResolver(t,"lookupAddress");if(null==r)return null;const n=Qr(yield this.call({to:r,data:"0x691f3431"+Er(t).substring(2)}),0);return(yield this.resolveName(n))!=e?null:n}))}getAvatar(e){return Or(this,void 0,void 0,(function*(){let t=null;if(D(e)){const r=this.formatter.address(e).substring(2).toLowerCase()+".addr.reverse",n=yield this._getResolver(r,"getAvatar");if(!n)return null;t=new tn(this,n,r);try{const e=yield t.getAvatar();if(e)return e.url}catch(e){if(e.code!==h.errors.CALL_EXCEPTION)throw e}try{const e=Qr(yield this.call({to:n,data:"0x691f3431"+Er(r).substring(2)}),0);t=yield this.getResolver(e)}catch(e){if(e.code!==h.errors.CALL_EXCEPTION)throw e;return null}}else if(t=yield this.getResolver(e),!t)return null;const r=yield t.getAvatar();return null==r?null:r.url}))}perform(e,t){return Lr.throwError(e+" not implemented",h.errors.NOT_IMPLEMENTED,{operation:e})}_startEvent(e){this.polling=this._events.filter((e=>e.pollable())).length>0}_stopEvent(e){this.polling=this._events.filter((e=>e.pollable())).length>0}_addEventListener(e,t,r){const n=new qr(Dr(e),t,r);return this._events.push(n),this._startEvent(n),this}on(e,t){return this._addEventListener(e,t,!1)}once(e,t){return this._addEventListener(e,t,!0)}emit(e,...t){let r=!1,n=[],i=Dr(e);return this._events=this._events.filter((e=>e.tag!==i||(setTimeout((()=>{e.listener.apply(this,t)}),0),r=!0,!e.once||(n.push(e),!1)))),n.forEach((e=>{this._stopEvent(e)})),r}listenerCount(e){if(!e)return this._events.length;let t=Dr(e);return this._events.filter((e=>e.tag===t)).length}listeners(e){if(null==e)return this._events.map((e=>e.listener));let t=Dr(e);return this._events.filter((e=>e.tag===t)).map((e=>e.listener))}off(e,t){if(null==t)return this.removeAllListeners(e);const r=[];let n=!1,i=Dr(e);return this._events=this._events.filter((e=>e.tag!==i||e.listener!=t||!!n||(n=!0,r.push(e),!1))),r.forEach((e=>{this._stopEvent(e)})),this}removeAllListeners(e){let t=[];if(null==e)t=this._events,this._events=[];else{const r=Dr(e);this._events=this._events.filter((e=>e.tag!==r||(t.push(e),!1)))}return t.forEach((e=>{this._stopEvent(e)})),this}}var an=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function a(e){try{l(n.next(e))}catch(e){o(e)}}function s(e){try{l(n.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}l((n=n.apply(e,t||[])).next())}))};const sn=new h(E),ln=["call","estimateGas"];function un(e,t){if(null==e)return null;if("string"==typeof e.message&&e.message.match("reverted")){const r=D(e.data)?e.data:null;if(!t||r)return{message:e.message,data:r}}if("object"==typeof e){for(const r in e){const n=un(e[r],t);if(n)return n}return null}if("string"==typeof e)try{return un(JSON.parse(e),t)}catch(e){}return null}function cn(e,t,r){const n=r.transaction||r.signedTransaction;if("call"===e){const e=un(t,!0);if(e)return e.data;sn.throwError("missing revert data in call exception; Transaction reverted without a reason string",h.errors.CALL_EXCEPTION,{data:"0x",transaction:n,error:t})}if("estimateGas"===e){let r=un(t.body,!1);null==r&&(r=un(t,!1)),r&&sn.throwError("cannot estimate gas; transaction may fail or may require manual gas limit",h.errors.UNPREDICTABLE_GAS_LIMIT,{reason:r.message,method:e,transaction:n,error:t})}let i=t.message;throw t.code===h.errors.SERVER_ERROR&&t.error&&"string"==typeof t.error.message?i=t.error.message:"string"==typeof t.body?i=t.body:"string"==typeof t.responseText&&(i=t.responseText),i=(i||"").toLowerCase(),i.match(/insufficient funds|base fee exceeds gas limit/i)&&sn.throwError("insufficient funds for intrinsic transaction cost",h.errors.INSUFFICIENT_FUNDS,{error:t,method:e,transaction:n}),i.match(/nonce (is )?too low/i)&&sn.throwError("nonce has already been used",h.errors.NONCE_EXPIRED,{error:t,method:e,transaction:n}),i.match(/replacement transaction underpriced|transaction gas price.*too low/i)&&sn.throwError("replacement fee too low",h.errors.REPLACEMENT_UNDERPRICED,{error:t,method:e,transaction:n}),i.match(/only replay-protected/i)&&sn.throwError("legacy pre-eip-155 transactions not supported",h.errors.UNSUPPORTED_OPERATION,{error:t,method:e,transaction:n}),ln.indexOf(e)>=0&&i.match(/gas required exceeds allowance|always failing transaction|execution reverted/)&&sn.throwError("cannot estimate gas; transaction may fail or may require manual gas limit",h.errors.UNPREDICTABLE_GAS_LIMIT,{error:t,method:e,transaction:n}),t}function fn(e){return new Promise((function(t){setTimeout(t,e)}))}function hn(e){if(e.error){const t=new Error(e.error.message);throw t.code=e.error.code,t.data=e.error.data,t}return e.result}function dn(e){return e?e.toLowerCase():e}const pn={};class mn extends N{constructor(e,t,r){if(super(),e!==pn)throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");p(this,"provider",t),null==r&&(r=0),"string"==typeof r?(p(this,"_address",this.provider.formatter.address(r)),p(this,"_index",null)):"number"==typeof r?(p(this,"_index",r),p(this,"_address",null)):sn.throwArgumentError("invalid address or index","addressOrIndex",r)}connect(e){return sn.throwError("cannot alter JSON-RPC Signer connection",h.errors.UNSUPPORTED_OPERATION,{operation:"connect"})}connectUnchecked(){return new gn(pn,this.provider,this._address||this._index)}getAddress(){return this._address?Promise.resolve(this._address):this.provider.send("eth_accounts",[]).then((e=>(e.length<=this._index&&sn.throwError("unknown account #"+this._index,h.errors.UNSUPPORTED_OPERATION,{operation:"getAddress"}),this.provider.formatter.address(e[this._index]))))}sendUncheckedTransaction(e){e=v(e);const t=this.getAddress().then((e=>(e&&(e=e.toLowerCase()),e)));if(null==e.gasLimit){const r=v(e);r.from=t,e.gasLimit=this.provider.estimateGas(r)}return null!=e.to&&(e.to=Promise.resolve(e.to).then((e=>an(this,void 0,void 0,(function*(){if(null==e)return null;const t=yield this.provider.resolveName(e);return null==t&&sn.throwArgumentError("provided ENS name resolves to null","tx.to",e),t}))))),g({tx:g(e),sender:t}).then((({tx:t,sender:r})=>{null!=t.from?t.from.toLowerCase()!==r&&sn.throwArgumentError("from address mismatch","transaction",e):t.from=r;const n=this.provider.constructor.hexlifyTransaction(t,{from:!0});return this.provider.send("eth_sendTransaction",[n]).then((e=>e),(e=>cn("sendTransaction",e,n)))}))}signTransaction(e){return sn.throwError("signing transactions is unsupported",h.errors.UNSUPPORTED_OPERATION,{operation:"signTransaction"})}sendTransaction(e){return an(this,void 0,void 0,(function*(){const t=yield this.provider._getInternalBlockNumber(100+2*this.provider.pollingInterval),r=yield this.sendUncheckedTransaction(e);try{return yield nr((()=>an(this,void 0,void 0,(function*(){const e=yield this.provider.getTransaction(r);if(null!==e)return this.provider._wrapTransaction(e,r,t)}))),{oncePoll:this.provider})}catch(e){throw e.transactionHash=r,e}}))}signMessage(e){return an(this,void 0,void 0,(function*(){const t="string"==typeof e?Me(e):e,r=yield this.getAddress();return yield this.provider.send("personal_sign",[j(t),r.toLowerCase()])}))}_legacySignMessage(e){return an(this,void 0,void 0,(function*(){const t="string"==typeof e?Me(e):e,r=yield this.getAddress();return yield this.provider.send("eth_sign",[r.toLowerCase(),j(t)])}))}_signTypedData(e,t,r){return an(this,void 0,void 0,(function*(){const n=yield Ge.resolveNames(e,t,r,(e=>this.provider.resolveName(e))),i=yield this.getAddress();return yield this.provider.send("eth_signTypedData_v4",[i.toLowerCase(),JSON.stringify(Ge.getPayload(n.domain,t,n.value))])}))}unlock(e){return an(this,void 0,void 0,(function*(){const t=this.provider,r=yield this.getAddress();return t.send("personal_unlockAccount",[r.toLowerCase(),e,null])}))}}class gn extends mn{sendTransaction(e){return this.sendUncheckedTransaction(e).then((e=>({hash:e,nonce:null,gasLimit:null,gasPrice:null,data:null,value:null,chainId:null,confirmations:0,from:null,wait:t=>this.provider.waitForTransaction(e,t)})))}}const vn={chainId:!0,data:!0,gasLimit:!0,gasPrice:!0,nonce:!0,to:!0,value:!0,type:!0,accessList:!0,maxFeePerGas:!0,maxPriorityFeePerGas:!0};class yn extends on{constructor(e,t){let r=t;null==r&&(r=new Promise(((e,t)=>{setTimeout((()=>{this.detectNetwork().then((t=>{e(t)}),(e=>{t(e)}))}),0)}))),super(r),e||(e=m(this.constructor,"defaultUrl")()),p(this,"connection","string"==typeof e?Object.freeze({url:e}):Object.freeze(v(e))),this._nextId=42}get _cache(){return null==this._eventLoopCache&&(this._eventLoopCache={}),this._eventLoopCache}static defaultUrl(){return"http://localhost:8545"}detectNetwork(){return this._cache.detectNetwork||(this._cache.detectNetwork=this._uncachedDetectNetwork(),setTimeout((()=>{this._cache.detectNetwork=null}),0)),this._cache.detectNetwork}_uncachedDetectNetwork(){return an(this,void 0,void 0,(function*(){yield fn(0);let e=null;try{e=yield this.send("eth_chainId",[])}catch(t){try{e=yield this.send("net_version",[])}catch(e){}}if(null!=e){const t=m(this.constructor,"getNetwork");try{return t(Z.from(e).toNumber())}catch(t){return sn.throwError("could not detect network",h.errors.NETWORK_ERROR,{chainId:e,event:"invalidNetwork",serverError:t})}}return sn.throwError("could not detect network",h.errors.NETWORK_ERROR,{event:"noNetwork"})}))}getSigner(e){return new mn(pn,this,e)}getUncheckedSigner(e){return this.getSigner(e).connectUnchecked()}listAccounts(){return this.send("eth_accounts",[]).then((e=>e.map((e=>this.formatter.address(e)))))}send(e,t){const r={method:e,params:t,id:this._nextId++,jsonrpc:"2.0"};this.emit("debug",{action:"request",request:k(r),provider:this});const n=["eth_chainId","eth_blockNumber"].indexOf(e)>=0;if(n&&this._cache[e])return this._cache[e];const i=rr(this.connection,JSON.stringify(r),hn).then((e=>(this.emit("debug",{action:"response",request:r,response:e,provider:this}),e)),(e=>{throw this.emit("debug",{action:"response",error:e,request:r,provider:this}),e}));return n&&(this._cache[e]=i,setTimeout((()=>{this._cache[e]=null}),0)),i}prepareRequest(e,t){switch(e){case"getBlockNumber":return["eth_blockNumber",[]];case"getGasPrice":return["eth_gasPrice",[]];case"getBalance":return["eth_getBalance",[dn(t.address),t.blockTag]];case"getTransactionCount":return["eth_getTransactionCount",[dn(t.address),t.blockTag]];case"getCode":return["eth_getCode",[dn(t.address),t.blockTag]];case"getStorageAt":return["eth_getStorageAt",[dn(t.address),W(t.position,32),t.blockTag]];case"sendTransaction":return["eth_sendRawTransaction",[t.signedTransaction]];case"getBlock":return t.blockTag?["eth_getBlockByNumber",[t.blockTag,!!t.includeTransactions]]:t.blockHash?["eth_getBlockByHash",[t.blockHash,!!t.includeTransactions]]:null;case"getTransaction":return["eth_getTransactionByHash",[t.transactionHash]];case"getTransactionReceipt":return["eth_getTransactionReceipt",[t.transactionHash]];case"call":return["eth_call",[m(this.constructor,"hexlifyTransaction")(t.transaction,{from:!0}),t.blockTag]];case"estimateGas":return["eth_estimateGas",[m(this.constructor,"hexlifyTransaction")(t.transaction,{from:!0})]];case"getLogs":return t.filter&&null!=t.filter.address&&(t.filter.address=dn(t.filter.address)),["eth_getLogs",[t.filter]]}return null}perform(e,t){return an(this,void 0,void 0,(function*(){if("call"===e||"estimateGas"===e){const e=t.transaction;if(e&&null!=e.type&&Z.from(e.type).isZero()&&null==e.maxFeePerGas&&null==e.maxPriorityFeePerGas){const r=yield this.getFeeData();null==r.maxFeePerGas&&null==r.maxPriorityFeePerGas&&((t=v(t)).transaction=v(e),delete t.transaction.type)}}const r=this.prepareRequest(e,t);null==r&&sn.throwError(e+" not implemented",h.errors.NOT_IMPLEMENTED,{operation:e});try{return yield this.send(r[0],r[1])}catch(r){return cn(e,r,t)}}))}_startEvent(e){"pending"===e.tag&&this._startPending(),super._startEvent(e)}_startPending(){if(null!=this._pendingFilter)return;const e=this,t=this.send("eth_newPendingTransactionFilter",[]);this._pendingFilter=t,t.then((function(r){return function n(){e.send("eth_getFilterChanges",[r]).then((function(r){if(e._pendingFilter!=t)return null;let n=Promise.resolve();return r.forEach((function(t){e._emitted["t:"+t.toLowerCase()]="pending",n=n.then((function(){return e.getTransaction(t).then((function(t){return e.emit("pending",t),null}))}))})),n.then((function(){return fn(1e3)}))})).then((function(){if(e._pendingFilter==t)return setTimeout((function(){n()}),0),null;e.send("eth_uninstallFilter",[r])})).catch((e=>{}))}(),r})).catch((e=>{}))}_stopEvent(e){"pending"===e.tag&&0===this.listenerCount("pending")&&(this._pendingFilter=null),super._stopEvent(e)}static hexlifyTransaction(e,t){const r=v(vn);if(t)for(const e in t)t[e]&&(r[e]=!0);var n,i;i=r,(n=e)&&"object"==typeof n||d.throwArgumentError("invalid object","object",n),Object.keys(n).forEach((e=>{i[e]||d.throwArgumentError("invalid object key - "+e,"transaction:"+e,n)}));const o={};return["chainId","gasLimit","gasPrice","type","maxFeePerGas","maxPriorityFeePerGas","nonce","value"].forEach((function(t){if(null==e[t])return;const r=H(Z.from(e[t]));"gasLimit"===t&&(t="gas"),o[t]=r})),["from","to","data"].forEach((function(t){null!=e[t]&&(o[t]=j(e[t]))})),e.accessList&&(o.accessList=Ht(e.accessList)),o}}const bn=new h(E);let wn=1;function kn(e,t){const r="Web3LegacyFetcher";return function(e,n){const i={method:e,params:n,id:wn++,jsonrpc:"2.0"};return new Promise(((e,n)=>{this.emit("debug",{action:"request",fetcher:r,request:k(i),provider:this}),t(i,((t,o)=>{if(t)return this.emit("debug",{action:"response",fetcher:r,error:t,request:i,provider:this}),n(t);if(this.emit("debug",{action:"response",fetcher:r,request:i,response:o,provider:this}),o.error){const e=new Error(o.error.message);return e.code=o.error.code,e.data=o.error.data,n(e)}e(o.result)}))}))}}class En extends yn{constructor(e,t){null==e&&bn.throwArgumentError("missing provider","provider",e);let r=null,n=null,i=null;"function"==typeof e?(r="unknown:",n=e):(r=e.host||e.path||"",!r&&e.isMetaMask&&(r="metamask"),i=e,e.request?(""===r&&(r="eip-1193:"),n=function(e){return function(t,r){null==r&&(r=[]);const n={method:t,params:r};return this.emit("debug",{action:"request",fetcher:"Eip1193Fetcher",request:k(n),provider:this}),e.request(n).then((e=>(this.emit("debug",{action:"response",fetcher:"Eip1193Fetcher",request:n,response:e,provider:this}),e)),(e=>{throw this.emit("debug",{action:"response",fetcher:"Eip1193Fetcher",request:n,error:e,provider:this}),e}))}}(e)):e.sendAsync?n=kn(0,e.sendAsync.bind(e)):e.send?n=kn(0,e.send.bind(e)):bn.throwArgumentError("unsupported provider","provider",e),r||(r="unknown:")),super(r,t),p(this,"jsonRpcFetchFunc",n),p(this,"provider",i)}send(e,t){return this.jsonRpcFetchFunc(e,t)}}},469:(e,t,r)=>{"use strict";function n(){return n=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},n.apply(this,arguments)}function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}r.d(t,{Z:()=>no}),r(757);var o=r(294);function a(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function f(e,t,r){return t&&c(e.prototype,t),r&&c(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function h(e,t){return h=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},h(e,t)}function d(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&h(e,t)}function p(e){return p=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},p(e)}function m(e){return m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},m(e)}function g(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function v(e,t){if(t&&("object"===m(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return g(e)}function y(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=p(e);if(t){var i=p(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return v(this,r)}}function b(){b=function(){return e};var e={},t=Object.prototype,r=t.hasOwnProperty,n="function"==typeof Symbol?Symbol:{},i=n.iterator||"@@iterator",o=n.asyncIterator||"@@asyncIterator",a=n.toStringTag||"@@toStringTag";function s(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,r){return e[t]=r}}function l(e,t,r,n){var i=t&&t.prototype instanceof f?t:f,o=Object.create(i.prototype),a=new S(n||[]);return o._invoke=function(e,t,r){var n="suspendedStart";return function(i,o){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===i)throw o;return{value:void 0,done:!0}}for(r.method=i,r.arg=o;;){var a=r.delegate;if(a){var s=E(a,r);if(s){if(s===c)continue;return s}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n="executing";var l=u(e,t,r);if("normal"===l.type){if(n=r.done?"completed":"suspendedYield",l.arg===c)continue;return{value:l.arg,done:r.done}}"throw"===l.type&&(n="completed",r.method="throw",r.arg=l.arg)}}}(e,r,a),o}function u(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}e.wrap=l;var c={};function f(){}function h(){}function d(){}var p={};s(p,i,(function(){return this}));var g=Object.getPrototypeOf,v=g&&g(g(P([])));v&&v!==t&&r.call(v,i)&&(p=v);var y=d.prototype=f.prototype=Object.create(p);function w(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(i,o,a,s){var l=u(e[i],e,o);if("throw"!==l.type){var c=l.arg,f=c.value;return f&&"object"==m(f)&&r.call(f,"__await")?t.resolve(f.__await).then((function(e){n("next",e,a,s)}),(function(e){n("throw",e,a,s)})):t.resolve(f).then((function(e){c.value=e,a(c)}),(function(e){return n("throw",e,a,s)}))}s(l.arg)}var i;this._invoke=function(e,r){function o(){return new t((function(t,i){n(e,r,t,i)}))}return i=i?i.then(o,o):o()}}function E(e,t){var r=e.iterator[t.method];if(void 0===r){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,E(e,t),"throw"===t.method))return c;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return c}var n=u(r,e.iterator,t.arg);if("throw"===n.type)return t.method="throw",t.arg=n.arg,t.delegate=null,c;var i=n.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,c):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,c)}function x(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function _(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function S(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(x,this),this.reset(!0)}function P(e){if(e){var t=e[i];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var n=-1,o=function t(){for(;++n<e.length;)if(r.call(e,n))return t.value=e[n],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:N}}function N(){return{value:void 0,done:!0}}return h.prototype=d,s(y,"constructor",d),s(d,"constructor",h),h.displayName=s(d,a,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===h||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,d):(e.__proto__=d,s(e,a,"GeneratorFunction")),e.prototype=Object.create(y),e},e.awrap=function(e){return{__await:e}},w(k.prototype),s(k.prototype,o,(function(){return this})),e.AsyncIterator=k,e.async=function(t,r,n,i,o){void 0===o&&(o=Promise);var a=new k(l(t,r,n,i),o);return e.isGeneratorFunction(r)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},w(y),s(y,a,"Generator"),s(y,i,(function(){return this})),s(y,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function r(){for(;t.length;){var n=t.pop();if(n in e)return r.value=n,r.done=!1,r}return r.done=!0,r}},e.values=P,S.prototype={constructor:S,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(_),!e)for(var t in this)"t"===t.charAt(0)&&r.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function n(r,n){return a.type="throw",a.arg=e,t.next=r,n&&(t.method="next",t.arg=void 0),!!n}for(var i=this.tryEntries.length-1;i>=0;--i){var o=this.tryEntries[i],a=o.completion;if("root"===o.tryLoc)return n("end");if(o.tryLoc<=this.prev){var s=r.call(o,"catchLoc"),l=r.call(o,"finallyLoc");if(s&&l){if(this.prev<o.catchLoc)return n(o.catchLoc,!0);if(this.prev<o.finallyLoc)return n(o.finallyLoc)}else if(s){if(this.prev<o.catchLoc)return n(o.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return n(o.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var i=this.tryEntries[n];if(i.tryLoc<=this.prev&&r.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=e,a.arg=t,o?(this.method="next",this.next=o.finallyLoc,c):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),c},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),_(r),c}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var i=n.arg;_(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,r){return this.delegate={iterator:P(e),resultName:t,nextLoc:r},"next"===this.method&&(this.arg=void 0),c}},e}function w(e,t,r,n,i,o,a){try{var s=e[o](a),l=s.value}catch(e){return void r(e)}s.done?t(l):Promise.resolve(l).then(n,i)}function k(e){return function(){var t=this,r=arguments;return new Promise((function(n,i){var o=e.apply(t,r);function a(e){w(o,n,i,a,s,"next",e)}function s(e){w(o,n,i,a,s,"throw",e)}a(void 0)}))}}var E,x=r(935),_=l({},r.t(x,2)),S=_.version,P=_.render,N=_.unmountComponentAtNode;try{Number((S||"").split(".")[0])>=18&&(E=_.createRoot)}catch(e){}function M(e){var t=_.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;t&&"object"===m(t)&&(t.usingClientEntryPoint=e)}var C="__rc_react_root__";function A(e){return F.apply(this,arguments)}function F(){return(F=k(b().mark((function e(t){return b().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",Promise.resolve().then((function(){var e;null===(e=t[C])||void 0===e||e.unmount(),delete t[C]})));case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function R(e){N(e)}function I(){return(I=k(b().mark((function e(t){return b().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(void 0===E){e.next=2;break}return e.abrupt("return",A(t));case 2:R(t);case 3:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var T=r(184),O=r.n(T);function L(e){if(Array.isArray(e))return e}function B(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function z(e,t){if(e){if("string"==typeof e)return B(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?B(e,t):void 0}}function D(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function U(e,t){return L(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,i,o=[],a=!0,s=!1;try{for(r=r.call(e);!(a=(n=r.next()).done)&&(o.push(n.value),!t||o.length!==t);a=!0);}catch(e){s=!0,i=e}finally{try{a||null==r.return||r.return()}finally{if(s)throw i}}return o}}(e,t)||z(e,t)||D()}var j=r(864);function V(){return!("undefined"==typeof window||!window.document||!window.document.createElement)}function q(e,t){var r={};return r[e.toLowerCase()]=t.toLowerCase(),r["Webkit".concat(e)]="webkit".concat(t),r["Moz".concat(e)]="moz".concat(t),r["ms".concat(e)]="MS".concat(t),r["O".concat(e)]="o".concat(t.toLowerCase()),r}var $,H,W,G=($=V(),H="undefined"!=typeof window?window:{},W={animationend:q("Animation","AnimationEnd"),transitionend:q("Transition","TransitionEnd")},$&&("AnimationEvent"in H||delete W.animationend.animation,"TransitionEvent"in H||delete W.transitionend.transition),W),K={};if(V()){var Q=document.createElement("div");K=Q.style}var X={};function J(e){if(X[e])return X[e];var t=G[e];if(t)for(var r=Object.keys(t),n=r.length,i=0;i<n;i+=1){var o=r[i];if(Object.prototype.hasOwnProperty.call(t,o)&&o in K)return X[e]=t[o],X[e]}return""}var Y=J("animationend"),Z=J("transitionend"),ee=!(!Y||!Z),te=Y||"animationend",re=Z||"transitionend";function ne(e,t){return e?"object"===m(e)?e[t.replace(/-\w/g,(function(e){return e[1].toUpperCase()}))]:"".concat(e,"-").concat(t):null}var ie="none",oe="appear",ae="enter",se="leave",le="none",ue="prepare",ce="start",fe="active",he="end";function de(e){var t=o.useRef(!1),r=U(o.useState(e),2),n=r[0],i=r[1];return o.useEffect((function(){return t.current=!1,function(){t.current=!0}}),[]),[n,function(e,r){r&&t.current||i(e)}]}var pe=function(e){return+setTimeout(e,16)},me=function(e){return clearTimeout(e)};"undefined"!=typeof window&&"requestAnimationFrame"in window&&(pe=function(e){return window.requestAnimationFrame(e)},me=function(e){return window.cancelAnimationFrame(e)});var ge=0,ve=new Map;function ye(e){ve.delete(e)}function be(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=ge+=1;function n(t){if(0===t)ye(r),e();else{var i=pe((function(){n(t-1)}));ve.set(r,i)}}return n(t),r}be.cancel=function(e){var t=ve.get(e);return ye(t),me(t)};const we=V()?o.useLayoutEffect:o.useEffect;var ke=[ue,ce,fe,he];function Ee(e){return e===fe||e===he}function xe(e,t,r,n){var a=n.motionEnter,s=void 0===a||a,u=n.motionAppear,c=void 0===u||u,f=n.motionLeave,h=void 0===f||f,d=n.motionDeadline,p=n.motionLeaveImmediately,m=n.onAppearPrepare,g=n.onEnterPrepare,v=n.onLeavePrepare,y=n.onAppearStart,b=n.onEnterStart,w=n.onLeaveStart,k=n.onAppearActive,E=n.onEnterActive,x=n.onLeaveActive,_=n.onAppearEnd,S=n.onEnterEnd,P=n.onLeaveEnd,N=n.onVisibleChanged,M=U(de(),2),C=M[0],A=M[1],F=U(de(ie),2),R=F[0],I=F[1],T=U(de(null),2),O=T[0],L=T[1],B=(0,o.useRef)(!1),z=(0,o.useRef)(null);function D(){return r()}var j=(0,o.useRef)(!1);function V(e){var t=D();if(!e||e.deadline||e.target===t){var r,n=j.current;R===oe&&n?r=null==_?void 0:_(t,e):R===ae&&n?r=null==S?void 0:S(t,e):R===se&&n&&(r=null==P?void 0:P(t,e)),R!==ie&&n&&!1!==r&&(I(ie,!0),L(null,!0))}}var q=function(e){var t=(0,o.useRef)(),r=(0,o.useRef)(e);r.current=e;var n=o.useCallback((function(e){r.current(e)}),[]);function i(e){e&&(e.removeEventListener(re,n),e.removeEventListener(te,n))}return o.useEffect((function(){return function(){i(t.current)}}),[]),[function(e){t.current&&t.current!==e&&i(t.current),e&&e!==t.current&&(e.addEventListener(re,n),e.addEventListener(te,n),t.current=e)},i]}(V),$=U(q,1)[0],H=o.useMemo((function(){var e,t,r;switch(R){case oe:return i(e={},ue,m),i(e,ce,y),i(e,fe,k),e;case ae:return i(t={},ue,g),i(t,ce,b),i(t,fe,E),t;case se:return i(r={},ue,v),i(r,ce,w),i(r,fe,x),r;default:return{}}}),[R]),W=U(function(e,t){var r=U(de(le),2),n=r[0],i=r[1],a=function(){var e=o.useRef(null);function t(){be.cancel(e.current)}return o.useEffect((function(){return function(){t()}}),[]),[function r(n){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;t();var o=be((function(){i<=1?n({isCanceled:function(){return o!==e.current}}):r(n,i-1)}));e.current=o},t]}(),s=U(a,2),l=s[0],u=s[1];return we((function(){if(n!==le&&n!==he){var e=ke.indexOf(n),r=ke[e+1],o=t(n);!1===o?i(r,!0):l((function(e){function t(){e.isCanceled()||i(r,!0)}!0===o?t():Promise.resolve(o).then(t)}))}}),[e,n]),o.useEffect((function(){return function(){u()}}),[]),[function(){i(ue,!0)},n]}(R,(function(e){if(e===ue){var t=H.prepare;return!!t&&t(D())}var r;return K in H&&L((null===(r=H[K])||void 0===r?void 0:r.call(H,D(),null))||null),K===fe&&($(D()),d>0&&(clearTimeout(z.current),z.current=setTimeout((function(){V({deadline:!0})}),d))),!0})),2),G=W[0],K=W[1],Q=Ee(K);j.current=Q,we((function(){A(t);var r,n=B.current;B.current=!0,e&&(!n&&t&&c&&(r=oe),n&&t&&s&&(r=ae),(n&&!t&&h||!n&&p&&!t&&h)&&(r=se),r&&(I(r),G()))}),[t]),(0,o.useEffect)((function(){(R===oe&&!c||R===ae&&!s||R===se&&!h)&&I(ie)}),[c,s,h]),(0,o.useEffect)((function(){return function(){B.current=!1,clearTimeout(z.current)}}),[]),(0,o.useEffect)((function(){void 0!==C&&R===ie&&(null==N||N(C))}),[C,R]);var X=O;return H.prepare&&K===ce&&(X=l({transition:"none"},X)),[R,K,X,null!=C?C:t]}const _e=function(e){d(r,e);var t=y(r);function r(){return u(this,r),t.apply(this,arguments)}return f(r,[{key:"render",value:function(){return this.props.children}}]),r}(o.Component),Se=function(e){var t=e;function r(e){return!(!e.motionName||!t)}"object"===m(e)&&(t=e.transitionSupport);var n=o.forwardRef((function(e,t){var n=e.visible,a=void 0===n||n,s=e.removeOnLeave,u=void 0===s||s,c=e.forceRender,f=e.children,h=e.motionName,d=e.leavedClassName,p=e.eventProps,g=r(e),v=(0,o.useRef)(),y=(0,o.useRef)(),b=U(xe(g,a,(function(){try{return v.current instanceof HTMLElement?v.current:(e=y.current)instanceof HTMLElement?e:x.findDOMNode(e)}catch(e){return null}var e}),e),4),w=b[0],k=b[1],E=b[2],_=b[3],S=o.useRef(_);_&&(S.current=!0);var P,N=o.useCallback((function(e){v.current=e,function(e,t){"function"==typeof e?e(t):"object"===m(e)&&e&&"current"in e&&(e.current=t)}(t,e)}),[t]),M=l(l({},p),{},{visible:a});if(f)if(w!==ie&&r(e)){var C,A;k===ue?A="prepare":Ee(k)?A="active":k===ce&&(A="start"),P=f(l(l({},M),{},{className:O()(ne(h,w),(C={},i(C,ne(h,"".concat(w,"-").concat(A)),A),i(C,h,"string"==typeof h),C)),style:E}),N)}else P=_?f(l({},M),N):!u&&S.current?f(l(l({},M),{},{className:d}),N):c?f(l(l({},M),{},{style:{display:"none"}}),N):null;else P=null;return o.isValidElement(P)&&function(e){var t,r,n=(0,j.isMemo)(e)?e.type.type:e.type;return!("function"==typeof n&&!(null===(t=n.prototype)||void 0===t?void 0:t.render)||"function"==typeof e&&!(null===(r=e.prototype)||void 0===r?void 0:r.render))}(P)&&(P.ref||(P=o.cloneElement(P,{ref:N}))),o.createElement(_e,{ref:y},P)}));return n.displayName="CSSMotion",n}(ee);var Pe="add",Ne="keep",Me="remove",Ce="removed";function Ae(e){var t;return l(l({},t=e&&"object"===m(e)&&"key"in e?e:{key:e}),{},{key:String(t.key)})}function Fe(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return e.map(Ae)}function Re(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],r=[],n=0,i=t.length,o=Fe(e),a=Fe(t);o.forEach((function(e){for(var t=!1,o=n;o<i;o+=1){var s=a[o];if(s.key===e.key){n<o&&(r=r.concat(a.slice(n,o).map((function(e){return l(l({},e),{},{status:Pe})}))),n=o),r.push(l(l({},s),{},{status:Ne})),n+=1,t=!0;break}}t||r.push(l(l({},e),{},{status:Me}))})),n<i&&(r=r.concat(a.slice(n).map((function(e){return l(l({},e),{},{status:Pe})}))));var s={};r.forEach((function(e){var t=e.key;s[t]=(s[t]||0)+1}));var u=Object.keys(s).filter((function(e){return s[e]>1}));return u.forEach((function(e){r=r.filter((function(t){var r=t.key,n=t.status;return r!==e||n!==Me})),r.forEach((function(t){t.key===e&&(t.status=Ne)}))})),r}var Ie=["component","children","onVisibleChanged","onAllRemoved"],Te=["status"],Oe=["eventProps","visible","children","motionName","motionAppear","motionEnter","motionLeave","motionLeaveImmediately","motionDeadline","removeOnLeave","leavedClassName","onAppearStart","onAppearActive","onAppearEnd","onEnterStart","onEnterActive","onEnterEnd","onLeaveStart","onLeaveActive","onLeaveEnd"];const Le=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Se,r=function(e){d(i,e);var r=y(i);function i(){var e;u(this,i);for(var t=arguments.length,n=new Array(t),o=0;o<t;o++)n[o]=arguments[o];return(e=r.call.apply(r,[this].concat(n))).state={keyEntities:[]},e.removeKey=function(t){var r=e.state.keyEntities.map((function(e){return e.key!==t?e:l(l({},e),{},{status:Ce})}));return e.setState({keyEntities:r}),r.filter((function(e){return e.status!==Ce})).length},e}return f(i,[{key:"render",value:function(){var e=this,r=this.state.keyEntities,i=this.props,s=i.component,l=i.children,u=i.onVisibleChanged,c=i.onAllRemoved,f=a(i,Ie),h=s||o.Fragment,d={};return Oe.forEach((function(e){d[e]=f[e],delete f[e]})),delete f.keys,o.createElement(h,f,r.map((function(r){var i=r.status,s=a(r,Te),f=i===Pe||i===Ne;return o.createElement(t,n({},d,{key:s.key,visible:f,eventProps:s,onVisibleChanged:function(t){null==u||u(t,{key:s.key}),t||0===e.removeKey(s.key)&&c&&c()}}),l)})))}}],[{key:"getDerivedStateFromProps",value:function(e,t){var r=e.keys,n=t.keyEntities,i=Fe(r);return{keyEntities:Re(n,i).filter((function(e){var t=n.find((function(t){var r=t.key;return e.key===r}));return!t||t.status!==Ce||e.status!==Me}))}}}]),i}(o.Component);return r.defaultProps={component:"div"},r}(ee);var Be=function(e){d(r,e);var t=y(r);function r(){var e;u(this,r);for(var n=arguments.length,i=new Array(n),o=0;o<n;o++)i[o]=arguments[o];return(e=t.call.apply(t,[this].concat(i))).closeTimer=null,e.close=function(t){t&&t.stopPropagation(),e.clearCloseTimer();var r=e.props,n=r.onClose,i=r.noticeKey;n&&n(i)},e.startCloseTimer=function(){e.props.duration&&(e.closeTimer=window.setTimeout((function(){e.close()}),1e3*e.props.duration))},e.clearCloseTimer=function(){e.closeTimer&&(clearTimeout(e.closeTimer),e.closeTimer=null)},e}return f(r,[{key:"componentDidMount",value:function(){this.startCloseTimer()}},{key:"componentDidUpdate",value:function(e){(this.props.duration!==e.duration||this.props.updateMark!==e.updateMark||this.props.visible!==e.visible&&this.props.visible)&&this.restartCloseTimer()}},{key:"componentWillUnmount",value:function(){this.clearCloseTimer()}},{key:"restartCloseTimer",value:function(){this.clearCloseTimer(),this.startCloseTimer()}},{key:"render",value:function(){var e=this,t=this.props,r=t.prefixCls,a=t.className,s=t.closable,l=t.closeIcon,u=t.style,c=t.onClick,f=t.children,h=t.holder,d="".concat(r,"-notice"),p=Object.keys(this.props).reduce((function(t,r){return"data-"!==r.substr(0,5)&&"aria-"!==r.substr(0,5)&&"role"!==r||(t[r]=e.props[r]),t}),{}),m=o.createElement("div",n({className:O()(d,a,i({},"".concat(d,"-closable"),s)),style:u,onMouseEnter:this.clearCloseTimer,onMouseLeave:this.startCloseTimer,onClick:c},p),o.createElement("div",{className:"".concat(d,"-content")},f),s?o.createElement("a",{tabIndex:0,onClick:this.close,className:"".concat(d,"-close")},l||o.createElement("span",{className:"".concat(d,"-close-x")})):null);return h?x.createPortal(m,h):m}}]),r}(o.Component);function ze(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function De(e){return function(e){if(Array.isArray(e))return B(e)}(e)||ze(e)||z(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ue(e){var t=o.useRef({}),r=U(o.useState([]),2),i=r[0],a=r[1];return[function(r){var i=!0;e.add(r,(function(e,r){var s=r.key;if(e&&(!t.current[s]||i)){var l=o.createElement(Be,n({},r,{holder:e}));t.current[s]=l,a((function(e){var t=e.findIndex((function(e){return e.key===r.key}));if(-1===t)return[].concat(De(e),[l]);var n=De(e);return n[t]=l,n}))}i=!1}))},o.createElement(o.Fragment,null,i)]}Be.defaultProps={onClose:function(){},duration:1.5};var je=["getContainer"],Ve=0,qe=Date.now();function $e(){var e=Ve;return Ve+=1,"rcNotification_".concat(qe,"_").concat(e)}var He=function(e){d(r,e);var t=y(r);function r(){var e;u(this,r);for(var n=arguments.length,i=new Array(n),o=0;o<n;o++)i[o]=arguments[o];return(e=t.call.apply(t,[this].concat(i))).state={notices:[]},e.hookRefs=new Map,e.add=function(t,r){var n=t.key||$e(),i=l(l({},t),{},{key:n}),o=e.props.maxCount;e.setState((function(e){var t=e.notices,a=t.map((function(e){return e.notice.key})).indexOf(n),s=t.concat();return-1!==a?s.splice(a,1,{notice:i,holderCallback:r}):(o&&t.length>=o&&(i.key=s[0].notice.key,i.updateMark=$e(),i.userPassKey=n,s.shift()),s.push({notice:i,holderCallback:r})),{notices:s}}))},e.remove=function(t){e.setState((function(e){return{notices:e.notices.filter((function(e){var r=e.notice,n=r.key;return(r.userPassKey||n)!==t}))}}))},e.noticePropsMap={},e}return f(r,[{key:"getTransitionName",value:function(){var e=this.props,t=e.prefixCls,r=e.animation,n=this.props.transitionName;return!n&&r&&(n="".concat(t,"-").concat(r)),n}},{key:"render",value:function(){var e=this,t=this.state.notices,r=this.props,i=r.prefixCls,a=r.className,s=r.closeIcon,u=r.style,c=[];return t.forEach((function(r,n){var o=r.notice,a=r.holderCallback,u=n===t.length-1?o.updateMark:void 0,f=o.key,h=o.userPassKey,d=l(l(l({prefixCls:i,closeIcon:s},o),o.props),{},{key:f,noticeKey:h||f,updateMark:u,onClose:function(t){var r;e.remove(t),null===(r=o.onClose)||void 0===r||r.call(o)},onClick:o.onClick,children:o.content});c.push(f),e.noticePropsMap[f]={props:d,holderCallback:a}})),o.createElement("div",{className:O()(i,a),style:u},o.createElement(Le,{keys:c,motionName:this.getTransitionName(),onVisibleChanged:function(t,r){var n=r.key;t||delete e.noticePropsMap[n]}},(function(t){var r=t.key,a=t.className,s=t.style,u=t.visible,c=e.noticePropsMap[r],f=c.props,h=c.holderCallback;return h?o.createElement("div",{key:r,className:O()(a,"".concat(i,"-hook-holder")),style:l({},s),ref:function(t){void 0!==r&&(t?(e.hookRefs.set(r,t),h(t,f)):e.hookRefs.delete(r))}}):o.createElement(Be,n({},f,{className:O()(a,null==f?void 0:f.className),style:l(l({},s),null==f?void 0:f.style),visible:u}))})))}}]),r}(o.Component);He.newInstance=void 0,He.defaultProps={prefixCls:"rc-notification",animation:"fade",style:{top:65,left:"50%"}},He.newInstance=function(e,t){var r=e||{},i=r.getContainer,s=a(r,je),l=document.createElement("div");i?i().appendChild(l):document.body.appendChild(l);var u,c,f=!1;u=o.createElement(He,n({},s,{ref:function(e){f||(f=!0,t({notice:function(t){e.add(t)},removeNotice:function(t){e.remove(t)},component:e,destroy:function(){!function(e){I.apply(this,arguments)}(l),l.parentNode&&l.parentNode.removeChild(l)},useNotification:function(){return Ue(e)}}))}})),c=l,E?function(e,t){M(!0);var r=t[C]||E(t);M(!1),r.render(e),t[C]=r}(u,c):function(e,t){P(e,t)}(u,c)};const We=He,Ge={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 00203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z"}}]},name:"close",theme:"outlined"},Ke=(0,o.createContext)({});function Qe(e,t){(function(e){return"string"==typeof e&&-1!==e.indexOf(".")&&1===parseFloat(e)})(e)&&(e="100%");var r=function(e){return"string"==typeof e&&-1!==e.indexOf("%")}(e);return e=360===t?e:Math.min(t,Math.max(0,parseFloat(e))),r&&(e=parseInt(String(e*t),10)/100),Math.abs(e-t)<1e-6?1:e=360===t?(e<0?e%t+t:e%t)/parseFloat(String(t)):e%t/parseFloat(String(t))}function Xe(e){return Math.min(1,Math.max(0,e))}function Je(e){return e=parseFloat(e),(isNaN(e)||e<0||e>1)&&(e=1),e}function Ye(e){return e<=1?"".concat(100*Number(e),"%"):e}function Ze(e){return 1===e.length?"0"+e:String(e)}function et(e,t,r){e=Qe(e,255),t=Qe(t,255),r=Qe(r,255);var n=Math.max(e,t,r),i=Math.min(e,t,r),o=0,a=0,s=(n+i)/2;if(n===i)a=0,o=0;else{var l=n-i;switch(a=s>.5?l/(2-n-i):l/(n+i),n){case e:o=(t-r)/l+(t<r?6:0);break;case t:o=(r-e)/l+2;break;case r:o=(e-t)/l+4}o/=6}return{h:o,s:a,l:s}}function tt(e,t,r){return r<0&&(r+=1),r>1&&(r-=1),r<1/6?e+6*r*(t-e):r<.5?t:r<2/3?e+(t-e)*(2/3-r)*6:e}function rt(e,t,r){e=Qe(e,255),t=Qe(t,255),r=Qe(r,255);var n=Math.max(e,t,r),i=Math.min(e,t,r),o=0,a=n,s=n-i,l=0===n?0:s/n;if(n===i)o=0;else{switch(n){case e:o=(t-r)/s+(t<r?6:0);break;case t:o=(r-e)/s+2;break;case r:o=(e-t)/s+4}o/=6}return{h:o,s:l,v:a}}function nt(e,t,r,n){var i=[Ze(Math.round(e).toString(16)),Ze(Math.round(t).toString(16)),Ze(Math.round(r).toString(16))];return n&&i[0].startsWith(i[0].charAt(1))&&i[1].startsWith(i[1].charAt(1))&&i[2].startsWith(i[2].charAt(1))?i[0].charAt(0)+i[1].charAt(0)+i[2].charAt(0):i.join("")}function it(e){return ot(e)/255}function ot(e){return parseInt(e,16)}var at={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",goldenrod:"#daa520",gold:"#ffd700",gray:"#808080",green:"#008000",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavenderblush:"#fff0f5",lavender:"#e6e6fa",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"};function st(e){var t,r,n,i={r:0,g:0,b:0},o=1,a=null,s=null,l=null,u=!1,c=!1;return"string"==typeof e&&(e=function(e){if(0===(e=e.trim().toLowerCase()).length)return!1;var t=!1;if(at[e])e=at[e],t=!0;else if("transparent"===e)return{r:0,g:0,b:0,a:0,format:"name"};var r=ft.rgb.exec(e);return r?{r:r[1],g:r[2],b:r[3]}:(r=ft.rgba.exec(e))?{r:r[1],g:r[2],b:r[3],a:r[4]}:(r=ft.hsl.exec(e))?{h:r[1],s:r[2],l:r[3]}:(r=ft.hsla.exec(e))?{h:r[1],s:r[2],l:r[3],a:r[4]}:(r=ft.hsv.exec(e))?{h:r[1],s:r[2],v:r[3]}:(r=ft.hsva.exec(e))?{h:r[1],s:r[2],v:r[3],a:r[4]}:(r=ft.hex8.exec(e))?{r:ot(r[1]),g:ot(r[2]),b:ot(r[3]),a:it(r[4]),format:t?"name":"hex8"}:(r=ft.hex6.exec(e))?{r:ot(r[1]),g:ot(r[2]),b:ot(r[3]),format:t?"name":"hex"}:(r=ft.hex4.exec(e))?{r:ot(r[1]+r[1]),g:ot(r[2]+r[2]),b:ot(r[3]+r[3]),a:it(r[4]+r[4]),format:t?"name":"hex8"}:!!(r=ft.hex3.exec(e))&&{r:ot(r[1]+r[1]),g:ot(r[2]+r[2]),b:ot(r[3]+r[3]),format:t?"name":"hex"}}(e)),"object"==typeof e&&(ht(e.r)&&ht(e.g)&&ht(e.b)?(t=e.r,r=e.g,n=e.b,i={r:255*Qe(t,255),g:255*Qe(r,255),b:255*Qe(n,255)},u=!0,c="%"===String(e.r).substr(-1)?"prgb":"rgb"):ht(e.h)&&ht(e.s)&&ht(e.v)?(a=Ye(e.s),s=Ye(e.v),i=function(e,t,r){e=6*Qe(e,360),t=Qe(t,100),r=Qe(r,100);var n=Math.floor(e),i=e-n,o=r*(1-t),a=r*(1-i*t),s=r*(1-(1-i)*t),l=n%6;return{r:255*[r,a,o,o,s,r][l],g:255*[s,r,r,a,o,o][l],b:255*[o,o,s,r,r,a][l]}}(e.h,a,s),u=!0,c="hsv"):ht(e.h)&&ht(e.s)&&ht(e.l)&&(a=Ye(e.s),l=Ye(e.l),i=function(e,t,r){var n,i,o;if(e=Qe(e,360),t=Qe(t,100),r=Qe(r,100),0===t)i=r,o=r,n=r;else{var a=r<.5?r*(1+t):r+t-r*t,s=2*r-a;n=tt(s,a,e+1/3),i=tt(s,a,e),o=tt(s,a,e-1/3)}return{r:255*n,g:255*i,b:255*o}}(e.h,a,l),u=!0,c="hsl"),Object.prototype.hasOwnProperty.call(e,"a")&&(o=e.a)),o=Je(o),{ok:u,format:e.format||c,r:Math.min(255,Math.max(i.r,0)),g:Math.min(255,Math.max(i.g,0)),b:Math.min(255,Math.max(i.b,0)),a:o}}var lt="(?:".concat("[-\\+]?\\d*\\.\\d+%?",")|(?:").concat("[-\\+]?\\d+%?",")"),ut="[\\s|\\(]+(".concat(lt,")[,|\\s]+(").concat(lt,")[,|\\s]+(").concat(lt,")\\s*\\)?"),ct="[\\s|\\(]+(".concat(lt,")[,|\\s]+(").concat(lt,")[,|\\s]+(").concat(lt,")[,|\\s]+(").concat(lt,")\\s*\\)?"),ft={CSS_UNIT:new RegExp(lt),rgb:new RegExp("rgb"+ut),rgba:new RegExp("rgba"+ct),hsl:new RegExp("hsl"+ut),hsla:new RegExp("hsla"+ct),hsv:new RegExp("hsv"+ut),hsva:new RegExp("hsva"+ct),hex3:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex4:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex8:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/};function ht(e){return Boolean(ft.CSS_UNIT.exec(String(e)))}var dt=[{index:7,opacity:.15},{index:6,opacity:.25},{index:5,opacity:.3},{index:5,opacity:.45},{index:5,opacity:.65},{index:5,opacity:.85},{index:4,opacity:.9},{index:3,opacity:.95},{index:2,opacity:.97},{index:1,opacity:.98}];function pt(e){var t=rt(e.r,e.g,e.b);return{h:360*t.h,s:t.s,v:t.v}}function mt(e){var t=e.r,r=e.g,n=e.b;return"#".concat(nt(t,r,n,!1))}function gt(e,t,r){var n=r/100;return{r:(t.r-e.r)*n+e.r,g:(t.g-e.g)*n+e.g,b:(t.b-e.b)*n+e.b}}function vt(e,t,r){var n;return(n=Math.round(e.h)>=60&&Math.round(e.h)<=240?r?Math.round(e.h)-2*t:Math.round(e.h)+2*t:r?Math.round(e.h)+2*t:Math.round(e.h)-2*t)<0?n+=360:n>=360&&(n-=360),n}function yt(e,t,r){return 0===e.h&&0===e.s?e.s:((n=r?e.s-.16*t:4===t?e.s+.16:e.s+.05*t)>1&&(n=1),r&&5===t&&n>.1&&(n=.1),n<.06&&(n=.06),Number(n.toFixed(2)));var n}function bt(e,t,r){var n;return(n=r?e.v+.05*t:e.v-.15*t)>1&&(n=1),Number(n.toFixed(2))}function wt(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=[],n=st(e),i=5;i>0;i-=1){var o=pt(n),a=mt(st({h:vt(o,i,!0),s:yt(o,i,!0),v:bt(o,i,!0)}));r.push(a)}r.push(mt(n));for(var s=1;s<=4;s+=1){var l=pt(n),u=mt(st({h:vt(l,s),s:yt(l,s),v:bt(l,s)}));r.push(u)}return"dark"===t.theme?dt.map((function(e){var n=e.index,i=e.opacity;return mt(gt(st(t.backgroundColor||"#141414"),st(r[n]),100*i))})):r}var kt={red:"#F5222D",volcano:"#FA541C",orange:"#FA8C16",gold:"#FAAD14",yellow:"#FADB14",lime:"#A0D911",green:"#52C41A",cyan:"#13C2C2",blue:"#1890FF",geekblue:"#2F54EB",purple:"#722ED1",magenta:"#EB2F96",grey:"#666666"},Et={},xt={};Object.keys(kt).forEach((function(e){Et[e]=wt(kt[e]),Et[e].primary=Et[e][5],xt[e]=wt(kt[e],{theme:"dark",backgroundColor:"#141414"}),xt[e].primary=xt[e][5]})),Et.red,Et.volcano,Et.gold,Et.orange,Et.yellow,Et.lime,Et.green,Et.cyan,Et.blue,Et.geekblue,Et.purple,Et.magenta,Et.grey;var _t={};function St(e,t){}const Pt=function(e,t){!function(e,t,r){t||_t[r]||(e(!1,r),_t[r]=!0)}(St,e,t)};var Nt="rc-util-key";function Mt(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.mark;return t?t.startsWith("data-")?t:"data-".concat(t):Nt}function Ct(e){return e.attachTo?e.attachTo:document.querySelector("head")||document.body}function At(e){var t,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!V())return null;var n,i=document.createElement("style");(null===(t=r.csp)||void 0===t?void 0:t.nonce)&&(i.nonce=null===(n=r.csp)||void 0===n?void 0:n.nonce),i.innerHTML=e;var o=Ct(r),a=o.firstChild;return r.prepend&&o.prepend?o.prepend(i):r.prepend&&a?o.insertBefore(i,a):o.appendChild(i),i}var Ft=new Map;function Rt(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=Ct(t);return Array.from(Ft.get(r).children).find((function(r){return"STYLE"===r.tagName&&r.getAttribute(Mt(t))===e}))}function It(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n=Ct(r);if(!Ft.has(n)){var i=At("",r),o=i.parentNode;Ft.set(n,o),o.removeChild(i)}var a,s,l,u=Rt(t,r);if(u)return(null===(a=r.csp)||void 0===a?void 0:a.nonce)&&u.nonce!==(null===(s=r.csp)||void 0===s?void 0:s.nonce)&&(u.nonce=null===(l=r.csp)||void 0===l?void 0:l.nonce),u.innerHTML!==e&&(u.innerHTML=e),u;var c=At(e,r);return c.setAttribute(Mt(r),t),c}function Tt(e){return"object"===m(e)&&"string"==typeof e.name&&"string"==typeof e.theme&&("object"===m(e.icon)||"function"==typeof e.icon)}function Ot(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Object.keys(e).reduce((function(t,r){var n=e[r];return"class"===r?(t.className=n,delete t.class):t[r]=n,t}),{})}function Lt(e,t,r){return r?o.createElement(e.tag,l(l({key:t},Ot(e.attrs)),r),(e.children||[]).map((function(r,n){return Lt(r,"".concat(t,"-").concat(e.tag,"-").concat(n))}))):o.createElement(e.tag,l({key:t},Ot(e.attrs)),(e.children||[]).map((function(r,n){return Lt(r,"".concat(t,"-").concat(e.tag,"-").concat(n))})))}function Bt(e){return wt(e)[0]}function zt(e){return e?Array.isArray(e)?e:[e]:[]}var Dt="\n.anticon {\n  display: inline-block;\n  color: inherit;\n  font-style: normal;\n  line-height: 0;\n  text-align: center;\n  text-transform: none;\n  vertical-align: -0.125em;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.anticon > * {\n  line-height: 1;\n}\n\n.anticon svg {\n  display: inline-block;\n}\n\n.anticon::before {\n  display: none;\n}\n\n.anticon .anticon-icon {\n  display: block;\n}\n\n.anticon[tabindex] {\n  cursor: pointer;\n}\n\n.anticon-spin::before,\n.anticon-spin {\n  display: inline-block;\n  -webkit-animation: loadingCircle 1s infinite linear;\n  animation: loadingCircle 1s infinite linear;\n}\n\n@-webkit-keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n",Ut=["icon","className","onClick","style","primaryColor","secondaryColor"],jt={primaryColor:"#333",secondaryColor:"#E6E6E6",calculated:!1},Vt=function(e){var t=e.icon,r=e.className,n=e.onClick,i=e.style,s=e.primaryColor,u=e.secondaryColor,c=a(e,Ut),f=jt;if(s&&(f={primaryColor:s,secondaryColor:u||Bt(s)}),function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Dt,t=(0,o.useContext)(Ke).csp;(0,o.useEffect)((function(){It(e,"@ant-design-icons",{prepend:!0,csp:t})}),[])}(),function(e,t){Pt(e,"[@ant-design/icons] ".concat(t))}(Tt(t),"icon should be icon definiton, but got ".concat(t)),!Tt(t))return null;var h=t;return h&&"function"==typeof h.icon&&(h=l(l({},h),{},{icon:h.icon(f.primaryColor,f.secondaryColor)})),Lt(h.icon,"svg-".concat(h.name),l({className:r,onClick:n,style:i,"data-icon":h.name,width:"1em",height:"1em",fill:"currentColor","aria-hidden":"true"},c))};Vt.displayName="IconReact",Vt.getTwoToneColors=function(){return l({},jt)},Vt.setTwoToneColors=function(e){var t=e.primaryColor,r=e.secondaryColor;jt.primaryColor=t,jt.secondaryColor=r||Bt(t),jt.calculated=!!r};const qt=Vt;function $t(e){var t=U(zt(e),2),r=t[0],n=t[1];return qt.setTwoToneColors({primaryColor:r,secondaryColor:n})}var Ht=["className","icon","spin","rotate","tabIndex","onClick","twoToneColor"];$t("#1890ff");var Wt=o.forwardRef((function(e,t){var r,n=e.className,s=e.icon,u=e.spin,c=e.rotate,f=e.tabIndex,h=e.onClick,d=e.twoToneColor,p=a(e,Ht),m=o.useContext(Ke).prefixCls,g=void 0===m?"anticon":m,v=O()(g,(i(r={},"".concat(g,"-").concat(s.name),!!s.name),i(r,"".concat(g,"-spin"),!!u||"loading"===s.name),r),n),y=f;void 0===y&&h&&(y=-1);var b=c?{msTransform:"rotate(".concat(c,"deg)"),transform:"rotate(".concat(c,"deg)")}:void 0,w=U(zt(d),2),k=w[0],E=w[1];return o.createElement("span",l(l({role:"img","aria-label":s.name},p),{},{ref:t,tabIndex:y,onClick:h,className:v}),o.createElement(qt,{icon:s,primaryColor:k,secondaryColor:E,style:b}))}));Wt.displayName="AntdIcon",Wt.getTwoToneColor=function(){var e=qt.getTwoToneColors();return e.calculated?[e.primaryColor,e.secondaryColor]:e.primaryColor},Wt.setTwoToneColor=$t;const Gt=Wt;var Kt=function(e,t){return o.createElement(Gt,l(l({},e),{},{ref:t,icon:Ge}))};Kt.displayName="CloseOutlined";const Qt=o.forwardRef(Kt),Xt={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M699 353h-46.9c-10.2 0-19.9 4.9-25.9 13.3L469 584.3l-71.2-98.8c-6-8.3-15.6-13.3-25.9-13.3H325c-6.5 0-10.3 7.4-6.5 12.7l124.6 172.8a31.8 31.8 0 0051.7 0l210.6-292c3.9-5.3.1-12.7-6.4-12.7z"}},{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"}}]},name:"check-circle",theme:"outlined"};var Jt=function(e,t){return o.createElement(Gt,l(l({},e),{},{ref:t,icon:Xt}))};Jt.displayName="CheckCircleOutlined";const Yt=o.forwardRef(Jt),Zt={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M685.4 354.8c0-4.4-3.6-8-8-8l-66 .3L512 465.6l-99.3-118.4-66.1-.3c-4.4 0-8 3.5-8 8 0 1.9.7 3.7 1.9 5.2l130.1 155L340.5 670a8.32 8.32 0 00-1.9 5.2c0 4.4 3.6 8 8 8l66.1-.3L512 564.4l99.3 118.4 66 .3c4.4 0 8-3.5 8-8 0-1.9-.7-3.7-1.9-5.2L553.5 515l130.1-155c1.2-1.4 1.8-3.3 1.8-5.2z"}},{tag:"path",attrs:{d:"M512 65C264.6 65 64 265.6 64 513s200.6 448 448 448 448-200.6 448-448S759.4 65 512 65zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"}}]},name:"close-circle",theme:"outlined"};var er=function(e,t){return o.createElement(Gt,l(l({},e),{},{ref:t,icon:Zt}))};er.displayName="CloseCircleOutlined";const tr=o.forwardRef(er),rr={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"}},{tag:"path",attrs:{d:"M464 688a48 48 0 1096 0 48 48 0 10-96 0zm24-112h48c4.4 0 8-3.6 8-8V296c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8z"}}]},name:"exclamation-circle",theme:"outlined"};var nr=function(e,t){return o.createElement(Gt,l(l({},e),{},{ref:t,icon:rr}))};nr.displayName="ExclamationCircleOutlined";const ir=o.forwardRef(nr),or={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"}},{tag:"path",attrs:{d:"M464 336a48 48 0 1096 0 48 48 0 10-96 0zm72 112h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V456c0-4.4-3.6-8-8-8z"}}]},name:"info-circle",theme:"outlined"};var ar=function(e,t){return o.createElement(Gt,l(l({},e),{},{ref:t,icon:or}))};ar.displayName="InfoCircleOutlined";const sr=o.forwardRef(ar);var lr=o.createContext({getPrefixCls:function(e,t){return t||(e?"ant-".concat(e):"ant")}}),ur=lr.Consumer;function cr(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=[];return o.Children.forEach(e,(function(e){(null!=e||t.keepEmpty)&&(Array.isArray(e)?r=r.concat(cr(e)):(0,j.isFragment)(e)&&e.props?r=r.concat(cr(e.props.children,t)):r.push(e))})),r}var fr="RC_FORM_INTERNAL_HOOKS",hr=function(){Pt(!1,"Can not find FormContext. Please make sure you wrap Field under Form.")};const dr=o.createContext({getFieldValue:hr,getFieldsValue:hr,getFieldError:hr,getFieldWarning:hr,getFieldsError:hr,isFieldsTouched:hr,isFieldTouched:hr,isFieldValidating:hr,isFieldsValidating:hr,resetFields:hr,setFields:hr,setFieldsValue:hr,validateFields:hr,submit:hr,getInternalHooks:function(){return hr(),{dispatch:hr,initEntityValue:hr,registerField:hr,useSubscribe:hr,setInitialValues:hr,destroyForm:hr,setCallbacks:hr,registerWatch:hr,getFields:hr,setValidateMessages:hr,setPreserve:hr,getInitialValue:hr}}});function pr(e){return null==e?[]:Array.isArray(e)?e:[e]}function mr(){return mr=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},mr.apply(this,arguments)}function gr(e){return gr=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},gr(e)}function vr(e,t){return vr=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},vr(e,t)}function yr(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function br(e,t,r){return br=yr()?Reflect.construct.bind():function(e,t,r){var n=[null];n.push.apply(n,t);var i=new(Function.bind.apply(e,n));return r&&vr(i,r.prototype),i},br.apply(null,arguments)}function wr(e){var t="function"==typeof Map?new Map:void 0;return wr=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,n)}function n(){return br(e,arguments,gr(this).constructor)}return n.prototype=Object.create(e.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),vr(n,e)},wr(e)}var kr=/%[sdj%]/g;function Er(e){if(!e||!e.length)return null;var t={};return e.forEach((function(e){var r=e.field;t[r]=t[r]||[],t[r].push(e)})),t}function xr(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];var i=0,o=r.length;if("function"==typeof e)return e.apply(null,r);if("string"==typeof e){var a=e.replace(kr,(function(e){if("%%"===e)return"%";if(i>=o)return e;switch(e){case"%s":return String(r[i++]);case"%d":return Number(r[i++]);case"%j":try{return JSON.stringify(r[i++])}catch(e){return"[Circular]"}break;default:return e}}));return a}return e}function _r(e,t){return null==e||!("array"!==t||!Array.isArray(e)||e.length)||!(!function(e){return"string"===e||"url"===e||"hex"===e||"email"===e||"date"===e||"pattern"===e}(t)||"string"!=typeof e||e)}function Sr(e,t,r){var n=0,i=e.length;!function o(a){if(a&&a.length)r(a);else{var s=n;n+=1,s<i?t(e[s],o):r([])}}([])}"undefined"!=typeof process&&process.env;var Pr=function(e){var t,r;function n(t,r){var n;return(n=e.call(this,"Async Validation Error")||this).errors=t,n.fields=r,n}return r=e,(t=n).prototype=Object.create(r.prototype),t.prototype.constructor=t,vr(t,r),n}(wr(Error));function Nr(e,t){return function(r){var n,i;return n=e.fullFields?function(e,t){for(var r=e,n=0;n<t.length;n++){if(null==r)return r;r=r[t[n]]}return r}(t,e.fullFields):t[r.field||e.fullField],(i=r)&&void 0!==i.message?(r.field=r.field||e.fullField,r.fieldValue=n,r):{message:"function"==typeof r?r():r,fieldValue:n,field:r.field||e.fullField}}}function Mr(e,t){if(t)for(var r in t)if(t.hasOwnProperty(r)){var n=t[r];"object"==typeof n&&"object"==typeof e[r]?e[r]=mr({},e[r],n):e[r]=n}return e}var Cr,Ar=function(e,t,r,n,i,o){!e.required||r.hasOwnProperty(e.field)&&!_r(t,o||e.type)||n.push(xr(i.messages.required,e.fullField))},Fr=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+\.)+[a-zA-Z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}))$/,Rr=/^#?([a-f0-9]{6}|[a-f0-9]{3})$/i,Ir={integer:function(e){return Ir.number(e)&&parseInt(e,10)===e},float:function(e){return Ir.number(e)&&!Ir.integer(e)},array:function(e){return Array.isArray(e)},regexp:function(e){if(e instanceof RegExp)return!0;try{return!!new RegExp(e)}catch(e){return!1}},date:function(e){return"function"==typeof e.getTime&&"function"==typeof e.getMonth&&"function"==typeof e.getYear&&!isNaN(e.getTime())},number:function(e){return!isNaN(e)&&"number"==typeof e},object:function(e){return"object"==typeof e&&!Ir.array(e)},method:function(e){return"function"==typeof e},email:function(e){return"string"==typeof e&&e.length<=320&&!!e.match(Fr)},url:function(e){return"string"==typeof e&&e.length<=2048&&!!e.match(function(){if(Cr)return Cr;var e="[a-fA-F\\d:]",t=function(t){return t&&t.includeBoundaries?"(?:(?<=\\s|^)(?="+e+")|(?<="+e+")(?=\\s|$))":""},r="(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}",n="[a-fA-F\\d]{1,4}",i=("\n(?:\n(?:"+n+":){7}(?:"+n+"|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:"+n+":){6}(?:"+r+"|:"+n+"|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:"+n+":){5}(?::"+r+"|(?::"+n+"){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:"+n+":){4}(?:(?::"+n+"){0,1}:"+r+"|(?::"+n+"){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:"+n+":){3}(?:(?::"+n+"){0,2}:"+r+"|(?::"+n+"){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:"+n+":){2}(?:(?::"+n+"){0,3}:"+r+"|(?::"+n+"){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:"+n+":){1}(?:(?::"+n+"){0,4}:"+r+"|(?::"+n+"){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::(?:(?::"+n+"){0,5}:"+r+"|(?::"+n+"){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1\n").replace(/\s*\/\/.*$/gm,"").replace(/\n/g,"").trim(),o=new RegExp("(?:^"+r+"$)|(?:^"+i+"$)"),a=new RegExp("^"+r+"$"),s=new RegExp("^"+i+"$"),l=function(e){return e&&e.exact?o:new RegExp("(?:"+t(e)+r+t(e)+")|(?:"+t(e)+i+t(e)+")","g")};l.v4=function(e){return e&&e.exact?a:new RegExp(""+t(e)+r+t(e),"g")},l.v6=function(e){return e&&e.exact?s:new RegExp(""+t(e)+i+t(e),"g")};var u=l.v4().source,c=l.v6().source;return Cr=new RegExp("(?:^(?:(?:(?:[a-z]+:)?//)|www\\.)(?:\\S+(?::\\S*)?@)?(?:localhost|"+u+"|"+c+'|(?:(?:[a-z\\u00a1-\\uffff0-9][-_]*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#][^\\s"]*)?$)',"i")}())},hex:function(e){return"string"==typeof e&&!!e.match(Rr)}},Tr=Ar,Or=function(e,t,r,n,i){(/^\s+$/.test(t)||""===t)&&n.push(xr(i.messages.whitespace,e.fullField))},Lr=function(e,t,r,n,i){if(e.required&&void 0===t)Ar(e,t,r,n,i);else{var o=e.type;["integer","float","array","regexp","object","method","email","number","date","url","hex"].indexOf(o)>-1?Ir[o](t)||n.push(xr(i.messages.types[o],e.fullField,e.type)):o&&typeof t!==e.type&&n.push(xr(i.messages.types[o],e.fullField,e.type))}},Br=function(e,t,r,n,i){var o="number"==typeof e.len,a="number"==typeof e.min,s="number"==typeof e.max,l=t,u=null,c="number"==typeof t,f="string"==typeof t,h=Array.isArray(t);if(c?u="number":f?u="string":h&&(u="array"),!u)return!1;h&&(l=t.length),f&&(l=t.replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,"_").length),o?l!==e.len&&n.push(xr(i.messages[u].len,e.fullField,e.len)):a&&!s&&l<e.min?n.push(xr(i.messages[u].min,e.fullField,e.min)):s&&!a&&l>e.max?n.push(xr(i.messages[u].max,e.fullField,e.max)):a&&s&&(l<e.min||l>e.max)&&n.push(xr(i.messages[u].range,e.fullField,e.min,e.max))},zr=function(e,t,r,n,i){e.enum=Array.isArray(e.enum)?e.enum:[],-1===e.enum.indexOf(t)&&n.push(xr(i.messages.enum,e.fullField,e.enum.join(", ")))},Dr=function(e,t,r,n,i){e.pattern&&(e.pattern instanceof RegExp?(e.pattern.lastIndex=0,e.pattern.test(t)||n.push(xr(i.messages.pattern.mismatch,e.fullField,t,e.pattern))):"string"==typeof e.pattern&&(new RegExp(e.pattern).test(t)||n.push(xr(i.messages.pattern.mismatch,e.fullField,t,e.pattern))))},Ur=function(e,t,r,n,i){var o=e.type,a=[];if(e.required||!e.required&&n.hasOwnProperty(e.field)){if(_r(t,o)&&!e.required)return r();Tr(e,t,n,a,i,o),_r(t,o)||Lr(e,t,n,a,i)}r(a)},jr={string:function(e,t,r,n,i){var o=[];if(e.required||!e.required&&n.hasOwnProperty(e.field)){if(_r(t,"string")&&!e.required)return r();Tr(e,t,n,o,i,"string"),_r(t,"string")||(Lr(e,t,n,o,i),Br(e,t,n,o,i),Dr(e,t,n,o,i),!0===e.whitespace&&Or(e,t,n,o,i))}r(o)},method:function(e,t,r,n,i){var o=[];if(e.required||!e.required&&n.hasOwnProperty(e.field)){if(_r(t)&&!e.required)return r();Tr(e,t,n,o,i),void 0!==t&&Lr(e,t,n,o,i)}r(o)},number:function(e,t,r,n,i){var o=[];if(e.required||!e.required&&n.hasOwnProperty(e.field)){if(""===t&&(t=void 0),_r(t)&&!e.required)return r();Tr(e,t,n,o,i),void 0!==t&&(Lr(e,t,n,o,i),Br(e,t,n,o,i))}r(o)},boolean:function(e,t,r,n,i){var o=[];if(e.required||!e.required&&n.hasOwnProperty(e.field)){if(_r(t)&&!e.required)return r();Tr(e,t,n,o,i),void 0!==t&&Lr(e,t,n,o,i)}r(o)},regexp:function(e,t,r,n,i){var o=[];if(e.required||!e.required&&n.hasOwnProperty(e.field)){if(_r(t)&&!e.required)return r();Tr(e,t,n,o,i),_r(t)||Lr(e,t,n,o,i)}r(o)},integer:function(e,t,r,n,i){var o=[];if(e.required||!e.required&&n.hasOwnProperty(e.field)){if(_r(t)&&!e.required)return r();Tr(e,t,n,o,i),void 0!==t&&(Lr(e,t,n,o,i),Br(e,t,n,o,i))}r(o)},float:function(e,t,r,n,i){var o=[];if(e.required||!e.required&&n.hasOwnProperty(e.field)){if(_r(t)&&!e.required)return r();Tr(e,t,n,o,i),void 0!==t&&(Lr(e,t,n,o,i),Br(e,t,n,o,i))}r(o)},array:function(e,t,r,n,i){var o=[];if(e.required||!e.required&&n.hasOwnProperty(e.field)){if(null==t&&!e.required)return r();Tr(e,t,n,o,i,"array"),null!=t&&(Lr(e,t,n,o,i),Br(e,t,n,o,i))}r(o)},object:function(e,t,r,n,i){var o=[];if(e.required||!e.required&&n.hasOwnProperty(e.field)){if(_r(t)&&!e.required)return r();Tr(e,t,n,o,i),void 0!==t&&Lr(e,t,n,o,i)}r(o)},enum:function(e,t,r,n,i){var o=[];if(e.required||!e.required&&n.hasOwnProperty(e.field)){if(_r(t)&&!e.required)return r();Tr(e,t,n,o,i),void 0!==t&&zr(e,t,n,o,i)}r(o)},pattern:function(e,t,r,n,i){var o=[];if(e.required||!e.required&&n.hasOwnProperty(e.field)){if(_r(t,"string")&&!e.required)return r();Tr(e,t,n,o,i),_r(t,"string")||Dr(e,t,n,o,i)}r(o)},date:function(e,t,r,n,i){var o=[];if(e.required||!e.required&&n.hasOwnProperty(e.field)){if(_r(t,"date")&&!e.required)return r();var a;Tr(e,t,n,o,i),_r(t,"date")||(a=t instanceof Date?t:new Date(t),Lr(e,a,n,o,i),a&&Br(e,a.getTime(),n,o,i))}r(o)},url:Ur,hex:Ur,email:Ur,required:function(e,t,r,n,i){var o=[],a=Array.isArray(t)?"array":typeof t;Tr(e,t,n,o,i,a),r(o)},any:function(e,t,r,n,i){var o=[];if(e.required||!e.required&&n.hasOwnProperty(e.field)){if(_r(t)&&!e.required)return r();Tr(e,t,n,o,i)}r(o)}};function Vr(){return{default:"Validation error on field %s",required:"%s is required",enum:"%s must be one of %s",whitespace:"%s cannot be empty",date:{format:"%s date %s is invalid for format %s",parse:"%s date could not be parsed, %s is invalid ",invalid:"%s date %s is invalid"},types:{string:"%s is not a %s",method:"%s is not a %s (function)",array:"%s is not an %s",object:"%s is not an %s",number:"%s is not a %s",date:"%s is not a %s",boolean:"%s is not a %s",integer:"%s is not an %s",float:"%s is not a %s",regexp:"%s is not a valid %s",email:"%s is not a valid %s",url:"%s is not a valid %s",hex:"%s is not a valid %s"},string:{len:"%s must be exactly %s characters",min:"%s must be at least %s characters",max:"%s cannot be longer than %s characters",range:"%s must be between %s and %s characters"},number:{len:"%s must equal %s",min:"%s cannot be less than %s",max:"%s cannot be greater than %s",range:"%s must be between %s and %s"},array:{len:"%s must be exactly %s in length",min:"%s cannot be less than %s in length",max:"%s cannot be greater than %s in length",range:"%s must be between %s and %s in length"},pattern:{mismatch:"%s value %s does not match pattern %s"},clone:function(){var e=JSON.parse(JSON.stringify(this));return e.clone=this.clone,e}}}var qr=Vr(),$r=function(){function e(e){this.rules=null,this._messages=qr,this.define(e)}var t=e.prototype;return t.define=function(e){var t=this;if(!e)throw new Error("Cannot configure a schema with no rules");if("object"!=typeof e||Array.isArray(e))throw new Error("Rules must be an object");this.rules={},Object.keys(e).forEach((function(r){var n=e[r];t.rules[r]=Array.isArray(n)?n:[n]}))},t.messages=function(e){return e&&(this._messages=Mr(Vr(),e)),this._messages},t.validate=function(t,r,n){var i=this;void 0===r&&(r={}),void 0===n&&(n=function(){});var o=t,a=r,s=n;if("function"==typeof a&&(s=a,a={}),!this.rules||0===Object.keys(this.rules).length)return s&&s(null,o),Promise.resolve(o);if(a.messages){var l=this.messages();l===qr&&(l=Vr()),Mr(l,a.messages),a.messages=l}else a.messages=this.messages();var u={};(a.keys||Object.keys(this.rules)).forEach((function(e){var r=i.rules[e],n=o[e];r.forEach((function(r){var a=r;"function"==typeof a.transform&&(o===t&&(o=mr({},o)),n=o[e]=a.transform(n)),(a="function"==typeof a?{validator:a}:mr({},a)).validator=i.getValidationMethod(a),a.validator&&(a.field=e,a.fullField=a.fullField||e,a.type=i.getType(a),u[e]=u[e]||[],u[e].push({rule:a,value:n,source:o,field:e}))}))}));var c={};return function(e,t,r,n,i){if(t.first){var o=new Promise((function(t,o){var a=function(e){var t=[];return Object.keys(e).forEach((function(r){t.push.apply(t,e[r]||[])})),t}(e);Sr(a,r,(function(e){return n(e),e.length?o(new Pr(e,Er(e))):t(i)}))}));return o.catch((function(e){return e})),o}var a=!0===t.firstFields?Object.keys(e):t.firstFields||[],s=Object.keys(e),l=s.length,u=0,c=[],f=new Promise((function(t,o){var f=function(e){if(c.push.apply(c,e),++u===l)return n(c),c.length?o(new Pr(c,Er(c))):t(i)};s.length||(n(c),t(i)),s.forEach((function(t){var n=e[t];-1!==a.indexOf(t)?Sr(n,r,f):function(e,t,r){var n=[],i=0,o=e.length;function a(e){n.push.apply(n,e||[]),++i===o&&r(n)}e.forEach((function(e){t(e,a)}))}(n,r,f)}))}));return f.catch((function(e){return e})),f}(u,a,(function(t,r){var n,i=t.rule,s=!("object"!==i.type&&"array"!==i.type||"object"!=typeof i.fields&&"object"!=typeof i.defaultField);function l(e,t){return mr({},t,{fullField:i.fullField+"."+e,fullFields:i.fullFields?[].concat(i.fullFields,[e]):[e]})}function u(n){void 0===n&&(n=[]);var u=Array.isArray(n)?n:[n];!a.suppressWarning&&u.length&&e.warning("async-validator:",u),u.length&&void 0!==i.message&&(u=[].concat(i.message));var f=u.map(Nr(i,o));if(a.first&&f.length)return c[i.field]=1,r(f);if(s){if(i.required&&!t.value)return void 0!==i.message?f=[].concat(i.message).map(Nr(i,o)):a.error&&(f=[a.error(i,xr(a.messages.required,i.field))]),r(f);var h={};i.defaultField&&Object.keys(t.value).map((function(e){h[e]=i.defaultField})),h=mr({},h,t.rule.fields);var d={};Object.keys(h).forEach((function(e){var t=h[e],r=Array.isArray(t)?t:[t];d[e]=r.map(l.bind(null,e))}));var p=new e(d);p.messages(a.messages),t.rule.options&&(t.rule.options.messages=a.messages,t.rule.options.error=a.error),p.validate(t.value,t.rule.options||a,(function(e){var t=[];f&&f.length&&t.push.apply(t,f),e&&e.length&&t.push.apply(t,e),r(t.length?t:null)}))}else r(f)}if(s=s&&(i.required||!i.required&&t.value),i.field=t.field,i.asyncValidator)n=i.asyncValidator(i,t.value,u,t.source,a);else if(i.validator){try{n=i.validator(i,t.value,u,t.source,a)}catch(e){null==console.error||console.error(e),a.suppressValidatorError||setTimeout((function(){throw e}),0),u(e.message)}!0===n?u():!1===n?u("function"==typeof i.message?i.message(i.fullField||i.field):i.message||(i.fullField||i.field)+" fails"):n instanceof Array?u(n):n instanceof Error&&u(n.message)}n&&n.then&&n.then((function(){return u()}),(function(e){return u(e)}))}),(function(e){!function(e){for(var t,r,n=[],i={},a=0;a<e.length;a++)t=e[a],r=void 0,Array.isArray(t)?n=(r=n).concat.apply(r,t):n.push(t);n.length?(i=Er(n),s(n,i)):s(null,o)}(e)}),o)},t.getType=function(e){if(void 0===e.type&&e.pattern instanceof RegExp&&(e.type="pattern"),"function"!=typeof e.validator&&e.type&&!jr.hasOwnProperty(e.type))throw new Error(xr("Unknown rule type %s",e.type));return e.type||"string"},t.getValidationMethod=function(e){if("function"==typeof e.validator)return e.validator;var t=Object.keys(e),r=t.indexOf("message");return-1!==r&&t.splice(r,1),1===t.length&&"required"===t[0]?jr.required:jr[this.getType(e)]||void 0},e}();$r.register=function(e,t){if("function"!=typeof t)throw new Error("Cannot register a validator by type, validator is not a function");jr[e]=t},$r.warning=function(){},$r.messages=qr,$r.validators=jr;var Hr="'${name}' is not a valid ${type}",Wr={default:"Validation error on field '${name}'",required:"'${name}' is required",enum:"'${name}' must be one of [${enum}]",whitespace:"'${name}' cannot be empty",date:{format:"'${name}' is invalid for format date",parse:"'${name}' could not be parsed as date",invalid:"'${name}' is invalid date"},types:{string:Hr,method:Hr,array:Hr,object:Hr,number:Hr,date:Hr,boolean:Hr,integer:Hr,float:Hr,regexp:Hr,email:Hr,url:Hr,hex:Hr},string:{len:"'${name}' must be exactly ${len} characters",min:"'${name}' must be at least ${min} characters",max:"'${name}' cannot be longer than ${max} characters",range:"'${name}' must be between ${min} and ${max} characters"},number:{len:"'${name}' must equal ${len}",min:"'${name}' cannot be less than ${min}",max:"'${name}' cannot be greater than ${max}",range:"'${name}' must be between ${min} and ${max}"},array:{len:"'${name}' must be exactly ${len} in length",min:"'${name}' cannot be less than ${min} in length",max:"'${name}' cannot be greater than ${max} in length",range:"'${name}' must be between ${min} and ${max} in length"},pattern:{mismatch:"'${name}' does not match pattern ${pattern}"}};function Gr(e,t){for(var r=e,n=0;n<t.length;n+=1){if(null==r)return;r=r[t[n]]}return r}function Kr(e,t,r,n){if(!t.length)return r;var i,o,a=L(i=t)||ze(i)||z(i)||D(),s=a[0],u=a.slice(1);return o=e||"number"!=typeof s?Array.isArray(e)?De(e):l({},e):[],n&&void 0===r&&1===u.length?delete o[s][u[0]]:o[s]=Kr(o[s],u,r,n),o}function Qr(e,t,r){var n=arguments.length>3&&void 0!==arguments[3]&&arguments[3];return t.length&&n&&void 0===r&&!Gr(e,t.slice(0,-1))?e:Kr(e,t,r,n)}const Xr=function e(t){return Array.isArray(t)?function(t){return t.map((function(t){return e(t)}))}(t):"object"===m(t)&&null!==t?function(t){if(Object.getPrototypeOf(t)===Object.prototype){var r={};for(var n in t)r[n]=e(t[n]);return r}return t}(t):t};function Jr(e){return pr(e)}function Yr(e,t){return Gr(e,t)}function Zr(e,t,r){var n=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=Qr(e,t,r,n);return i}function en(e,t){var r={};return t.forEach((function(t){var n=Yr(e,t);r=Zr(r,t,n)})),r}function tn(e,t){return e&&e.some((function(e){return an(e,t)}))}function rn(e){return"object"===m(e)&&null!==e&&Object.getPrototypeOf(e)===Object.prototype}function nn(e,t){var r=Array.isArray(e)?De(e):l({},e);return t?(Object.keys(t).forEach((function(e){var n=r[e],i=t[e],o=rn(n)&&rn(i);r[e]=o?nn(n,i||{}):Xr(i)})),r):r}function on(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];return r.reduce((function(e,t){return nn(e,t)}),e)}function an(e,t){return!(!e||!t||e.length!==t.length)&&e.every((function(e,r){return t[r]===e}))}function sn(e){var t=arguments.length<=1?void 0:arguments[1];return t&&t.target&&"object"===m(t.target)&&e in t.target?t.target[e]:t}function ln(e,t,r){var n=e.length;if(t<0||t>=n||r<0||r>=n)return e;var i=e[t],o=t-r;return o>0?[].concat(De(e.slice(0,r)),[i],De(e.slice(r,t)),De(e.slice(t+1,n))):o<0?[].concat(De(e.slice(0,t)),De(e.slice(t+1,r+1)),[i],De(e.slice(r+1,n))):e}var un=$r;function cn(e,t){return e.replace(/\$\{\w+\}/g,(function(e){var r=e.slice(2,-1);return t[r]}))}var fn="CODE_LOGIC_ERROR";function hn(e,t,r,n,i){return dn.apply(this,arguments)}function dn(){return dn=k(b().mark((function e(t,r,n,a,s){var u,c,f,h,d,p,m,g,v;return b().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return delete(u=l({},n)).ruleIndex,u.validator&&(c=u.validator,u.validator=function(){try{return c.apply(void 0,arguments)}catch(e){return console.error(e),Promise.reject(fn)}}),f=null,u&&"array"===u.type&&u.defaultField&&(f=u.defaultField,delete u.defaultField),h=new un(i({},t,[u])),d=on({},Wr,a.validateMessages),h.messages(d),p=[],e.prev=9,e.next=12,Promise.resolve(h.validate(i({},t,r),l({},a)));case 12:e.next=17;break;case 14:e.prev=14,e.t0=e.catch(9),e.t0.errors&&(p=e.t0.errors.map((function(e,t){var r=e.message,n=r===fn?d.default:r;return o.isValidElement(n)?o.cloneElement(n,{key:"error_".concat(t)}):n})));case 17:if(p.length||!f){e.next=22;break}return e.next=20,Promise.all(r.map((function(e,r){return hn("".concat(t,".").concat(r),e,f,a,s)})));case 20:return m=e.sent,e.abrupt("return",m.reduce((function(e,t){return[].concat(De(e),De(t))}),[]));case 22:return g=l(l({},n),{},{name:t,enum:(n.enum||[]).join(", ")},s),v=p.map((function(e){return"string"==typeof e?cn(e,g):e})),e.abrupt("return",v);case 25:case"end":return e.stop()}}),e,null,[[9,14]])}))),dn.apply(this,arguments)}function pn(){return(pn=k(b().mark((function e(t){return b().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",Promise.all(t).then((function(e){var t;return(t=[]).concat.apply(t,De(e))})));case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function mn(){return(mn=k(b().mark((function e(t){var r;return b().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=0,e.abrupt("return",new Promise((function(e){t.forEach((function(n){n.then((function(n){n.errors.length&&e([n]),(r+=1)===t.length&&e([])}))}))})));case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var gn=["name"],vn=[];function yn(e,t,r,n,i,o){return"function"==typeof e?e(t,r,"source"in o?{source:o.source}:{}):n!==i}var bn=function(e){d(r,e);var t=y(r);function r(e){var n;return u(this,r),(n=t.call(this,e)).state={resetCount:0},n.cancelRegisterFunc=null,n.mounted=!1,n.touched=!1,n.dirty=!1,n.validatePromise=null,n.prevValidating=void 0,n.errors=vn,n.warnings=vn,n.cancelRegister=function(){var e=n.props,t=e.preserve,r=e.isListField,i=e.name;n.cancelRegisterFunc&&n.cancelRegisterFunc(r,t,Jr(i)),n.cancelRegisterFunc=null},n.getNamePath=function(){var e=n.props,t=e.name,r=e.fieldContext.prefixName;return void 0!==t?[].concat(De(void 0===r?[]:r),De(t)):[]},n.getRules=function(){var e=n.props,t=e.rules,r=void 0===t?[]:t,i=e.fieldContext;return r.map((function(e){return"function"==typeof e?e(i):e}))},n.refresh=function(){n.mounted&&n.setState((function(e){return{resetCount:e.resetCount+1}}))},n.triggerMetaEvent=function(e){var t=n.props.onMetaChange;null==t||t(l(l({},n.getMeta()),{},{destroy:e}))},n.onStoreChange=function(e,t,r){var i=n.props,o=i.shouldUpdate,a=i.dependencies,s=void 0===a?[]:a,l=i.onReset,u=r.store,c=n.getNamePath(),f=n.getValue(e),h=n.getValue(u),d=t&&tn(t,c);switch("valueUpdate"===r.type&&"external"===r.source&&f!==h&&(n.touched=!0,n.dirty=!0,n.validatePromise=null,n.errors=vn,n.warnings=vn,n.triggerMetaEvent()),r.type){case"reset":if(!t||d)return n.touched=!1,n.dirty=!1,n.validatePromise=null,n.errors=vn,n.warnings=vn,n.triggerMetaEvent(),null==l||l(),void n.refresh();break;case"remove":if(o)return void n.reRender();break;case"setField":if(d){var p=r.data;return"touched"in p&&(n.touched=p.touched),"validating"in p&&!("originRCField"in p)&&(n.validatePromise=p.validating?Promise.resolve([]):null),"errors"in p&&(n.errors=p.errors||vn),"warnings"in p&&(n.warnings=p.warnings||vn),n.dirty=!0,n.triggerMetaEvent(),void n.reRender()}if(o&&!c.length&&yn(o,e,u,f,h,r))return void n.reRender();break;case"dependenciesUpdate":if(s.map(Jr).some((function(e){return tn(r.relatedFields,e)})))return void n.reRender();break;default:if(d||(!s.length||c.length||o)&&yn(o,e,u,f,h,r))return void n.reRender()}!0===o&&n.reRender()},n.validateRules=function(e){var t=n.getNamePath(),r=n.getValue(),i=Promise.resolve().then((function(){if(!n.mounted)return[];var o=n.props,a=o.validateFirst,s=void 0!==a&&a,u=o.messageVariables,c=(e||{}).triggerName,f=n.getRules();c&&(f=f.filter((function(e){var t=e.validateTrigger;return!t||pr(t).includes(c)})));var h=function(e,t,r,n,i,o){var a,s=e.join("."),u=r.map((function(e,t){var r=e.validator,n=l(l({},e),{},{ruleIndex:t});return r&&(n.validator=function(e,t,n){var i=!1,o=r(e,t,(function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];Promise.resolve().then((function(){Pt(!i,"Your validator function has already return a promise. `callback` will be ignored."),i||n.apply(void 0,t)}))}));i=o&&"function"==typeof o.then&&"function"==typeof o.catch,Pt(i,"`callback` is deprecated. Please return a promise instead."),i&&o.then((function(){n()})).catch((function(e){n(e||" ")}))}),n})).sort((function(e,t){var r=e.warningOnly,n=e.ruleIndex,i=t.warningOnly,o=t.ruleIndex;return!!r==!!i?n-o:r?1:-1}));if(!0===i)a=new Promise(function(){var e=k(b().mark((function e(r,i){var a,l,c;return b().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:a=0;case 1:if(!(a<u.length)){e.next=12;break}return l=u[a],e.next=5,hn(s,t,l,n,o);case 5:if(!(c=e.sent).length){e.next=9;break}return i([{errors:c,rule:l}]),e.abrupt("return");case 9:a+=1,e.next=1;break;case 12:r([]);case 13:case"end":return e.stop()}}),e)})));return function(t,r){return e.apply(this,arguments)}}());else{var c=u.map((function(e){return hn(s,t,e,n,o).then((function(t){return{errors:t,rule:e}}))}));a=(i?function(e){return mn.apply(this,arguments)}(c):function(e){return pn.apply(this,arguments)}(c)).then((function(e){return Promise.reject(e)}))}return a.catch((function(e){return e})),a}(t,r,f,e,s,u);return h.catch((function(e){return e})).then((function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:vn;if(n.validatePromise===i){n.validatePromise=null;var t=[],r=[];e.forEach((function(e){var n=e.rule.warningOnly,i=e.errors,o=void 0===i?vn:i;n?r.push.apply(r,De(o)):t.push.apply(t,De(o))})),n.errors=t,n.warnings=r,n.triggerMetaEvent(),n.reRender()}})),h}));return n.validatePromise=i,n.dirty=!0,n.errors=vn,n.warnings=vn,n.triggerMetaEvent(),n.reRender(),i},n.isFieldValidating=function(){return!!n.validatePromise},n.isFieldTouched=function(){return n.touched},n.isFieldDirty=function(){return!(!n.dirty&&void 0===n.props.initialValue)||void 0!==(0,n.props.fieldContext.getInternalHooks(fr).getInitialValue)(n.getNamePath())},n.getErrors=function(){return n.errors},n.getWarnings=function(){return n.warnings},n.isListField=function(){return n.props.isListField},n.isList=function(){return n.props.isList},n.isPreserve=function(){return n.props.preserve},n.getMeta=function(){return n.prevValidating=n.isFieldValidating(),{touched:n.isFieldTouched(),validating:n.prevValidating,errors:n.errors,warnings:n.warnings,name:n.getNamePath()}},n.getOnlyChild=function(e){if("function"==typeof e){var t=n.getMeta();return l(l({},n.getOnlyChild(e(n.getControlled(),t,n.props.fieldContext))),{},{isFunction:!0})}var r=cr(e);return 1===r.length&&o.isValidElement(r[0])?{child:r[0],isFunction:!1}:{child:r,isFunction:!1}},n.getValue=function(e){var t=n.props.fieldContext.getFieldsValue,r=n.getNamePath();return Yr(e||t(!0),r)},n.getControlled=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.props,r=t.trigger,o=t.validateTrigger,a=t.getValueFromEvent,s=t.normalize,u=t.valuePropName,c=t.getValueProps,f=t.fieldContext,h=void 0!==o?o:f.validateTrigger,d=n.getNamePath(),p=f.getInternalHooks,m=f.getFieldsValue,g=p(fr),v=g.dispatch,y=n.getValue(),b=c||function(e){return i({},u,e)},w=e[r],k=l(l({},e),b(y));k[r]=function(){var e;n.touched=!0,n.dirty=!0,n.triggerMetaEvent();for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];e=a?a.apply(void 0,r):sn.apply(void 0,[u].concat(r)),s&&(e=s(e,y,m(!0))),v({type:"updateValue",namePath:d,value:e}),w&&w.apply(void 0,r)};var E=pr(h||[]);return E.forEach((function(e){var t=k[e];k[e]=function(){t&&t.apply(void 0,arguments);var r=n.props.rules;r&&r.length&&v({type:"validateField",namePath:d,triggerName:e})}})),k},e.fieldContext&&(0,(0,e.fieldContext.getInternalHooks)(fr).initEntityValue)(g(n)),n}return f(r,[{key:"componentDidMount",value:function(){var e=this.props,t=e.shouldUpdate,r=e.fieldContext;if(this.mounted=!0,r){var n=(0,r.getInternalHooks)(fr).registerField;this.cancelRegisterFunc=n(this)}!0===t&&this.reRender()}},{key:"componentWillUnmount",value:function(){this.cancelRegister(),this.triggerMetaEvent(!0),this.mounted=!1}},{key:"reRender",value:function(){this.mounted&&this.forceUpdate()}},{key:"render",value:function(){var e,t=this.state.resetCount,r=this.props.children,n=this.getOnlyChild(r),i=n.child;return n.isFunction?e=i:o.isValidElement(i)?e=o.cloneElement(i,this.getControlled(i.props)):(Pt(!i,"`children` of Field is not validate ReactElement."),e=i),o.createElement(o.Fragment,{key:t},e)}}]),r}(o.Component);bn.contextType=dr,bn.defaultProps={trigger:"onChange",valuePropName:"value"};const wn=function(e){var t=e.name,r=a(e,gn),i=o.useContext(dr),s=void 0!==t?Jr(t):void 0,l="keep";return r.isListField||(l="_".concat((s||[]).join("_"))),o.createElement(bn,n({key:l,name:s},r,{fieldContext:i}))},kn=o.createContext(null);var En="__@field_split__";function xn(e){return e.map((function(e){return"".concat(m(e),":").concat(e)})).join(En)}var _n=function(){function e(){u(this,e),this.kvs=new Map}return f(e,[{key:"set",value:function(e,t){this.kvs.set(xn(e),t)}},{key:"get",value:function(e){return this.kvs.get(xn(e))}},{key:"update",value:function(e,t){var r=t(this.get(e));r?this.set(e,r):this.delete(e)}},{key:"delete",value:function(e){this.kvs.delete(xn(e))}},{key:"map",value:function(e){return De(this.kvs.entries()).map((function(t){var r=U(t,2),n=r[0],i=r[1],o=n.split(En);return e({key:o.map((function(e){var t=U(e.match(/^([^:]*):(.*)$/),3),r=t[1],n=t[2];return"number"===r?Number(n):n})),value:i})}))}},{key:"toJSON",value:function(){var e={};return this.map((function(t){var r=t.key,n=t.value;return e[r.join(".")]=n,null})),e}}]),e}();const Sn=_n;var Pn=["name","errors"],Nn=f((function e(t){var r=this;u(this,e),this.formHooked=!1,this.forceRootUpdate=void 0,this.subscribable=!0,this.store={},this.fieldEntities=[],this.initialValues={},this.callbacks={},this.validateMessages=null,this.preserve=null,this.lastValidatePromise=null,this.getForm=function(){return{getFieldValue:r.getFieldValue,getFieldsValue:r.getFieldsValue,getFieldError:r.getFieldError,getFieldWarning:r.getFieldWarning,getFieldsError:r.getFieldsError,isFieldsTouched:r.isFieldsTouched,isFieldTouched:r.isFieldTouched,isFieldValidating:r.isFieldValidating,isFieldsValidating:r.isFieldsValidating,resetFields:r.resetFields,setFields:r.setFields,setFieldsValue:r.setFieldsValue,validateFields:r.validateFields,submit:r.submit,_init:!0,getInternalHooks:r.getInternalHooks}},this.getInternalHooks=function(e){return e===fr?(r.formHooked=!0,{dispatch:r.dispatch,initEntityValue:r.initEntityValue,registerField:r.registerField,useSubscribe:r.useSubscribe,setInitialValues:r.setInitialValues,destroyForm:r.destroyForm,setCallbacks:r.setCallbacks,setValidateMessages:r.setValidateMessages,getFields:r.getFields,setPreserve:r.setPreserve,getInitialValue:r.getInitialValue,registerWatch:r.registerWatch}):(Pt(!1,"`getInternalHooks` is internal usage. Should not call directly."),null)},this.useSubscribe=function(e){r.subscribable=e},this.prevWithoutPreserves=null,this.setInitialValues=function(e,t){if(r.initialValues=e||{},t){var n,i=on({},e,r.store);null===(n=r.prevWithoutPreserves)||void 0===n||n.map((function(t){var r=t.key;i=Zr(i,r,Yr(e,r))})),r.prevWithoutPreserves=null,r.updateStore(i)}},this.destroyForm=function(){var e=new Sn;r.getFieldEntities(!0).forEach((function(t){r.isMergedPreserve(t.isPreserve())||e.set(t.getNamePath(),!0)})),r.prevWithoutPreserves=e},this.getInitialValue=function(e){var t=Yr(r.initialValues,e);return e.length?Xr(t):t},this.setCallbacks=function(e){r.callbacks=e},this.setValidateMessages=function(e){r.validateMessages=e},this.setPreserve=function(e){r.preserve=e},this.watchList=[],this.registerWatch=function(e){return r.watchList.push(e),function(){r.watchList=r.watchList.filter((function(t){return t!==e}))}},this.notifyWatch=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];if(r.watchList.length){var t=r.getFieldsValue();r.watchList.forEach((function(r){r(t,e)}))}},this.timeoutId=null,this.warningUnhooked=function(){},this.updateStore=function(e){r.store=e},this.getFieldEntities=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return e?r.fieldEntities.filter((function(e){return e.getNamePath().length})):r.fieldEntities},this.getFieldsMap=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=new Sn;return r.getFieldEntities(e).forEach((function(e){var r=e.getNamePath();t.set(r,e)})),t},this.getFieldEntitiesForNamePathList=function(e){if(!e)return r.getFieldEntities(!0);var t=r.getFieldsMap(!0);return e.map((function(e){var r=Jr(e);return t.get(r)||{INVALIDATE_NAME_PATH:Jr(e)}}))},this.getFieldsValue=function(e,t){if(r.warningUnhooked(),!0===e&&!t)return r.store;var n=r.getFieldEntitiesForNamePathList(Array.isArray(e)?e:null),i=[];return n.forEach((function(r){var n,o="INVALIDATE_NAME_PATH"in r?r.INVALIDATE_NAME_PATH:r.getNamePath();if(e||!(null===(n=r.isListField)||void 0===n?void 0:n.call(r)))if(t){var a="getMeta"in r?r.getMeta():null;t(a)&&i.push(o)}else i.push(o)})),en(r.store,i.map(Jr))},this.getFieldValue=function(e){r.warningUnhooked();var t=Jr(e);return Yr(r.store,t)},this.getFieldsError=function(e){return r.warningUnhooked(),r.getFieldEntitiesForNamePathList(e).map((function(t,r){return t&&!("INVALIDATE_NAME_PATH"in t)?{name:t.getNamePath(),errors:t.getErrors(),warnings:t.getWarnings()}:{name:Jr(e[r]),errors:[],warnings:[]}}))},this.getFieldError=function(e){r.warningUnhooked();var t=Jr(e);return r.getFieldsError([t])[0].errors},this.getFieldWarning=function(e){r.warningUnhooked();var t=Jr(e);return r.getFieldsError([t])[0].warnings},this.isFieldsTouched=function(){r.warningUnhooked();for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var i,o=t[0],a=t[1],s=!1;0===t.length?i=null:1===t.length?Array.isArray(o)?(i=o.map(Jr),s=!1):(i=null,s=o):(i=o.map(Jr),s=a);var l=r.getFieldEntities(!0),u=function(e){return e.isFieldTouched()};if(!i)return s?l.every(u):l.some(u);var c=new Sn;i.forEach((function(e){c.set(e,[])})),l.forEach((function(e){var t=e.getNamePath();i.forEach((function(r){r.every((function(e,r){return t[r]===e}))&&c.update(r,(function(t){return[].concat(De(t),[e])}))}))}));var f=function(e){return e.some(u)},h=c.map((function(e){return e.value}));return s?h.every(f):h.some(f)},this.isFieldTouched=function(e){return r.warningUnhooked(),r.isFieldsTouched([e])},this.isFieldsValidating=function(e){r.warningUnhooked();var t=r.getFieldEntities();if(!e)return t.some((function(e){return e.isFieldValidating()}));var n=e.map(Jr);return t.some((function(e){var t=e.getNamePath();return tn(n,t)&&e.isFieldValidating()}))},this.isFieldValidating=function(e){return r.warningUnhooked(),r.isFieldsValidating([e])},this.resetWithFieldInitialValue=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=new Sn,n=r.getFieldEntities(!0);n.forEach((function(e){var r=e.props.initialValue,n=e.getNamePath();if(void 0!==r){var i=t.get(n)||new Set;i.add({entity:e,value:r}),t.set(n,i)}}));var i,o=function(n){n.forEach((function(n){if(void 0!==n.props.initialValue){var i=n.getNamePath();if(void 0!==r.getInitialValue(i))Pt(!1,"Form already set 'initialValues' with path '".concat(i.join("."),"'. Field can not overwrite it."));else{var o=t.get(i);if(o&&o.size>1)Pt(!1,"Multiple Field with path '".concat(i.join("."),"' set 'initialValue'. Can not decide which one to pick."));else if(o){var a=r.getFieldValue(i);e.skipExist&&void 0!==a||r.updateStore(Zr(r.store,i,De(o)[0].value))}}}}))};e.entities?i=e.entities:e.namePathList?(i=[],e.namePathList.forEach((function(e){var r,n=t.get(e);n&&(r=i).push.apply(r,De(De(n).map((function(e){return e.entity}))))}))):i=n,o(i)},this.resetFields=function(e){r.warningUnhooked();var t=r.store;if(!e)return r.updateStore(on({},r.initialValues)),r.resetWithFieldInitialValue(),r.notifyObservers(t,null,{type:"reset"}),void r.notifyWatch();var n=e.map(Jr);n.forEach((function(e){var t=r.getInitialValue(e);r.updateStore(Zr(r.store,e,t))})),r.resetWithFieldInitialValue({namePathList:n}),r.notifyObservers(t,n,{type:"reset"}),r.notifyWatch(n)},this.setFields=function(e){r.warningUnhooked();var t=r.store,n=[];e.forEach((function(e){var i=e.name,o=(e.errors,a(e,Pn)),s=Jr(i);n.push(s),"value"in o&&r.updateStore(Zr(r.store,s,o.value)),r.notifyObservers(t,[s],{type:"setField",data:e})})),r.notifyWatch(n)},this.getFields=function(){return r.getFieldEntities(!0).map((function(e){var t=e.getNamePath(),n=l(l({},e.getMeta()),{},{name:t,value:r.getFieldValue(t)});return Object.defineProperty(n,"originRCField",{value:!0}),n}))},this.initEntityValue=function(e){var t=e.props.initialValue;if(void 0!==t){var n=e.getNamePath();void 0===Yr(r.store,n)&&r.updateStore(Zr(r.store,n,t))}},this.isMergedPreserve=function(e){var t=void 0!==e?e:r.preserve;return null==t||t},this.registerField=function(e){r.fieldEntities.push(e);var t=e.getNamePath();if(r.notifyWatch([t]),void 0!==e.props.initialValue){var n=r.store;r.resetWithFieldInitialValue({entities:[e],skipExist:!0}),r.notifyObservers(n,[e.getNamePath()],{type:"valueUpdate",source:"internal"})}return function(n,i){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];if(r.fieldEntities=r.fieldEntities.filter((function(t){return t!==e})),!r.isMergedPreserve(i)&&(!n||o.length>1)){var a=n?void 0:r.getInitialValue(t);if(t.length&&r.getFieldValue(t)!==a&&r.fieldEntities.every((function(e){return!an(e.getNamePath(),t)}))){var s=r.store;r.updateStore(Zr(s,t,a,!0)),r.notifyObservers(s,[t],{type:"remove"}),r.triggerDependenciesUpdate(s,t)}}r.notifyWatch([t])}},this.dispatch=function(e){switch(e.type){case"updateValue":var t=e.namePath,n=e.value;r.updateValue(t,n);break;case"validateField":var i=e.namePath,o=e.triggerName;r.validateFields([i],{triggerName:o})}},this.notifyObservers=function(e,t,n){if(r.subscribable){var i=l(l({},n),{},{store:r.getFieldsValue(!0)});r.getFieldEntities().forEach((function(r){(0,r.onStoreChange)(e,t,i)}))}else r.forceRootUpdate()},this.triggerDependenciesUpdate=function(e,t){var n=r.getDependencyChildrenFields(t);return n.length&&r.validateFields(n),r.notifyObservers(e,n,{type:"dependenciesUpdate",relatedFields:[t].concat(De(n))}),n},this.updateValue=function(e,t){var n=Jr(e),i=r.store;r.updateStore(Zr(r.store,n,t)),r.notifyObservers(i,[n],{type:"valueUpdate",source:"internal"}),r.notifyWatch([n]);var o=r.triggerDependenciesUpdate(i,n),a=r.callbacks.onValuesChange;a&&a(en(r.store,[n]),r.getFieldsValue()),r.triggerOnFieldsChange([n].concat(De(o)))},this.setFieldsValue=function(e){r.warningUnhooked();var t=r.store;if(e){var n=on(r.store,e);r.updateStore(n)}r.notifyObservers(t,null,{type:"valueUpdate",source:"external"}),r.notifyWatch()},this.getDependencyChildrenFields=function(e){var t=new Set,n=[],i=new Sn;return r.getFieldEntities().forEach((function(e){(e.props.dependencies||[]).forEach((function(t){var r=Jr(t);i.update(r,(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Set;return t.add(e),t}))}))})),function e(r){(i.get(r)||new Set).forEach((function(r){if(!t.has(r)){t.add(r);var i=r.getNamePath();r.isFieldDirty()&&i.length&&(n.push(i),e(i))}}))}(e),n},this.triggerOnFieldsChange=function(e,t){var n=r.callbacks.onFieldsChange;if(n){var i=r.getFields();if(t){var o=new Sn;t.forEach((function(e){var t=e.name,r=e.errors;o.set(t,r)})),i.forEach((function(e){e.errors=o.get(e.name)||e.errors}))}n(i.filter((function(t){var r=t.name;return tn(e,r)})),i)}},this.validateFields=function(e,t){r.warningUnhooked();var n=!!e,i=n?e.map(Jr):[],o=[];r.getFieldEntities(!0).forEach((function(a){if(n||i.push(a.getNamePath()),(null==t?void 0:t.recursive)&&n){var s=a.getNamePath();s.every((function(t,r){return e[r]===t||void 0===e[r]}))&&i.push(s)}if(a.props.rules&&a.props.rules.length){var u=a.getNamePath();if(!n||tn(i,u)){var c=a.validateRules(l({validateMessages:l(l({},Wr),r.validateMessages)},t));o.push(c.then((function(){return{name:u,errors:[],warnings:[]}})).catch((function(e){var t=[],r=[];return e.forEach((function(e){var n=e.rule.warningOnly,i=e.errors;n?r.push.apply(r,De(i)):t.push.apply(t,De(i))})),t.length?Promise.reject({name:u,errors:t,warnings:r}):{name:u,errors:t,warnings:r}})))}}}));var a=function(e){var t=!1,r=e.length,n=[];return e.length?new Promise((function(i,o){e.forEach((function(e,a){e.catch((function(e){return t=!0,e})).then((function(e){r-=1,n[a]=e,r>0||(t&&o(n),i(n))}))}))})):Promise.resolve([])}(o);r.lastValidatePromise=a,a.catch((function(e){return e})).then((function(e){var t=e.map((function(e){return e.name}));r.notifyObservers(r.store,t,{type:"validateFinish"}),r.triggerOnFieldsChange(t,e)}));var s=a.then((function(){return r.lastValidatePromise===a?Promise.resolve(r.getFieldsValue(i)):Promise.reject([])})).catch((function(e){var t=e.filter((function(e){return e&&e.errors.length}));return Promise.reject({values:r.getFieldsValue(i),errorFields:t,outOfDate:r.lastValidatePromise!==a})}));return s.catch((function(e){return e})),s},this.submit=function(){r.warningUnhooked(),r.validateFields().then((function(e){var t=r.callbacks.onFinish;if(t)try{t(e)}catch(e){console.error(e)}})).catch((function(e){var t=r.callbacks.onFinishFailed;t&&t(e)}))},this.forceRootUpdate=t}));const Mn=function(e){var t=o.useRef(),r=U(o.useState({}),2)[1];if(!t.current)if(e)t.current=e;else{var n=new Nn((function(){r({})}));t.current=n.getForm()}return[t.current]};var Cn=o.createContext({triggerFormChange:function(){},triggerFormFinish:function(){},registerForm:function(){},unregisterForm:function(){}}),An=function(e){var t=e.validateMessages,r=e.onFormChange,n=e.onFormFinish,a=e.children,s=o.useContext(Cn),u=o.useRef({});return o.createElement(Cn.Provider,{value:l(l({},s),{},{validateMessages:l(l({},s.validateMessages),t),triggerFormChange:function(e,t){r&&r(e,{changedFields:t,forms:u.current}),s.triggerFormChange(e,t)},triggerFormFinish:function(e,t){n&&n(e,{values:t,forms:u.current}),s.triggerFormFinish(e,t)},registerForm:function(e,t){e&&(u.current=l(l({},u.current),{},i({},e,t))),s.registerForm(e,t)},unregisterForm:function(e){var t=l({},u.current);delete t[e],u.current=t,s.unregisterForm(e)}})},a)};const Fn=Cn;var Rn=["name","initialValues","fields","form","preserve","children","component","validateMessages","validateTrigger","onValuesChange","onFieldsChange","onFinish","onFinishFailed"];const In=function(e,t){var r=e.name,i=e.initialValues,s=e.fields,u=e.form,c=e.preserve,f=e.children,h=e.component,d=void 0===h?"form":h,p=e.validateMessages,g=e.validateTrigger,v=void 0===g?"onChange":g,y=e.onValuesChange,b=e.onFieldsChange,w=e.onFinish,k=e.onFinishFailed,E=a(e,Rn),x=o.useContext(Fn),_=U(Mn(u),1)[0],S=_.getInternalHooks(fr),P=S.useSubscribe,N=S.setInitialValues,M=S.setCallbacks,C=S.setValidateMessages,A=S.setPreserve,F=S.destroyForm;o.useImperativeHandle(t,(function(){return _})),o.useEffect((function(){return x.registerForm(r,_),function(){x.unregisterForm(r)}}),[x,_,r]),C(l(l({},x.validateMessages),p)),M({onValuesChange:y,onFieldsChange:function(e){if(x.triggerFormChange(r,e),b){for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];b.apply(void 0,[e].concat(n))}},onFinish:function(e){x.triggerFormFinish(r,e),w&&w(e)},onFinishFailed:k}),A(c);var R,I=o.useRef(null);N(i,!I.current),I.current||(I.current=!0),o.useEffect((function(){return F}),[]);var T="function"==typeof f;R=T?f(_.getFieldsValue(!0),_):f,P(!T);var O=o.useRef();o.useEffect((function(){(function(e,t){if(e===t)return!0;if(!e&&t||e&&!t)return!1;if(!e||!t||"object"!==m(e)||"object"!==m(t))return!1;var r=Object.keys(e),n=Object.keys(t),i=new Set([].concat(De(r),De(n)));return De(i).every((function(r){var n=e[r],i=t[r];return"function"==typeof n&&"function"==typeof i||n===i}))})(O.current||[],s||[])||_.setFields(s||[]),O.current=s}),[s,_]);var L=o.useMemo((function(){return l(l({},_),{},{validateTrigger:v})}),[_,v]),B=o.createElement(dr.Provider,{value:L},R);return!1===d?B:o.createElement(d,n({},E,{onSubmit:function(e){e.preventDefault(),e.stopPropagation(),_.submit()},onReset:function(e){var t;e.preventDefault(),_.resetFields(),null===(t=E.onReset)||void 0===t||t.call(E,e)}}),B)};function Tn(e){try{return JSON.stringify(e)}catch(e){return Math.random()}}var On=o.forwardRef(In);On.FormProvider=An,On.Field=wn,On.List=function(e){var t=e.name,r=e.initialValue,n=e.children,i=e.rules,a=e.validateTrigger,s=o.useContext(dr),u=o.useRef({keys:[],id:0}).current,c=o.useMemo((function(){var e=Jr(s.prefixName)||[];return[].concat(De(e),De(Jr(t)))}),[s.prefixName,t]),f=o.useMemo((function(){return l(l({},s),{},{prefixName:c})}),[s,c]),h=o.useMemo((function(){return{getKey:function(e){var t=c.length,r=e[t];return[u.keys[r],e.slice(t+1)]}}}),[c]);return"function"!=typeof n?(Pt(!1,"Form.List only accepts function as children."),null):o.createElement(kn.Provider,{value:h},o.createElement(dr.Provider,{value:f},o.createElement(wn,{name:[],shouldUpdate:function(e,t,r){return"internal"!==r.source&&e!==t},rules:i,validateTrigger:a,initialValue:r,isList:!0},(function(e,t){var r=e.value,i=void 0===r?[]:r,o=e.onChange,a=s.getFieldValue,l=function(){return a(c||[])||[]},f={add:function(e,t){var r=l();t>=0&&t<=r.length?(u.keys=[].concat(De(u.keys.slice(0,t)),[u.id],De(u.keys.slice(t))),o([].concat(De(r.slice(0,t)),[e],De(r.slice(t))))):(u.keys=[].concat(De(u.keys),[u.id]),o([].concat(De(r),[e]))),u.id+=1},remove:function(e){var t=l(),r=new Set(Array.isArray(e)?e:[e]);r.size<=0||(u.keys=u.keys.filter((function(e,t){return!r.has(t)})),o(t.filter((function(e,t){return!r.has(t)}))))},move:function(e,t){if(e!==t){var r=l();e<0||e>=r.length||t<0||t>=r.length||(u.keys=ln(u.keys,e,t),o(ln(r,e,t)))}}},h=i||[];return Array.isArray(h)||(h=[]),n(h.map((function(e,t){var r=u.keys[t];return void 0===r&&(u.keys[t]=u.id,r=u.keys[t],u.id+=1),{name:t,key:r,isListField:!0}})),f,t)}))))},On.useForm=Mn,On.useWatch=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1?arguments[1]:void 0,r=(0,o.useState)(),n=U(r,2),i=n[0],a=n[1],s=(0,o.useMemo)((function(){return Tn(i)}),[i]),l=(0,o.useRef)(s);l.current=s;var u=(0,o.useContext)(dr),c=t||u,f=c&&c._init,h=Jr(e),d=(0,o.useRef)(h);return d.current=h,(0,o.useEffect)((function(){if(f){var e=c.getFieldsValue,t=(0,(0,c.getInternalHooks)(fr).registerWatch)((function(e){var t=Yr(e,d.current),r=Tn(t);l.current!==r&&(l.current=r,a(t))})),r=Yr(e(),d.current);return a(r),t}}),[]),i};var Ln=Number.isNaN||function(e){return"number"==typeof e&&e!=e};function Bn(e,t){if(e.length!==t.length)return!1;for(var r=0;r<e.length;r++)if(!((n=e[r])===(i=t[r])||Ln(n)&&Ln(i)))return!1;var n,i;return!0}const zn={placeholder:"Select time",rangePlaceholder:["Start time","End time"]};var Dn={lang:n({placeholder:"Select date",yearPlaceholder:"Select year",quarterPlaceholder:"Select quarter",monthPlaceholder:"Select month",weekPlaceholder:"Select week",rangePlaceholder:["Start date","End date"],rangeYearPlaceholder:["Start year","End year"],rangeQuarterPlaceholder:["Start quarter","End quarter"],rangeMonthPlaceholder:["Start month","End month"],rangeWeekPlaceholder:["Start week","End week"]},{locale:"en_US",today:"Today",now:"Now",backToToday:"Back to today",ok:"OK",clear:"Clear",month:"Month",year:"Year",timeSelect:"select time",dateSelect:"select date",weekSelect:"Choose a week",monthSelect:"Choose a month",yearSelect:"Choose a year",decadeSelect:"Choose a decade",yearFormat:"YYYY",dateFormat:"M/D/YYYY",dayFormat:"D",dateTimeFormat:"M/D/YYYY HH:mm:ss",monthBeforeYear:!0,previousMonth:"Previous month (PageUp)",nextMonth:"Next month (PageDown)",previousYear:"Last year (Control + left)",nextYear:"Next year (Control + right)",previousDecade:"Last decade",nextDecade:"Next decade",previousCentury:"Last century",nextCentury:"Next century"}),timePickerLocale:n({},zn)},Un="${label} is not a valid ${type}";const jn={locale:"en",Pagination:{items_per_page:"/ page",jump_to:"Go to",jump_to_confirm:"confirm",page:"Page",prev_page:"Previous Page",next_page:"Next Page",prev_5:"Previous 5 Pages",next_5:"Next 5 Pages",prev_3:"Previous 3 Pages",next_3:"Next 3 Pages",page_size:"Page Size"},DatePicker:Dn,TimePicker:zn,Calendar:Dn,global:{placeholder:"Please select"},Table:{filterTitle:"Filter menu",filterConfirm:"OK",filterReset:"Reset",filterEmptyText:"No filters",filterCheckall:"Select all items",filterSearchPlaceholder:"Search in filters",emptyText:"No data",selectAll:"Select current page",selectInvert:"Invert current page",selectNone:"Clear all data",selectionAll:"Select all data",sortTitle:"Sort",expand:"Expand row",collapse:"Collapse row",triggerDesc:"Click to sort descending",triggerAsc:"Click to sort ascending",cancelSort:"Click to cancel sorting"},Modal:{okText:"OK",cancelText:"Cancel",justOkText:"OK"},Popconfirm:{okText:"OK",cancelText:"Cancel"},Transfer:{titles:["",""],searchPlaceholder:"Search here",itemUnit:"item",itemsUnit:"items",remove:"Remove",selectCurrent:"Select current page",removeCurrent:"Remove current page",selectAll:"Select all data",removeAll:"Remove all data",selectInvert:"Invert current page"},Upload:{uploading:"Uploading...",removeFile:"Remove file",uploadError:"Upload error",previewFile:"Preview file",downloadFile:"Download file"},Empty:{description:"No Data"},Icon:{icon:"icon"},Text:{edit:"Edit",copy:"Copy",copied:"Copied",expand:"Expand"},PageHeader:{back:"Back"},Form:{optional:"(optional)",defaultValidateMessages:{default:"Field validation error for ${label}",required:"Please enter ${label}",enum:"${label} must be one of [${enum}]",whitespace:"${label} cannot be a blank character",date:{format:"${label} date format is invalid",parse:"${label} cannot be converted to a date",invalid:"${label} is an invalid date"},types:{string:Un,method:Un,array:Un,object:Un,number:Un,date:Un,boolean:Un,integer:Un,float:Un,regexp:Un,email:Un,url:Un,hex:Un},string:{len:"${label} must be ${len} characters",min:"${label} must be at least ${min} characters",max:"${label} must be up to ${max} characters",range:"${label} must be between ${min}-${max} characters"},number:{len:"${label} must be equal to ${len}",min:"${label} must be minimum ${min}",max:"${label} must be maximum ${max}",range:"${label} must be between ${min}-${max}"},array:{len:"Must be ${len} ${label}",min:"At least ${min} ${label}",max:"At most ${max} ${label}",range:"The amount of ${label} must be between ${min}-${max}"},pattern:{mismatch:"${label} does not match the pattern ${pattern}"}}},Image:{preview:"Preview"}};var Vn=n({},jn.Modal);function qn(e){Vn=e?n(n({},Vn),e):n({},jn.Modal)}const $n=(0,o.createContext)(void 0);var Hn=function(e){d(r,e);var t=y(r);function r(e){var i;return u(this,r),(i=t.call(this,e)).getMemoizedContextValue=function(e,t){void 0===t&&(t=Bn);var r=null;function n(){for(var n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];if(r&&r.lastThis===this&&t(n,r.lastArgs))return r.lastResult;var o=e.apply(this,n);return r={lastResult:o,lastArgs:n,lastThis:this},o}return n.clear=function(){r=null},n}((function(e){return n(n({},e),{exist:!0})})),qn(e.locale&&e.locale.Modal),i}return f(r,[{key:"componentDidMount",value:function(){qn(this.props.locale&&this.props.locale.Modal)}},{key:"componentDidUpdate",value:function(e){var t=this.props.locale;e.locale!==t&&qn(t&&t.Modal)}},{key:"componentWillUnmount",value:function(){qn()}},{key:"render",value:function(){var e=this.props,t=e.locale,r=e.children,n=this.getMemoizedContextValue(t);return o.createElement($n.Provider,{value:n},r)}}]),r}(o.Component);Hn.defaultProps={locale:{}};const Wn=jn;var Gn=function(e){d(r,e);var t=y(r);function r(){return u(this,r),t.apply(this,arguments)}return f(r,[{key:"getLocale",value:function(){var e=this.props,t=e.componentName,r=e.defaultLocale||Wn[null!=t?t:"global"],i=this.context,o=t&&i?i[t]:{};return n(n({},r instanceof Function?r():r),o||{})}},{key:"getLocaleCode",value:function(){var e=this.context,t=e&&e.locale;return e&&e.exist&&!t?Wn.locale:t}},{key:"render",value:function(){return this.props.children(this.getLocale(),this.getLocaleCode(),this.context)}}]),r}(o.Component);Gn.defaultProps={componentName:"global"},Gn.contextType=$n;const Kn={icon:{tag:"svg",attrs:{viewBox:"0 0 1024 1024",focusable:"false"},children:[{tag:"path",attrs:{d:"M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z"}}]},name:"loading",theme:"outlined"};var Qn=function(e,t){return o.createElement(Gt,l(l({},e),{},{ref:t,icon:Kn}))};Qn.displayName="LoadingOutlined";const Xn=o.forwardRef(Qn),Jn={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z"}}]},name:"exclamation-circle",theme:"filled"};var Yn=function(e,t){return o.createElement(Gt,l(l({},e),{},{ref:t,icon:Jn}))};Yn.displayName="ExclamationCircleFilled";const Zn=o.forwardRef(Yn),ei={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z"}}]},name:"close-circle",theme:"filled"};var ti=function(e,t){return o.createElement(Gt,l(l({},e),{},{ref:t,icon:ei}))};ti.displayName="CloseCircleFilled";const ri=o.forwardRef(ti),ni={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm193.5 301.7l-210.6 292a31.8 31.8 0 01-51.7 0L318.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H699c6.5 0 10.3 7.4 6.5 12.7z"}}]},name:"check-circle",theme:"filled"};var ii=function(e,t){return o.createElement(Gt,l(l({},e),{},{ref:t,icon:ni}))};ii.displayName="CheckCircleFilled";const oi=o.forwardRef(ii),ai={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm32 664c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V456c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272zm-32-344a48.01 48.01 0 010-96 48.01 48.01 0 010 96z"}}]},name:"info-circle",theme:"filled"};var si=function(e,t){return o.createElement(Gt,l(l({},e),{},{ref:t,icon:ai}))};si.displayName="InfoCircleFilled";var li,ui,ci,fi,hi=3,di=1,pi="",mi="move-up",gi=!1,vi=!1;function yi(){return di++}function bi(e,t){var r=e.prefixCls,n=e.getPopupContainer,i=zi(),o=i.getPrefixCls,a=i.getRootPrefixCls,s=i.getIconPrefixCls,l=o("message",r||pi),u=a(e.rootPrefixCls,l),c=s();if(li)t({prefixCls:l,rootPrefixCls:u,iconPrefixCls:c,instance:li});else{var f={prefixCls:l,transitionName:gi?mi:"".concat(u,"-").concat(mi),style:{top:ui},getContainer:ci||n,maxCount:fi};We.newInstance(f,(function(e){li?t({prefixCls:l,rootPrefixCls:u,iconPrefixCls:c,instance:li}):(li=e,t({prefixCls:l,rootPrefixCls:u,iconPrefixCls:c,instance:e}))}))}}var wi={info:o.forwardRef(si),success:oi,error:ri,warning:Zn,loading:Xn},ki=Object.keys(wi);function Ei(e,t,r){var n,a=void 0!==e.duration?e.duration:hi,s=wi[e.type],l=O()("".concat(t,"-custom-content"),(i(n={},"".concat(t,"-").concat(e.type),e.type),i(n,"".concat(t,"-rtl"),!0===vi),n));return{key:e.key,duration:a,style:e.style||{},className:e.className,content:o.createElement(ji,{iconPrefixCls:r},o.createElement("div",{className:l},e.icon||s&&o.createElement(s,null),o.createElement("span",null,e.content))),onClose:e.onClose,onClick:e.onClick}}var xi={open:function(e){var t=e.key||yi(),r=new Promise((function(r){var i=function(){return"function"==typeof e.onClose&&e.onClose(),r(!0)};bi(e,(function(r){var o=r.prefixCls,a=r.iconPrefixCls;r.instance.notice(Ei(n(n({},e),{key:t,onClose:i}),o,a))}))})),i=function(){li&&li.removeNotice(t)};return i.then=function(e,t){return r.then(e,t)},i.promise=r,i},config:function(e){void 0!==e.top&&(ui=e.top,li=null),void 0!==e.duration&&(hi=e.duration),void 0!==e.prefixCls&&(pi=e.prefixCls),void 0!==e.getContainer&&(ci=e.getContainer,li=null),void 0!==e.transitionName&&(mi=e.transitionName,li=null,gi=!0),void 0!==e.maxCount&&(fi=e.maxCount,li=null),void 0!==e.rtl&&(vi=e.rtl)},destroy:function(e){if(li)if(e)(0,li.removeNotice)(e);else{(0,li.destroy)(),li=null}}};function _i(e,t){e[t]=function(r,i,o){return function(e){return"[object Object]"===Object.prototype.toString.call(e)&&!!e.content}(r)?e.open(n(n({},r),{type:t})):("function"==typeof i&&(o=i,i=void 0),e.open({content:r,duration:i,type:t,onClose:o}))}}ki.forEach((function(e){return _i(xi,e)})),xi.warn=xi.warning,xi.useMessage=function(e,t){return function(){var r,i,a=null,s=U(Ue({add:function(e,t){null==a||a.component.add(e,t)}}),2),l=s[0],u=s[1],c=o.useRef({});return c.current.open=function(o){var s=o.prefixCls,u=r("message",s),c=r(),f=o.key||yi(),h=new Promise((function(r){var s=function(){return"function"==typeof o.onClose&&o.onClose(),r(!0)};e(n(n({},o),{prefixCls:u,rootPrefixCls:c,getPopupContainer:i}),(function(e){var r=e.prefixCls,i=e.instance;a=i,l(t(n(n({},o),{key:f,onClose:s}),r))}))})),d=function(){a&&a.removeNotice(f)};return d.then=function(e,t){return h.then(e,t)},d.promise=h,d},ki.forEach((function(e){return _i(c.current,e)})),[c.current,o.createElement(ur,{key:"holder"},(function(e){return r=e.getPrefixCls,i=e.getPopupContainer,u}))]}}(bi,Ei);const Si=xi;var Pi=function(){function e(t,r){var n;if(void 0===t&&(t=""),void 0===r&&(r={}),t instanceof e)return t;"number"==typeof t&&(t=function(e){return{r:e>>16,g:(65280&e)>>8,b:255&e}}(t)),this.originalInput=t;var i=st(t);this.originalInput=t,this.r=i.r,this.g=i.g,this.b=i.b,this.a=i.a,this.roundA=Math.round(100*this.a)/100,this.format=null!==(n=r.format)&&void 0!==n?n:i.format,this.gradientType=r.gradientType,this.r<1&&(this.r=Math.round(this.r)),this.g<1&&(this.g=Math.round(this.g)),this.b<1&&(this.b=Math.round(this.b)),this.isValid=i.ok}return e.prototype.isDark=function(){return this.getBrightness()<128},e.prototype.isLight=function(){return!this.isDark()},e.prototype.getBrightness=function(){var e=this.toRgb();return(299*e.r+587*e.g+114*e.b)/1e3},e.prototype.getLuminance=function(){var e=this.toRgb(),t=e.r/255,r=e.g/255,n=e.b/255;return.2126*(t<=.03928?t/12.92:Math.pow((t+.055)/1.055,2.4))+.7152*(r<=.03928?r/12.92:Math.pow((r+.055)/1.055,2.4))+.0722*(n<=.03928?n/12.92:Math.pow((n+.055)/1.055,2.4))},e.prototype.getAlpha=function(){return this.a},e.prototype.setAlpha=function(e){return this.a=Je(e),this.roundA=Math.round(100*this.a)/100,this},e.prototype.toHsv=function(){var e=rt(this.r,this.g,this.b);return{h:360*e.h,s:e.s,v:e.v,a:this.a}},e.prototype.toHsvString=function(){var e=rt(this.r,this.g,this.b),t=Math.round(360*e.h),r=Math.round(100*e.s),n=Math.round(100*e.v);return 1===this.a?"hsv(".concat(t,", ").concat(r,"%, ").concat(n,"%)"):"hsva(".concat(t,", ").concat(r,"%, ").concat(n,"%, ").concat(this.roundA,")")},e.prototype.toHsl=function(){var e=et(this.r,this.g,this.b);return{h:360*e.h,s:e.s,l:e.l,a:this.a}},e.prototype.toHslString=function(){var e=et(this.r,this.g,this.b),t=Math.round(360*e.h),r=Math.round(100*e.s),n=Math.round(100*e.l);return 1===this.a?"hsl(".concat(t,", ").concat(r,"%, ").concat(n,"%)"):"hsla(".concat(t,", ").concat(r,"%, ").concat(n,"%, ").concat(this.roundA,")")},e.prototype.toHex=function(e){return void 0===e&&(e=!1),nt(this.r,this.g,this.b,e)},e.prototype.toHexString=function(e){return void 0===e&&(e=!1),"#"+this.toHex(e)},e.prototype.toHex8=function(e){return void 0===e&&(e=!1),function(e,t,r,n,i){var o,a=[Ze(Math.round(e).toString(16)),Ze(Math.round(t).toString(16)),Ze(Math.round(r).toString(16)),Ze((o=n,Math.round(255*parseFloat(o)).toString(16)))];return i&&a[0].startsWith(a[0].charAt(1))&&a[1].startsWith(a[1].charAt(1))&&a[2].startsWith(a[2].charAt(1))&&a[3].startsWith(a[3].charAt(1))?a[0].charAt(0)+a[1].charAt(0)+a[2].charAt(0)+a[3].charAt(0):a.join("")}(this.r,this.g,this.b,this.a,e)},e.prototype.toHex8String=function(e){return void 0===e&&(e=!1),"#"+this.toHex8(e)},e.prototype.toRgb=function(){return{r:Math.round(this.r),g:Math.round(this.g),b:Math.round(this.b),a:this.a}},e.prototype.toRgbString=function(){var e=Math.round(this.r),t=Math.round(this.g),r=Math.round(this.b);return 1===this.a?"rgb(".concat(e,", ").concat(t,", ").concat(r,")"):"rgba(".concat(e,", ").concat(t,", ").concat(r,", ").concat(this.roundA,")")},e.prototype.toPercentageRgb=function(){var e=function(e){return"".concat(Math.round(100*Qe(e,255)),"%")};return{r:e(this.r),g:e(this.g),b:e(this.b),a:this.a}},e.prototype.toPercentageRgbString=function(){var e=function(e){return Math.round(100*Qe(e,255))};return 1===this.a?"rgb(".concat(e(this.r),"%, ").concat(e(this.g),"%, ").concat(e(this.b),"%)"):"rgba(".concat(e(this.r),"%, ").concat(e(this.g),"%, ").concat(e(this.b),"%, ").concat(this.roundA,")")},e.prototype.toName=function(){if(0===this.a)return"transparent";if(this.a<1)return!1;for(var e="#"+nt(this.r,this.g,this.b,!1),t=0,r=Object.entries(at);t<r.length;t++){var n=r[t],i=n[0];if(e===n[1])return i}return!1},e.prototype.toString=function(e){var t=Boolean(e);e=null!=e?e:this.format;var r=!1,n=this.a<1&&this.a>=0;return t||!n||!e.startsWith("hex")&&"name"!==e?("rgb"===e&&(r=this.toRgbString()),"prgb"===e&&(r=this.toPercentageRgbString()),"hex"!==e&&"hex6"!==e||(r=this.toHexString()),"hex3"===e&&(r=this.toHexString(!0)),"hex4"===e&&(r=this.toHex8String(!0)),"hex8"===e&&(r=this.toHex8String()),"name"===e&&(r=this.toName()),"hsl"===e&&(r=this.toHslString()),"hsv"===e&&(r=this.toHsvString()),r||this.toHexString()):"name"===e&&0===this.a?this.toName():this.toRgbString()},e.prototype.toNumber=function(){return(Math.round(this.r)<<16)+(Math.round(this.g)<<8)+Math.round(this.b)},e.prototype.clone=function(){return new e(this.toString())},e.prototype.lighten=function(t){void 0===t&&(t=10);var r=this.toHsl();return r.l+=t/100,r.l=Xe(r.l),new e(r)},e.prototype.brighten=function(t){void 0===t&&(t=10);var r=this.toRgb();return r.r=Math.max(0,Math.min(255,r.r-Math.round(-t/100*255))),r.g=Math.max(0,Math.min(255,r.g-Math.round(-t/100*255))),r.b=Math.max(0,Math.min(255,r.b-Math.round(-t/100*255))),new e(r)},e.prototype.darken=function(t){void 0===t&&(t=10);var r=this.toHsl();return r.l-=t/100,r.l=Xe(r.l),new e(r)},e.prototype.tint=function(e){return void 0===e&&(e=10),this.mix("white",e)},e.prototype.shade=function(e){return void 0===e&&(e=10),this.mix("black",e)},e.prototype.desaturate=function(t){void 0===t&&(t=10);var r=this.toHsl();return r.s-=t/100,r.s=Xe(r.s),new e(r)},e.prototype.saturate=function(t){void 0===t&&(t=10);var r=this.toHsl();return r.s+=t/100,r.s=Xe(r.s),new e(r)},e.prototype.greyscale=function(){return this.desaturate(100)},e.prototype.spin=function(t){var r=this.toHsl(),n=(r.h+t)%360;return r.h=n<0?360+n:n,new e(r)},e.prototype.mix=function(t,r){void 0===r&&(r=50);var n=this.toRgb(),i=new e(t).toRgb(),o=r/100;return new e({r:(i.r-n.r)*o+n.r,g:(i.g-n.g)*o+n.g,b:(i.b-n.b)*o+n.b,a:(i.a-n.a)*o+n.a})},e.prototype.analogous=function(t,r){void 0===t&&(t=6),void 0===r&&(r=30);var n=this.toHsl(),i=360/r,o=[this];for(n.h=(n.h-(i*t>>1)+720)%360;--t;)n.h=(n.h+i)%360,o.push(new e(n));return o},e.prototype.complement=function(){var t=this.toHsl();return t.h=(t.h+180)%360,new e(t)},e.prototype.monochromatic=function(t){void 0===t&&(t=6);for(var r=this.toHsv(),n=r.h,i=r.s,o=r.v,a=[],s=1/t;t--;)a.push(new e({h:n,s:i,v:o})),o=(o+s)%1;return a},e.prototype.splitcomplement=function(){var t=this.toHsl(),r=t.h;return[this,new e({h:(r+72)%360,s:t.s,l:t.l}),new e({h:(r+216)%360,s:t.s,l:t.l})]},e.prototype.onBackground=function(t){var r=this.toRgb(),n=new e(t).toRgb();return new e({r:n.r+(r.r-n.r)*r.a,g:n.g+(r.g-n.g)*r.a,b:n.b+(r.b-n.b)*r.a})},e.prototype.triad=function(){return this.polyad(3)},e.prototype.tetrad=function(){return this.polyad(4)},e.prototype.polyad=function(t){for(var r=this.toHsl(),n=r.h,i=[this],o=360/t,a=1;a<t;a++)i.push(new e({h:(n+a*o)%360,s:r.s,l:r.l}));return i},e.prototype.equals=function(t){return this.toRgbString()===new e(t).toRgbString()},e}(),Ni="-ant-".concat(Date.now(),"-").concat(Math.random());var Mi=o.createContext(!1),Ci=function(e){var t=e.children,r=e.disabled,n=o.useContext(Mi);return o.createElement(Mi.Provider,{value:r||n},t)},Ai=o.createContext(void 0),Fi=function(e){var t=e.children,r=e.size;return o.createElement(Ai.Consumer,null,(function(e){return o.createElement(Ai.Provider,{value:r||e},t)}))};const Ri=Ai;var Ii,Ti,Oi=["getTargetContainer","getPopupContainer","renderEmpty","pageHeader","input","pagination","form"];function Li(){return Ii||"ant"}function Bi(){return Ti||"anticon"}var zi=function(){return{getPrefixCls:function(e,t){return t||(e?"".concat(Li(),"-").concat(e):Li())},getIconPrefixCls:Bi,getRootPrefixCls:function(e,t){return e||Ii||(t&&t.includes("-")?t.replace(/^(.*)-[^-]*$/,"$1"):Li())}}},Di=function(e){var t,r,i=e.children,a=e.csp,s=e.autoInsertSpaceInButton,l=e.form,u=e.locale,c=e.componentSize,f=e.direction,h=e.space,d=e.virtual,p=e.dropdownMatchSelectWidth,m=e.legacyLocale,g=e.parentContext,v=e.iconPrefixCls,y=e.componentDisabled,b=o.useCallback((function(t,r){var n=e.prefixCls;if(r)return r;var i=n||g.getPrefixCls("");return t?"".concat(i,"-").concat(t):i}),[g.getPrefixCls,e.prefixCls]),w=n(n({},g),{csp:a,autoInsertSpaceInButton:s,locale:u||m,direction:f,space:h,virtual:d,dropdownMatchSelectWidth:p,getPrefixCls:b});Oi.forEach((function(t){var r=e[t];r&&(w[t]=r)}));var k,E,x,_,S,P,N=(k=w,"value"in(P=o.useRef({})).current&&(E=P.current.condition,x=k,_=Object.keys(E),S=Object.keys(x),!(_.length!==S.length||_.some((function(e){return E[e]!==x[e]}))))||(P.current.value=w,P.current.condition=k),P.current.value),M=o.useMemo((function(){return{prefixCls:v,csp:a}}),[v,a]),C=i,A={};return u&&(A=(null===(t=u.Form)||void 0===t?void 0:t.defaultValidateMessages)||(null===(r=jn.Form)||void 0===r?void 0:r.defaultValidateMessages)||{}),l&&l.validateMessages&&(A=n(n({},A),l.validateMessages)),Object.keys(A).length>0&&(C=o.createElement(An,{validateMessages:A},i)),u&&(C=o.createElement(Hn,{locale:u,_ANT_MARK__:"internalMark"},C)),(v||a)&&(C=o.createElement(Ke.Provider,{value:M},C)),c&&(C=o.createElement(Fi,{size:c},C)),void 0!==y&&(C=o.createElement(Ci,{disabled:y},C)),o.createElement(lr.Provider,{value:N},C)},Ui=function(e){return o.useEffect((function(){e.direction&&(Si.config({rtl:"rtl"===e.direction}),no.config({rtl:"rtl"===e.direction}))}),[e.direction]),o.createElement(Gn,null,(function(t,r,i){return o.createElement(ur,null,(function(t){return o.createElement(Di,n({parentContext:t,legacyLocale:i},e))}))}))};Ui.ConfigContext=lr,Ui.SizeContext=Ri,Ui.config=function(e){var t=e.prefixCls,r=e.iconPrefixCls,n=e.theme;void 0!==t&&(Ii=t),void 0!==r&&(Ti=r),n&&function(e,t){var r=function(e,t){var r={},n=function(e,t){var r=e.clone();return(r=(null==t?void 0:t(r))||r).toRgbString()},i=function(e,t){var i=new Pi(e),o=wt(i.toRgbString());r["".concat(t,"-color")]=n(i),r["".concat(t,"-color-disabled")]=o[1],r["".concat(t,"-color-hover")]=o[4],r["".concat(t,"-color-active")]=o[7],r["".concat(t,"-color-outline")]=i.clone().setAlpha(.2).toRgbString(),r["".concat(t,"-color-deprecated-bg")]=o[1],r["".concat(t,"-color-deprecated-border")]=o[3]};if(t.primaryColor){i(t.primaryColor,"primary");var o=new Pi(t.primaryColor),a=wt(o.toRgbString());a.forEach((function(e,t){r["primary-".concat(t+1)]=e})),r["primary-color-deprecated-l-35"]=n(o,(function(e){return e.lighten(35)})),r["primary-color-deprecated-l-20"]=n(o,(function(e){return e.lighten(20)})),r["primary-color-deprecated-t-20"]=n(o,(function(e){return e.tint(20)})),r["primary-color-deprecated-t-50"]=n(o,(function(e){return e.tint(50)})),r["primary-color-deprecated-f-12"]=n(o,(function(e){return e.setAlpha(.12*e.getAlpha())}));var s=new Pi(a[0]);r["primary-color-active-deprecated-f-30"]=n(s,(function(e){return e.setAlpha(.3*e.getAlpha())})),r["primary-color-active-deprecated-d-02"]=n(s,(function(e){return e.darken(2)}))}t.successColor&&i(t.successColor,"success"),t.warningColor&&i(t.warningColor,"warning"),t.errorColor&&i(t.errorColor,"error"),t.infoColor&&i(t.infoColor,"info");var l=Object.keys(r).map((function(t){return"--".concat(e,"-").concat(t,": ").concat(r[t],";")}));return"\n  :root {\n    ".concat(l.join("\n"),"\n  }\n  ").trim()}(e,t);V()&&It(r,"".concat(Ni,"-dynamic-theme"))}(Li(),n)};const ji=Ui;var Vi,qi,$i,Hi={},Wi=4.5,Gi=24,Ki=24,Qi="",Xi="topRight",Ji=!1;function Yi(e){var t,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Gi,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Ki;switch(e){case"top":t={left:"50%",transform:"translateX(-50%)",right:"auto",top:r,bottom:"auto"};break;case"topLeft":t={left:0,top:r,bottom:"auto"};break;case"topRight":t={right:0,top:r,bottom:"auto"};break;case"bottom":t={left:"50%",transform:"translateX(-50%)",right:"auto",top:"auto",bottom:n};break;case"bottomLeft":t={left:0,top:"auto",bottom:n};break;default:t={right:0,top:"auto",bottom:n}}return t}function Zi(e,t){var r=e.placement,n=void 0===r?Xi:r,o=e.top,a=e.bottom,s=e.getContainer,l=void 0===s?Vi:s,u=e.prefixCls,c=zi(),f=c.getPrefixCls,h=c.getIconPrefixCls,d=f("notification",u||Qi),p=h(),m="".concat(d,"-").concat(n),g=Hi[m];if(g)Promise.resolve(g).then((function(e){t({prefixCls:"".concat(d,"-notice"),iconPrefixCls:p,instance:e})}));else{var v=O()("".concat(d,"-").concat(n),i({},"".concat(d,"-rtl"),!0===Ji));Hi[m]=new Promise((function(e){We.newInstance({prefixCls:d,className:v,style:Yi(n,o,a),getContainer:l,maxCount:$i},(function(r){e(r),t({prefixCls:"".concat(d,"-notice"),iconPrefixCls:p,instance:r})}))}))}}var eo={success:Yt,info:sr,error:tr,warning:ir};function to(e,t,r){var n=e.duration,a=e.icon,s=e.type,l=e.description,u=e.message,c=e.btn,f=e.onClose,h=e.onClick,d=e.key,p=e.style,m=e.className,g=e.closeIcon,v=void 0===g?qi:g,y=void 0===n?Wi:n,b=null;a?b=o.createElement("span",{className:"".concat(t,"-icon")},e.icon):s&&(b=o.createElement(eo[s]||null,{className:"".concat(t,"-icon ").concat(t,"-icon-").concat(s)}));var w=o.createElement("span",{className:"".concat(t,"-close-x")},v||o.createElement(Qt,{className:"".concat(t,"-close-icon")})),k=!l&&b?o.createElement("span",{className:"".concat(t,"-message-single-line-auto-margin")}):null;return{content:o.createElement(ji,{iconPrefixCls:r},o.createElement("div",{className:b?"".concat(t,"-with-icon"):"",role:"alert"},b,o.createElement("div",{className:"".concat(t,"-message")},k,u),o.createElement("div",{className:"".concat(t,"-description")},l),c?o.createElement("span",{className:"".concat(t,"-btn")},c):null)),duration:y,closable:!0,closeIcon:w,onClose:f,onClick:h,key:d,style:p||{},className:O()(m,i({},"".concat(t,"-").concat(s),!!s))}}var ro={open:function(e){Zi(e,(function(t){var r=t.prefixCls,n=t.iconPrefixCls;t.instance.notice(to(e,r,n))}))},close:function(e){Object.keys(Hi).forEach((function(t){return Promise.resolve(Hi[t]).then((function(t){t.removeNotice(e)}))}))},config:function(e){var t=e.duration,r=e.placement,n=e.bottom,i=e.top,o=e.getContainer,a=e.closeIcon,s=e.prefixCls;void 0!==s&&(Qi=s),void 0!==t&&(Wi=t),void 0!==r?Xi=r:e.rtl&&(Xi="topLeft"),void 0!==n&&(Ki=n),void 0!==i&&(Gi=i),void 0!==o&&(Vi=o),void 0!==a&&(qi=a),void 0!==e.rtl&&(Ji=e.rtl),void 0!==e.maxCount&&($i=e.maxCount)},destroy:function(){Object.keys(Hi).forEach((function(e){Promise.resolve(Hi[e]).then((function(e){e.destroy()})),delete Hi[e]}))}};["success","info","warning","error"].forEach((function(e){ro[e]=function(t){return ro.open(n(n({},t),{type:e}))}})),ro.warn=ro.warning,ro.useNotification=function(e,t){return function(){var r,i=null,a=U(Ue({add:function(e,t){null==i||i.component.add(e,t)}}),2),s=a[0],l=a[1],u=o.useRef({});return u.current.open=function(o){var a=o.prefixCls,l=r("notification",a);e(n(n({},o),{prefixCls:l}),(function(e){var r=e.prefixCls,n=e.instance;i=n,s(t(o,r))}))},["success","info","warning","error"].forEach((function(e){u.current[e]=function(t){return u.current.open(n(n({},t),{type:e}))}})),[u.current,o.createElement(ur,{key:"holder"},(function(e){return r=e.getPrefixCls,l}))]}}(Zi,to);const no=ro},164:()=>{},882:e=>{"use strict";for(var t="qpzry9x8gf2tvdw0s3jn54khce6mua7l",r={},n=0;n<t.length;n++){var i=t.charAt(n);if(void 0!==r[i])throw new TypeError(i+" is ambiguous");r[i]=n}function o(e){var t=e>>25;return(33554431&e)<<5^996825010&-(t>>0&1)^642813549&-(t>>1&1)^513874426&-(t>>2&1)^1027748829&-(t>>3&1)^705979059&-(t>>4&1)}function a(e){for(var t=1,r=0;r<e.length;++r){var n=e.charCodeAt(r);if(n<33||n>126)return"Invalid prefix ("+e+")";t=o(t)^n>>5}for(t=o(t),r=0;r<e.length;++r){var i=e.charCodeAt(r);t=o(t)^31&i}return t}function s(e,t){if(t=t||90,e.length<8)return e+" too short";if(e.length>t)return"Exceeds length limit";var n=e.toLowerCase(),i=e.toUpperCase();if(e!==n&&e!==i)return"Mixed-case string "+e;var s=(e=n).lastIndexOf("1");if(-1===s)return"No separator character for "+e;if(0===s)return"Missing prefix for "+e;var l=e.slice(0,s),u=e.slice(s+1);if(u.length<6)return"Data too short";var c=a(l);if("string"==typeof c)return c;for(var f=[],h=0;h<u.length;++h){var d=u.charAt(h),p=r[d];if(void 0===p)return"Unknown character "+d;c=o(c)^p,h+6>=u.length||f.push(p)}return 1!==c?"Invalid checksum for "+e:{prefix:l,words:f}}function l(e,t,r,n){for(var i=0,o=0,a=(1<<r)-1,s=[],l=0;l<e.length;++l)for(i=i<<t|e[l],o+=t;o>=r;)o-=r,s.push(i>>o&a);if(n)o>0&&s.push(i<<r-o&a);else{if(o>=t)return"Excess padding";if(i<<r-o&a)return"Non-zero padding"}return s}e.exports={decodeUnsafe:function(){var e=s.apply(null,arguments);if("object"==typeof e)return e},decode:function(e){var t=s.apply(null,arguments);if("object"==typeof t)return t;throw new Error(t)},encode:function(e,r,n){if(n=n||90,e.length+7+r.length>n)throw new TypeError("Exceeds length limit");var i=a(e=e.toLowerCase());if("string"==typeof i)throw new Error(i);for(var s=e+"1",l=0;l<r.length;++l){var u=r[l];if(u>>5!=0)throw new Error("Non 5-bit word");i=o(i)^u,s+=t.charAt(u)}for(l=0;l<6;++l)i=o(i);for(i^=1,l=0;l<6;++l)s+=t.charAt(i>>5*(5-l)&31);return s},toWordsUnsafe:function(e){var t=l(e,8,5,!0);if(Array.isArray(t))return t},toWords:function(e){var t=l(e,8,5,!0);if(Array.isArray(t))return t;throw new Error(t)},fromWordsUnsafe:function(e){var t=l(e,5,8,!1);if(Array.isArray(t))return t},fromWords:function(e){var t=l(e,5,8,!1);if(Array.isArray(t))return t;throw new Error(t)}}},550:function(e,t,r){!function(e,t){"use strict";function n(e,t){if(!e)throw new Error(t||"Assertion failed")}function i(e,t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}function o(e,t,r){if(o.isBN(e))return e;this.negative=0,this.words=null,this.length=0,this.red=null,null!==e&&("le"!==t&&"be"!==t||(r=t,t=10),this._init(e||0,t||10,r||"be"))}var a;"object"==typeof e?e.exports=o:t.BN=o,o.BN=o,o.wordSize=26;try{a="undefined"!=typeof window&&void 0!==window.Buffer?window.Buffer:r(601).Buffer}catch(e){}function s(e,t){var r=e.charCodeAt(t);return r>=48&&r<=57?r-48:r>=65&&r<=70?r-55:r>=97&&r<=102?r-87:void n(!1,"Invalid character in "+e)}function l(e,t,r){var n=s(e,r);return r-1>=t&&(n|=s(e,r-1)<<4),n}function u(e,t,r,i){for(var o=0,a=0,s=Math.min(e.length,r),l=t;l<s;l++){var u=e.charCodeAt(l)-48;o*=i,a=u>=49?u-49+10:u>=17?u-17+10:u,n(u>=0&&a<i,"Invalid character"),o+=a}return o}function c(e,t){e.words=t.words,e.length=t.length,e.negative=t.negative,e.red=t.red}if(o.isBN=function(e){return e instanceof o||null!==e&&"object"==typeof e&&e.constructor.wordSize===o.wordSize&&Array.isArray(e.words)},o.max=function(e,t){return e.cmp(t)>0?e:t},o.min=function(e,t){return e.cmp(t)<0?e:t},o.prototype._init=function(e,t,r){if("number"==typeof e)return this._initNumber(e,t,r);if("object"==typeof e)return this._initArray(e,t,r);"hex"===t&&(t=16),n(t===(0|t)&&t>=2&&t<=36);var i=0;"-"===(e=e.toString().replace(/\s+/g,""))[0]&&(i++,this.negative=1),i<e.length&&(16===t?this._parseHex(e,i,r):(this._parseBase(e,t,i),"le"===r&&this._initArray(this.toArray(),t,r)))},o.prototype._initNumber=function(e,t,r){e<0&&(this.negative=1,e=-e),e<67108864?(this.words=[67108863&e],this.length=1):e<4503599627370496?(this.words=[67108863&e,e/67108864&67108863],this.length=2):(n(e<9007199254740992),this.words=[67108863&e,e/67108864&67108863,1],this.length=3),"le"===r&&this._initArray(this.toArray(),t,r)},o.prototype._initArray=function(e,t,r){if(n("number"==typeof e.length),e.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(e.length/3),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var o,a,s=0;if("be"===r)for(i=e.length-1,o=0;i>=0;i-=3)a=e[i]|e[i-1]<<8|e[i-2]<<16,this.words[o]|=a<<s&67108863,this.words[o+1]=a>>>26-s&67108863,(s+=24)>=26&&(s-=26,o++);else if("le"===r)for(i=0,o=0;i<e.length;i+=3)a=e[i]|e[i+1]<<8|e[i+2]<<16,this.words[o]|=a<<s&67108863,this.words[o+1]=a>>>26-s&67108863,(s+=24)>=26&&(s-=26,o++);return this._strip()},o.prototype._parseHex=function(e,t,r){this.length=Math.ceil((e.length-t)/6),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var i,o=0,a=0;if("be"===r)for(n=e.length-1;n>=t;n-=2)i=l(e,t,n)<<o,this.words[a]|=67108863&i,o>=18?(o-=18,a+=1,this.words[a]|=i>>>26):o+=8;else for(n=(e.length-t)%2==0?t+1:t;n<e.length;n+=2)i=l(e,t,n)<<o,this.words[a]|=67108863&i,o>=18?(o-=18,a+=1,this.words[a]|=i>>>26):o+=8;this._strip()},o.prototype._parseBase=function(e,t,r){this.words=[0],this.length=1;for(var n=0,i=1;i<=67108863;i*=t)n++;n--,i=i/t|0;for(var o=e.length-r,a=o%n,s=Math.min(o,o-a)+r,l=0,c=r;c<s;c+=n)l=u(e,c,c+n,t),this.imuln(i),this.words[0]+l<67108864?this.words[0]+=l:this._iaddn(l);if(0!==a){var f=1;for(l=u(e,c,e.length,t),c=0;c<a;c++)f*=t;this.imuln(f),this.words[0]+l<67108864?this.words[0]+=l:this._iaddn(l)}this._strip()},o.prototype.copy=function(e){e.words=new Array(this.length);for(var t=0;t<this.length;t++)e.words[t]=this.words[t];e.length=this.length,e.negative=this.negative,e.red=this.red},o.prototype._move=function(e){c(e,this)},o.prototype.clone=function(){var e=new o(null);return this.copy(e),e},o.prototype._expand=function(e){for(;this.length<e;)this.words[this.length++]=0;return this},o.prototype._strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},o.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},"undefined"!=typeof Symbol&&"function"==typeof Symbol.for)try{o.prototype[Symbol.for("nodejs.util.inspect.custom")]=f}catch(e){o.prototype.inspect=f}else o.prototype.inspect=f;function f(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"}var h=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],d=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],p=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function m(e,t,r){r.negative=t.negative^e.negative;var n=e.length+t.length|0;r.length=n,n=n-1|0;var i=0|e.words[0],o=0|t.words[0],a=i*o,s=67108863&a,l=a/67108864|0;r.words[0]=s;for(var u=1;u<n;u++){for(var c=l>>>26,f=67108863&l,h=Math.min(u,t.length-1),d=Math.max(0,u-e.length+1);d<=h;d++){var p=u-d|0;c+=(a=(i=0|e.words[p])*(o=0|t.words[d])+f)/67108864|0,f=67108863&a}r.words[u]=0|f,l=0|c}return 0!==l?r.words[u]=0|l:r.length--,r._strip()}o.prototype.toString=function(e,t){var r;if(t=0|t||1,16===(e=e||10)||"hex"===e){r="";for(var i=0,o=0,a=0;a<this.length;a++){var s=this.words[a],l=(16777215&(s<<i|o)).toString(16);o=s>>>24-i&16777215,(i+=2)>=26&&(i-=26,a--),r=0!==o||a!==this.length-1?h[6-l.length]+l+r:l+r}for(0!==o&&(r=o.toString(16)+r);r.length%t!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}if(e===(0|e)&&e>=2&&e<=36){var u=d[e],c=p[e];r="";var f=this.clone();for(f.negative=0;!f.isZero();){var m=f.modrn(c).toString(e);r=(f=f.idivn(c)).isZero()?m+r:h[u-m.length]+m+r}for(this.isZero()&&(r="0"+r);r.length%t!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}n(!1,"Base should be between 2 and 36")},o.prototype.toNumber=function(){var e=this.words[0];return 2===this.length?e+=67108864*this.words[1]:3===this.length&&1===this.words[2]?e+=4503599627370496+67108864*this.words[1]:this.length>2&&n(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-e:e},o.prototype.toJSON=function(){return this.toString(16,2)},a&&(o.prototype.toBuffer=function(e,t){return this.toArrayLike(a,e,t)}),o.prototype.toArray=function(e,t){return this.toArrayLike(Array,e,t)},o.prototype.toArrayLike=function(e,t,r){this._strip();var i=this.byteLength(),o=r||Math.max(1,i);n(i<=o,"byte array longer than desired length"),n(o>0,"Requested array length <= 0");var a=function(e,t){return e.allocUnsafe?e.allocUnsafe(t):new e(t)}(e,o);return this["_toArrayLike"+("le"===t?"LE":"BE")](a,i),a},o.prototype._toArrayLikeLE=function(e,t){for(var r=0,n=0,i=0,o=0;i<this.length;i++){var a=this.words[i]<<o|n;e[r++]=255&a,r<e.length&&(e[r++]=a>>8&255),r<e.length&&(e[r++]=a>>16&255),6===o?(r<e.length&&(e[r++]=a>>24&255),n=0,o=0):(n=a>>>24,o+=2)}if(r<e.length)for(e[r++]=n;r<e.length;)e[r++]=0},o.prototype._toArrayLikeBE=function(e,t){for(var r=e.length-1,n=0,i=0,o=0;i<this.length;i++){var a=this.words[i]<<o|n;e[r--]=255&a,r>=0&&(e[r--]=a>>8&255),r>=0&&(e[r--]=a>>16&255),6===o?(r>=0&&(e[r--]=a>>24&255),n=0,o=0):(n=a>>>24,o+=2)}if(r>=0)for(e[r--]=n;r>=0;)e[r--]=0},Math.clz32?o.prototype._countBits=function(e){return 32-Math.clz32(e)}:o.prototype._countBits=function(e){var t=e,r=0;return t>=4096&&(r+=13,t>>>=13),t>=64&&(r+=7,t>>>=7),t>=8&&(r+=4,t>>>=4),t>=2&&(r+=2,t>>>=2),r+t},o.prototype._zeroBits=function(e){if(0===e)return 26;var t=e,r=0;return 0==(8191&t)&&(r+=13,t>>>=13),0==(127&t)&&(r+=7,t>>>=7),0==(15&t)&&(r+=4,t>>>=4),0==(3&t)&&(r+=2,t>>>=2),0==(1&t)&&r++,r},o.prototype.bitLength=function(){var e=this.words[this.length-1],t=this._countBits(e);return 26*(this.length-1)+t},o.prototype.zeroBits=function(){if(this.isZero())return 0;for(var e=0,t=0;t<this.length;t++){var r=this._zeroBits(this.words[t]);if(e+=r,26!==r)break}return e},o.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},o.prototype.toTwos=function(e){return 0!==this.negative?this.abs().inotn(e).iaddn(1):this.clone()},o.prototype.fromTwos=function(e){return this.testn(e-1)?this.notn(e).iaddn(1).ineg():this.clone()},o.prototype.isNeg=function(){return 0!==this.negative},o.prototype.neg=function(){return this.clone().ineg()},o.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},o.prototype.iuor=function(e){for(;this.length<e.length;)this.words[this.length++]=0;for(var t=0;t<e.length;t++)this.words[t]=this.words[t]|e.words[t];return this._strip()},o.prototype.ior=function(e){return n(0==(this.negative|e.negative)),this.iuor(e)},o.prototype.or=function(e){return this.length>e.length?this.clone().ior(e):e.clone().ior(this)},o.prototype.uor=function(e){return this.length>e.length?this.clone().iuor(e):e.clone().iuor(this)},o.prototype.iuand=function(e){var t;t=this.length>e.length?e:this;for(var r=0;r<t.length;r++)this.words[r]=this.words[r]&e.words[r];return this.length=t.length,this._strip()},o.prototype.iand=function(e){return n(0==(this.negative|e.negative)),this.iuand(e)},o.prototype.and=function(e){return this.length>e.length?this.clone().iand(e):e.clone().iand(this)},o.prototype.uand=function(e){return this.length>e.length?this.clone().iuand(e):e.clone().iuand(this)},o.prototype.iuxor=function(e){var t,r;this.length>e.length?(t=this,r=e):(t=e,r=this);for(var n=0;n<r.length;n++)this.words[n]=t.words[n]^r.words[n];if(this!==t)for(;n<t.length;n++)this.words[n]=t.words[n];return this.length=t.length,this._strip()},o.prototype.ixor=function(e){return n(0==(this.negative|e.negative)),this.iuxor(e)},o.prototype.xor=function(e){return this.length>e.length?this.clone().ixor(e):e.clone().ixor(this)},o.prototype.uxor=function(e){return this.length>e.length?this.clone().iuxor(e):e.clone().iuxor(this)},o.prototype.inotn=function(e){n("number"==typeof e&&e>=0);var t=0|Math.ceil(e/26),r=e%26;this._expand(t),r>0&&t--;for(var i=0;i<t;i++)this.words[i]=67108863&~this.words[i];return r>0&&(this.words[i]=~this.words[i]&67108863>>26-r),this._strip()},o.prototype.notn=function(e){return this.clone().inotn(e)},o.prototype.setn=function(e,t){n("number"==typeof e&&e>=0);var r=e/26|0,i=e%26;return this._expand(r+1),this.words[r]=t?this.words[r]|1<<i:this.words[r]&~(1<<i),this._strip()},o.prototype.iadd=function(e){var t,r,n;if(0!==this.negative&&0===e.negative)return this.negative=0,t=this.isub(e),this.negative^=1,this._normSign();if(0===this.negative&&0!==e.negative)return e.negative=0,t=this.isub(e),e.negative=1,t._normSign();this.length>e.length?(r=this,n=e):(r=e,n=this);for(var i=0,o=0;o<n.length;o++)t=(0|r.words[o])+(0|n.words[o])+i,this.words[o]=67108863&t,i=t>>>26;for(;0!==i&&o<r.length;o++)t=(0|r.words[o])+i,this.words[o]=67108863&t,i=t>>>26;if(this.length=r.length,0!==i)this.words[this.length]=i,this.length++;else if(r!==this)for(;o<r.length;o++)this.words[o]=r.words[o];return this},o.prototype.add=function(e){var t;return 0!==e.negative&&0===this.negative?(e.negative=0,t=this.sub(e),e.negative^=1,t):0===e.negative&&0!==this.negative?(this.negative=0,t=e.sub(this),this.negative=1,t):this.length>e.length?this.clone().iadd(e):e.clone().iadd(this)},o.prototype.isub=function(e){if(0!==e.negative){e.negative=0;var t=this.iadd(e);return e.negative=1,t._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(e),this.negative=1,this._normSign();var r,n,i=this.cmp(e);if(0===i)return this.negative=0,this.length=1,this.words[0]=0,this;i>0?(r=this,n=e):(r=e,n=this);for(var o=0,a=0;a<n.length;a++)o=(t=(0|r.words[a])-(0|n.words[a])+o)>>26,this.words[a]=67108863&t;for(;0!==o&&a<r.length;a++)o=(t=(0|r.words[a])+o)>>26,this.words[a]=67108863&t;if(0===o&&a<r.length&&r!==this)for(;a<r.length;a++)this.words[a]=r.words[a];return this.length=Math.max(this.length,a),r!==this&&(this.negative=1),this._strip()},o.prototype.sub=function(e){return this.clone().isub(e)};var g=function(e,t,r){var n,i,o,a=e.words,s=t.words,l=r.words,u=0,c=0|a[0],f=8191&c,h=c>>>13,d=0|a[1],p=8191&d,m=d>>>13,g=0|a[2],v=8191&g,y=g>>>13,b=0|a[3],w=8191&b,k=b>>>13,E=0|a[4],x=8191&E,_=E>>>13,S=0|a[5],P=8191&S,N=S>>>13,M=0|a[6],C=8191&M,A=M>>>13,F=0|a[7],R=8191&F,I=F>>>13,T=0|a[8],O=8191&T,L=T>>>13,B=0|a[9],z=8191&B,D=B>>>13,U=0|s[0],j=8191&U,V=U>>>13,q=0|s[1],$=8191&q,H=q>>>13,W=0|s[2],G=8191&W,K=W>>>13,Q=0|s[3],X=8191&Q,J=Q>>>13,Y=0|s[4],Z=8191&Y,ee=Y>>>13,te=0|s[5],re=8191&te,ne=te>>>13,ie=0|s[6],oe=8191&ie,ae=ie>>>13,se=0|s[7],le=8191&se,ue=se>>>13,ce=0|s[8],fe=8191&ce,he=ce>>>13,de=0|s[9],pe=8191&de,me=de>>>13;r.negative=e.negative^t.negative,r.length=19;var ge=(u+(n=Math.imul(f,j))|0)+((8191&(i=(i=Math.imul(f,V))+Math.imul(h,j)|0))<<13)|0;u=((o=Math.imul(h,V))+(i>>>13)|0)+(ge>>>26)|0,ge&=67108863,n=Math.imul(p,j),i=(i=Math.imul(p,V))+Math.imul(m,j)|0,o=Math.imul(m,V);var ve=(u+(n=n+Math.imul(f,$)|0)|0)+((8191&(i=(i=i+Math.imul(f,H)|0)+Math.imul(h,$)|0))<<13)|0;u=((o=o+Math.imul(h,H)|0)+(i>>>13)|0)+(ve>>>26)|0,ve&=67108863,n=Math.imul(v,j),i=(i=Math.imul(v,V))+Math.imul(y,j)|0,o=Math.imul(y,V),n=n+Math.imul(p,$)|0,i=(i=i+Math.imul(p,H)|0)+Math.imul(m,$)|0,o=o+Math.imul(m,H)|0;var ye=(u+(n=n+Math.imul(f,G)|0)|0)+((8191&(i=(i=i+Math.imul(f,K)|0)+Math.imul(h,G)|0))<<13)|0;u=((o=o+Math.imul(h,K)|0)+(i>>>13)|0)+(ye>>>26)|0,ye&=67108863,n=Math.imul(w,j),i=(i=Math.imul(w,V))+Math.imul(k,j)|0,o=Math.imul(k,V),n=n+Math.imul(v,$)|0,i=(i=i+Math.imul(v,H)|0)+Math.imul(y,$)|0,o=o+Math.imul(y,H)|0,n=n+Math.imul(p,G)|0,i=(i=i+Math.imul(p,K)|0)+Math.imul(m,G)|0,o=o+Math.imul(m,K)|0;var be=(u+(n=n+Math.imul(f,X)|0)|0)+((8191&(i=(i=i+Math.imul(f,J)|0)+Math.imul(h,X)|0))<<13)|0;u=((o=o+Math.imul(h,J)|0)+(i>>>13)|0)+(be>>>26)|0,be&=67108863,n=Math.imul(x,j),i=(i=Math.imul(x,V))+Math.imul(_,j)|0,o=Math.imul(_,V),n=n+Math.imul(w,$)|0,i=(i=i+Math.imul(w,H)|0)+Math.imul(k,$)|0,o=o+Math.imul(k,H)|0,n=n+Math.imul(v,G)|0,i=(i=i+Math.imul(v,K)|0)+Math.imul(y,G)|0,o=o+Math.imul(y,K)|0,n=n+Math.imul(p,X)|0,i=(i=i+Math.imul(p,J)|0)+Math.imul(m,X)|0,o=o+Math.imul(m,J)|0;var we=(u+(n=n+Math.imul(f,Z)|0)|0)+((8191&(i=(i=i+Math.imul(f,ee)|0)+Math.imul(h,Z)|0))<<13)|0;u=((o=o+Math.imul(h,ee)|0)+(i>>>13)|0)+(we>>>26)|0,we&=67108863,n=Math.imul(P,j),i=(i=Math.imul(P,V))+Math.imul(N,j)|0,o=Math.imul(N,V),n=n+Math.imul(x,$)|0,i=(i=i+Math.imul(x,H)|0)+Math.imul(_,$)|0,o=o+Math.imul(_,H)|0,n=n+Math.imul(w,G)|0,i=(i=i+Math.imul(w,K)|0)+Math.imul(k,G)|0,o=o+Math.imul(k,K)|0,n=n+Math.imul(v,X)|0,i=(i=i+Math.imul(v,J)|0)+Math.imul(y,X)|0,o=o+Math.imul(y,J)|0,n=n+Math.imul(p,Z)|0,i=(i=i+Math.imul(p,ee)|0)+Math.imul(m,Z)|0,o=o+Math.imul(m,ee)|0;var ke=(u+(n=n+Math.imul(f,re)|0)|0)+((8191&(i=(i=i+Math.imul(f,ne)|0)+Math.imul(h,re)|0))<<13)|0;u=((o=o+Math.imul(h,ne)|0)+(i>>>13)|0)+(ke>>>26)|0,ke&=67108863,n=Math.imul(C,j),i=(i=Math.imul(C,V))+Math.imul(A,j)|0,o=Math.imul(A,V),n=n+Math.imul(P,$)|0,i=(i=i+Math.imul(P,H)|0)+Math.imul(N,$)|0,o=o+Math.imul(N,H)|0,n=n+Math.imul(x,G)|0,i=(i=i+Math.imul(x,K)|0)+Math.imul(_,G)|0,o=o+Math.imul(_,K)|0,n=n+Math.imul(w,X)|0,i=(i=i+Math.imul(w,J)|0)+Math.imul(k,X)|0,o=o+Math.imul(k,J)|0,n=n+Math.imul(v,Z)|0,i=(i=i+Math.imul(v,ee)|0)+Math.imul(y,Z)|0,o=o+Math.imul(y,ee)|0,n=n+Math.imul(p,re)|0,i=(i=i+Math.imul(p,ne)|0)+Math.imul(m,re)|0,o=o+Math.imul(m,ne)|0;var Ee=(u+(n=n+Math.imul(f,oe)|0)|0)+((8191&(i=(i=i+Math.imul(f,ae)|0)+Math.imul(h,oe)|0))<<13)|0;u=((o=o+Math.imul(h,ae)|0)+(i>>>13)|0)+(Ee>>>26)|0,Ee&=67108863,n=Math.imul(R,j),i=(i=Math.imul(R,V))+Math.imul(I,j)|0,o=Math.imul(I,V),n=n+Math.imul(C,$)|0,i=(i=i+Math.imul(C,H)|0)+Math.imul(A,$)|0,o=o+Math.imul(A,H)|0,n=n+Math.imul(P,G)|0,i=(i=i+Math.imul(P,K)|0)+Math.imul(N,G)|0,o=o+Math.imul(N,K)|0,n=n+Math.imul(x,X)|0,i=(i=i+Math.imul(x,J)|0)+Math.imul(_,X)|0,o=o+Math.imul(_,J)|0,n=n+Math.imul(w,Z)|0,i=(i=i+Math.imul(w,ee)|0)+Math.imul(k,Z)|0,o=o+Math.imul(k,ee)|0,n=n+Math.imul(v,re)|0,i=(i=i+Math.imul(v,ne)|0)+Math.imul(y,re)|0,o=o+Math.imul(y,ne)|0,n=n+Math.imul(p,oe)|0,i=(i=i+Math.imul(p,ae)|0)+Math.imul(m,oe)|0,o=o+Math.imul(m,ae)|0;var xe=(u+(n=n+Math.imul(f,le)|0)|0)+((8191&(i=(i=i+Math.imul(f,ue)|0)+Math.imul(h,le)|0))<<13)|0;u=((o=o+Math.imul(h,ue)|0)+(i>>>13)|0)+(xe>>>26)|0,xe&=67108863,n=Math.imul(O,j),i=(i=Math.imul(O,V))+Math.imul(L,j)|0,o=Math.imul(L,V),n=n+Math.imul(R,$)|0,i=(i=i+Math.imul(R,H)|0)+Math.imul(I,$)|0,o=o+Math.imul(I,H)|0,n=n+Math.imul(C,G)|0,i=(i=i+Math.imul(C,K)|0)+Math.imul(A,G)|0,o=o+Math.imul(A,K)|0,n=n+Math.imul(P,X)|0,i=(i=i+Math.imul(P,J)|0)+Math.imul(N,X)|0,o=o+Math.imul(N,J)|0,n=n+Math.imul(x,Z)|0,i=(i=i+Math.imul(x,ee)|0)+Math.imul(_,Z)|0,o=o+Math.imul(_,ee)|0,n=n+Math.imul(w,re)|0,i=(i=i+Math.imul(w,ne)|0)+Math.imul(k,re)|0,o=o+Math.imul(k,ne)|0,n=n+Math.imul(v,oe)|0,i=(i=i+Math.imul(v,ae)|0)+Math.imul(y,oe)|0,o=o+Math.imul(y,ae)|0,n=n+Math.imul(p,le)|0,i=(i=i+Math.imul(p,ue)|0)+Math.imul(m,le)|0,o=o+Math.imul(m,ue)|0;var _e=(u+(n=n+Math.imul(f,fe)|0)|0)+((8191&(i=(i=i+Math.imul(f,he)|0)+Math.imul(h,fe)|0))<<13)|0;u=((o=o+Math.imul(h,he)|0)+(i>>>13)|0)+(_e>>>26)|0,_e&=67108863,n=Math.imul(z,j),i=(i=Math.imul(z,V))+Math.imul(D,j)|0,o=Math.imul(D,V),n=n+Math.imul(O,$)|0,i=(i=i+Math.imul(O,H)|0)+Math.imul(L,$)|0,o=o+Math.imul(L,H)|0,n=n+Math.imul(R,G)|0,i=(i=i+Math.imul(R,K)|0)+Math.imul(I,G)|0,o=o+Math.imul(I,K)|0,n=n+Math.imul(C,X)|0,i=(i=i+Math.imul(C,J)|0)+Math.imul(A,X)|0,o=o+Math.imul(A,J)|0,n=n+Math.imul(P,Z)|0,i=(i=i+Math.imul(P,ee)|0)+Math.imul(N,Z)|0,o=o+Math.imul(N,ee)|0,n=n+Math.imul(x,re)|0,i=(i=i+Math.imul(x,ne)|0)+Math.imul(_,re)|0,o=o+Math.imul(_,ne)|0,n=n+Math.imul(w,oe)|0,i=(i=i+Math.imul(w,ae)|0)+Math.imul(k,oe)|0,o=o+Math.imul(k,ae)|0,n=n+Math.imul(v,le)|0,i=(i=i+Math.imul(v,ue)|0)+Math.imul(y,le)|0,o=o+Math.imul(y,ue)|0,n=n+Math.imul(p,fe)|0,i=(i=i+Math.imul(p,he)|0)+Math.imul(m,fe)|0,o=o+Math.imul(m,he)|0;var Se=(u+(n=n+Math.imul(f,pe)|0)|0)+((8191&(i=(i=i+Math.imul(f,me)|0)+Math.imul(h,pe)|0))<<13)|0;u=((o=o+Math.imul(h,me)|0)+(i>>>13)|0)+(Se>>>26)|0,Se&=67108863,n=Math.imul(z,$),i=(i=Math.imul(z,H))+Math.imul(D,$)|0,o=Math.imul(D,H),n=n+Math.imul(O,G)|0,i=(i=i+Math.imul(O,K)|0)+Math.imul(L,G)|0,o=o+Math.imul(L,K)|0,n=n+Math.imul(R,X)|0,i=(i=i+Math.imul(R,J)|0)+Math.imul(I,X)|0,o=o+Math.imul(I,J)|0,n=n+Math.imul(C,Z)|0,i=(i=i+Math.imul(C,ee)|0)+Math.imul(A,Z)|0,o=o+Math.imul(A,ee)|0,n=n+Math.imul(P,re)|0,i=(i=i+Math.imul(P,ne)|0)+Math.imul(N,re)|0,o=o+Math.imul(N,ne)|0,n=n+Math.imul(x,oe)|0,i=(i=i+Math.imul(x,ae)|0)+Math.imul(_,oe)|0,o=o+Math.imul(_,ae)|0,n=n+Math.imul(w,le)|0,i=(i=i+Math.imul(w,ue)|0)+Math.imul(k,le)|0,o=o+Math.imul(k,ue)|0,n=n+Math.imul(v,fe)|0,i=(i=i+Math.imul(v,he)|0)+Math.imul(y,fe)|0,o=o+Math.imul(y,he)|0;var Pe=(u+(n=n+Math.imul(p,pe)|0)|0)+((8191&(i=(i=i+Math.imul(p,me)|0)+Math.imul(m,pe)|0))<<13)|0;u=((o=o+Math.imul(m,me)|0)+(i>>>13)|0)+(Pe>>>26)|0,Pe&=67108863,n=Math.imul(z,G),i=(i=Math.imul(z,K))+Math.imul(D,G)|0,o=Math.imul(D,K),n=n+Math.imul(O,X)|0,i=(i=i+Math.imul(O,J)|0)+Math.imul(L,X)|0,o=o+Math.imul(L,J)|0,n=n+Math.imul(R,Z)|0,i=(i=i+Math.imul(R,ee)|0)+Math.imul(I,Z)|0,o=o+Math.imul(I,ee)|0,n=n+Math.imul(C,re)|0,i=(i=i+Math.imul(C,ne)|0)+Math.imul(A,re)|0,o=o+Math.imul(A,ne)|0,n=n+Math.imul(P,oe)|0,i=(i=i+Math.imul(P,ae)|0)+Math.imul(N,oe)|0,o=o+Math.imul(N,ae)|0,n=n+Math.imul(x,le)|0,i=(i=i+Math.imul(x,ue)|0)+Math.imul(_,le)|0,o=o+Math.imul(_,ue)|0,n=n+Math.imul(w,fe)|0,i=(i=i+Math.imul(w,he)|0)+Math.imul(k,fe)|0,o=o+Math.imul(k,he)|0;var Ne=(u+(n=n+Math.imul(v,pe)|0)|0)+((8191&(i=(i=i+Math.imul(v,me)|0)+Math.imul(y,pe)|0))<<13)|0;u=((o=o+Math.imul(y,me)|0)+(i>>>13)|0)+(Ne>>>26)|0,Ne&=67108863,n=Math.imul(z,X),i=(i=Math.imul(z,J))+Math.imul(D,X)|0,o=Math.imul(D,J),n=n+Math.imul(O,Z)|0,i=(i=i+Math.imul(O,ee)|0)+Math.imul(L,Z)|0,o=o+Math.imul(L,ee)|0,n=n+Math.imul(R,re)|0,i=(i=i+Math.imul(R,ne)|0)+Math.imul(I,re)|0,o=o+Math.imul(I,ne)|0,n=n+Math.imul(C,oe)|0,i=(i=i+Math.imul(C,ae)|0)+Math.imul(A,oe)|0,o=o+Math.imul(A,ae)|0,n=n+Math.imul(P,le)|0,i=(i=i+Math.imul(P,ue)|0)+Math.imul(N,le)|0,o=o+Math.imul(N,ue)|0,n=n+Math.imul(x,fe)|0,i=(i=i+Math.imul(x,he)|0)+Math.imul(_,fe)|0,o=o+Math.imul(_,he)|0;var Me=(u+(n=n+Math.imul(w,pe)|0)|0)+((8191&(i=(i=i+Math.imul(w,me)|0)+Math.imul(k,pe)|0))<<13)|0;u=((o=o+Math.imul(k,me)|0)+(i>>>13)|0)+(Me>>>26)|0,Me&=67108863,n=Math.imul(z,Z),i=(i=Math.imul(z,ee))+Math.imul(D,Z)|0,o=Math.imul(D,ee),n=n+Math.imul(O,re)|0,i=(i=i+Math.imul(O,ne)|0)+Math.imul(L,re)|0,o=o+Math.imul(L,ne)|0,n=n+Math.imul(R,oe)|0,i=(i=i+Math.imul(R,ae)|0)+Math.imul(I,oe)|0,o=o+Math.imul(I,ae)|0,n=n+Math.imul(C,le)|0,i=(i=i+Math.imul(C,ue)|0)+Math.imul(A,le)|0,o=o+Math.imul(A,ue)|0,n=n+Math.imul(P,fe)|0,i=(i=i+Math.imul(P,he)|0)+Math.imul(N,fe)|0,o=o+Math.imul(N,he)|0;var Ce=(u+(n=n+Math.imul(x,pe)|0)|0)+((8191&(i=(i=i+Math.imul(x,me)|0)+Math.imul(_,pe)|0))<<13)|0;u=((o=o+Math.imul(_,me)|0)+(i>>>13)|0)+(Ce>>>26)|0,Ce&=67108863,n=Math.imul(z,re),i=(i=Math.imul(z,ne))+Math.imul(D,re)|0,o=Math.imul(D,ne),n=n+Math.imul(O,oe)|0,i=(i=i+Math.imul(O,ae)|0)+Math.imul(L,oe)|0,o=o+Math.imul(L,ae)|0,n=n+Math.imul(R,le)|0,i=(i=i+Math.imul(R,ue)|0)+Math.imul(I,le)|0,o=o+Math.imul(I,ue)|0,n=n+Math.imul(C,fe)|0,i=(i=i+Math.imul(C,he)|0)+Math.imul(A,fe)|0,o=o+Math.imul(A,he)|0;var Ae=(u+(n=n+Math.imul(P,pe)|0)|0)+((8191&(i=(i=i+Math.imul(P,me)|0)+Math.imul(N,pe)|0))<<13)|0;u=((o=o+Math.imul(N,me)|0)+(i>>>13)|0)+(Ae>>>26)|0,Ae&=67108863,n=Math.imul(z,oe),i=(i=Math.imul(z,ae))+Math.imul(D,oe)|0,o=Math.imul(D,ae),n=n+Math.imul(O,le)|0,i=(i=i+Math.imul(O,ue)|0)+Math.imul(L,le)|0,o=o+Math.imul(L,ue)|0,n=n+Math.imul(R,fe)|0,i=(i=i+Math.imul(R,he)|0)+Math.imul(I,fe)|0,o=o+Math.imul(I,he)|0;var Fe=(u+(n=n+Math.imul(C,pe)|0)|0)+((8191&(i=(i=i+Math.imul(C,me)|0)+Math.imul(A,pe)|0))<<13)|0;u=((o=o+Math.imul(A,me)|0)+(i>>>13)|0)+(Fe>>>26)|0,Fe&=67108863,n=Math.imul(z,le),i=(i=Math.imul(z,ue))+Math.imul(D,le)|0,o=Math.imul(D,ue),n=n+Math.imul(O,fe)|0,i=(i=i+Math.imul(O,he)|0)+Math.imul(L,fe)|0,o=o+Math.imul(L,he)|0;var Re=(u+(n=n+Math.imul(R,pe)|0)|0)+((8191&(i=(i=i+Math.imul(R,me)|0)+Math.imul(I,pe)|0))<<13)|0;u=((o=o+Math.imul(I,me)|0)+(i>>>13)|0)+(Re>>>26)|0,Re&=67108863,n=Math.imul(z,fe),i=(i=Math.imul(z,he))+Math.imul(D,fe)|0,o=Math.imul(D,he);var Ie=(u+(n=n+Math.imul(O,pe)|0)|0)+((8191&(i=(i=i+Math.imul(O,me)|0)+Math.imul(L,pe)|0))<<13)|0;u=((o=o+Math.imul(L,me)|0)+(i>>>13)|0)+(Ie>>>26)|0,Ie&=67108863;var Te=(u+(n=Math.imul(z,pe))|0)+((8191&(i=(i=Math.imul(z,me))+Math.imul(D,pe)|0))<<13)|0;return u=((o=Math.imul(D,me))+(i>>>13)|0)+(Te>>>26)|0,Te&=67108863,l[0]=ge,l[1]=ve,l[2]=ye,l[3]=be,l[4]=we,l[5]=ke,l[6]=Ee,l[7]=xe,l[8]=_e,l[9]=Se,l[10]=Pe,l[11]=Ne,l[12]=Me,l[13]=Ce,l[14]=Ae,l[15]=Fe,l[16]=Re,l[17]=Ie,l[18]=Te,0!==u&&(l[19]=u,r.length++),r};function v(e,t,r){r.negative=t.negative^e.negative,r.length=e.length+t.length;for(var n=0,i=0,o=0;o<r.length-1;o++){var a=i;i=0;for(var s=67108863&n,l=Math.min(o,t.length-1),u=Math.max(0,o-e.length+1);u<=l;u++){var c=o-u,f=(0|e.words[c])*(0|t.words[u]),h=67108863&f;s=67108863&(h=h+s|0),i+=(a=(a=a+(f/67108864|0)|0)+(h>>>26)|0)>>>26,a&=67108863}r.words[o]=s,n=a,a=i}return 0!==n?r.words[o]=n:r.length--,r._strip()}function y(e,t,r){return v(e,t,r)}function b(e,t){this.x=e,this.y=t}Math.imul||(g=m),o.prototype.mulTo=function(e,t){var r=this.length+e.length;return 10===this.length&&10===e.length?g(this,e,t):r<63?m(this,e,t):r<1024?v(this,e,t):y(this,e,t)},b.prototype.makeRBT=function(e){for(var t=new Array(e),r=o.prototype._countBits(e)-1,n=0;n<e;n++)t[n]=this.revBin(n,r,e);return t},b.prototype.revBin=function(e,t,r){if(0===e||e===r-1)return e;for(var n=0,i=0;i<t;i++)n|=(1&e)<<t-i-1,e>>=1;return n},b.prototype.permute=function(e,t,r,n,i,o){for(var a=0;a<o;a++)n[a]=t[e[a]],i[a]=r[e[a]]},b.prototype.transform=function(e,t,r,n,i,o){this.permute(o,e,t,r,n,i);for(var a=1;a<i;a<<=1)for(var s=a<<1,l=Math.cos(2*Math.PI/s),u=Math.sin(2*Math.PI/s),c=0;c<i;c+=s)for(var f=l,h=u,d=0;d<a;d++){var p=r[c+d],m=n[c+d],g=r[c+d+a],v=n[c+d+a],y=f*g-h*v;v=f*v+h*g,g=y,r[c+d]=p+g,n[c+d]=m+v,r[c+d+a]=p-g,n[c+d+a]=m-v,d!==s&&(y=l*f-u*h,h=l*h+u*f,f=y)}},b.prototype.guessLen13b=function(e,t){var r=1|Math.max(t,e),n=1&r,i=0;for(r=r/2|0;r;r>>>=1)i++;return 1<<i+1+n},b.prototype.conjugate=function(e,t,r){if(!(r<=1))for(var n=0;n<r/2;n++){var i=e[n];e[n]=e[r-n-1],e[r-n-1]=i,i=t[n],t[n]=-t[r-n-1],t[r-n-1]=-i}},b.prototype.normalize13b=function(e,t){for(var r=0,n=0;n<t/2;n++){var i=8192*Math.round(e[2*n+1]/t)+Math.round(e[2*n]/t)+r;e[n]=67108863&i,r=i<67108864?0:i/67108864|0}return e},b.prototype.convert13b=function(e,t,r,i){for(var o=0,a=0;a<t;a++)o+=0|e[a],r[2*a]=8191&o,o>>>=13,r[2*a+1]=8191&o,o>>>=13;for(a=2*t;a<i;++a)r[a]=0;n(0===o),n(0==(-8192&o))},b.prototype.stub=function(e){for(var t=new Array(e),r=0;r<e;r++)t[r]=0;return t},b.prototype.mulp=function(e,t,r){var n=2*this.guessLen13b(e.length,t.length),i=this.makeRBT(n),o=this.stub(n),a=new Array(n),s=new Array(n),l=new Array(n),u=new Array(n),c=new Array(n),f=new Array(n),h=r.words;h.length=n,this.convert13b(e.words,e.length,a,n),this.convert13b(t.words,t.length,u,n),this.transform(a,o,s,l,n,i),this.transform(u,o,c,f,n,i);for(var d=0;d<n;d++){var p=s[d]*c[d]-l[d]*f[d];l[d]=s[d]*f[d]+l[d]*c[d],s[d]=p}return this.conjugate(s,l,n),this.transform(s,l,h,o,n,i),this.conjugate(h,o,n),this.normalize13b(h,n),r.negative=e.negative^t.negative,r.length=e.length+t.length,r._strip()},o.prototype.mul=function(e){var t=new o(null);return t.words=new Array(this.length+e.length),this.mulTo(e,t)},o.prototype.mulf=function(e){var t=new o(null);return t.words=new Array(this.length+e.length),y(this,e,t)},o.prototype.imul=function(e){return this.clone().mulTo(e,this)},o.prototype.imuln=function(e){var t=e<0;t&&(e=-e),n("number"==typeof e),n(e<67108864);for(var r=0,i=0;i<this.length;i++){var o=(0|this.words[i])*e,a=(67108863&o)+(67108863&r);r>>=26,r+=o/67108864|0,r+=a>>>26,this.words[i]=67108863&a}return 0!==r&&(this.words[i]=r,this.length++),t?this.ineg():this},o.prototype.muln=function(e){return this.clone().imuln(e)},o.prototype.sqr=function(){return this.mul(this)},o.prototype.isqr=function(){return this.imul(this.clone())},o.prototype.pow=function(e){var t=function(e){for(var t=new Array(e.bitLength()),r=0;r<t.length;r++){var n=r/26|0,i=r%26;t[r]=e.words[n]>>>i&1}return t}(e);if(0===t.length)return new o(1);for(var r=this,n=0;n<t.length&&0===t[n];n++,r=r.sqr());if(++n<t.length)for(var i=r.sqr();n<t.length;n++,i=i.sqr())0!==t[n]&&(r=r.mul(i));return r},o.prototype.iushln=function(e){n("number"==typeof e&&e>=0);var t,r=e%26,i=(e-r)/26,o=67108863>>>26-r<<26-r;if(0!==r){var a=0;for(t=0;t<this.length;t++){var s=this.words[t]&o,l=(0|this.words[t])-s<<r;this.words[t]=l|a,a=s>>>26-r}a&&(this.words[t]=a,this.length++)}if(0!==i){for(t=this.length-1;t>=0;t--)this.words[t+i]=this.words[t];for(t=0;t<i;t++)this.words[t]=0;this.length+=i}return this._strip()},o.prototype.ishln=function(e){return n(0===this.negative),this.iushln(e)},o.prototype.iushrn=function(e,t,r){var i;n("number"==typeof e&&e>=0),i=t?(t-t%26)/26:0;var o=e%26,a=Math.min((e-o)/26,this.length),s=67108863^67108863>>>o<<o,l=r;if(i-=a,i=Math.max(0,i),l){for(var u=0;u<a;u++)l.words[u]=this.words[u];l.length=a}if(0===a);else if(this.length>a)for(this.length-=a,u=0;u<this.length;u++)this.words[u]=this.words[u+a];else this.words[0]=0,this.length=1;var c=0;for(u=this.length-1;u>=0&&(0!==c||u>=i);u--){var f=0|this.words[u];this.words[u]=c<<26-o|f>>>o,c=f&s}return l&&0!==c&&(l.words[l.length++]=c),0===this.length&&(this.words[0]=0,this.length=1),this._strip()},o.prototype.ishrn=function(e,t,r){return n(0===this.negative),this.iushrn(e,t,r)},o.prototype.shln=function(e){return this.clone().ishln(e)},o.prototype.ushln=function(e){return this.clone().iushln(e)},o.prototype.shrn=function(e){return this.clone().ishrn(e)},o.prototype.ushrn=function(e){return this.clone().iushrn(e)},o.prototype.testn=function(e){n("number"==typeof e&&e>=0);var t=e%26,r=(e-t)/26,i=1<<t;return!(this.length<=r||!(this.words[r]&i))},o.prototype.imaskn=function(e){n("number"==typeof e&&e>=0);var t=e%26,r=(e-t)/26;if(n(0===this.negative,"imaskn works only with positive numbers"),this.length<=r)return this;if(0!==t&&r++,this.length=Math.min(r,this.length),0!==t){var i=67108863^67108863>>>t<<t;this.words[this.length-1]&=i}return this._strip()},o.prototype.maskn=function(e){return this.clone().imaskn(e)},o.prototype.iaddn=function(e){return n("number"==typeof e),n(e<67108864),e<0?this.isubn(-e):0!==this.negative?1===this.length&&(0|this.words[0])<=e?(this.words[0]=e-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(e),this.negative=1,this):this._iaddn(e)},o.prototype._iaddn=function(e){this.words[0]+=e;for(var t=0;t<this.length&&this.words[t]>=67108864;t++)this.words[t]-=67108864,t===this.length-1?this.words[t+1]=1:this.words[t+1]++;return this.length=Math.max(this.length,t+1),this},o.prototype.isubn=function(e){if(n("number"==typeof e),n(e<67108864),e<0)return this.iaddn(-e);if(0!==this.negative)return this.negative=0,this.iaddn(e),this.negative=1,this;if(this.words[0]-=e,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var t=0;t<this.length&&this.words[t]<0;t++)this.words[t]+=67108864,this.words[t+1]-=1;return this._strip()},o.prototype.addn=function(e){return this.clone().iaddn(e)},o.prototype.subn=function(e){return this.clone().isubn(e)},o.prototype.iabs=function(){return this.negative=0,this},o.prototype.abs=function(){return this.clone().iabs()},o.prototype._ishlnsubmul=function(e,t,r){var i,o,a=e.length+r;this._expand(a);var s=0;for(i=0;i<e.length;i++){o=(0|this.words[i+r])+s;var l=(0|e.words[i])*t;s=((o-=67108863&l)>>26)-(l/67108864|0),this.words[i+r]=67108863&o}for(;i<this.length-r;i++)s=(o=(0|this.words[i+r])+s)>>26,this.words[i+r]=67108863&o;if(0===s)return this._strip();for(n(-1===s),s=0,i=0;i<this.length;i++)s=(o=-(0|this.words[i])+s)>>26,this.words[i]=67108863&o;return this.negative=1,this._strip()},o.prototype._wordDiv=function(e,t){var r=(this.length,e.length),n=this.clone(),i=e,a=0|i.words[i.length-1];0!=(r=26-this._countBits(a))&&(i=i.ushln(r),n.iushln(r),a=0|i.words[i.length-1]);var s,l=n.length-i.length;if("mod"!==t){(s=new o(null)).length=l+1,s.words=new Array(s.length);for(var u=0;u<s.length;u++)s.words[u]=0}var c=n.clone()._ishlnsubmul(i,1,l);0===c.negative&&(n=c,s&&(s.words[l]=1));for(var f=l-1;f>=0;f--){var h=67108864*(0|n.words[i.length+f])+(0|n.words[i.length+f-1]);for(h=Math.min(h/a|0,67108863),n._ishlnsubmul(i,h,f);0!==n.negative;)h--,n.negative=0,n._ishlnsubmul(i,1,f),n.isZero()||(n.negative^=1);s&&(s.words[f]=h)}return s&&s._strip(),n._strip(),"div"!==t&&0!==r&&n.iushrn(r),{div:s||null,mod:n}},o.prototype.divmod=function(e,t,r){return n(!e.isZero()),this.isZero()?{div:new o(0),mod:new o(0)}:0!==this.negative&&0===e.negative?(s=this.neg().divmod(e,t),"mod"!==t&&(i=s.div.neg()),"div"!==t&&(a=s.mod.neg(),r&&0!==a.negative&&a.iadd(e)),{div:i,mod:a}):0===this.negative&&0!==e.negative?(s=this.divmod(e.neg(),t),"mod"!==t&&(i=s.div.neg()),{div:i,mod:s.mod}):0!=(this.negative&e.negative)?(s=this.neg().divmod(e.neg(),t),"div"!==t&&(a=s.mod.neg(),r&&0!==a.negative&&a.isub(e)),{div:s.div,mod:a}):e.length>this.length||this.cmp(e)<0?{div:new o(0),mod:this}:1===e.length?"div"===t?{div:this.divn(e.words[0]),mod:null}:"mod"===t?{div:null,mod:new o(this.modrn(e.words[0]))}:{div:this.divn(e.words[0]),mod:new o(this.modrn(e.words[0]))}:this._wordDiv(e,t);var i,a,s},o.prototype.div=function(e){return this.divmod(e,"div",!1).div},o.prototype.mod=function(e){return this.divmod(e,"mod",!1).mod},o.prototype.umod=function(e){return this.divmod(e,"mod",!0).mod},o.prototype.divRound=function(e){var t=this.divmod(e);if(t.mod.isZero())return t.div;var r=0!==t.div.negative?t.mod.isub(e):t.mod,n=e.ushrn(1),i=e.andln(1),o=r.cmp(n);return o<0||1===i&&0===o?t.div:0!==t.div.negative?t.div.isubn(1):t.div.iaddn(1)},o.prototype.modrn=function(e){var t=e<0;t&&(e=-e),n(e<=67108863);for(var r=(1<<26)%e,i=0,o=this.length-1;o>=0;o--)i=(r*i+(0|this.words[o]))%e;return t?-i:i},o.prototype.modn=function(e){return this.modrn(e)},o.prototype.idivn=function(e){var t=e<0;t&&(e=-e),n(e<=67108863);for(var r=0,i=this.length-1;i>=0;i--){var o=(0|this.words[i])+67108864*r;this.words[i]=o/e|0,r=o%e}return this._strip(),t?this.ineg():this},o.prototype.divn=function(e){return this.clone().idivn(e)},o.prototype.egcd=function(e){n(0===e.negative),n(!e.isZero());var t=this,r=e.clone();t=0!==t.negative?t.umod(e):t.clone();for(var i=new o(1),a=new o(0),s=new o(0),l=new o(1),u=0;t.isEven()&&r.isEven();)t.iushrn(1),r.iushrn(1),++u;for(var c=r.clone(),f=t.clone();!t.isZero();){for(var h=0,d=1;0==(t.words[0]&d)&&h<26;++h,d<<=1);if(h>0)for(t.iushrn(h);h-- >0;)(i.isOdd()||a.isOdd())&&(i.iadd(c),a.isub(f)),i.iushrn(1),a.iushrn(1);for(var p=0,m=1;0==(r.words[0]&m)&&p<26;++p,m<<=1);if(p>0)for(r.iushrn(p);p-- >0;)(s.isOdd()||l.isOdd())&&(s.iadd(c),l.isub(f)),s.iushrn(1),l.iushrn(1);t.cmp(r)>=0?(t.isub(r),i.isub(s),a.isub(l)):(r.isub(t),s.isub(i),l.isub(a))}return{a:s,b:l,gcd:r.iushln(u)}},o.prototype._invmp=function(e){n(0===e.negative),n(!e.isZero());var t=this,r=e.clone();t=0!==t.negative?t.umod(e):t.clone();for(var i,a=new o(1),s=new o(0),l=r.clone();t.cmpn(1)>0&&r.cmpn(1)>0;){for(var u=0,c=1;0==(t.words[0]&c)&&u<26;++u,c<<=1);if(u>0)for(t.iushrn(u);u-- >0;)a.isOdd()&&a.iadd(l),a.iushrn(1);for(var f=0,h=1;0==(r.words[0]&h)&&f<26;++f,h<<=1);if(f>0)for(r.iushrn(f);f-- >0;)s.isOdd()&&s.iadd(l),s.iushrn(1);t.cmp(r)>=0?(t.isub(r),a.isub(s)):(r.isub(t),s.isub(a))}return(i=0===t.cmpn(1)?a:s).cmpn(0)<0&&i.iadd(e),i},o.prototype.gcd=function(e){if(this.isZero())return e.abs();if(e.isZero())return this.abs();var t=this.clone(),r=e.clone();t.negative=0,r.negative=0;for(var n=0;t.isEven()&&r.isEven();n++)t.iushrn(1),r.iushrn(1);for(;;){for(;t.isEven();)t.iushrn(1);for(;r.isEven();)r.iushrn(1);var i=t.cmp(r);if(i<0){var o=t;t=r,r=o}else if(0===i||0===r.cmpn(1))break;t.isub(r)}return r.iushln(n)},o.prototype.invm=function(e){return this.egcd(e).a.umod(e)},o.prototype.isEven=function(){return 0==(1&this.words[0])},o.prototype.isOdd=function(){return 1==(1&this.words[0])},o.prototype.andln=function(e){return this.words[0]&e},o.prototype.bincn=function(e){n("number"==typeof e);var t=e%26,r=(e-t)/26,i=1<<t;if(this.length<=r)return this._expand(r+1),this.words[r]|=i,this;for(var o=i,a=r;0!==o&&a<this.length;a++){var s=0|this.words[a];o=(s+=o)>>>26,s&=67108863,this.words[a]=s}return 0!==o&&(this.words[a]=o,this.length++),this},o.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},o.prototype.cmpn=function(e){var t,r=e<0;if(0!==this.negative&&!r)return-1;if(0===this.negative&&r)return 1;if(this._strip(),this.length>1)t=1;else{r&&(e=-e),n(e<=67108863,"Number is too big");var i=0|this.words[0];t=i===e?0:i<e?-1:1}return 0!==this.negative?0|-t:t},o.prototype.cmp=function(e){if(0!==this.negative&&0===e.negative)return-1;if(0===this.negative&&0!==e.negative)return 1;var t=this.ucmp(e);return 0!==this.negative?0|-t:t},o.prototype.ucmp=function(e){if(this.length>e.length)return 1;if(this.length<e.length)return-1;for(var t=0,r=this.length-1;r>=0;r--){var n=0|this.words[r],i=0|e.words[r];if(n!==i){n<i?t=-1:n>i&&(t=1);break}}return t},o.prototype.gtn=function(e){return 1===this.cmpn(e)},o.prototype.gt=function(e){return 1===this.cmp(e)},o.prototype.gten=function(e){return this.cmpn(e)>=0},o.prototype.gte=function(e){return this.cmp(e)>=0},o.prototype.ltn=function(e){return-1===this.cmpn(e)},o.prototype.lt=function(e){return-1===this.cmp(e)},o.prototype.lten=function(e){return this.cmpn(e)<=0},o.prototype.lte=function(e){return this.cmp(e)<=0},o.prototype.eqn=function(e){return 0===this.cmpn(e)},o.prototype.eq=function(e){return 0===this.cmp(e)},o.red=function(e){return new P(e)},o.prototype.toRed=function(e){return n(!this.red,"Already a number in reduction context"),n(0===this.negative,"red works only with positives"),e.convertTo(this)._forceRed(e)},o.prototype.fromRed=function(){return n(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},o.prototype._forceRed=function(e){return this.red=e,this},o.prototype.forceRed=function(e){return n(!this.red,"Already a number in reduction context"),this._forceRed(e)},o.prototype.redAdd=function(e){return n(this.red,"redAdd works only with red numbers"),this.red.add(this,e)},o.prototype.redIAdd=function(e){return n(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,e)},o.prototype.redSub=function(e){return n(this.red,"redSub works only with red numbers"),this.red.sub(this,e)},o.prototype.redISub=function(e){return n(this.red,"redISub works only with red numbers"),this.red.isub(this,e)},o.prototype.redShl=function(e){return n(this.red,"redShl works only with red numbers"),this.red.shl(this,e)},o.prototype.redMul=function(e){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,e),this.red.mul(this,e)},o.prototype.redIMul=function(e){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,e),this.red.imul(this,e)},o.prototype.redSqr=function(){return n(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},o.prototype.redISqr=function(){return n(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},o.prototype.redSqrt=function(){return n(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},o.prototype.redInvm=function(){return n(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},o.prototype.redNeg=function(){return n(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},o.prototype.redPow=function(e){return n(this.red&&!e.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,e)};var w={k256:null,p224:null,p192:null,p25519:null};function k(e,t){this.name=e,this.p=new o(t,16),this.n=this.p.bitLength(),this.k=new o(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function E(){k.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function x(){k.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function _(){k.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function S(){k.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function P(e){if("string"==typeof e){var t=o._prime(e);this.m=t.p,this.prime=t}else n(e.gtn(1),"modulus must be greater than 1"),this.m=e,this.prime=null}function N(e){P.call(this,e),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new o(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}k.prototype._tmp=function(){var e=new o(null);return e.words=new Array(Math.ceil(this.n/13)),e},k.prototype.ireduce=function(e){var t,r=e;do{this.split(r,this.tmp),t=(r=(r=this.imulK(r)).iadd(this.tmp)).bitLength()}while(t>this.n);var n=t<this.n?-1:r.ucmp(this.p);return 0===n?(r.words[0]=0,r.length=1):n>0?r.isub(this.p):void 0!==r.strip?r.strip():r._strip(),r},k.prototype.split=function(e,t){e.iushrn(this.n,0,t)},k.prototype.imulK=function(e){return e.imul(this.k)},i(E,k),E.prototype.split=function(e,t){for(var r=4194303,n=Math.min(e.length,9),i=0;i<n;i++)t.words[i]=e.words[i];if(t.length=n,e.length<=9)return e.words[0]=0,void(e.length=1);var o=e.words[9];for(t.words[t.length++]=o&r,i=10;i<e.length;i++){var a=0|e.words[i];e.words[i-10]=(a&r)<<4|o>>>22,o=a}o>>>=22,e.words[i-10]=o,0===o&&e.length>10?e.length-=10:e.length-=9},E.prototype.imulK=function(e){e.words[e.length]=0,e.words[e.length+1]=0,e.length+=2;for(var t=0,r=0;r<e.length;r++){var n=0|e.words[r];t+=977*n,e.words[r]=67108863&t,t=64*n+(t/67108864|0)}return 0===e.words[e.length-1]&&(e.length--,0===e.words[e.length-1]&&e.length--),e},i(x,k),i(_,k),i(S,k),S.prototype.imulK=function(e){for(var t=0,r=0;r<e.length;r++){var n=19*(0|e.words[r])+t,i=67108863&n;n>>>=26,e.words[r]=i,t=n}return 0!==t&&(e.words[e.length++]=t),e},o._prime=function(e){if(w[e])return w[e];var t;if("k256"===e)t=new E;else if("p224"===e)t=new x;else if("p192"===e)t=new _;else{if("p25519"!==e)throw new Error("Unknown prime "+e);t=new S}return w[e]=t,t},P.prototype._verify1=function(e){n(0===e.negative,"red works only with positives"),n(e.red,"red works only with red numbers")},P.prototype._verify2=function(e,t){n(0==(e.negative|t.negative),"red works only with positives"),n(e.red&&e.red===t.red,"red works only with red numbers")},P.prototype.imod=function(e){return this.prime?this.prime.ireduce(e)._forceRed(this):(c(e,e.umod(this.m)._forceRed(this)),e)},P.prototype.neg=function(e){return e.isZero()?e.clone():this.m.sub(e)._forceRed(this)},P.prototype.add=function(e,t){this._verify2(e,t);var r=e.add(t);return r.cmp(this.m)>=0&&r.isub(this.m),r._forceRed(this)},P.prototype.iadd=function(e,t){this._verify2(e,t);var r=e.iadd(t);return r.cmp(this.m)>=0&&r.isub(this.m),r},P.prototype.sub=function(e,t){this._verify2(e,t);var r=e.sub(t);return r.cmpn(0)<0&&r.iadd(this.m),r._forceRed(this)},P.prototype.isub=function(e,t){this._verify2(e,t);var r=e.isub(t);return r.cmpn(0)<0&&r.iadd(this.m),r},P.prototype.shl=function(e,t){return this._verify1(e),this.imod(e.ushln(t))},P.prototype.imul=function(e,t){return this._verify2(e,t),this.imod(e.imul(t))},P.prototype.mul=function(e,t){return this._verify2(e,t),this.imod(e.mul(t))},P.prototype.isqr=function(e){return this.imul(e,e.clone())},P.prototype.sqr=function(e){return this.mul(e,e)},P.prototype.sqrt=function(e){if(e.isZero())return e.clone();var t=this.m.andln(3);if(n(t%2==1),3===t){var r=this.m.add(new o(1)).iushrn(2);return this.pow(e,r)}for(var i=this.m.subn(1),a=0;!i.isZero()&&0===i.andln(1);)a++,i.iushrn(1);n(!i.isZero());var s=new o(1).toRed(this),l=s.redNeg(),u=this.m.subn(1).iushrn(1),c=this.m.bitLength();for(c=new o(2*c*c).toRed(this);0!==this.pow(c,u).cmp(l);)c.redIAdd(l);for(var f=this.pow(c,i),h=this.pow(e,i.addn(1).iushrn(1)),d=this.pow(e,i),p=a;0!==d.cmp(s);){for(var m=d,g=0;0!==m.cmp(s);g++)m=m.redSqr();n(g<p);var v=this.pow(f,new o(1).iushln(p-g-1));h=h.redMul(v),f=v.redSqr(),d=d.redMul(f),p=g}return h},P.prototype.invm=function(e){var t=e._invmp(this.m);return 0!==t.negative?(t.negative=0,this.imod(t).redNeg()):this.imod(t)},P.prototype.pow=function(e,t){if(t.isZero())return new o(1).toRed(this);if(0===t.cmpn(1))return e.clone();var r=new Array(16);r[0]=new o(1).toRed(this),r[1]=e;for(var n=2;n<r.length;n++)r[n]=this.mul(r[n-1],e);var i=r[0],a=0,s=0,l=t.bitLength()%26;for(0===l&&(l=26),n=t.length-1;n>=0;n--){for(var u=t.words[n],c=l-1;c>=0;c--){var f=u>>c&1;i!==r[0]&&(i=this.sqr(i)),0!==f||0!==a?(a<<=1,a|=f,(4==++s||0===n&&0===c)&&(i=this.mul(i,r[a]),s=0,a=0)):s=0}l=26}return i},P.prototype.convertTo=function(e){var t=e.umod(this.m);return t===e?t.clone():t},P.prototype.convertFrom=function(e){var t=e.clone();return t.red=null,t},o.mont=function(e){return new N(e)},i(N,P),N.prototype.convertTo=function(e){return this.imod(e.ushln(this.shift))},N.prototype.convertFrom=function(e){var t=this.imod(e.mul(this.rinv));return t.red=null,t},N.prototype.imul=function(e,t){if(e.isZero()||t.isZero())return e.words[0]=0,e.length=1,e;var r=e.imul(t),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),o=i;return i.cmp(this.m)>=0?o=i.isub(this.m):i.cmpn(0)<0&&(o=i.iadd(this.m)),o._forceRed(this)},N.prototype.mul=function(e,t){if(e.isZero()||t.isZero())return new o(0)._forceRed(this);var r=e.mul(t),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),a=i;return i.cmp(this.m)>=0?a=i.isub(this.m):i.cmpn(0)<0&&(a=i.iadd(this.m)),a._forceRed(this)},N.prototype.invm=function(e){return this.imod(e._invmp(this.m).mul(this.r2))._forceRed(this)}}(e=r.nmd(e),this)},184:(e,t)=>{var r;!function(){"use strict";var n={}.hasOwnProperty;function i(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var o=typeof r;if("string"===o||"number"===o)e.push(r);else if(Array.isArray(r)){if(r.length){var a=i.apply(null,r);a&&e.push(a)}}else if("object"===o)if(r.toString===Object.prototype.toString)for(var s in r)n.call(r,s)&&r[s]&&e.push(s);else e.push(r.toString())}}return e.join(" ")}e.exports?(i.default=i,e.exports=i):void 0===(r=function(){return i}.apply(t,[]))||(e.exports=r)}()},715:(e,t,r)=>{var n=t;n.utils=r(436),n.common=r(772),n.sha=r(41),n.ripemd=r(949),n.hmac=r(326),n.sha1=n.sha.sha1,n.sha256=n.sha.sha256,n.sha224=n.sha.sha224,n.sha384=n.sha.sha384,n.sha512=n.sha.sha512,n.ripemd160=n.ripemd.ripemd160},772:(e,t,r)=>{"use strict";var n=r(436),i=r(746);function o(){this.pending=null,this.pendingTotal=0,this.blockSize=this.constructor.blockSize,this.outSize=this.constructor.outSize,this.hmacStrength=this.constructor.hmacStrength,this.padLength=this.constructor.padLength/8,this.endian="big",this._delta8=this.blockSize/8,this._delta32=this.blockSize/32}t.BlockHash=o,o.prototype.update=function(e,t){if(e=n.toArray(e,t),this.pending?this.pending=this.pending.concat(e):this.pending=e,this.pendingTotal+=e.length,this.pending.length>=this._delta8){var r=(e=this.pending).length%this._delta8;this.pending=e.slice(e.length-r,e.length),0===this.pending.length&&(this.pending=null),e=n.join32(e,0,e.length-r,this.endian);for(var i=0;i<e.length;i+=this._delta32)this._update(e,i,i+this._delta32)}return this},o.prototype.digest=function(e){return this.update(this._pad()),i(null===this.pending),this._digest(e)},o.prototype._pad=function(){var e=this.pendingTotal,t=this._delta8,r=t-(e+this.padLength)%t,n=new Array(r+this.padLength);n[0]=128;for(var i=1;i<r;i++)n[i]=0;if(e<<=3,"big"===this.endian){for(var o=8;o<this.padLength;o++)n[i++]=0;n[i++]=0,n[i++]=0,n[i++]=0,n[i++]=0,n[i++]=e>>>24&255,n[i++]=e>>>16&255,n[i++]=e>>>8&255,n[i++]=255&e}else for(n[i++]=255&e,n[i++]=e>>>8&255,n[i++]=e>>>16&255,n[i++]=e>>>24&255,n[i++]=0,n[i++]=0,n[i++]=0,n[i++]=0,o=8;o<this.padLength;o++)n[i++]=0;return n}},326:(e,t,r)=>{"use strict";var n=r(436),i=r(746);function o(e,t,r){if(!(this instanceof o))return new o(e,t,r);this.Hash=e,this.blockSize=e.blockSize/8,this.outSize=e.outSize/8,this.inner=null,this.outer=null,this._init(n.toArray(t,r))}e.exports=o,o.prototype._init=function(e){e.length>this.blockSize&&(e=(new this.Hash).update(e).digest()),i(e.length<=this.blockSize);for(var t=e.length;t<this.blockSize;t++)e.push(0);for(t=0;t<e.length;t++)e[t]^=54;for(this.inner=(new this.Hash).update(e),t=0;t<e.length;t++)e[t]^=106;this.outer=(new this.Hash).update(e)},o.prototype.update=function(e,t){return this.inner.update(e,t),this},o.prototype.digest=function(e){return this.outer.update(this.inner.digest()),this.outer.digest(e)}},949:(e,t,r)=>{"use strict";var n=r(436),i=r(772),o=n.rotl32,a=n.sum32,s=n.sum32_3,l=n.sum32_4,u=i.BlockHash;function c(){if(!(this instanceof c))return new c;u.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.endian="little"}function f(e,t,r,n){return e<=15?t^r^n:e<=31?t&r|~t&n:e<=47?(t|~r)^n:e<=63?t&n|r&~n:t^(r|~n)}function h(e){return e<=15?0:e<=31?1518500249:e<=47?1859775393:e<=63?2400959708:2840853838}function d(e){return e<=15?1352829926:e<=31?1548603684:e<=47?1836072691:e<=63?2053994217:0}n.inherits(c,u),t.ripemd160=c,c.blockSize=512,c.outSize=160,c.hmacStrength=192,c.padLength=64,c.prototype._update=function(e,t){for(var r=this.h[0],n=this.h[1],i=this.h[2],u=this.h[3],c=this.h[4],y=r,b=n,w=i,k=u,E=c,x=0;x<80;x++){var _=a(o(l(r,f(x,n,i,u),e[p[x]+t],h(x)),g[x]),c);r=c,c=u,u=o(i,10),i=n,n=_,_=a(o(l(y,f(79-x,b,w,k),e[m[x]+t],d(x)),v[x]),E),y=E,E=k,k=o(w,10),w=b,b=_}_=s(this.h[1],i,k),this.h[1]=s(this.h[2],u,E),this.h[2]=s(this.h[3],c,y),this.h[3]=s(this.h[4],r,b),this.h[4]=s(this.h[0],n,w),this.h[0]=_},c.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h,"little"):n.split32(this.h,"little")};var p=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],m=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],g=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],v=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]},41:(e,t,r)=>{"use strict";t.sha1=r(761),t.sha224=r(799),t.sha256=r(344),t.sha384=r(978),t.sha512=r(900)},761:(e,t,r)=>{"use strict";var n=r(436),i=r(772),o=r(38),a=n.rotl32,s=n.sum32,l=n.sum32_5,u=o.ft_1,c=i.BlockHash,f=[1518500249,1859775393,2400959708,3395469782];function h(){if(!(this instanceof h))return new h;c.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.W=new Array(80)}n.inherits(h,c),e.exports=h,h.blockSize=512,h.outSize=160,h.hmacStrength=80,h.padLength=64,h.prototype._update=function(e,t){for(var r=this.W,n=0;n<16;n++)r[n]=e[t+n];for(;n<r.length;n++)r[n]=a(r[n-3]^r[n-8]^r[n-14]^r[n-16],1);var i=this.h[0],o=this.h[1],c=this.h[2],h=this.h[3],d=this.h[4];for(n=0;n<r.length;n++){var p=~~(n/20),m=l(a(i,5),u(p,o,c,h),d,r[n],f[p]);d=h,h=c,c=a(o,30),o=i,i=m}this.h[0]=s(this.h[0],i),this.h[1]=s(this.h[1],o),this.h[2]=s(this.h[2],c),this.h[3]=s(this.h[3],h),this.h[4]=s(this.h[4],d)},h.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h,"big"):n.split32(this.h,"big")}},799:(e,t,r)=>{"use strict";var n=r(436),i=r(344);function o(){if(!(this instanceof o))return new o;i.call(this),this.h=[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428]}n.inherits(o,i),e.exports=o,o.blockSize=512,o.outSize=224,o.hmacStrength=192,o.padLength=64,o.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h.slice(0,7),"big"):n.split32(this.h.slice(0,7),"big")}},344:(e,t,r)=>{"use strict";var n=r(436),i=r(772),o=r(38),a=r(746),s=n.sum32,l=n.sum32_4,u=n.sum32_5,c=o.ch32,f=o.maj32,h=o.s0_256,d=o.s1_256,p=o.g0_256,m=o.g1_256,g=i.BlockHash,v=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function y(){if(!(this instanceof y))return new y;g.call(this),this.h=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],this.k=v,this.W=new Array(64)}n.inherits(y,g),e.exports=y,y.blockSize=512,y.outSize=256,y.hmacStrength=192,y.padLength=64,y.prototype._update=function(e,t){for(var r=this.W,n=0;n<16;n++)r[n]=e[t+n];for(;n<r.length;n++)r[n]=l(m(r[n-2]),r[n-7],p(r[n-15]),r[n-16]);var i=this.h[0],o=this.h[1],g=this.h[2],v=this.h[3],y=this.h[4],b=this.h[5],w=this.h[6],k=this.h[7];for(a(this.k.length===r.length),n=0;n<r.length;n++){var E=u(k,d(y),c(y,b,w),this.k[n],r[n]),x=s(h(i),f(i,o,g));k=w,w=b,b=y,y=s(v,E),v=g,g=o,o=i,i=s(E,x)}this.h[0]=s(this.h[0],i),this.h[1]=s(this.h[1],o),this.h[2]=s(this.h[2],g),this.h[3]=s(this.h[3],v),this.h[4]=s(this.h[4],y),this.h[5]=s(this.h[5],b),this.h[6]=s(this.h[6],w),this.h[7]=s(this.h[7],k)},y.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h,"big"):n.split32(this.h,"big")}},978:(e,t,r)=>{"use strict";var n=r(436),i=r(900);function o(){if(!(this instanceof o))return new o;i.call(this),this.h=[3418070365,3238371032,1654270250,914150663,2438529370,812702999,355462360,4144912697,1731405415,4290775857,2394180231,1750603025,3675008525,1694076839,1203062813,3204075428]}n.inherits(o,i),e.exports=o,o.blockSize=1024,o.outSize=384,o.hmacStrength=192,o.padLength=128,o.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h.slice(0,12),"big"):n.split32(this.h.slice(0,12),"big")}},900:(e,t,r)=>{"use strict";var n=r(436),i=r(772),o=r(746),a=n.rotr64_hi,s=n.rotr64_lo,l=n.shr64_hi,u=n.shr64_lo,c=n.sum64,f=n.sum64_hi,h=n.sum64_lo,d=n.sum64_4_hi,p=n.sum64_4_lo,m=n.sum64_5_hi,g=n.sum64_5_lo,v=i.BlockHash,y=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function b(){if(!(this instanceof b))return new b;v.call(this),this.h=[1779033703,4089235720,3144134277,2227873595,1013904242,4271175723,2773480762,1595750129,1359893119,2917565137,2600822924,725511199,528734635,4215389547,1541459225,327033209],this.k=y,this.W=new Array(160)}function w(e,t,r,n,i){var o=e&r^~e&i;return o<0&&(o+=4294967296),o}function k(e,t,r,n,i,o){var a=t&n^~t&o;return a<0&&(a+=4294967296),a}function E(e,t,r,n,i){var o=e&r^e&i^r&i;return o<0&&(o+=4294967296),o}function x(e,t,r,n,i,o){var a=t&n^t&o^n&o;return a<0&&(a+=4294967296),a}function _(e,t){var r=a(e,t,28)^a(t,e,2)^a(t,e,7);return r<0&&(r+=4294967296),r}function S(e,t){var r=s(e,t,28)^s(t,e,2)^s(t,e,7);return r<0&&(r+=4294967296),r}function P(e,t){var r=s(e,t,14)^s(e,t,18)^s(t,e,9);return r<0&&(r+=4294967296),r}function N(e,t){var r=a(e,t,1)^a(e,t,8)^l(e,t,7);return r<0&&(r+=4294967296),r}function M(e,t){var r=s(e,t,1)^s(e,t,8)^u(e,t,7);return r<0&&(r+=4294967296),r}function C(e,t){var r=s(e,t,19)^s(t,e,29)^u(e,t,6);return r<0&&(r+=4294967296),r}n.inherits(b,v),e.exports=b,b.blockSize=1024,b.outSize=512,b.hmacStrength=192,b.padLength=128,b.prototype._prepareBlock=function(e,t){for(var r=this.W,n=0;n<32;n++)r[n]=e[t+n];for(;n<r.length;n+=2){var i=(g=r[n-4],v=r[n-3],y=void 0,(y=a(g,v,19)^a(v,g,29)^l(g,v,6))<0&&(y+=4294967296),y),o=C(r[n-4],r[n-3]),s=r[n-14],u=r[n-13],c=N(r[n-30],r[n-29]),f=M(r[n-30],r[n-29]),h=r[n-32],m=r[n-31];r[n]=d(i,o,s,u,c,f,h,m),r[n+1]=p(i,o,s,u,c,f,h,m)}var g,v,y},b.prototype._update=function(e,t){this._prepareBlock(e,t);var r,n,i,s=this.W,l=this.h[0],u=this.h[1],d=this.h[2],p=this.h[3],v=this.h[4],y=this.h[5],b=this.h[6],N=this.h[7],M=this.h[8],C=this.h[9],A=this.h[10],F=this.h[11],R=this.h[12],I=this.h[13],T=this.h[14],O=this.h[15];o(this.k.length===s.length);for(var L=0;L<s.length;L+=2){var B=T,z=O,D=(i=void 0,(i=a(r=M,n=C,14)^a(r,n,18)^a(n,r,9))<0&&(i+=4294967296),i),U=P(M,C),j=w(M,0,A,0,R),V=k(0,C,0,F,0,I),q=this.k[L],$=this.k[L+1],H=s[L],W=s[L+1],G=m(B,z,D,U,j,V,q,$,H,W),K=g(B,z,D,U,j,V,q,$,H,W);B=_(l,u),z=S(l,u),D=E(l,0,d,0,v),U=x(0,u,0,p,0,y);var Q=f(B,z,D,U),X=h(B,z,D,U);T=R,O=I,R=A,I=F,A=M,F=C,M=f(b,N,G,K),C=h(N,N,G,K),b=v,N=y,v=d,y=p,d=l,p=u,l=f(G,K,Q,X),u=h(G,K,Q,X)}c(this.h,0,l,u),c(this.h,2,d,p),c(this.h,4,v,y),c(this.h,6,b,N),c(this.h,8,M,C),c(this.h,10,A,F),c(this.h,12,R,I),c(this.h,14,T,O)},b.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h,"big"):n.split32(this.h,"big")}},38:(e,t,r)=>{"use strict";var n=r(436).rotr32;function i(e,t,r){return e&t^~e&r}function o(e,t,r){return e&t^e&r^t&r}function a(e,t,r){return e^t^r}t.ft_1=function(e,t,r,n){return 0===e?i(t,r,n):1===e||3===e?a(t,r,n):2===e?o(t,r,n):void 0},t.ch32=i,t.maj32=o,t.p32=a,t.s0_256=function(e){return n(e,2)^n(e,13)^n(e,22)},t.s1_256=function(e){return n(e,6)^n(e,11)^n(e,25)},t.g0_256=function(e){return n(e,7)^n(e,18)^e>>>3},t.g1_256=function(e){return n(e,17)^n(e,19)^e>>>10}},436:(e,t,r)=>{"use strict";var n=r(746),i=r(717);function o(e,t){return 55296==(64512&e.charCodeAt(t))&&!(t<0||t+1>=e.length)&&56320==(64512&e.charCodeAt(t+1))}function a(e){return(e>>>24|e>>>8&65280|e<<8&16711680|(255&e)<<24)>>>0}function s(e){return 1===e.length?"0"+e:e}function l(e){return 7===e.length?"0"+e:6===e.length?"00"+e:5===e.length?"000"+e:4===e.length?"0000"+e:3===e.length?"00000"+e:2===e.length?"000000"+e:1===e.length?"0000000"+e:e}t.inherits=i,t.toArray=function(e,t){if(Array.isArray(e))return e.slice();if(!e)return[];var r=[];if("string"==typeof e)if(t){if("hex"===t)for((e=e.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(e="0"+e),i=0;i<e.length;i+=2)r.push(parseInt(e[i]+e[i+1],16))}else for(var n=0,i=0;i<e.length;i++){var a=e.charCodeAt(i);a<128?r[n++]=a:a<2048?(r[n++]=a>>6|192,r[n++]=63&a|128):o(e,i)?(a=65536+((1023&a)<<10)+(1023&e.charCodeAt(++i)),r[n++]=a>>18|240,r[n++]=a>>12&63|128,r[n++]=a>>6&63|128,r[n++]=63&a|128):(r[n++]=a>>12|224,r[n++]=a>>6&63|128,r[n++]=63&a|128)}else for(i=0;i<e.length;i++)r[i]=0|e[i];return r},t.toHex=function(e){for(var t="",r=0;r<e.length;r++)t+=s(e[r].toString(16));return t},t.htonl=a,t.toHex32=function(e,t){for(var r="",n=0;n<e.length;n++){var i=e[n];"little"===t&&(i=a(i)),r+=l(i.toString(16))}return r},t.zero2=s,t.zero8=l,t.join32=function(e,t,r,i){var o=r-t;n(o%4==0);for(var a=new Array(o/4),s=0,l=t;s<a.length;s++,l+=4){var u;u="big"===i?e[l]<<24|e[l+1]<<16|e[l+2]<<8|e[l+3]:e[l+3]<<24|e[l+2]<<16|e[l+1]<<8|e[l],a[s]=u>>>0}return a},t.split32=function(e,t){for(var r=new Array(4*e.length),n=0,i=0;n<e.length;n++,i+=4){var o=e[n];"big"===t?(r[i]=o>>>24,r[i+1]=o>>>16&255,r[i+2]=o>>>8&255,r[i+3]=255&o):(r[i+3]=o>>>24,r[i+2]=o>>>16&255,r[i+1]=o>>>8&255,r[i]=255&o)}return r},t.rotr32=function(e,t){return e>>>t|e<<32-t},t.rotl32=function(e,t){return e<<t|e>>>32-t},t.sum32=function(e,t){return e+t>>>0},t.sum32_3=function(e,t,r){return e+t+r>>>0},t.sum32_4=function(e,t,r,n){return e+t+r+n>>>0},t.sum32_5=function(e,t,r,n,i){return e+t+r+n+i>>>0},t.sum64=function(e,t,r,n){var i=e[t],o=n+e[t+1]>>>0,a=(o<n?1:0)+r+i;e[t]=a>>>0,e[t+1]=o},t.sum64_hi=function(e,t,r,n){return(t+n>>>0<t?1:0)+e+r>>>0},t.sum64_lo=function(e,t,r,n){return t+n>>>0},t.sum64_4_hi=function(e,t,r,n,i,o,a,s){var l=0,u=t;return l+=(u=u+n>>>0)<t?1:0,l+=(u=u+o>>>0)<o?1:0,e+r+i+a+(l+=(u=u+s>>>0)<s?1:0)>>>0},t.sum64_4_lo=function(e,t,r,n,i,o,a,s){return t+n+o+s>>>0},t.sum64_5_hi=function(e,t,r,n,i,o,a,s,l,u){var c=0,f=t;return c+=(f=f+n>>>0)<t?1:0,c+=(f=f+o>>>0)<o?1:0,c+=(f=f+s>>>0)<s?1:0,e+r+i+a+l+(c+=(f=f+u>>>0)<u?1:0)>>>0},t.sum64_5_lo=function(e,t,r,n,i,o,a,s,l,u){return t+n+o+s+u>>>0},t.rotr64_hi=function(e,t,r){return(t<<32-r|e>>>r)>>>0},t.rotr64_lo=function(e,t,r){return(e<<32-r|t>>>r)>>>0},t.shr64_hi=function(e,t,r){return e>>>r},t.shr64_lo=function(e,t,r){return(e<<32-r|t>>>r)>>>0}},717:e=>{"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}}},94:(e,t,r)=>{var n;!function(){"use strict";var i="input is invalid type",o="object"==typeof window,a=o?window:{};a.JS_SHA3_NO_WINDOW&&(o=!1);var s=!o&&"object"==typeof self;!a.JS_SHA3_NO_NODE_JS&&"object"==typeof process&&process.versions&&process.versions.node?a=r.g:s&&(a=self);var l=!a.JS_SHA3_NO_COMMON_JS&&e.exports,u=r.amdO,c=!a.JS_SHA3_NO_ARRAY_BUFFER&&"undefined"!=typeof ArrayBuffer,f="0123456789abcdef".split(""),h=[4,1024,262144,67108864],d=[0,8,16,24],p=[1,0,32898,0,32906,2147483648,2147516416,2147483648,32907,0,2147483649,0,2147516545,2147483648,32777,2147483648,138,0,136,0,2147516425,0,2147483658,0,2147516555,0,139,2147483648,32905,2147483648,32771,2147483648,32770,2147483648,128,2147483648,32778,0,2147483658,2147483648,2147516545,2147483648,32896,2147483648,2147483649,0,2147516424,2147483648],m=[224,256,384,512],g=[128,256],v=["hex","buffer","arrayBuffer","array","digest"],y={128:168,256:136};!a.JS_SHA3_NO_NODE_JS&&Array.isArray||(Array.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)}),!c||!a.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW&&ArrayBuffer.isView||(ArrayBuffer.isView=function(e){return"object"==typeof e&&e.buffer&&e.buffer.constructor===ArrayBuffer});for(var b=function(e,t,r){return function(n){return new T(e,t,e).update(n)[r]()}},w=function(e,t,r){return function(n,i){return new T(e,t,i).update(n)[r]()}},k=function(e,t,r){return function(t,n,i,o){return P["cshake"+e].update(t,n,i,o)[r]()}},E=function(e,t,r){return function(t,n,i,o){return P["kmac"+e].update(t,n,i,o)[r]()}},x=function(e,t,r,n){for(var i=0;i<v.length;++i){var o=v[i];e[o]=t(r,n,o)}return e},_=function(e,t){var r=b(e,t,"hex");return r.create=function(){return new T(e,t,e)},r.update=function(e){return r.create().update(e)},x(r,b,e,t)},S=[{name:"keccak",padding:[1,256,65536,16777216],bits:m,createMethod:_},{name:"sha3",padding:[6,1536,393216,100663296],bits:m,createMethod:_},{name:"shake",padding:[31,7936,2031616,520093696],bits:g,createMethod:function(e,t){var r=w(e,t,"hex");return r.create=function(r){return new T(e,t,r)},r.update=function(e,t){return r.create(t).update(e)},x(r,w,e,t)}},{name:"cshake",padding:h,bits:g,createMethod:function(e,t){var r=y[e],n=k(e,0,"hex");return n.create=function(n,i,o){return i||o?new T(e,t,n).bytepad([i,o],r):P["shake"+e].create(n)},n.update=function(e,t,r,i){return n.create(t,r,i).update(e)},x(n,k,e,t)}},{name:"kmac",padding:h,bits:g,createMethod:function(e,t){var r=y[e],n=E(e,0,"hex");return n.create=function(n,i,o){return new O(e,t,i).bytepad(["KMAC",o],r).bytepad([n],r)},n.update=function(e,t,r,i){return n.create(e,r,i).update(t)},x(n,E,e,t)}}],P={},N=[],M=0;M<S.length;++M)for(var C=S[M],A=C.bits,F=0;F<A.length;++F){var R=C.name+"_"+A[F];if(N.push(R),P[R]=C.createMethod(A[F],C.padding),"sha3"!==C.name){var I=C.name+A[F];N.push(I),P[I]=P[R]}}function T(e,t,r){this.blocks=[],this.s=[],this.padding=t,this.outputBits=r,this.reset=!0,this.finalized=!1,this.block=0,this.start=0,this.blockCount=1600-(e<<1)>>5,this.byteCount=this.blockCount<<2,this.outputBlocks=r>>5,this.extraBytes=(31&r)>>3;for(var n=0;n<50;++n)this.s[n]=0}function O(e,t,r){T.call(this,e,t,r)}T.prototype.update=function(e){if(this.finalized)throw new Error("finalize already called");var t,r=typeof e;if("string"!==r){if("object"!==r)throw new Error(i);if(null===e)throw new Error(i);if(c&&e.constructor===ArrayBuffer)e=new Uint8Array(e);else if(!(Array.isArray(e)||c&&ArrayBuffer.isView(e)))throw new Error(i);t=!0}for(var n,o,a=this.blocks,s=this.byteCount,l=e.length,u=this.blockCount,f=0,h=this.s;f<l;){if(this.reset)for(this.reset=!1,a[0]=this.block,n=1;n<u+1;++n)a[n]=0;if(t)for(n=this.start;f<l&&n<s;++f)a[n>>2]|=e[f]<<d[3&n++];else for(n=this.start;f<l&&n<s;++f)(o=e.charCodeAt(f))<128?a[n>>2]|=o<<d[3&n++]:o<2048?(a[n>>2]|=(192|o>>6)<<d[3&n++],a[n>>2]|=(128|63&o)<<d[3&n++]):o<55296||o>=57344?(a[n>>2]|=(224|o>>12)<<d[3&n++],a[n>>2]|=(128|o>>6&63)<<d[3&n++],a[n>>2]|=(128|63&o)<<d[3&n++]):(o=65536+((1023&o)<<10|1023&e.charCodeAt(++f)),a[n>>2]|=(240|o>>18)<<d[3&n++],a[n>>2]|=(128|o>>12&63)<<d[3&n++],a[n>>2]|=(128|o>>6&63)<<d[3&n++],a[n>>2]|=(128|63&o)<<d[3&n++]);if(this.lastByteIndex=n,n>=s){for(this.start=n-s,this.block=a[u],n=0;n<u;++n)h[n]^=a[n];L(h),this.reset=!0}else this.start=n}return this},T.prototype.encode=function(e,t){var r=255&e,n=1,i=[r];for(r=255&(e>>=8);r>0;)i.unshift(r),r=255&(e>>=8),++n;return t?i.push(n):i.unshift(n),this.update(i),i.length},T.prototype.encodeString=function(e){var t,r=typeof e;if("string"!==r){if("object"!==r)throw new Error(i);if(null===e)throw new Error(i);if(c&&e.constructor===ArrayBuffer)e=new Uint8Array(e);else if(!(Array.isArray(e)||c&&ArrayBuffer.isView(e)))throw new Error(i);t=!0}var n=0,o=e.length;if(t)n=o;else for(var a=0;a<e.length;++a){var s=e.charCodeAt(a);s<128?n+=1:s<2048?n+=2:s<55296||s>=57344?n+=3:(s=65536+((1023&s)<<10|1023&e.charCodeAt(++a)),n+=4)}return n+=this.encode(8*n),this.update(e),n},T.prototype.bytepad=function(e,t){for(var r=this.encode(t),n=0;n<e.length;++n)r+=this.encodeString(e[n]);var i=t-r%t,o=[];return o.length=i,this.update(o),this},T.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var e=this.blocks,t=this.lastByteIndex,r=this.blockCount,n=this.s;if(e[t>>2]|=this.padding[3&t],this.lastByteIndex===this.byteCount)for(e[0]=e[r],t=1;t<r+1;++t)e[t]=0;for(e[r-1]|=2147483648,t=0;t<r;++t)n[t]^=e[t];L(n)}},T.prototype.toString=T.prototype.hex=function(){this.finalize();for(var e,t=this.blockCount,r=this.s,n=this.outputBlocks,i=this.extraBytes,o=0,a=0,s="";a<n;){for(o=0;o<t&&a<n;++o,++a)e=r[o],s+=f[e>>4&15]+f[15&e]+f[e>>12&15]+f[e>>8&15]+f[e>>20&15]+f[e>>16&15]+f[e>>28&15]+f[e>>24&15];a%t==0&&(L(r),o=0)}return i&&(e=r[o],s+=f[e>>4&15]+f[15&e],i>1&&(s+=f[e>>12&15]+f[e>>8&15]),i>2&&(s+=f[e>>20&15]+f[e>>16&15])),s},T.prototype.arrayBuffer=function(){this.finalize();var e,t=this.blockCount,r=this.s,n=this.outputBlocks,i=this.extraBytes,o=0,a=0,s=this.outputBits>>3;e=i?new ArrayBuffer(n+1<<2):new ArrayBuffer(s);for(var l=new Uint32Array(e);a<n;){for(o=0;o<t&&a<n;++o,++a)l[a]=r[o];a%t==0&&L(r)}return i&&(l[o]=r[o],e=e.slice(0,s)),e},T.prototype.buffer=T.prototype.arrayBuffer,T.prototype.digest=T.prototype.array=function(){this.finalize();for(var e,t,r=this.blockCount,n=this.s,i=this.outputBlocks,o=this.extraBytes,a=0,s=0,l=[];s<i;){for(a=0;a<r&&s<i;++a,++s)e=s<<2,t=n[a],l[e]=255&t,l[e+1]=t>>8&255,l[e+2]=t>>16&255,l[e+3]=t>>24&255;s%r==0&&L(n)}return o&&(e=s<<2,t=n[a],l[e]=255&t,o>1&&(l[e+1]=t>>8&255),o>2&&(l[e+2]=t>>16&255)),l},O.prototype=new T,O.prototype.finalize=function(){return this.encode(this.outputBits,!0),T.prototype.finalize.call(this)};var L=function(e){var t,r,n,i,o,a,s,l,u,c,f,h,d,m,g,v,y,b,w,k,E,x,_,S,P,N,M,C,A,F,R,I,T,O,L,B,z,D,U,j,V,q,$,H,W,G,K,Q,X,J,Y,Z,ee,te,re,ne,ie,oe,ae,se,le,ue,ce;for(n=0;n<48;n+=2)i=e[0]^e[10]^e[20]^e[30]^e[40],o=e[1]^e[11]^e[21]^e[31]^e[41],a=e[2]^e[12]^e[22]^e[32]^e[42],s=e[3]^e[13]^e[23]^e[33]^e[43],l=e[4]^e[14]^e[24]^e[34]^e[44],u=e[5]^e[15]^e[25]^e[35]^e[45],c=e[6]^e[16]^e[26]^e[36]^e[46],f=e[7]^e[17]^e[27]^e[37]^e[47],t=(h=e[8]^e[18]^e[28]^e[38]^e[48])^(a<<1|s>>>31),r=(d=e[9]^e[19]^e[29]^e[39]^e[49])^(s<<1|a>>>31),e[0]^=t,e[1]^=r,e[10]^=t,e[11]^=r,e[20]^=t,e[21]^=r,e[30]^=t,e[31]^=r,e[40]^=t,e[41]^=r,t=i^(l<<1|u>>>31),r=o^(u<<1|l>>>31),e[2]^=t,e[3]^=r,e[12]^=t,e[13]^=r,e[22]^=t,e[23]^=r,e[32]^=t,e[33]^=r,e[42]^=t,e[43]^=r,t=a^(c<<1|f>>>31),r=s^(f<<1|c>>>31),e[4]^=t,e[5]^=r,e[14]^=t,e[15]^=r,e[24]^=t,e[25]^=r,e[34]^=t,e[35]^=r,e[44]^=t,e[45]^=r,t=l^(h<<1|d>>>31),r=u^(d<<1|h>>>31),e[6]^=t,e[7]^=r,e[16]^=t,e[17]^=r,e[26]^=t,e[27]^=r,e[36]^=t,e[37]^=r,e[46]^=t,e[47]^=r,t=c^(i<<1|o>>>31),r=f^(o<<1|i>>>31),e[8]^=t,e[9]^=r,e[18]^=t,e[19]^=r,e[28]^=t,e[29]^=r,e[38]^=t,e[39]^=r,e[48]^=t,e[49]^=r,m=e[0],g=e[1],G=e[11]<<4|e[10]>>>28,K=e[10]<<4|e[11]>>>28,C=e[20]<<3|e[21]>>>29,A=e[21]<<3|e[20]>>>29,se=e[31]<<9|e[30]>>>23,le=e[30]<<9|e[31]>>>23,q=e[40]<<18|e[41]>>>14,$=e[41]<<18|e[40]>>>14,O=e[2]<<1|e[3]>>>31,L=e[3]<<1|e[2]>>>31,v=e[13]<<12|e[12]>>>20,y=e[12]<<12|e[13]>>>20,Q=e[22]<<10|e[23]>>>22,X=e[23]<<10|e[22]>>>22,F=e[33]<<13|e[32]>>>19,R=e[32]<<13|e[33]>>>19,ue=e[42]<<2|e[43]>>>30,ce=e[43]<<2|e[42]>>>30,te=e[5]<<30|e[4]>>>2,re=e[4]<<30|e[5]>>>2,B=e[14]<<6|e[15]>>>26,z=e[15]<<6|e[14]>>>26,b=e[25]<<11|e[24]>>>21,w=e[24]<<11|e[25]>>>21,J=e[34]<<15|e[35]>>>17,Y=e[35]<<15|e[34]>>>17,I=e[45]<<29|e[44]>>>3,T=e[44]<<29|e[45]>>>3,S=e[6]<<28|e[7]>>>4,P=e[7]<<28|e[6]>>>4,ne=e[17]<<23|e[16]>>>9,ie=e[16]<<23|e[17]>>>9,D=e[26]<<25|e[27]>>>7,U=e[27]<<25|e[26]>>>7,k=e[36]<<21|e[37]>>>11,E=e[37]<<21|e[36]>>>11,Z=e[47]<<24|e[46]>>>8,ee=e[46]<<24|e[47]>>>8,H=e[8]<<27|e[9]>>>5,W=e[9]<<27|e[8]>>>5,N=e[18]<<20|e[19]>>>12,M=e[19]<<20|e[18]>>>12,oe=e[29]<<7|e[28]>>>25,ae=e[28]<<7|e[29]>>>25,j=e[38]<<8|e[39]>>>24,V=e[39]<<8|e[38]>>>24,x=e[48]<<14|e[49]>>>18,_=e[49]<<14|e[48]>>>18,e[0]=m^~v&b,e[1]=g^~y&w,e[10]=S^~N&C,e[11]=P^~M&A,e[20]=O^~B&D,e[21]=L^~z&U,e[30]=H^~G&Q,e[31]=W^~K&X,e[40]=te^~ne&oe,e[41]=re^~ie&ae,e[2]=v^~b&k,e[3]=y^~w&E,e[12]=N^~C&F,e[13]=M^~A&R,e[22]=B^~D&j,e[23]=z^~U&V,e[32]=G^~Q&J,e[33]=K^~X&Y,e[42]=ne^~oe&se,e[43]=ie^~ae&le,e[4]=b^~k&x,e[5]=w^~E&_,e[14]=C^~F&I,e[15]=A^~R&T,e[24]=D^~j&q,e[25]=U^~V&$,e[34]=Q^~J&Z,e[35]=X^~Y&ee,e[44]=oe^~se&ue,e[45]=ae^~le&ce,e[6]=k^~x&m,e[7]=E^~_&g,e[16]=F^~I&S,e[17]=R^~T&P,e[26]=j^~q&O,e[27]=V^~$&L,e[36]=J^~Z&H,e[37]=Y^~ee&W,e[46]=se^~ue&te,e[47]=le^~ce&re,e[8]=x^~m&v,e[9]=_^~g&y,e[18]=I^~S&N,e[19]=T^~P&M,e[28]=q^~O&B,e[29]=$^~L&z,e[38]=Z^~H&G,e[39]=ee^~W&K,e[48]=ue^~te&ne,e[49]=ce^~re&ie,e[0]^=p[n],e[1]^=p[n+1]};if(l)e.exports=P;else{for(M=0;M<N.length;++M)a[N[M]]=P[N[M]];u&&(void 0===(n=function(){return P}.call(t,r,t,e))||(e.exports=n))}}()},746:e=>{function t(e,t){if(!e)throw new Error(t||"Assertion failed")}e.exports=t,t.equal=function(e,t,r){if(e!=t)throw new Error(r||"Assertion failed: "+e+" != "+t)}},448:(e,t,r)=>{"use strict";var n=r(294),i=r(840);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var a=new Set,s={};function l(e,t){u(e,t),u(e+"Capture",t)}function u(e,t){for(s[e]=t,e=0;e<t.length;e++)a.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,h=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,d={},p={};function m(e,t,r,n,i,o,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=n,this.attributeNamespace=i,this.mustUseProperty=r,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=a}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var v=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function b(e,t,r,n){var i=g.hasOwnProperty(t)?g[t]:null;(null!==i?0!==i.type:n||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,r,n){if(null==t||function(e,t,r,n){if(null!==r&&0===r.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!n&&(null!==r?!r.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,r,n))return!0;if(n)return!1;if(null!==r)switch(r.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,r,i,n)&&(r=null),n||null===i?function(e){return!!f.call(p,e)||!f.call(d,e)&&(h.test(e)?p[e]=!0:(d[e]=!0,!1))}(t)&&(null===r?e.removeAttribute(t):e.setAttribute(t,""+r)):i.mustUseProperty?e[i.propertyName]=null===r?3!==i.type&&"":r:(t=i.attributeName,n=i.attributeNamespace,null===r?e.removeAttribute(t):(r=3===(i=i.type)||4===i&&!0===r?"":""+r,n?e.setAttributeNS(n,t,r):e.setAttribute(t,r))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(v,y);g[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(v,y);g[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(v,y);g[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,k=Symbol.for("react.element"),E=Symbol.for("react.portal"),x=Symbol.for("react.fragment"),_=Symbol.for("react.strict_mode"),S=Symbol.for("react.profiler"),P=Symbol.for("react.provider"),N=Symbol.for("react.context"),M=Symbol.for("react.forward_ref"),C=Symbol.for("react.suspense"),A=Symbol.for("react.suspense_list"),F=Symbol.for("react.memo"),R=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var I=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var T=Symbol.iterator;function O(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=T&&e[T]||e["@@iterator"])?e:null}var L,B=Object.assign;function z(e){if(void 0===L)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);L=t&&t[1]||""}return"\n"+L+e}var D=!1;function U(e,t){if(!e||D)return"";D=!0;var r=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var n=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){n=e}e.call(t.prototype)}else{try{throw Error()}catch(e){n=e}e()}}catch(t){if(t&&n&&"string"==typeof t.stack){for(var i=t.stack.split("\n"),o=n.stack.split("\n"),a=i.length-1,s=o.length-1;1<=a&&0<=s&&i[a]!==o[s];)s--;for(;1<=a&&0<=s;a--,s--)if(i[a]!==o[s]){if(1!==a||1!==s)do{if(a--,0>--s||i[a]!==o[s]){var l="\n"+i[a].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}}while(1<=a&&0<=s);break}}}finally{D=!1,Error.prepareStackTrace=r}return(e=e?e.displayName||e.name:"")?z(e):""}function j(e){switch(e.tag){case 5:return z(e.type);case 16:return z("Lazy");case 13:return z("Suspense");case 19:return z("SuspenseList");case 0:case 2:case 15:return U(e.type,!1);case 11:return U(e.type.render,!1);case 1:return U(e.type,!0);default:return""}}function V(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case x:return"Fragment";case E:return"Portal";case S:return"Profiler";case _:return"StrictMode";case C:return"Suspense";case A:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case N:return(e.displayName||"Context")+".Consumer";case P:return(e._context.displayName||"Context")+".Provider";case M:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case F:return null!==(t=e.displayName||null)?t:V(e.type)||"Memo";case R:t=e._payload,e=e._init;try{return V(e(t))}catch(e){}}return null}function q(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return V(t);case 8:return t===_?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function $(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function H(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function W(e){e._valueTracker||(e._valueTracker=function(e){var t=H(e)?"checked":"value",r=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),n=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==r&&"function"==typeof r.get&&"function"==typeof r.set){var i=r.get,o=r.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){n=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:r.enumerable}),{getValue:function(){return n},setValue:function(e){n=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function G(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var r=t.getValue(),n="";return e&&(n=H(e)?e.checked?"true":"false":e.value),(e=n)!==r&&(t.setValue(e),!0)}function K(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Q(e,t){var r=t.checked;return B({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=r?r:e._wrapperState.initialChecked})}function X(e,t){var r=null==t.defaultValue?"":t.defaultValue,n=null!=t.checked?t.checked:t.defaultChecked;r=$(null!=t.value?t.value:r),e._wrapperState={initialChecked:n,initialValue:r,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function J(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function Y(e,t){J(e,t);var r=$(t.value),n=t.type;if(null!=r)"number"===n?(0===r&&""===e.value||e.value!=r)&&(e.value=""+r):e.value!==""+r&&(e.value=""+r);else if("submit"===n||"reset"===n)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,r):t.hasOwnProperty("defaultValue")&&ee(e,t.type,$(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,r){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var n=t.type;if(!("submit"!==n&&"reset"!==n||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,r||t===e.value||(e.value=t),e.defaultValue=t}""!==(r=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==r&&(e.name=r)}function ee(e,t,r){"number"===t&&K(e.ownerDocument)===e||(null==r?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+r&&(e.defaultValue=""+r))}var te=Array.isArray;function re(e,t,r,n){if(e=e.options,t){t={};for(var i=0;i<r.length;i++)t["$"+r[i]]=!0;for(r=0;r<e.length;r++)i=t.hasOwnProperty("$"+e[r].value),e[r].selected!==i&&(e[r].selected=i),i&&n&&(e[r].defaultSelected=!0)}else{for(r=""+$(r),t=null,i=0;i<e.length;i++){if(e[i].value===r)return e[i].selected=!0,void(n&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function ne(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return B({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ie(e,t){var r=t.value;if(null==r){if(r=t.children,t=t.defaultValue,null!=r){if(null!=t)throw Error(o(92));if(te(r)){if(1<r.length)throw Error(o(93));r=r[0]}t=r}null==t&&(t=""),r=t}e._wrapperState={initialValue:$(r)}}function oe(e,t){var r=$(t.value),n=$(t.defaultValue);null!=r&&((r=""+r)!==e.value&&(e.value=r),null==t.defaultValue&&e.defaultValue!==r&&(e.defaultValue=r)),null!=n&&(e.defaultValue=""+n)}function ae(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function se(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?se(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ue,ce,fe=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ue=ue||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ue.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,r,n){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function he(e,t){if(t){var r=e.firstChild;if(r&&r===e.lastChild&&3===r.nodeType)return void(r.nodeValue=t)}e.textContent=t}var de={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},pe=["Webkit","ms","Moz","O"];function me(e,t,r){return null==t||"boolean"==typeof t||""===t?"":r||"number"!=typeof t||0===t||de.hasOwnProperty(e)&&de[e]?(""+t).trim():t+"px"}function ge(e,t){for(var r in e=e.style,t)if(t.hasOwnProperty(r)){var n=0===r.indexOf("--"),i=me(r,t[r],n);"float"===r&&(r="cssFloat"),n?e.setProperty(r,i):e[r]=i}}Object.keys(de).forEach((function(e){pe.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),de[t]=de[e]}))}));var ve=B({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ye(e,t){if(t){if(ve[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function ke(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ee=null,xe=null,_e=null;function Se(e){if(e=bi(e)){if("function"!=typeof Ee)throw Error(o(280));var t=e.stateNode;t&&(t=ki(t),Ee(e.stateNode,e.type,t))}}function Pe(e){xe?_e?_e.push(e):_e=[e]:xe=e}function Ne(){if(xe){var e=xe,t=_e;if(_e=xe=null,Se(e),t)for(e=0;e<t.length;e++)Se(t[e])}}function Me(e,t){return e(t)}function Ce(){}var Ae=!1;function Fe(e,t,r){if(Ae)return e(t,r);Ae=!0;try{return Me(e,t,r)}finally{Ae=!1,(null!==xe||null!==_e)&&(Ce(),Ne())}}function Re(e,t){var r=e.stateNode;if(null===r)return null;var n=ki(r);if(null===n)return null;r=n[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(n=!n.disabled)||(n=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!n;break e;default:e=!1}if(e)return null;if(r&&"function"!=typeof r)throw Error(o(231,t,typeof r));return r}var Ie=!1;if(c)try{var Te={};Object.defineProperty(Te,"passive",{get:function(){Ie=!0}}),window.addEventListener("test",Te,Te),window.removeEventListener("test",Te,Te)}catch(ce){Ie=!1}function Oe(e,t,r,n,i,o,a,s,l){var u=Array.prototype.slice.call(arguments,3);try{t.apply(r,u)}catch(e){this.onError(e)}}var Le=!1,Be=null,ze=!1,De=null,Ue={onError:function(e){Le=!0,Be=e}};function je(e,t,r,n,i,o,a,s,l){Le=!1,Be=null,Oe.apply(Ue,arguments)}function Ve(e){var t=e,r=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(r=t.return),e=t.return}while(e)}return 3===t.tag?r:null}function qe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function $e(e){if(Ve(e)!==e)throw Error(o(188))}function He(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ve(e)))throw Error(o(188));return t!==e?null:e}for(var r=e,n=t;;){var i=r.return;if(null===i)break;var a=i.alternate;if(null===a){if(null!==(n=i.return)){r=n;continue}break}if(i.child===a.child){for(a=i.child;a;){if(a===r)return $e(i),e;if(a===n)return $e(i),t;a=a.sibling}throw Error(o(188))}if(r.return!==n.return)r=i,n=a;else{for(var s=!1,l=i.child;l;){if(l===r){s=!0,r=i,n=a;break}if(l===n){s=!0,n=i,r=a;break}l=l.sibling}if(!s){for(l=a.child;l;){if(l===r){s=!0,r=a,n=i;break}if(l===n){s=!0,n=a,r=i;break}l=l.sibling}if(!s)throw Error(o(189))}}if(r.alternate!==n)throw Error(o(190))}if(3!==r.tag)throw Error(o(188));return r.stateNode.current===r?e:t}(e))?We(e):null}function We(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=We(e);if(null!==t)return t;e=e.sibling}return null}var Ge=i.unstable_scheduleCallback,Ke=i.unstable_cancelCallback,Qe=i.unstable_shouldYield,Xe=i.unstable_requestPaint,Je=i.unstable_now,Ye=i.unstable_getCurrentPriorityLevel,Ze=i.unstable_ImmediatePriority,et=i.unstable_UserBlockingPriority,tt=i.unstable_NormalPriority,rt=i.unstable_LowPriority,nt=i.unstable_IdlePriority,it=null,ot=null,at=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(st(e)/lt|0)|0},st=Math.log,lt=Math.LN2,ut=64,ct=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ht(e,t){var r=e.pendingLanes;if(0===r)return 0;var n=0,i=e.suspendedLanes,o=e.pingedLanes,a=268435455&r;if(0!==a){var s=a&~i;0!==s?n=ft(s):0!=(o&=a)&&(n=ft(o))}else 0!=(a=r&~i)?n=ft(a):0!==o&&(n=ft(o));if(0===n)return 0;if(0!==t&&t!==n&&0==(t&i)&&((i=n&-n)>=(o=t&-t)||16===i&&0!=(4194240&o)))return t;if(0!=(4&n)&&(n|=16&r),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=n;0<t;)i=1<<(r=31-at(t)),n|=e[r],t&=~i;return n}function dt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function pt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=ut;return 0==(4194240&(ut<<=1))&&(ut=64),e}function gt(e){for(var t=[],r=0;31>r;r++)t.push(e);return t}function vt(e,t,r){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-at(t)]=r}function yt(e,t){var r=e.entangledLanes|=t;for(e=e.entanglements;r;){var n=31-at(r),i=1<<n;i&t|e[n]&t&&(e[n]|=t),r&=~i}}var bt=0;function wt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var kt,Et,xt,_t,St,Pt=!1,Nt=[],Mt=null,Ct=null,At=null,Ft=new Map,Rt=new Map,It=[],Tt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Ot(e,t){switch(e){case"focusin":case"focusout":Mt=null;break;case"dragenter":case"dragleave":Ct=null;break;case"mouseover":case"mouseout":At=null;break;case"pointerover":case"pointerout":Ft.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Rt.delete(t.pointerId)}}function Lt(e,t,r,n,i,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:r,eventSystemFlags:n,nativeEvent:o,targetContainers:[i]},null!==t&&null!==(t=bi(t))&&Et(t),e):(e.eventSystemFlags|=n,t=e.targetContainers,null!==i&&-1===t.indexOf(i)&&t.push(i),e)}function Bt(e){var t=yi(e.target);if(null!==t){var r=Ve(t);if(null!==r)if(13===(t=r.tag)){if(null!==(t=qe(r)))return e.blockedOn=t,void St(e.priority,(function(){xt(r)}))}else if(3===t&&r.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===r.tag?r.stateNode.containerInfo:null)}e.blockedOn=null}function zt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var r=Qt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==r)return null!==(t=bi(r))&&Et(t),e.blockedOn=r,!1;var n=new(r=e.nativeEvent).constructor(r.type,r);we=n,r.target.dispatchEvent(n),we=null,t.shift()}return!0}function Dt(e,t,r){zt(e)&&r.delete(t)}function Ut(){Pt=!1,null!==Mt&&zt(Mt)&&(Mt=null),null!==Ct&&zt(Ct)&&(Ct=null),null!==At&&zt(At)&&(At=null),Ft.forEach(Dt),Rt.forEach(Dt)}function jt(e,t){e.blockedOn===t&&(e.blockedOn=null,Pt||(Pt=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,Ut)))}function Vt(e){function t(t){return jt(t,e)}if(0<Nt.length){jt(Nt[0],e);for(var r=1;r<Nt.length;r++){var n=Nt[r];n.blockedOn===e&&(n.blockedOn=null)}}for(null!==Mt&&jt(Mt,e),null!==Ct&&jt(Ct,e),null!==At&&jt(At,e),Ft.forEach(t),Rt.forEach(t),r=0;r<It.length;r++)(n=It[r]).blockedOn===e&&(n.blockedOn=null);for(;0<It.length&&null===(r=It[0]).blockedOn;)Bt(r),null===r.blockedOn&&It.shift()}var qt=w.ReactCurrentBatchConfig,$t=!0;function Ht(e,t,r,n){var i=bt,o=qt.transition;qt.transition=null;try{bt=1,Gt(e,t,r,n)}finally{bt=i,qt.transition=o}}function Wt(e,t,r,n){var i=bt,o=qt.transition;qt.transition=null;try{bt=4,Gt(e,t,r,n)}finally{bt=i,qt.transition=o}}function Gt(e,t,r,n){if($t){var i=Qt(e,t,r,n);if(null===i)$n(e,t,n,Kt,r),Ot(e,n);else if(function(e,t,r,n,i){switch(t){case"focusin":return Mt=Lt(Mt,e,t,r,n,i),!0;case"dragenter":return Ct=Lt(Ct,e,t,r,n,i),!0;case"mouseover":return At=Lt(At,e,t,r,n,i),!0;case"pointerover":var o=i.pointerId;return Ft.set(o,Lt(Ft.get(o)||null,e,t,r,n,i)),!0;case"gotpointercapture":return o=i.pointerId,Rt.set(o,Lt(Rt.get(o)||null,e,t,r,n,i)),!0}return!1}(i,e,t,r,n))n.stopPropagation();else if(Ot(e,n),4&t&&-1<Tt.indexOf(e)){for(;null!==i;){var o=bi(i);if(null!==o&&kt(o),null===(o=Qt(e,t,r,n))&&$n(e,t,n,Kt,r),o===i)break;i=o}null!==i&&n.stopPropagation()}else $n(e,t,n,null,r)}}var Kt=null;function Qt(e,t,r,n){if(Kt=null,null!==(e=yi(e=ke(n))))if(null===(t=Ve(e)))e=null;else if(13===(r=t.tag)){if(null!==(e=qe(t)))return e;e=null}else if(3===r){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Kt=e,null}function Xt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ye()){case Ze:return 1;case et:return 4;case tt:case rt:return 16;case nt:return 536870912;default:return 16}default:return 16}}var Jt=null,Yt=null,Zt=null;function er(){if(Zt)return Zt;var e,t,r=Yt,n=r.length,i="value"in Jt?Jt.value:Jt.textContent,o=i.length;for(e=0;e<n&&r[e]===i[e];e++);var a=n-e;for(t=1;t<=a&&r[n-t]===i[o-t];t++);return Zt=i.slice(e,1<t?1-t:void 0)}function tr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function rr(){return!0}function nr(){return!1}function ir(e){function t(t,r,n,i,o){for(var a in this._reactName=t,this._targetInst=n,this.type=r,this.nativeEvent=i,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(i):i[a]);return this.isDefaultPrevented=(null!=i.defaultPrevented?i.defaultPrevented:!1===i.returnValue)?rr:nr,this.isPropagationStopped=nr,this}return B(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=rr)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=rr)},persist:function(){},isPersistent:rr}),t}var or,ar,sr,lr={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},ur=ir(lr),cr=B({},lr,{view:0,detail:0}),fr=ir(cr),hr=B({},cr,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:_r,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==sr&&(sr&&"mousemove"===e.type?(or=e.screenX-sr.screenX,ar=e.screenY-sr.screenY):ar=or=0,sr=e),or)},movementY:function(e){return"movementY"in e?e.movementY:ar}}),dr=ir(hr),pr=ir(B({},hr,{dataTransfer:0})),mr=ir(B({},cr,{relatedTarget:0})),gr=ir(B({},lr,{animationName:0,elapsedTime:0,pseudoElement:0})),vr=B({},lr,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),yr=ir(vr),br=ir(B({},lr,{data:0})),wr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Er={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function xr(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Er[e])&&!!t[e]}function _r(){return xr}var Sr=B({},cr,{key:function(e){if(e.key){var t=wr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?kr[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:_r,charCode:function(e){return"keypress"===e.type?tr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Pr=ir(Sr),Nr=ir(B({},hr,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Mr=ir(B({},cr,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:_r})),Cr=ir(B({},lr,{propertyName:0,elapsedTime:0,pseudoElement:0})),Ar=B({},hr,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Fr=ir(Ar),Rr=[9,13,27,32],Ir=c&&"CompositionEvent"in window,Tr=null;c&&"documentMode"in document&&(Tr=document.documentMode);var Or=c&&"TextEvent"in window&&!Tr,Lr=c&&(!Ir||Tr&&8<Tr&&11>=Tr),Br=String.fromCharCode(32),zr=!1;function Dr(e,t){switch(e){case"keyup":return-1!==Rr.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Ur(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var jr=!1,Vr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function qr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Vr[e.type]:"textarea"===t}function $r(e,t,r,n){Pe(n),0<(t=Wn(t,"onChange")).length&&(r=new ur("onChange","change",null,r,n),e.push({event:r,listeners:t}))}var Hr=null,Wr=null;function Gr(e){zn(e,0)}function Kr(e){if(G(wi(e)))return e}function Qr(e,t){if("change"===e)return t}var Xr=!1;if(c){var Jr;if(c){var Yr="oninput"in document;if(!Yr){var Zr=document.createElement("div");Zr.setAttribute("oninput","return;"),Yr="function"==typeof Zr.oninput}Jr=Yr}else Jr=!1;Xr=Jr&&(!document.documentMode||9<document.documentMode)}function en(){Hr&&(Hr.detachEvent("onpropertychange",tn),Wr=Hr=null)}function tn(e){if("value"===e.propertyName&&Kr(Wr)){var t=[];$r(t,Wr,e,ke(e)),Fe(Gr,t)}}function rn(e,t,r){"focusin"===e?(en(),Wr=r,(Hr=t).attachEvent("onpropertychange",tn)):"focusout"===e&&en()}function nn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Kr(Wr)}function on(e,t){if("click"===e)return Kr(t)}function an(e,t){if("input"===e||"change"===e)return Kr(t)}var sn="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function ln(e,t){if(sn(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var r=Object.keys(e),n=Object.keys(t);if(r.length!==n.length)return!1;for(n=0;n<r.length;n++){var i=r[n];if(!f.call(t,i)||!sn(e[i],t[i]))return!1}return!0}function un(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cn(e,t){var r,n=un(e);for(e=0;n;){if(3===n.nodeType){if(r=e+n.textContent.length,e<=t&&r>=t)return{node:n,offset:t-e};e=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=un(n)}}function fn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function hn(){for(var e=window,t=K();t instanceof e.HTMLIFrameElement;){try{var r="string"==typeof t.contentWindow.location.href}catch(e){r=!1}if(!r)break;t=K((e=t.contentWindow).document)}return t}function dn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function pn(e){var t=hn(),r=e.focusedElem,n=e.selectionRange;if(t!==r&&r&&r.ownerDocument&&fn(r.ownerDocument.documentElement,r)){if(null!==n&&dn(r))if(t=n.start,void 0===(e=n.end)&&(e=t),"selectionStart"in r)r.selectionStart=t,r.selectionEnd=Math.min(e,r.value.length);else if((e=(t=r.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var i=r.textContent.length,o=Math.min(n.start,i);n=void 0===n.end?o:Math.min(n.end,i),!e.extend&&o>n&&(i=n,n=o,o=i),i=cn(r,o);var a=cn(r,n);i&&a&&(1!==e.rangeCount||e.anchorNode!==i.node||e.anchorOffset!==i.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((t=t.createRange()).setStart(i.node,i.offset),e.removeAllRanges(),o>n?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}for(t=[],e=r;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof r.focus&&r.focus(),r=0;r<t.length;r++)(e=t[r]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mn=c&&"documentMode"in document&&11>=document.documentMode,gn=null,vn=null,yn=null,bn=!1;function wn(e,t,r){var n=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;bn||null==gn||gn!==K(n)||(n="selectionStart"in(n=gn)&&dn(n)?{start:n.selectionStart,end:n.selectionEnd}:{anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},yn&&ln(yn,n)||(yn=n,0<(n=Wn(vn,"onSelect")).length&&(t=new ur("onSelect","select",null,t,r),e.push({event:t,listeners:n}),t.target=gn)))}function kn(e,t){var r={};return r[e.toLowerCase()]=t.toLowerCase(),r["Webkit"+e]="webkit"+t,r["Moz"+e]="moz"+t,r}var En={animationend:kn("Animation","AnimationEnd"),animationiteration:kn("Animation","AnimationIteration"),animationstart:kn("Animation","AnimationStart"),transitionend:kn("Transition","TransitionEnd")},xn={},_n={};function Sn(e){if(xn[e])return xn[e];if(!En[e])return e;var t,r=En[e];for(t in r)if(r.hasOwnProperty(t)&&t in _n)return xn[e]=r[t];return e}c&&(_n=document.createElement("div").style,"AnimationEvent"in window||(delete En.animationend.animation,delete En.animationiteration.animation,delete En.animationstart.animation),"TransitionEvent"in window||delete En.transitionend.transition);var Pn=Sn("animationend"),Nn=Sn("animationiteration"),Mn=Sn("animationstart"),Cn=Sn("transitionend"),An=new Map,Fn="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Rn(e,t){An.set(e,t),l(t,[e])}for(var In=0;In<Fn.length;In++){var Tn=Fn[In];Rn(Tn.toLowerCase(),"on"+(Tn[0].toUpperCase()+Tn.slice(1)))}Rn(Pn,"onAnimationEnd"),Rn(Nn,"onAnimationIteration"),Rn(Mn,"onAnimationStart"),Rn("dblclick","onDoubleClick"),Rn("focusin","onFocus"),Rn("focusout","onBlur"),Rn(Cn,"onTransitionEnd"),u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var On="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ln=new Set("cancel close invalid load scroll toggle".split(" ").concat(On));function Bn(e,t,r){var n=e.type||"unknown-event";e.currentTarget=r,function(e,t,r,n,i,a,s,l,u){if(je.apply(this,arguments),Le){if(!Le)throw Error(o(198));var c=Be;Le=!1,Be=null,ze||(ze=!0,De=c)}}(n,t,void 0,e),e.currentTarget=null}function zn(e,t){t=0!=(4&t);for(var r=0;r<e.length;r++){var n=e[r],i=n.event;n=n.listeners;e:{var o=void 0;if(t)for(var a=n.length-1;0<=a;a--){var s=n[a],l=s.instance,u=s.currentTarget;if(s=s.listener,l!==o&&i.isPropagationStopped())break e;Bn(i,s,u),o=l}else for(a=0;a<n.length;a++){if(l=(s=n[a]).instance,u=s.currentTarget,s=s.listener,l!==o&&i.isPropagationStopped())break e;Bn(i,s,u),o=l}}}if(ze)throw e=De,ze=!1,De=null,e}function Dn(e,t){var r=t[mi];void 0===r&&(r=t[mi]=new Set);var n=e+"__bubble";r.has(n)||(qn(t,e,2,!1),r.add(n))}function Un(e,t,r){var n=0;t&&(n|=4),qn(r,e,n,t)}var jn="_reactListening"+Math.random().toString(36).slice(2);function Vn(e){if(!e[jn]){e[jn]=!0,a.forEach((function(t){"selectionchange"!==t&&(Ln.has(t)||Un(t,!1,e),Un(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[jn]||(t[jn]=!0,Un("selectionchange",!1,t))}}function qn(e,t,r,n){switch(Xt(t)){case 1:var i=Ht;break;case 4:i=Wt;break;default:i=Gt}r=i.bind(null,t,r,e),i=void 0,!Ie||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(i=!0),n?void 0!==i?e.addEventListener(t,r,{capture:!0,passive:i}):e.addEventListener(t,r,!0):void 0!==i?e.addEventListener(t,r,{passive:i}):e.addEventListener(t,r,!1)}function $n(e,t,r,n,i){var o=n;if(0==(1&t)&&0==(2&t)&&null!==n)e:for(;;){if(null===n)return;var a=n.tag;if(3===a||4===a){var s=n.stateNode.containerInfo;if(s===i||8===s.nodeType&&s.parentNode===i)break;if(4===a)for(a=n.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===i||8===l.nodeType&&l.parentNode===i))return;a=a.return}for(;null!==s;){if(null===(a=yi(s)))return;if(5===(l=a.tag)||6===l){n=o=a;continue e}s=s.parentNode}}n=n.return}Fe((function(){var n=o,i=ke(r),a=[];e:{var s=An.get(e);if(void 0!==s){var l=ur,u=e;switch(e){case"keypress":if(0===tr(r))break e;case"keydown":case"keyup":l=Pr;break;case"focusin":u="focus",l=mr;break;case"focusout":u="blur",l=mr;break;case"beforeblur":case"afterblur":l=mr;break;case"click":if(2===r.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=dr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=pr;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Mr;break;case Pn:case Nn:case Mn:l=gr;break;case Cn:l=Cr;break;case"scroll":l=fr;break;case"wheel":l=Fr;break;case"copy":case"cut":case"paste":l=yr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Nr}var c=0!=(4&t),f=!c&&"scroll"===e,h=c?null!==s?s+"Capture":null:s;c=[];for(var d,p=n;null!==p;){var m=(d=p).stateNode;if(5===d.tag&&null!==m&&(d=m,null!==h&&null!=(m=Re(p,h))&&c.push(Hn(p,m,d))),f)break;p=p.return}0<c.length&&(s=new l(s,u,null,r,i),a.push({event:s,listeners:c}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||r===we||!(u=r.relatedTarget||r.fromElement)||!yi(u)&&!u[pi])&&(l||s)&&(s=i.window===i?i:(s=i.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=n,null!==(u=(u=r.relatedTarget||r.toElement)?yi(u):null)&&(u!==(f=Ve(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(l=null,u=n),l!==u)){if(c=dr,m="onMouseLeave",h="onMouseEnter",p="mouse","pointerout"!==e&&"pointerover"!==e||(c=Nr,m="onPointerLeave",h="onPointerEnter",p="pointer"),f=null==l?s:wi(l),d=null==u?s:wi(u),(s=new c(m,p+"leave",l,r,i)).target=f,s.relatedTarget=d,m=null,yi(i)===n&&((c=new c(h,p+"enter",u,r,i)).target=d,c.relatedTarget=f,m=c),f=m,l&&u)e:{for(h=u,p=0,d=c=l;d;d=Gn(d))p++;for(d=0,m=h;m;m=Gn(m))d++;for(;0<p-d;)c=Gn(c),p--;for(;0<d-p;)h=Gn(h),d--;for(;p--;){if(c===h||null!==h&&c===h.alternate)break e;c=Gn(c),h=Gn(h)}c=null}else c=null;null!==l&&Kn(a,s,l,c,!1),null!==u&&null!==f&&Kn(a,f,u,c,!0)}if("select"===(l=(s=n?wi(n):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var g=Qr;else if(qr(s))if(Xr)g=an;else{g=nn;var v=rn}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(g=on);switch(g&&(g=g(e,n))?$r(a,g,r,i):(v&&v(e,s,n),"focusout"===e&&(v=s._wrapperState)&&v.controlled&&"number"===s.type&&ee(s,"number",s.value)),v=n?wi(n):window,e){case"focusin":(qr(v)||"true"===v.contentEditable)&&(gn=v,vn=n,yn=null);break;case"focusout":yn=vn=gn=null;break;case"mousedown":bn=!0;break;case"contextmenu":case"mouseup":case"dragend":bn=!1,wn(a,r,i);break;case"selectionchange":if(mn)break;case"keydown":case"keyup":wn(a,r,i)}var y;if(Ir)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else jr?Dr(e,r)&&(b="onCompositionEnd"):"keydown"===e&&229===r.keyCode&&(b="onCompositionStart");b&&(Lr&&"ko"!==r.locale&&(jr||"onCompositionStart"!==b?"onCompositionEnd"===b&&jr&&(y=er()):(Yt="value"in(Jt=i)?Jt.value:Jt.textContent,jr=!0)),0<(v=Wn(n,b)).length&&(b=new br(b,e,null,r,i),a.push({event:b,listeners:v}),(y||null!==(y=Ur(r)))&&(b.data=y))),(y=Or?function(e,t){switch(e){case"compositionend":return Ur(t);case"keypress":return 32!==t.which?null:(zr=!0,Br);case"textInput":return(e=t.data)===Br&&zr?null:e;default:return null}}(e,r):function(e,t){if(jr)return"compositionend"===e||!Ir&&Dr(e,t)?(e=er(),Zt=Yt=Jt=null,jr=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Lr&&"ko"!==t.locale?null:t.data}}(e,r))&&0<(n=Wn(n,"onBeforeInput")).length&&(i=new br("onBeforeInput","beforeinput",null,r,i),a.push({event:i,listeners:n}),i.data=y)}zn(a,t)}))}function Hn(e,t,r){return{instance:e,listener:t,currentTarget:r}}function Wn(e,t){for(var r=t+"Capture",n=[];null!==e;){var i=e,o=i.stateNode;5===i.tag&&null!==o&&(i=o,null!=(o=Re(e,r))&&n.unshift(Hn(e,o,i)),null!=(o=Re(e,t))&&n.push(Hn(e,o,i))),e=e.return}return n}function Gn(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Kn(e,t,r,n,i){for(var o=t._reactName,a=[];null!==r&&r!==n;){var s=r,l=s.alternate,u=s.stateNode;if(null!==l&&l===n)break;5===s.tag&&null!==u&&(s=u,i?null!=(l=Re(r,o))&&a.unshift(Hn(r,l,s)):i||null!=(l=Re(r,o))&&a.push(Hn(r,l,s))),r=r.return}0!==a.length&&e.push({event:t,listeners:a})}var Qn=/\r\n?/g,Xn=/\u0000|\uFFFD/g;function Jn(e){return("string"==typeof e?e:""+e).replace(Qn,"\n").replace(Xn,"")}function Yn(e,t,r){if(t=Jn(t),Jn(e)!==t&&r)throw Error(o(425))}function Zn(){}var ei=null,ti=null;function ri(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ni="function"==typeof setTimeout?setTimeout:void 0,ii="function"==typeof clearTimeout?clearTimeout:void 0,oi="function"==typeof Promise?Promise:void 0,ai="function"==typeof queueMicrotask?queueMicrotask:void 0!==oi?function(e){return oi.resolve(null).then(e).catch(si)}:ni;function si(e){setTimeout((function(){throw e}))}function li(e,t){var r=t,n=0;do{var i=r.nextSibling;if(e.removeChild(r),i&&8===i.nodeType)if("/$"===(r=i.data)){if(0===n)return e.removeChild(i),void Vt(t);n--}else"$"!==r&&"$?"!==r&&"$!"!==r||n++;r=i}while(r);Vt(t)}function ui(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ci(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var r=e.data;if("$"===r||"$!"===r||"$?"===r){if(0===t)return e;t--}else"/$"===r&&t++}e=e.previousSibling}return null}var fi=Math.random().toString(36).slice(2),hi="__reactFiber$"+fi,di="__reactProps$"+fi,pi="__reactContainer$"+fi,mi="__reactEvents$"+fi,gi="__reactListeners$"+fi,vi="__reactHandles$"+fi;function yi(e){var t=e[hi];if(t)return t;for(var r=e.parentNode;r;){if(t=r[pi]||r[hi]){if(r=t.alternate,null!==t.child||null!==r&&null!==r.child)for(e=ci(e);null!==e;){if(r=e[hi])return r;e=ci(e)}return t}r=(e=r).parentNode}return null}function bi(e){return!(e=e[hi]||e[pi])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function wi(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function ki(e){return e[di]||null}var Ei=[],xi=-1;function _i(e){return{current:e}}function Si(e){0>xi||(e.current=Ei[xi],Ei[xi]=null,xi--)}function Pi(e,t){xi++,Ei[xi]=e.current,e.current=t}var Ni={},Mi=_i(Ni),Ci=_i(!1),Ai=Ni;function Fi(e,t){var r=e.type.contextTypes;if(!r)return Ni;var n=e.stateNode;if(n&&n.__reactInternalMemoizedUnmaskedChildContext===t)return n.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in r)o[i]=t[i];return n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Ri(e){return null!=e.childContextTypes}function Ii(){Si(Ci),Si(Mi)}function Ti(e,t,r){if(Mi.current!==Ni)throw Error(o(168));Pi(Mi,t),Pi(Ci,r)}function Oi(e,t,r){var n=e.stateNode;if(t=t.childContextTypes,"function"!=typeof n.getChildContext)return r;for(var i in n=n.getChildContext())if(!(i in t))throw Error(o(108,q(e)||"Unknown",i));return B({},r,n)}function Li(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Ni,Ai=Mi.current,Pi(Mi,e),Pi(Ci,Ci.current),!0}function Bi(e,t,r){var n=e.stateNode;if(!n)throw Error(o(169));r?(e=Oi(e,t,Ai),n.__reactInternalMemoizedMergedChildContext=e,Si(Ci),Si(Mi),Pi(Mi,e)):Si(Ci),Pi(Ci,r)}var zi=null,Di=!1,Ui=!1;function ji(e){null===zi?zi=[e]:zi.push(e)}function Vi(){if(!Ui&&null!==zi){Ui=!0;var e=0,t=bt;try{var r=zi;for(bt=1;e<r.length;e++){var n=r[e];do{n=n(!0)}while(null!==n)}zi=null,Di=!1}catch(t){throw null!==zi&&(zi=zi.slice(e+1)),Ge(Ze,Vi),t}finally{bt=t,Ui=!1}}return null}var qi=[],$i=0,Hi=null,Wi=0,Gi=[],Ki=0,Qi=null,Xi=1,Ji="";function Yi(e,t){qi[$i++]=Wi,qi[$i++]=Hi,Hi=e,Wi=t}function Zi(e,t,r){Gi[Ki++]=Xi,Gi[Ki++]=Ji,Gi[Ki++]=Qi,Qi=e;var n=Xi;e=Ji;var i=32-at(n)-1;n&=~(1<<i),r+=1;var o=32-at(t)+i;if(30<o){var a=i-i%5;o=(n&(1<<a)-1).toString(32),n>>=a,i-=a,Xi=1<<32-at(t)+i|r<<i|n,Ji=o+e}else Xi=1<<o|r<<i|n,Ji=e}function eo(e){null!==e.return&&(Yi(e,1),Zi(e,1,0))}function to(e){for(;e===Hi;)Hi=qi[--$i],qi[$i]=null,Wi=qi[--$i],qi[$i]=null;for(;e===Qi;)Qi=Gi[--Ki],Gi[Ki]=null,Ji=Gi[--Ki],Gi[Ki]=null,Xi=Gi[--Ki],Gi[Ki]=null}var ro=null,no=null,io=!1,oo=null;function ao(e,t){var r=Fu(5,null,null,0);r.elementType="DELETED",r.stateNode=t,r.return=e,null===(t=e.deletions)?(e.deletions=[r],e.flags|=16):t.push(r)}function so(e,t){switch(e.tag){case 5:var r=e.type;return null!==(t=1!==t.nodeType||r.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ro=e,no=ui(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ro=e,no=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(r=null!==Qi?{id:Xi,overflow:Ji}:null,e.memoizedState={dehydrated:t,treeContext:r,retryLane:1073741824},(r=Fu(18,null,null,0)).stateNode=t,r.return=e,e.child=r,ro=e,no=null,!0);default:return!1}}function lo(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function uo(e){if(io){var t=no;if(t){var r=t;if(!so(e,t)){if(lo(e))throw Error(o(418));t=ui(r.nextSibling);var n=ro;t&&so(e,t)?ao(n,r):(e.flags=-4097&e.flags|2,io=!1,ro=e)}}else{if(lo(e))throw Error(o(418));e.flags=-4097&e.flags|2,io=!1,ro=e}}}function co(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ro=e}function fo(e){if(e!==ro)return!1;if(!io)return co(e),io=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!ri(e.type,e.memoizedProps)),t&&(t=no)){if(lo(e))throw ho(),Error(o(418));for(;t;)ao(e,t),t=ui(t.nextSibling)}if(co(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var r=e.data;if("/$"===r){if(0===t){no=ui(e.nextSibling);break e}t--}else"$"!==r&&"$!"!==r&&"$?"!==r||t++}e=e.nextSibling}no=null}}else no=ro?ui(e.stateNode.nextSibling):null;return!0}function ho(){for(var e=no;e;)e=ui(e.nextSibling)}function po(){no=ro=null,io=!1}function mo(e){null===oo?oo=[e]:oo.push(e)}var go=w.ReactCurrentBatchConfig;function vo(e,t){if(e&&e.defaultProps){for(var r in t=B({},t),e=e.defaultProps)void 0===t[r]&&(t[r]=e[r]);return t}return t}var yo=_i(null),bo=null,wo=null,ko=null;function Eo(){ko=wo=bo=null}function xo(e){var t=yo.current;Si(yo),e._currentValue=t}function _o(e,t,r){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==n&&(n.childLanes|=t)):null!==n&&(n.childLanes&t)!==t&&(n.childLanes|=t),e===r)break;e=e.return}}function So(e,t){bo=e,ko=wo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(ws=!0),e.firstContext=null)}function Po(e){var t=e._currentValue;if(ko!==e)if(e={context:e,memoizedValue:t,next:null},null===wo){if(null===bo)throw Error(o(308));wo=e,bo.dependencies={lanes:0,firstContext:e}}else wo=wo.next=e;return t}var No=null;function Mo(e){null===No?No=[e]:No.push(e)}function Co(e,t,r,n){var i=t.interleaved;return null===i?(r.next=r,Mo(t)):(r.next=i.next,i.next=r),t.interleaved=r,Ao(e,n)}function Ao(e,t){e.lanes|=t;var r=e.alternate;for(null!==r&&(r.lanes|=t),r=e,e=e.return;null!==e;)e.childLanes|=t,null!==(r=e.alternate)&&(r.childLanes|=t),r=e,e=e.return;return 3===r.tag?r.stateNode:null}var Fo=!1;function Ro(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Io(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function To(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Oo(e,t,r){var n=e.updateQueue;if(null===n)return null;if(n=n.shared,0!=(2&Ml)){var i=n.pending;return null===i?t.next=t:(t.next=i.next,i.next=t),n.pending=t,Ao(e,r)}return null===(i=n.interleaved)?(t.next=t,Mo(n)):(t.next=i.next,i.next=t),n.interleaved=t,Ao(e,r)}function Lo(e,t,r){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&r))){var n=t.lanes;r|=n&=e.pendingLanes,t.lanes=r,yt(e,r)}}function Bo(e,t){var r=e.updateQueue,n=e.alternate;if(null!==n&&r===(n=n.updateQueue)){var i=null,o=null;if(null!==(r=r.firstBaseUpdate)){do{var a={eventTime:r.eventTime,lane:r.lane,tag:r.tag,payload:r.payload,callback:r.callback,next:null};null===o?i=o=a:o=o.next=a,r=r.next}while(null!==r);null===o?i=o=t:o=o.next=t}else i=o=t;return r={baseState:n.baseState,firstBaseUpdate:i,lastBaseUpdate:o,shared:n.shared,effects:n.effects},void(e.updateQueue=r)}null===(e=r.lastBaseUpdate)?r.firstBaseUpdate=t:e.next=t,r.lastBaseUpdate=t}function zo(e,t,r,n){var i=e.updateQueue;Fo=!1;var o=i.firstBaseUpdate,a=i.lastBaseUpdate,s=i.shared.pending;if(null!==s){i.shared.pending=null;var l=s,u=l.next;l.next=null,null===a?o=u:a.next=u,a=l;var c=e.alternate;null!==c&&(s=(c=c.updateQueue).lastBaseUpdate)!==a&&(null===s?c.firstBaseUpdate=u:s.next=u,c.lastBaseUpdate=l)}if(null!==o){var f=i.baseState;for(a=0,c=u=l=null,s=o;;){var h=s.lane,d=s.eventTime;if((n&h)===h){null!==c&&(c=c.next={eventTime:d,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});e:{var p=e,m=s;switch(h=t,d=r,m.tag){case 1:if("function"==typeof(p=m.payload)){f=p.call(d,f,h);break e}f=p;break e;case 3:p.flags=-65537&p.flags|128;case 0:if(null==(h="function"==typeof(p=m.payload)?p.call(d,f,h):p))break e;f=B({},f,h);break e;case 2:Fo=!0}}null!==s.callback&&0!==s.lane&&(e.flags|=64,null===(h=i.effects)?i.effects=[s]:h.push(s))}else d={eventTime:d,lane:h,tag:s.tag,payload:s.payload,callback:s.callback,next:null},null===c?(u=c=d,l=f):c=c.next=d,a|=h;if(null===(s=s.next)){if(null===(s=i.shared.pending))break;s=(h=s).next,h.next=null,i.lastBaseUpdate=h,i.shared.pending=null}}if(null===c&&(l=f),i.baseState=l,i.firstBaseUpdate=u,i.lastBaseUpdate=c,null!==(t=i.shared.interleaved)){i=t;do{a|=i.lane,i=i.next}while(i!==t)}else null===o&&(i.shared.lanes=0);Ll|=a,e.lanes=a,e.memoizedState=f}}function Do(e,t,r){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var n=e[t],i=n.callback;if(null!==i){if(n.callback=null,n=r,"function"!=typeof i)throw Error(o(191,i));i.call(n)}}}var Uo=(new n.Component).refs;function jo(e,t,r,n){r=null==(r=r(n,t=e.memoizedState))?t:B({},t,r),e.memoizedState=r,0===e.lanes&&(e.updateQueue.baseState=r)}var Vo={isMounted:function(e){return!!(e=e._reactInternals)&&Ve(e)===e},enqueueSetState:function(e,t,r){e=e._reactInternals;var n=eu(),i=tu(e),o=To(n,i);o.payload=t,null!=r&&(o.callback=r),null!==(t=Oo(e,o,i))&&(ru(t,e,i,n),Lo(t,e,i))},enqueueReplaceState:function(e,t,r){e=e._reactInternals;var n=eu(),i=tu(e),o=To(n,i);o.tag=1,o.payload=t,null!=r&&(o.callback=r),null!==(t=Oo(e,o,i))&&(ru(t,e,i,n),Lo(t,e,i))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var r=eu(),n=tu(e),i=To(r,n);i.tag=2,null!=t&&(i.callback=t),null!==(t=Oo(e,i,n))&&(ru(t,e,n,r),Lo(t,e,n))}};function qo(e,t,r,n,i,o,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(n,o,a):!(t.prototype&&t.prototype.isPureReactComponent&&ln(r,n)&&ln(i,o))}function $o(e,t,r){var n=!1,i=Ni,o=t.contextType;return"object"==typeof o&&null!==o?o=Po(o):(i=Ri(t)?Ai:Mi.current,o=(n=null!=(n=t.contextTypes))?Fi(e,i):Ni),t=new t(r,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Vo,e.stateNode=t,t._reactInternals=e,n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function Ho(e,t,r,n){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(r,n),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(r,n),t.state!==e&&Vo.enqueueReplaceState(t,t.state,null)}function Wo(e,t,r,n){var i=e.stateNode;i.props=r,i.state=e.memoizedState,i.refs=Uo,Ro(e);var o=t.contextType;"object"==typeof o&&null!==o?i.context=Po(o):(o=Ri(t)?Ai:Mi.current,i.context=Fi(e,o)),i.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(jo(e,t,o,r),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&Vo.enqueueReplaceState(i,i.state,null),zo(e,r,i,n),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.flags|=4194308)}function Go(e,t,r){if(null!==(e=r.ref)&&"function"!=typeof e&&"object"!=typeof e){if(r._owner){if(r=r._owner){if(1!==r.tag)throw Error(o(309));var n=r.stateNode}if(!n)throw Error(o(147,e));var i=n,a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:(t=function(e){var t=i.refs;t===Uo&&(t=i.refs={}),null===e?delete t[a]:t[a]=e},t._stringRef=a,t)}if("string"!=typeof e)throw Error(o(284));if(!r._owner)throw Error(o(290,e))}return e}function Ko(e,t){throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Qo(e){return(0,e._init)(e._payload)}function Xo(e){function t(t,r){if(e){var n=t.deletions;null===n?(t.deletions=[r],t.flags|=16):n.push(r)}}function r(r,n){if(!e)return null;for(;null!==n;)t(r,n),n=n.sibling;return null}function n(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=Iu(e,t)).index=0,e.sibling=null,e}function a(t,r,n){return t.index=n,e?null!==(n=t.alternate)?(n=n.index)<r?(t.flags|=2,r):n:(t.flags|=2,r):(t.flags|=1048576,r)}function s(t){return e&&null===t.alternate&&(t.flags|=2),t}function l(e,t,r,n){return null===t||6!==t.tag?((t=Bu(r,e.mode,n)).return=e,t):((t=i(t,r)).return=e,t)}function u(e,t,r,n){var o=r.type;return o===x?f(e,t,r.props.children,n,r.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===R&&Qo(o)===t.type)?((n=i(t,r.props)).ref=Go(e,t,r),n.return=e,n):((n=Tu(r.type,r.key,r.props,null,e.mode,n)).ref=Go(e,t,r),n.return=e,n)}function c(e,t,r,n){return null===t||4!==t.tag||t.stateNode.containerInfo!==r.containerInfo||t.stateNode.implementation!==r.implementation?((t=zu(r,e.mode,n)).return=e,t):((t=i(t,r.children||[])).return=e,t)}function f(e,t,r,n,o){return null===t||7!==t.tag?((t=Ou(r,e.mode,n,o)).return=e,t):((t=i(t,r)).return=e,t)}function h(e,t,r){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Bu(""+t,e.mode,r)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:return(r=Tu(t.type,t.key,t.props,null,e.mode,r)).ref=Go(e,null,t),r.return=e,r;case E:return(t=zu(t,e.mode,r)).return=e,t;case R:return h(e,(0,t._init)(t._payload),r)}if(te(t)||O(t))return(t=Ou(t,e.mode,r,null)).return=e,t;Ko(e,t)}return null}function d(e,t,r,n){var i=null!==t?t.key:null;if("string"==typeof r&&""!==r||"number"==typeof r)return null!==i?null:l(e,t,""+r,n);if("object"==typeof r&&null!==r){switch(r.$$typeof){case k:return r.key===i?u(e,t,r,n):null;case E:return r.key===i?c(e,t,r,n):null;case R:return d(e,t,(i=r._init)(r._payload),n)}if(te(r)||O(r))return null!==i?null:f(e,t,r,n,null);Ko(e,r)}return null}function p(e,t,r,n,i){if("string"==typeof n&&""!==n||"number"==typeof n)return l(t,e=e.get(r)||null,""+n,i);if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return u(t,e=e.get(null===n.key?r:n.key)||null,n,i);case E:return c(t,e=e.get(null===n.key?r:n.key)||null,n,i);case R:return p(e,t,r,(0,n._init)(n._payload),i)}if(te(n)||O(n))return f(t,e=e.get(r)||null,n,i,null);Ko(t,n)}return null}function m(i,o,s,l){for(var u=null,c=null,f=o,m=o=0,g=null;null!==f&&m<s.length;m++){f.index>m?(g=f,f=null):g=f.sibling;var v=d(i,f,s[m],l);if(null===v){null===f&&(f=g);break}e&&f&&null===v.alternate&&t(i,f),o=a(v,o,m),null===c?u=v:c.sibling=v,c=v,f=g}if(m===s.length)return r(i,f),io&&Yi(i,m),u;if(null===f){for(;m<s.length;m++)null!==(f=h(i,s[m],l))&&(o=a(f,o,m),null===c?u=f:c.sibling=f,c=f);return io&&Yi(i,m),u}for(f=n(i,f);m<s.length;m++)null!==(g=p(f,i,m,s[m],l))&&(e&&null!==g.alternate&&f.delete(null===g.key?m:g.key),o=a(g,o,m),null===c?u=g:c.sibling=g,c=g);return e&&f.forEach((function(e){return t(i,e)})),io&&Yi(i,m),u}function g(i,s,l,u){var c=O(l);if("function"!=typeof c)throw Error(o(150));if(null==(l=c.call(l)))throw Error(o(151));for(var f=c=null,m=s,g=s=0,v=null,y=l.next();null!==m&&!y.done;g++,y=l.next()){m.index>g?(v=m,m=null):v=m.sibling;var b=d(i,m,y.value,u);if(null===b){null===m&&(m=v);break}e&&m&&null===b.alternate&&t(i,m),s=a(b,s,g),null===f?c=b:f.sibling=b,f=b,m=v}if(y.done)return r(i,m),io&&Yi(i,g),c;if(null===m){for(;!y.done;g++,y=l.next())null!==(y=h(i,y.value,u))&&(s=a(y,s,g),null===f?c=y:f.sibling=y,f=y);return io&&Yi(i,g),c}for(m=n(i,m);!y.done;g++,y=l.next())null!==(y=p(m,i,g,y.value,u))&&(e&&null!==y.alternate&&m.delete(null===y.key?g:y.key),s=a(y,s,g),null===f?c=y:f.sibling=y,f=y);return e&&m.forEach((function(e){return t(i,e)})),io&&Yi(i,g),c}return function e(n,o,a,l){if("object"==typeof a&&null!==a&&a.type===x&&null===a.key&&(a=a.props.children),"object"==typeof a&&null!==a){switch(a.$$typeof){case k:e:{for(var u=a.key,c=o;null!==c;){if(c.key===u){if((u=a.type)===x){if(7===c.tag){r(n,c.sibling),(o=i(c,a.props.children)).return=n,n=o;break e}}else if(c.elementType===u||"object"==typeof u&&null!==u&&u.$$typeof===R&&Qo(u)===c.type){r(n,c.sibling),(o=i(c,a.props)).ref=Go(n,c,a),o.return=n,n=o;break e}r(n,c);break}t(n,c),c=c.sibling}a.type===x?((o=Ou(a.props.children,n.mode,l,a.key)).return=n,n=o):((l=Tu(a.type,a.key,a.props,null,n.mode,l)).ref=Go(n,o,a),l.return=n,n=l)}return s(n);case E:e:{for(c=a.key;null!==o;){if(o.key===c){if(4===o.tag&&o.stateNode.containerInfo===a.containerInfo&&o.stateNode.implementation===a.implementation){r(n,o.sibling),(o=i(o,a.children||[])).return=n,n=o;break e}r(n,o);break}t(n,o),o=o.sibling}(o=zu(a,n.mode,l)).return=n,n=o}return s(n);case R:return e(n,o,(c=a._init)(a._payload),l)}if(te(a))return m(n,o,a,l);if(O(a))return g(n,o,a,l);Ko(n,a)}return"string"==typeof a&&""!==a||"number"==typeof a?(a=""+a,null!==o&&6===o.tag?(r(n,o.sibling),(o=i(o,a)).return=n,n=o):(r(n,o),(o=Bu(a,n.mode,l)).return=n,n=o),s(n)):r(n,o)}}var Jo=Xo(!0),Yo=Xo(!1),Zo={},ea=_i(Zo),ta=_i(Zo),ra=_i(Zo);function na(e){if(e===Zo)throw Error(o(174));return e}function ia(e,t){switch(Pi(ra,t),Pi(ta,e),Pi(ea,Zo),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:le(null,"");break;default:t=le(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Si(ea),Pi(ea,t)}function oa(){Si(ea),Si(ta),Si(ra)}function aa(e){na(ra.current);var t=na(ea.current),r=le(t,e.type);t!==r&&(Pi(ta,e),Pi(ea,r))}function sa(e){ta.current===e&&(Si(ea),Si(ta))}var la=_i(0);function ua(e){for(var t=e;null!==t;){if(13===t.tag){var r=t.memoizedState;if(null!==r&&(null===(r=r.dehydrated)||"$?"===r.data||"$!"===r.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ca=[];function fa(){for(var e=0;e<ca.length;e++)ca[e]._workInProgressVersionPrimary=null;ca.length=0}var ha=w.ReactCurrentDispatcher,da=w.ReactCurrentBatchConfig,pa=0,ma=null,ga=null,va=null,ya=!1,ba=!1,wa=0,ka=0;function Ea(){throw Error(o(321))}function xa(e,t){if(null===t)return!1;for(var r=0;r<t.length&&r<e.length;r++)if(!sn(e[r],t[r]))return!1;return!0}function _a(e,t,r,n,i,a){if(pa=a,ma=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,ha.current=null===e||null===e.memoizedState?ss:ls,e=r(n,i),ba){a=0;do{if(ba=!1,wa=0,25<=a)throw Error(o(301));a+=1,va=ga=null,t.updateQueue=null,ha.current=us,e=r(n,i)}while(ba)}if(ha.current=as,t=null!==ga&&null!==ga.next,pa=0,va=ga=ma=null,ya=!1,t)throw Error(o(300));return e}function Sa(){var e=0!==wa;return wa=0,e}function Pa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===va?ma.memoizedState=va=e:va=va.next=e,va}function Na(){if(null===ga){var e=ma.alternate;e=null!==e?e.memoizedState:null}else e=ga.next;var t=null===va?ma.memoizedState:va.next;if(null!==t)va=t,ga=e;else{if(null===e)throw Error(o(310));e={memoizedState:(ga=e).memoizedState,baseState:ga.baseState,baseQueue:ga.baseQueue,queue:ga.queue,next:null},null===va?ma.memoizedState=va=e:va=va.next=e}return va}function Ma(e,t){return"function"==typeof t?t(e):t}function Ca(e){var t=Na(),r=t.queue;if(null===r)throw Error(o(311));r.lastRenderedReducer=e;var n=ga,i=n.baseQueue,a=r.pending;if(null!==a){if(null!==i){var s=i.next;i.next=a.next,a.next=s}n.baseQueue=i=a,r.pending=null}if(null!==i){a=i.next,n=n.baseState;var l=s=null,u=null,c=a;do{var f=c.lane;if((pa&f)===f)null!==u&&(u=u.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),n=c.hasEagerState?c.eagerState:e(n,c.action);else{var h={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===u?(l=u=h,s=n):u=u.next=h,ma.lanes|=f,Ll|=f}c=c.next}while(null!==c&&c!==a);null===u?s=n:u.next=l,sn(n,t.memoizedState)||(ws=!0),t.memoizedState=n,t.baseState=s,t.baseQueue=u,r.lastRenderedState=n}if(null!==(e=r.interleaved)){i=e;do{a=i.lane,ma.lanes|=a,Ll|=a,i=i.next}while(i!==e)}else null===i&&(r.lanes=0);return[t.memoizedState,r.dispatch]}function Aa(e){var t=Na(),r=t.queue;if(null===r)throw Error(o(311));r.lastRenderedReducer=e;var n=r.dispatch,i=r.pending,a=t.memoizedState;if(null!==i){r.pending=null;var s=i=i.next;do{a=e(a,s.action),s=s.next}while(s!==i);sn(a,t.memoizedState)||(ws=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),r.lastRenderedState=a}return[a,n]}function Fa(){}function Ra(e,t){var r=ma,n=Na(),i=t(),a=!sn(n.memoizedState,i);if(a&&(n.memoizedState=i,ws=!0),n=n.queue,$a(Oa.bind(null,r,n,e),[e]),n.getSnapshot!==t||a||null!==va&&1&va.memoizedState.tag){if(r.flags|=2048,Da(9,Ta.bind(null,r,n,i,t),void 0,null),null===Cl)throw Error(o(349));0!=(30&pa)||Ia(r,t,i)}return i}function Ia(e,t,r){e.flags|=16384,e={getSnapshot:t,value:r},null===(t=ma.updateQueue)?(t={lastEffect:null,stores:null},ma.updateQueue=t,t.stores=[e]):null===(r=t.stores)?t.stores=[e]:r.push(e)}function Ta(e,t,r,n){t.value=r,t.getSnapshot=n,La(t)&&Ba(e)}function Oa(e,t,r){return r((function(){La(t)&&Ba(e)}))}function La(e){var t=e.getSnapshot;e=e.value;try{var r=t();return!sn(e,r)}catch(e){return!0}}function Ba(e){var t=Ao(e,1);null!==t&&ru(t,e,1,-1)}function za(e){var t=Pa();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ma,lastRenderedState:e},t.queue=e,e=e.dispatch=rs.bind(null,ma,e),[t.memoizedState,e]}function Da(e,t,r,n){return e={tag:e,create:t,destroy:r,deps:n,next:null},null===(t=ma.updateQueue)?(t={lastEffect:null,stores:null},ma.updateQueue=t,t.lastEffect=e.next=e):null===(r=t.lastEffect)?t.lastEffect=e.next=e:(n=r.next,r.next=e,e.next=n,t.lastEffect=e),e}function Ua(){return Na().memoizedState}function ja(e,t,r,n){var i=Pa();ma.flags|=e,i.memoizedState=Da(1|t,r,void 0,void 0===n?null:n)}function Va(e,t,r,n){var i=Na();n=void 0===n?null:n;var o=void 0;if(null!==ga){var a=ga.memoizedState;if(o=a.destroy,null!==n&&xa(n,a.deps))return void(i.memoizedState=Da(t,r,o,n))}ma.flags|=e,i.memoizedState=Da(1|t,r,o,n)}function qa(e,t){return ja(8390656,8,e,t)}function $a(e,t){return Va(2048,8,e,t)}function Ha(e,t){return Va(4,2,e,t)}function Wa(e,t){return Va(4,4,e,t)}function Ga(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ka(e,t,r){return r=null!=r?r.concat([e]):null,Va(4,4,Ga.bind(null,t,e),r)}function Qa(){}function Xa(e,t){var r=Na();t=void 0===t?null:t;var n=r.memoizedState;return null!==n&&null!==t&&xa(t,n[1])?n[0]:(r.memoizedState=[e,t],e)}function Ja(e,t){var r=Na();t=void 0===t?null:t;var n=r.memoizedState;return null!==n&&null!==t&&xa(t,n[1])?n[0]:(e=e(),r.memoizedState=[e,t],e)}function Ya(e,t,r){return 0==(21&pa)?(e.baseState&&(e.baseState=!1,ws=!0),e.memoizedState=r):(sn(r,t)||(r=mt(),ma.lanes|=r,Ll|=r,e.baseState=!0),t)}function Za(e,t){var r=bt;bt=0!==r&&4>r?r:4,e(!0);var n=da.transition;da.transition={};try{e(!1),t()}finally{bt=r,da.transition=n}}function es(){return Na().memoizedState}function ts(e,t,r){var n=tu(e);r={lane:n,action:r,hasEagerState:!1,eagerState:null,next:null},ns(e)?is(t,r):null!==(r=Co(e,t,r,n))&&(ru(r,e,n,eu()),os(r,t,n))}function rs(e,t,r){var n=tu(e),i={lane:n,action:r,hasEagerState:!1,eagerState:null,next:null};if(ns(e))is(t,i);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var a=t.lastRenderedState,s=o(a,r);if(i.hasEagerState=!0,i.eagerState=s,sn(s,a)){var l=t.interleaved;return null===l?(i.next=i,Mo(t)):(i.next=l.next,l.next=i),void(t.interleaved=i)}}catch(e){}null!==(r=Co(e,t,i,n))&&(ru(r,e,n,i=eu()),os(r,t,n))}}function ns(e){var t=e.alternate;return e===ma||null!==t&&t===ma}function is(e,t){ba=ya=!0;var r=e.pending;null===r?t.next=t:(t.next=r.next,r.next=t),e.pending=t}function os(e,t,r){if(0!=(4194240&r)){var n=t.lanes;r|=n&=e.pendingLanes,t.lanes=r,yt(e,r)}}var as={readContext:Po,useCallback:Ea,useContext:Ea,useEffect:Ea,useImperativeHandle:Ea,useInsertionEffect:Ea,useLayoutEffect:Ea,useMemo:Ea,useReducer:Ea,useRef:Ea,useState:Ea,useDebugValue:Ea,useDeferredValue:Ea,useTransition:Ea,useMutableSource:Ea,useSyncExternalStore:Ea,useId:Ea,unstable_isNewReconciler:!1},ss={readContext:Po,useCallback:function(e,t){return Pa().memoizedState=[e,void 0===t?null:t],e},useContext:Po,useEffect:qa,useImperativeHandle:function(e,t,r){return r=null!=r?r.concat([e]):null,ja(4194308,4,Ga.bind(null,t,e),r)},useLayoutEffect:function(e,t){return ja(4194308,4,e,t)},useInsertionEffect:function(e,t){return ja(4,2,e,t)},useMemo:function(e,t){var r=Pa();return t=void 0===t?null:t,e=e(),r.memoizedState=[e,t],e},useReducer:function(e,t,r){var n=Pa();return t=void 0!==r?r(t):t,n.memoizedState=n.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},n.queue=e,e=e.dispatch=ts.bind(null,ma,e),[n.memoizedState,e]},useRef:function(e){return e={current:e},Pa().memoizedState=e},useState:za,useDebugValue:Qa,useDeferredValue:function(e){return Pa().memoizedState=e},useTransition:function(){var e=za(!1),t=e[0];return e=Za.bind(null,e[1]),Pa().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,r){var n=ma,i=Pa();if(io){if(void 0===r)throw Error(o(407));r=r()}else{if(r=t(),null===Cl)throw Error(o(349));0!=(30&pa)||Ia(n,t,r)}i.memoizedState=r;var a={value:r,getSnapshot:t};return i.queue=a,qa(Oa.bind(null,n,a,e),[e]),n.flags|=2048,Da(9,Ta.bind(null,n,a,r,t),void 0,null),r},useId:function(){var e=Pa(),t=Cl.identifierPrefix;if(io){var r=Ji;t=":"+t+"R"+(r=(Xi&~(1<<32-at(Xi)-1)).toString(32)+r),0<(r=wa++)&&(t+="H"+r.toString(32)),t+=":"}else t=":"+t+"r"+(r=ka++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},ls={readContext:Po,useCallback:Xa,useContext:Po,useEffect:$a,useImperativeHandle:Ka,useInsertionEffect:Ha,useLayoutEffect:Wa,useMemo:Ja,useReducer:Ca,useRef:Ua,useState:function(){return Ca(Ma)},useDebugValue:Qa,useDeferredValue:function(e){return Ya(Na(),ga.memoizedState,e)},useTransition:function(){return[Ca(Ma)[0],Na().memoizedState]},useMutableSource:Fa,useSyncExternalStore:Ra,useId:es,unstable_isNewReconciler:!1},us={readContext:Po,useCallback:Xa,useContext:Po,useEffect:$a,useImperativeHandle:Ka,useInsertionEffect:Ha,useLayoutEffect:Wa,useMemo:Ja,useReducer:Aa,useRef:Ua,useState:function(){return Aa(Ma)},useDebugValue:Qa,useDeferredValue:function(e){var t=Na();return null===ga?t.memoizedState=e:Ya(t,ga.memoizedState,e)},useTransition:function(){return[Aa(Ma)[0],Na().memoizedState]},useMutableSource:Fa,useSyncExternalStore:Ra,useId:es,unstable_isNewReconciler:!1};function cs(e,t){try{var r="",n=t;do{r+=j(n),n=n.return}while(n);var i=r}catch(e){i="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:i,digest:null}}function fs(e,t,r){return{value:e,source:null,stack:null!=r?r:null,digest:null!=t?t:null}}function hs(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var ds="function"==typeof WeakMap?WeakMap:Map;function ps(e,t,r){(r=To(-1,r)).tag=3,r.payload={element:null};var n=t.value;return r.callback=function(){$l||($l=!0,Hl=n),hs(0,t)},r}function ms(e,t,r){(r=To(-1,r)).tag=3;var n=e.type.getDerivedStateFromError;if("function"==typeof n){var i=t.value;r.payload=function(){return n(i)},r.callback=function(){hs(0,t)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(r.callback=function(){hs(0,t),"function"!=typeof n&&(null===Wl?Wl=new Set([this]):Wl.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),r}function gs(e,t,r){var n=e.pingCache;if(null===n){n=e.pingCache=new ds;var i=new Set;n.set(t,i)}else void 0===(i=n.get(t))&&(i=new Set,n.set(t,i));i.has(r)||(i.add(r),e=Su.bind(null,e,t,r),t.then(e,e))}function vs(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function ys(e,t,r,n,i){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,r.flags|=131072,r.flags&=-52805,1===r.tag&&(null===r.alternate?r.tag=17:((t=To(-1,1)).tag=2,Oo(r,t,1))),r.lanes|=1),e):(e.flags|=65536,e.lanes=i,e)}var bs=w.ReactCurrentOwner,ws=!1;function ks(e,t,r,n){t.child=null===e?Yo(t,null,r,n):Jo(t,e.child,r,n)}function Es(e,t,r,n,i){r=r.render;var o=t.ref;return So(t,i),n=_a(e,t,r,n,o,i),r=Sa(),null===e||ws?(io&&r&&eo(t),t.flags|=1,ks(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,$s(e,t,i))}function xs(e,t,r,n,i){if(null===e){var o=r.type;return"function"!=typeof o||Ru(o)||void 0!==o.defaultProps||null!==r.compare||void 0!==r.defaultProps?((e=Tu(r.type,null,n,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,_s(e,t,o,n,i))}if(o=e.child,0==(e.lanes&i)){var a=o.memoizedProps;if((r=null!==(r=r.compare)?r:ln)(a,n)&&e.ref===t.ref)return $s(e,t,i)}return t.flags|=1,(e=Iu(o,n)).ref=t.ref,e.return=t,t.child=e}function _s(e,t,r,n,i){if(null!==e){var o=e.memoizedProps;if(ln(o,n)&&e.ref===t.ref){if(ws=!1,t.pendingProps=n=o,0==(e.lanes&i))return t.lanes=e.lanes,$s(e,t,i);0!=(131072&e.flags)&&(ws=!0)}}return Ns(e,t,r,n,i)}function Ss(e,t,r){var n=t.pendingProps,i=n.children,o=null!==e?e.memoizedState:null;if("hidden"===n.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Pi(Il,Rl),Rl|=r;else{if(0==(1073741824&r))return e=null!==o?o.baseLanes|r:r,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Pi(Il,Rl),Rl|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},n=null!==o?o.baseLanes:r,Pi(Il,Rl),Rl|=n}else null!==o?(n=o.baseLanes|r,t.memoizedState=null):n=r,Pi(Il,Rl),Rl|=n;return ks(e,t,i,r),t.child}function Ps(e,t){var r=t.ref;(null===e&&null!==r||null!==e&&e.ref!==r)&&(t.flags|=512,t.flags|=2097152)}function Ns(e,t,r,n,i){var o=Ri(r)?Ai:Mi.current;return o=Fi(t,o),So(t,i),r=_a(e,t,r,n,o,i),n=Sa(),null===e||ws?(io&&n&&eo(t),t.flags|=1,ks(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,$s(e,t,i))}function Ms(e,t,r,n,i){if(Ri(r)){var o=!0;Li(t)}else o=!1;if(So(t,i),null===t.stateNode)qs(e,t),$o(t,r,n),Wo(t,r,n,i),n=!0;else if(null===e){var a=t.stateNode,s=t.memoizedProps;a.props=s;var l=a.context,u=r.contextType;u="object"==typeof u&&null!==u?Po(u):Fi(t,u=Ri(r)?Ai:Mi.current);var c=r.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==n||l!==u)&&Ho(t,a,n,u),Fo=!1;var h=t.memoizedState;a.state=h,zo(t,n,a,i),l=t.memoizedState,s!==n||h!==l||Ci.current||Fo?("function"==typeof c&&(jo(t,r,c,n),l=t.memoizedState),(s=Fo||qo(t,r,s,n,h,l,u))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),t.memoizedProps=n,t.memoizedState=l),a.props=n,a.state=l,a.context=u,n=s):("function"==typeof a.componentDidMount&&(t.flags|=4194308),n=!1)}else{a=t.stateNode,Io(e,t),s=t.memoizedProps,u=t.type===t.elementType?s:vo(t.type,s),a.props=u,f=t.pendingProps,h=a.context,l="object"==typeof(l=r.contextType)&&null!==l?Po(l):Fi(t,l=Ri(r)?Ai:Mi.current);var d=r.getDerivedStateFromProps;(c="function"==typeof d||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==f||h!==l)&&Ho(t,a,n,l),Fo=!1,h=t.memoizedState,a.state=h,zo(t,n,a,i);var p=t.memoizedState;s!==f||h!==p||Ci.current||Fo?("function"==typeof d&&(jo(t,r,d,n),p=t.memoizedState),(u=Fo||qo(t,r,u,n,h,p,l)||!1)?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(n,p,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(n,p,l)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=1024),t.memoizedProps=n,t.memoizedState=p),a.props=n,a.state=p,a.context=l,n=u):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=1024),n=!1)}return Cs(e,t,r,n,o,i)}function Cs(e,t,r,n,i,o){Ps(e,t);var a=0!=(128&t.flags);if(!n&&!a)return i&&Bi(t,r,!1),$s(e,t,o);n=t.stateNode,bs.current=t;var s=a&&"function"!=typeof r.getDerivedStateFromError?null:n.render();return t.flags|=1,null!==e&&a?(t.child=Jo(t,e.child,null,o),t.child=Jo(t,null,s,o)):ks(e,t,s,o),t.memoizedState=n.state,i&&Bi(t,r,!0),t.child}function As(e){var t=e.stateNode;t.pendingContext?Ti(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Ti(0,t.context,!1),ia(e,t.containerInfo)}function Fs(e,t,r,n,i){return po(),mo(i),t.flags|=256,ks(e,t,r,n),t.child}var Rs,Is,Ts,Os={dehydrated:null,treeContext:null,retryLane:0};function Ls(e){return{baseLanes:e,cachePool:null,transitions:null}}function Bs(e,t,r){var n,i=t.pendingProps,a=la.current,s=!1,l=0!=(128&t.flags);if((n=l)||(n=(null===e||null!==e.memoizedState)&&0!=(2&a)),n?(s=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(a|=1),Pi(la,1&a),null===e)return uo(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(l=i.children,e=i.fallback,s?(i=t.mode,s=t.child,l={mode:"hidden",children:l},0==(1&i)&&null!==s?(s.childLanes=0,s.pendingProps=l):s=Lu(l,i,0,null),e=Ou(e,i,r,null),s.return=t,e.return=t,s.sibling=e,t.child=s,t.child.memoizedState=Ls(r),t.memoizedState=Os,e):zs(t,l));if(null!==(a=e.memoizedState)&&null!==(n=a.dehydrated))return function(e,t,r,n,i,a,s){if(r)return 256&t.flags?(t.flags&=-257,Ds(e,t,s,n=fs(Error(o(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(a=n.fallback,i=t.mode,n=Lu({mode:"visible",children:n.children},i,0,null),(a=Ou(a,i,s,null)).flags|=2,n.return=t,a.return=t,n.sibling=a,t.child=n,0!=(1&t.mode)&&Jo(t,e.child,null,s),t.child.memoizedState=Ls(s),t.memoizedState=Os,a);if(0==(1&t.mode))return Ds(e,t,s,null);if("$!"===i.data){if(n=i.nextSibling&&i.nextSibling.dataset)var l=n.dgst;return n=l,Ds(e,t,s,n=fs(a=Error(o(419)),n,void 0))}if(l=0!=(s&e.childLanes),ws||l){if(null!==(n=Cl)){switch(s&-s){case 4:i=2;break;case 16:i=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:i=32;break;case 536870912:i=268435456;break;default:i=0}0!==(i=0!=(i&(n.suspendedLanes|s))?0:i)&&i!==a.retryLane&&(a.retryLane=i,Ao(e,i),ru(n,e,i,-1))}return mu(),Ds(e,t,s,n=fs(Error(o(421))))}return"$?"===i.data?(t.flags|=128,t.child=e.child,t=Nu.bind(null,e),i._reactRetry=t,null):(e=a.treeContext,no=ui(i.nextSibling),ro=t,io=!0,oo=null,null!==e&&(Gi[Ki++]=Xi,Gi[Ki++]=Ji,Gi[Ki++]=Qi,Xi=e.id,Ji=e.overflow,Qi=t),(t=zs(t,n.children)).flags|=4096,t)}(e,t,l,i,n,a,r);if(s){s=i.fallback,l=t.mode,n=(a=e.child).sibling;var u={mode:"hidden",children:i.children};return 0==(1&l)&&t.child!==a?((i=t.child).childLanes=0,i.pendingProps=u,t.deletions=null):(i=Iu(a,u)).subtreeFlags=14680064&a.subtreeFlags,null!==n?s=Iu(n,s):(s=Ou(s,l,r,null)).flags|=2,s.return=t,i.return=t,i.sibling=s,t.child=i,i=s,s=t.child,l=null===(l=e.child.memoizedState)?Ls(r):{baseLanes:l.baseLanes|r,cachePool:null,transitions:l.transitions},s.memoizedState=l,s.childLanes=e.childLanes&~r,t.memoizedState=Os,i}return e=(s=e.child).sibling,i=Iu(s,{mode:"visible",children:i.children}),0==(1&t.mode)&&(i.lanes=r),i.return=t,i.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=i,t.memoizedState=null,i}function zs(e,t){return(t=Lu({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Ds(e,t,r,n){return null!==n&&mo(n),Jo(t,e.child,null,r),(e=zs(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Us(e,t,r){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),_o(e.return,t,r)}function js(e,t,r,n,i){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:n,tail:r,tailMode:i}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=n,o.tail=r,o.tailMode=i)}function Vs(e,t,r){var n=t.pendingProps,i=n.revealOrder,o=n.tail;if(ks(e,t,n.children,r),0!=(2&(n=la.current)))n=1&n|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Us(e,r,t);else if(19===e.tag)Us(e,r,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}n&=1}if(Pi(la,n),0==(1&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(r=t.child,i=null;null!==r;)null!==(e=r.alternate)&&null===ua(e)&&(i=r),r=r.sibling;null===(r=i)?(i=t.child,t.child=null):(i=r.sibling,r.sibling=null),js(t,!1,i,r,o);break;case"backwards":for(r=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===ua(e)){t.child=i;break}e=i.sibling,i.sibling=r,r=i,i=e}js(t,!0,r,null,o);break;case"together":js(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function qs(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function $s(e,t,r){if(null!==e&&(t.dependencies=e.dependencies),Ll|=t.lanes,0==(r&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(r=Iu(e=t.child,e.pendingProps),t.child=r,r.return=t;null!==e.sibling;)e=e.sibling,(r=r.sibling=Iu(e,e.pendingProps)).return=t;r.sibling=null}return t.child}function Hs(e,t){if(!io)switch(e.tailMode){case"hidden":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?e.tail=null:r.sibling=null;break;case"collapsed":r=e.tail;for(var n=null;null!==r;)null!==r.alternate&&(n=r),r=r.sibling;null===n?t||null===e.tail?e.tail=null:e.tail.sibling=null:n.sibling=null}}function Ws(e){var t=null!==e.alternate&&e.alternate.child===e.child,r=0,n=0;if(t)for(var i=e.child;null!==i;)r|=i.lanes|i.childLanes,n|=14680064&i.subtreeFlags,n|=14680064&i.flags,i.return=e,i=i.sibling;else for(i=e.child;null!==i;)r|=i.lanes|i.childLanes,n|=i.subtreeFlags,n|=i.flags,i.return=e,i=i.sibling;return e.subtreeFlags|=n,e.childLanes=r,t}function Gs(e,t,r){var n=t.pendingProps;switch(to(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Ws(t),null;case 1:case 17:return Ri(t.type)&&Ii(),Ws(t),null;case 3:return n=t.stateNode,oa(),Si(Ci),Si(Mi),fa(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(fo(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==oo&&(au(oo),oo=null))),Ws(t),null;case 5:sa(t);var i=na(ra.current);if(r=t.type,null!==e&&null!=t.stateNode)Is(e,t,r,n),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!n){if(null===t.stateNode)throw Error(o(166));return Ws(t),null}if(e=na(ea.current),fo(t)){n=t.stateNode,r=t.type;var a=t.memoizedProps;switch(n[hi]=t,n[di]=a,e=0!=(1&t.mode),r){case"dialog":Dn("cancel",n),Dn("close",n);break;case"iframe":case"object":case"embed":Dn("load",n);break;case"video":case"audio":for(i=0;i<On.length;i++)Dn(On[i],n);break;case"source":Dn("error",n);break;case"img":case"image":case"link":Dn("error",n),Dn("load",n);break;case"details":Dn("toggle",n);break;case"input":X(n,a),Dn("invalid",n);break;case"select":n._wrapperState={wasMultiple:!!a.multiple},Dn("invalid",n);break;case"textarea":ie(n,a),Dn("invalid",n)}for(var l in ye(r,a),i=null,a)if(a.hasOwnProperty(l)){var u=a[l];"children"===l?"string"==typeof u?n.textContent!==u&&(!0!==a.suppressHydrationWarning&&Yn(n.textContent,u,e),i=["children",u]):"number"==typeof u&&n.textContent!==""+u&&(!0!==a.suppressHydrationWarning&&Yn(n.textContent,u,e),i=["children",""+u]):s.hasOwnProperty(l)&&null!=u&&"onScroll"===l&&Dn("scroll",n)}switch(r){case"input":W(n),Z(n,a,!0);break;case"textarea":W(n),ae(n);break;case"select":case"option":break;default:"function"==typeof a.onClick&&(n.onclick=Zn)}n=i,t.updateQueue=n,null!==n&&(t.flags|=4)}else{l=9===i.nodeType?i:i.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=se(r)),"http://www.w3.org/1999/xhtml"===e?"script"===r?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof n.is?e=l.createElement(r,{is:n.is}):(e=l.createElement(r),"select"===r&&(l=e,n.multiple?l.multiple=!0:n.size&&(l.size=n.size))):e=l.createElementNS(e,r),e[hi]=t,e[di]=n,Rs(e,t),t.stateNode=e;e:{switch(l=be(r,n),r){case"dialog":Dn("cancel",e),Dn("close",e),i=n;break;case"iframe":case"object":case"embed":Dn("load",e),i=n;break;case"video":case"audio":for(i=0;i<On.length;i++)Dn(On[i],e);i=n;break;case"source":Dn("error",e),i=n;break;case"img":case"image":case"link":Dn("error",e),Dn("load",e),i=n;break;case"details":Dn("toggle",e),i=n;break;case"input":X(e,n),i=Q(e,n),Dn("invalid",e);break;case"option":default:i=n;break;case"select":e._wrapperState={wasMultiple:!!n.multiple},i=B({},n,{value:void 0}),Dn("invalid",e);break;case"textarea":ie(e,n),i=ne(e,n),Dn("invalid",e)}for(a in ye(r,i),u=i)if(u.hasOwnProperty(a)){var c=u[a];"style"===a?ge(e,c):"dangerouslySetInnerHTML"===a?null!=(c=c?c.__html:void 0)&&fe(e,c):"children"===a?"string"==typeof c?("textarea"!==r||""!==c)&&he(e,c):"number"==typeof c&&he(e,""+c):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(s.hasOwnProperty(a)?null!=c&&"onScroll"===a&&Dn("scroll",e):null!=c&&b(e,a,c,l))}switch(r){case"input":W(e),Z(e,n,!1);break;case"textarea":W(e),ae(e);break;case"option":null!=n.value&&e.setAttribute("value",""+$(n.value));break;case"select":e.multiple=!!n.multiple,null!=(a=n.value)?re(e,!!n.multiple,a,!1):null!=n.defaultValue&&re(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=Zn)}switch(r){case"button":case"input":case"select":case"textarea":n=!!n.autoFocus;break e;case"img":n=!0;break e;default:n=!1}}n&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Ws(t),null;case 6:if(e&&null!=t.stateNode)Ts(0,t,e.memoizedProps,n);else{if("string"!=typeof n&&null===t.stateNode)throw Error(o(166));if(r=na(ra.current),na(ea.current),fo(t)){if(n=t.stateNode,r=t.memoizedProps,n[hi]=t,(a=n.nodeValue!==r)&&null!==(e=ro))switch(e.tag){case 3:Yn(n.nodeValue,r,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Yn(n.nodeValue,r,0!=(1&e.mode))}a&&(t.flags|=4)}else(n=(9===r.nodeType?r:r.ownerDocument).createTextNode(n))[hi]=t,t.stateNode=n}return Ws(t),null;case 13:if(Si(la),n=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(io&&null!==no&&0!=(1&t.mode)&&0==(128&t.flags))ho(),po(),t.flags|=98560,a=!1;else if(a=fo(t),null!==n&&null!==n.dehydrated){if(null===e){if(!a)throw Error(o(318));if(!(a=null!==(a=t.memoizedState)?a.dehydrated:null))throw Error(o(317));a[hi]=t}else po(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Ws(t),a=!1}else null!==oo&&(au(oo),oo=null),a=!0;if(!a)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=r,t):((n=null!==n)!=(null!==e&&null!==e.memoizedState)&&n&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&la.current)?0===Tl&&(Tl=3):mu())),null!==t.updateQueue&&(t.flags|=4),Ws(t),null);case 4:return oa(),null===e&&Vn(t.stateNode.containerInfo),Ws(t),null;case 10:return xo(t.type._context),Ws(t),null;case 19:if(Si(la),null===(a=t.memoizedState))return Ws(t),null;if(n=0!=(128&t.flags),null===(l=a.rendering))if(n)Hs(a,!1);else{if(0!==Tl||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(l=ua(e))){for(t.flags|=128,Hs(a,!1),null!==(n=l.updateQueue)&&(t.updateQueue=n,t.flags|=4),t.subtreeFlags=0,n=r,r=t.child;null!==r;)e=n,(a=r).flags&=14680066,null===(l=a.alternate)?(a.childLanes=0,a.lanes=e,a.child=null,a.subtreeFlags=0,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null,a.stateNode=null):(a.childLanes=l.childLanes,a.lanes=l.lanes,a.child=l.child,a.subtreeFlags=0,a.deletions=null,a.memoizedProps=l.memoizedProps,a.memoizedState=l.memoizedState,a.updateQueue=l.updateQueue,a.type=l.type,e=l.dependencies,a.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),r=r.sibling;return Pi(la,1&la.current|2),t.child}e=e.sibling}null!==a.tail&&Je()>Vl&&(t.flags|=128,n=!0,Hs(a,!1),t.lanes=4194304)}else{if(!n)if(null!==(e=ua(l))){if(t.flags|=128,n=!0,null!==(r=e.updateQueue)&&(t.updateQueue=r,t.flags|=4),Hs(a,!0),null===a.tail&&"hidden"===a.tailMode&&!l.alternate&&!io)return Ws(t),null}else 2*Je()-a.renderingStartTime>Vl&&1073741824!==r&&(t.flags|=128,n=!0,Hs(a,!1),t.lanes=4194304);a.isBackwards?(l.sibling=t.child,t.child=l):(null!==(r=a.last)?r.sibling=l:t.child=l,a.last=l)}return null!==a.tail?(t=a.tail,a.rendering=t,a.tail=t.sibling,a.renderingStartTime=Je(),t.sibling=null,r=la.current,Pi(la,n?1&r|2:1&r),t):(Ws(t),null);case 22:case 23:return fu(),n=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==n&&(t.flags|=8192),n&&0!=(1&t.mode)?0!=(1073741824&Rl)&&(Ws(t),6&t.subtreeFlags&&(t.flags|=8192)):Ws(t),null;case 24:case 25:return null}throw Error(o(156,t.tag))}function Ks(e,t){switch(to(t),t.tag){case 1:return Ri(t.type)&&Ii(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return oa(),Si(Ci),Si(Mi),fa(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return sa(t),null;case 13:if(Si(la),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));po()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Si(la),null;case 4:return oa(),null;case 10:return xo(t.type._context),null;case 22:case 23:return fu(),null;default:return null}}Rs=function(e,t){for(var r=t.child;null!==r;){if(5===r.tag||6===r.tag)e.appendChild(r.stateNode);else if(4!==r.tag&&null!==r.child){r.child.return=r,r=r.child;continue}if(r===t)break;for(;null===r.sibling;){if(null===r.return||r.return===t)return;r=r.return}r.sibling.return=r.return,r=r.sibling}},Is=function(e,t,r,n){var i=e.memoizedProps;if(i!==n){e=t.stateNode,na(ea.current);var o,a=null;switch(r){case"input":i=Q(e,i),n=Q(e,n),a=[];break;case"select":i=B({},i,{value:void 0}),n=B({},n,{value:void 0}),a=[];break;case"textarea":i=ne(e,i),n=ne(e,n),a=[];break;default:"function"!=typeof i.onClick&&"function"==typeof n.onClick&&(e.onclick=Zn)}for(c in ye(r,n),r=null,i)if(!n.hasOwnProperty(c)&&i.hasOwnProperty(c)&&null!=i[c])if("style"===c){var l=i[c];for(o in l)l.hasOwnProperty(o)&&(r||(r={}),r[o]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(s.hasOwnProperty(c)?a||(a=[]):(a=a||[]).push(c,null));for(c in n){var u=n[c];if(l=null!=i?i[c]:void 0,n.hasOwnProperty(c)&&u!==l&&(null!=u||null!=l))if("style"===c)if(l){for(o in l)!l.hasOwnProperty(o)||u&&u.hasOwnProperty(o)||(r||(r={}),r[o]="");for(o in u)u.hasOwnProperty(o)&&l[o]!==u[o]&&(r||(r={}),r[o]=u[o])}else r||(a||(a=[]),a.push(c,r)),r=u;else"dangerouslySetInnerHTML"===c?(u=u?u.__html:void 0,l=l?l.__html:void 0,null!=u&&l!==u&&(a=a||[]).push(c,u)):"children"===c?"string"!=typeof u&&"number"!=typeof u||(a=a||[]).push(c,""+u):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(s.hasOwnProperty(c)?(null!=u&&"onScroll"===c&&Dn("scroll",e),a||l===u||(a=[])):(a=a||[]).push(c,u))}r&&(a=a||[]).push("style",r);var c=a;(t.updateQueue=c)&&(t.flags|=4)}},Ts=function(e,t,r,n){r!==n&&(t.flags|=4)};var Qs=!1,Xs=!1,Js="function"==typeof WeakSet?WeakSet:Set,Ys=null;function Zs(e,t){var r=e.ref;if(null!==r)if("function"==typeof r)try{r(null)}catch(r){_u(e,t,r)}else r.current=null}function el(e,t,r){try{r()}catch(r){_u(e,t,r)}}var tl=!1;function rl(e,t,r){var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var i=n=n.next;do{if((i.tag&e)===e){var o=i.destroy;i.destroy=void 0,void 0!==o&&el(t,r,o)}i=i.next}while(i!==n)}}function nl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var r=t=t.next;do{if((r.tag&e)===e){var n=r.create;r.destroy=n()}r=r.next}while(r!==t)}}function il(e){var t=e.ref;if(null!==t){var r=e.stateNode;e.tag,e=r,"function"==typeof t?t(e):t.current=e}}function ol(e){var t=e.alternate;null!==t&&(e.alternate=null,ol(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[hi],delete t[di],delete t[mi],delete t[gi],delete t[vi]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function al(e){return 5===e.tag||3===e.tag||4===e.tag}function sl(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||al(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ll(e,t,r){var n=e.tag;if(5===n||6===n)e=e.stateNode,t?8===r.nodeType?r.parentNode.insertBefore(e,t):r.insertBefore(e,t):(8===r.nodeType?(t=r.parentNode).insertBefore(e,r):(t=r).appendChild(e),null!=(r=r._reactRootContainer)||null!==t.onclick||(t.onclick=Zn));else if(4!==n&&null!==(e=e.child))for(ll(e,t,r),e=e.sibling;null!==e;)ll(e,t,r),e=e.sibling}function ul(e,t,r){var n=e.tag;if(5===n||6===n)e=e.stateNode,t?r.insertBefore(e,t):r.appendChild(e);else if(4!==n&&null!==(e=e.child))for(ul(e,t,r),e=e.sibling;null!==e;)ul(e,t,r),e=e.sibling}var cl=null,fl=!1;function hl(e,t,r){for(r=r.child;null!==r;)dl(e,t,r),r=r.sibling}function dl(e,t,r){if(ot&&"function"==typeof ot.onCommitFiberUnmount)try{ot.onCommitFiberUnmount(it,r)}catch(e){}switch(r.tag){case 5:Xs||Zs(r,t);case 6:var n=cl,i=fl;cl=null,hl(e,t,r),fl=i,null!==(cl=n)&&(fl?(e=cl,r=r.stateNode,8===e.nodeType?e.parentNode.removeChild(r):e.removeChild(r)):cl.removeChild(r.stateNode));break;case 18:null!==cl&&(fl?(e=cl,r=r.stateNode,8===e.nodeType?li(e.parentNode,r):1===e.nodeType&&li(e,r),Vt(e)):li(cl,r.stateNode));break;case 4:n=cl,i=fl,cl=r.stateNode.containerInfo,fl=!0,hl(e,t,r),cl=n,fl=i;break;case 0:case 11:case 14:case 15:if(!Xs&&null!==(n=r.updateQueue)&&null!==(n=n.lastEffect)){i=n=n.next;do{var o=i,a=o.destroy;o=o.tag,void 0!==a&&(0!=(2&o)||0!=(4&o))&&el(r,t,a),i=i.next}while(i!==n)}hl(e,t,r);break;case 1:if(!Xs&&(Zs(r,t),"function"==typeof(n=r.stateNode).componentWillUnmount))try{n.props=r.memoizedProps,n.state=r.memoizedState,n.componentWillUnmount()}catch(e){_u(r,t,e)}hl(e,t,r);break;case 21:hl(e,t,r);break;case 22:1&r.mode?(Xs=(n=Xs)||null!==r.memoizedState,hl(e,t,r),Xs=n):hl(e,t,r);break;default:hl(e,t,r)}}function pl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var r=e.stateNode;null===r&&(r=e.stateNode=new Js),t.forEach((function(t){var n=Mu.bind(null,e,t);r.has(t)||(r.add(t),t.then(n,n))}))}}function ml(e,t){var r=t.deletions;if(null!==r)for(var n=0;n<r.length;n++){var i=r[n];try{var a=e,s=t,l=s;e:for(;null!==l;){switch(l.tag){case 5:cl=l.stateNode,fl=!1;break e;case 3:case 4:cl=l.stateNode.containerInfo,fl=!0;break e}l=l.return}if(null===cl)throw Error(o(160));dl(a,s,i),cl=null,fl=!1;var u=i.alternate;null!==u&&(u.return=null),i.return=null}catch(e){_u(i,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)gl(t,e),t=t.sibling}function gl(e,t){var r=e.alternate,n=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(ml(t,e),vl(e),4&n){try{rl(3,e,e.return),nl(3,e)}catch(t){_u(e,e.return,t)}try{rl(5,e,e.return)}catch(t){_u(e,e.return,t)}}break;case 1:ml(t,e),vl(e),512&n&&null!==r&&Zs(r,r.return);break;case 5:if(ml(t,e),vl(e),512&n&&null!==r&&Zs(r,r.return),32&e.flags){var i=e.stateNode;try{he(i,"")}catch(t){_u(e,e.return,t)}}if(4&n&&null!=(i=e.stateNode)){var a=e.memoizedProps,s=null!==r?r.memoizedProps:a,l=e.type,u=e.updateQueue;if(e.updateQueue=null,null!==u)try{"input"===l&&"radio"===a.type&&null!=a.name&&J(i,a),be(l,s);var c=be(l,a);for(s=0;s<u.length;s+=2){var f=u[s],h=u[s+1];"style"===f?ge(i,h):"dangerouslySetInnerHTML"===f?fe(i,h):"children"===f?he(i,h):b(i,f,h,c)}switch(l){case"input":Y(i,a);break;case"textarea":oe(i,a);break;case"select":var d=i._wrapperState.wasMultiple;i._wrapperState.wasMultiple=!!a.multiple;var p=a.value;null!=p?re(i,!!a.multiple,p,!1):d!==!!a.multiple&&(null!=a.defaultValue?re(i,!!a.multiple,a.defaultValue,!0):re(i,!!a.multiple,a.multiple?[]:"",!1))}i[di]=a}catch(t){_u(e,e.return,t)}}break;case 6:if(ml(t,e),vl(e),4&n){if(null===e.stateNode)throw Error(o(162));i=e.stateNode,a=e.memoizedProps;try{i.nodeValue=a}catch(t){_u(e,e.return,t)}}break;case 3:if(ml(t,e),vl(e),4&n&&null!==r&&r.memoizedState.isDehydrated)try{Vt(t.containerInfo)}catch(t){_u(e,e.return,t)}break;case 4:default:ml(t,e),vl(e);break;case 13:ml(t,e),vl(e),8192&(i=e.child).flags&&(a=null!==i.memoizedState,i.stateNode.isHidden=a,!a||null!==i.alternate&&null!==i.alternate.memoizedState||(jl=Je())),4&n&&pl(e);break;case 22:if(f=null!==r&&null!==r.memoizedState,1&e.mode?(Xs=(c=Xs)||f,ml(t,e),Xs=c):ml(t,e),vl(e),8192&n){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!f&&0!=(1&e.mode))for(Ys=e,f=e.child;null!==f;){for(h=Ys=f;null!==Ys;){switch(p=(d=Ys).child,d.tag){case 0:case 11:case 14:case 15:rl(4,d,d.return);break;case 1:Zs(d,d.return);var m=d.stateNode;if("function"==typeof m.componentWillUnmount){n=d,r=d.return;try{t=n,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){_u(n,r,e)}}break;case 5:Zs(d,d.return);break;case 22:if(null!==d.memoizedState){kl(h);continue}}null!==p?(p.return=d,Ys=p):kl(h)}f=f.sibling}e:for(f=null,h=e;;){if(5===h.tag){if(null===f){f=h;try{i=h.stateNode,c?"function"==typeof(a=i.style).setProperty?a.setProperty("display","none","important"):a.display="none":(l=h.stateNode,s=null!=(u=h.memoizedProps.style)&&u.hasOwnProperty("display")?u.display:null,l.style.display=me("display",s))}catch(t){_u(e,e.return,t)}}}else if(6===h.tag){if(null===f)try{h.stateNode.nodeValue=c?"":h.memoizedProps}catch(t){_u(e,e.return,t)}}else if((22!==h.tag&&23!==h.tag||null===h.memoizedState||h===e)&&null!==h.child){h.child.return=h,h=h.child;continue}if(h===e)break e;for(;null===h.sibling;){if(null===h.return||h.return===e)break e;f===h&&(f=null),h=h.return}f===h&&(f=null),h.sibling.return=h.return,h=h.sibling}}break;case 19:ml(t,e),vl(e),4&n&&pl(e);case 21:}}function vl(e){var t=e.flags;if(2&t){try{e:{for(var r=e.return;null!==r;){if(al(r)){var n=r;break e}r=r.return}throw Error(o(160))}switch(n.tag){case 5:var i=n.stateNode;32&n.flags&&(he(i,""),n.flags&=-33),ul(e,sl(e),i);break;case 3:case 4:var a=n.stateNode.containerInfo;ll(e,sl(e),a);break;default:throw Error(o(161))}}catch(t){_u(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function yl(e,t,r){Ys=e,bl(e,t,r)}function bl(e,t,r){for(var n=0!=(1&e.mode);null!==Ys;){var i=Ys,o=i.child;if(22===i.tag&&n){var a=null!==i.memoizedState||Qs;if(!a){var s=i.alternate,l=null!==s&&null!==s.memoizedState||Xs;s=Qs;var u=Xs;if(Qs=a,(Xs=l)&&!u)for(Ys=i;null!==Ys;)l=(a=Ys).child,22===a.tag&&null!==a.memoizedState?El(i):null!==l?(l.return=a,Ys=l):El(i);for(;null!==o;)Ys=o,bl(o,t,r),o=o.sibling;Ys=i,Qs=s,Xs=u}wl(e)}else 0!=(8772&i.subtreeFlags)&&null!==o?(o.return=i,Ys=o):wl(e)}}function wl(e){for(;null!==Ys;){var t=Ys;if(0!=(8772&t.flags)){var r=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Xs||nl(5,t);break;case 1:var n=t.stateNode;if(4&t.flags&&!Xs)if(null===r)n.componentDidMount();else{var i=t.elementType===t.type?r.memoizedProps:vo(t.type,r.memoizedProps);n.componentDidUpdate(i,r.memoizedState,n.__reactInternalSnapshotBeforeUpdate)}var a=t.updateQueue;null!==a&&Do(t,a,n);break;case 3:var s=t.updateQueue;if(null!==s){if(r=null,null!==t.child)switch(t.child.tag){case 5:case 1:r=t.child.stateNode}Do(t,s,r)}break;case 5:var l=t.stateNode;if(null===r&&4&t.flags){r=l;var u=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":u.autoFocus&&r.focus();break;case"img":u.src&&(r.src=u.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var f=c.memoizedState;if(null!==f){var h=f.dehydrated;null!==h&&Vt(h)}}}break;default:throw Error(o(163))}Xs||512&t.flags&&il(t)}catch(e){_u(t,t.return,e)}}if(t===e){Ys=null;break}if(null!==(r=t.sibling)){r.return=t.return,Ys=r;break}Ys=t.return}}function kl(e){for(;null!==Ys;){var t=Ys;if(t===e){Ys=null;break}var r=t.sibling;if(null!==r){r.return=t.return,Ys=r;break}Ys=t.return}}function El(e){for(;null!==Ys;){var t=Ys;try{switch(t.tag){case 0:case 11:case 15:var r=t.return;try{nl(4,t)}catch(e){_u(t,r,e)}break;case 1:var n=t.stateNode;if("function"==typeof n.componentDidMount){var i=t.return;try{n.componentDidMount()}catch(e){_u(t,i,e)}}var o=t.return;try{il(t)}catch(e){_u(t,o,e)}break;case 5:var a=t.return;try{il(t)}catch(e){_u(t,a,e)}}}catch(e){_u(t,t.return,e)}if(t===e){Ys=null;break}var s=t.sibling;if(null!==s){s.return=t.return,Ys=s;break}Ys=t.return}}var xl,_l=Math.ceil,Sl=w.ReactCurrentDispatcher,Pl=w.ReactCurrentOwner,Nl=w.ReactCurrentBatchConfig,Ml=0,Cl=null,Al=null,Fl=0,Rl=0,Il=_i(0),Tl=0,Ol=null,Ll=0,Bl=0,zl=0,Dl=null,Ul=null,jl=0,Vl=1/0,ql=null,$l=!1,Hl=null,Wl=null,Gl=!1,Kl=null,Ql=0,Xl=0,Jl=null,Yl=-1,Zl=0;function eu(){return 0!=(6&Ml)?Je():-1!==Yl?Yl:Yl=Je()}function tu(e){return 0==(1&e.mode)?1:0!=(2&Ml)&&0!==Fl?Fl&-Fl:null!==go.transition?(0===Zl&&(Zl=mt()),Zl):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Xt(e.type)}function ru(e,t,r,n){if(50<Xl)throw Xl=0,Jl=null,Error(o(185));vt(e,r,n),0!=(2&Ml)&&e===Cl||(e===Cl&&(0==(2&Ml)&&(Bl|=r),4===Tl&&su(e,Fl)),nu(e,n),1===r&&0===Ml&&0==(1&t.mode)&&(Vl=Je()+500,Di&&Vi()))}function nu(e,t){var r=e.callbackNode;!function(e,t){for(var r=e.suspendedLanes,n=e.pingedLanes,i=e.expirationTimes,o=e.pendingLanes;0<o;){var a=31-at(o),s=1<<a,l=i[a];-1===l?0!=(s&r)&&0==(s&n)||(i[a]=dt(s,t)):l<=t&&(e.expiredLanes|=s),o&=~s}}(e,t);var n=ht(e,e===Cl?Fl:0);if(0===n)null!==r&&Ke(r),e.callbackNode=null,e.callbackPriority=0;else if(t=n&-n,e.callbackPriority!==t){if(null!=r&&Ke(r),1===t)0===e.tag?function(e){Di=!0,ji(e)}(lu.bind(null,e)):ji(lu.bind(null,e)),ai((function(){0==(6&Ml)&&Vi()})),r=null;else{switch(wt(n)){case 1:r=Ze;break;case 4:r=et;break;case 16:default:r=tt;break;case 536870912:r=nt}r=Cu(r,iu.bind(null,e))}e.callbackPriority=t,e.callbackNode=r}}function iu(e,t){if(Yl=-1,Zl=0,0!=(6&Ml))throw Error(o(327));var r=e.callbackNode;if(Eu()&&e.callbackNode!==r)return null;var n=ht(e,e===Cl?Fl:0);if(0===n)return null;if(0!=(30&n)||0!=(n&e.expiredLanes)||t)t=gu(e,n);else{t=n;var i=Ml;Ml|=2;var a=pu();for(Cl===e&&Fl===t||(ql=null,Vl=Je()+500,hu(e,t));;)try{yu();break}catch(t){du(e,t)}Eo(),Sl.current=a,Ml=i,null!==Al?t=0:(Cl=null,Fl=0,t=Tl)}if(0!==t){if(2===t&&0!==(i=pt(e))&&(n=i,t=ou(e,i)),1===t)throw r=Ol,hu(e,0),su(e,n),nu(e,Je()),r;if(6===t)su(e,n);else{if(i=e.current.alternate,0==(30&n)&&!function(e){for(var t=e;;){if(16384&t.flags){var r=t.updateQueue;if(null!==r&&null!==(r=r.stores))for(var n=0;n<r.length;n++){var i=r[n],o=i.getSnapshot;i=i.value;try{if(!sn(o(),i))return!1}catch(e){return!1}}}if(r=t.child,16384&t.subtreeFlags&&null!==r)r.return=t,t=r;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(i)&&(2===(t=gu(e,n))&&0!==(a=pt(e))&&(n=a,t=ou(e,a)),1===t))throw r=Ol,hu(e,0),su(e,n),nu(e,Je()),r;switch(e.finishedWork=i,e.finishedLanes=n,t){case 0:case 1:throw Error(o(345));case 2:case 5:ku(e,Ul,ql);break;case 3:if(su(e,n),(130023424&n)===n&&10<(t=jl+500-Je())){if(0!==ht(e,0))break;if(((i=e.suspendedLanes)&n)!==n){eu(),e.pingedLanes|=e.suspendedLanes&i;break}e.timeoutHandle=ni(ku.bind(null,e,Ul,ql),t);break}ku(e,Ul,ql);break;case 4:if(su(e,n),(4194240&n)===n)break;for(t=e.eventTimes,i=-1;0<n;){var s=31-at(n);a=1<<s,(s=t[s])>i&&(i=s),n&=~a}if(n=i,10<(n=(120>(n=Je()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*_l(n/1960))-n)){e.timeoutHandle=ni(ku.bind(null,e,Ul,ql),n);break}ku(e,Ul,ql);break;default:throw Error(o(329))}}}return nu(e,Je()),e.callbackNode===r?iu.bind(null,e):null}function ou(e,t){var r=Dl;return e.current.memoizedState.isDehydrated&&(hu(e,t).flags|=256),2!==(e=gu(e,t))&&(t=Ul,Ul=r,null!==t&&au(t)),e}function au(e){null===Ul?Ul=e:Ul.push.apply(Ul,e)}function su(e,t){for(t&=~zl,t&=~Bl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var r=31-at(t),n=1<<r;e[r]=-1,t&=~n}}function lu(e){if(0!=(6&Ml))throw Error(o(327));Eu();var t=ht(e,0);if(0==(1&t))return nu(e,Je()),null;var r=gu(e,t);if(0!==e.tag&&2===r){var n=pt(e);0!==n&&(t=n,r=ou(e,n))}if(1===r)throw r=Ol,hu(e,0),su(e,t),nu(e,Je()),r;if(6===r)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,ku(e,Ul,ql),nu(e,Je()),null}function uu(e,t){var r=Ml;Ml|=1;try{return e(t)}finally{0===(Ml=r)&&(Vl=Je()+500,Di&&Vi())}}function cu(e){null!==Kl&&0===Kl.tag&&0==(6&Ml)&&Eu();var t=Ml;Ml|=1;var r=Nl.transition,n=bt;try{if(Nl.transition=null,bt=1,e)return e()}finally{bt=n,Nl.transition=r,0==(6&(Ml=t))&&Vi()}}function fu(){Rl=Il.current,Si(Il)}function hu(e,t){e.finishedWork=null,e.finishedLanes=0;var r=e.timeoutHandle;if(-1!==r&&(e.timeoutHandle=-1,ii(r)),null!==Al)for(r=Al.return;null!==r;){var n=r;switch(to(n),n.tag){case 1:null!=(n=n.type.childContextTypes)&&Ii();break;case 3:oa(),Si(Ci),Si(Mi),fa();break;case 5:sa(n);break;case 4:oa();break;case 13:case 19:Si(la);break;case 10:xo(n.type._context);break;case 22:case 23:fu()}r=r.return}if(Cl=e,Al=e=Iu(e.current,null),Fl=Rl=t,Tl=0,Ol=null,zl=Bl=Ll=0,Ul=Dl=null,null!==No){for(t=0;t<No.length;t++)if(null!==(n=(r=No[t]).interleaved)){r.interleaved=null;var i=n.next,o=r.pending;if(null!==o){var a=o.next;o.next=i,n.next=a}r.pending=n}No=null}return e}function du(e,t){for(;;){var r=Al;try{if(Eo(),ha.current=as,ya){for(var n=ma.memoizedState;null!==n;){var i=n.queue;null!==i&&(i.pending=null),n=n.next}ya=!1}if(pa=0,va=ga=ma=null,ba=!1,wa=0,Pl.current=null,null===r||null===r.return){Tl=1,Ol=t,Al=null;break}e:{var a=e,s=r.return,l=r,u=t;if(t=Fl,l.flags|=32768,null!==u&&"object"==typeof u&&"function"==typeof u.then){var c=u,f=l,h=f.tag;if(0==(1&f.mode)&&(0===h||11===h||15===h)){var d=f.alternate;d?(f.updateQueue=d.updateQueue,f.memoizedState=d.memoizedState,f.lanes=d.lanes):(f.updateQueue=null,f.memoizedState=null)}var p=vs(s);if(null!==p){p.flags&=-257,ys(p,s,l,0,t),1&p.mode&&gs(a,c,t),u=c;var m=(t=p).updateQueue;if(null===m){var g=new Set;g.add(u),t.updateQueue=g}else m.add(u);break e}if(0==(1&t)){gs(a,c,t),mu();break e}u=Error(o(426))}else if(io&&1&l.mode){var v=vs(s);if(null!==v){0==(65536&v.flags)&&(v.flags|=256),ys(v,s,l,0,t),mo(cs(u,l));break e}}a=u=cs(u,l),4!==Tl&&(Tl=2),null===Dl?Dl=[a]:Dl.push(a),a=s;do{switch(a.tag){case 3:a.flags|=65536,t&=-t,a.lanes|=t,Bo(a,ps(0,u,t));break e;case 1:l=u;var y=a.type,b=a.stateNode;if(0==(128&a.flags)&&("function"==typeof y.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Wl||!Wl.has(b)))){a.flags|=65536,t&=-t,a.lanes|=t,Bo(a,ms(a,l,t));break e}}a=a.return}while(null!==a)}wu(r)}catch(e){t=e,Al===r&&null!==r&&(Al=r=r.return);continue}break}}function pu(){var e=Sl.current;return Sl.current=as,null===e?as:e}function mu(){0!==Tl&&3!==Tl&&2!==Tl||(Tl=4),null===Cl||0==(268435455&Ll)&&0==(268435455&Bl)||su(Cl,Fl)}function gu(e,t){var r=Ml;Ml|=2;var n=pu();for(Cl===e&&Fl===t||(ql=null,hu(e,t));;)try{vu();break}catch(t){du(e,t)}if(Eo(),Ml=r,Sl.current=n,null!==Al)throw Error(o(261));return Cl=null,Fl=0,Tl}function vu(){for(;null!==Al;)bu(Al)}function yu(){for(;null!==Al&&!Qe();)bu(Al)}function bu(e){var t=xl(e.alternate,e,Rl);e.memoizedProps=e.pendingProps,null===t?wu(e):Al=t,Pl.current=null}function wu(e){var t=e;do{var r=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(r=Gs(r,t,Rl)))return void(Al=r)}else{if(null!==(r=Ks(r,t)))return r.flags&=32767,void(Al=r);if(null===e)return Tl=6,void(Al=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Al=t);Al=t=e}while(null!==t);0===Tl&&(Tl=5)}function ku(e,t,r){var n=bt,i=Nl.transition;try{Nl.transition=null,bt=1,function(e,t,r,n){do{Eu()}while(null!==Kl);if(0!=(6&Ml))throw Error(o(327));r=e.finishedWork;var i=e.finishedLanes;if(null===r)return null;if(e.finishedWork=null,e.finishedLanes=0,r===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var a=r.lanes|r.childLanes;if(function(e,t){var r=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var n=e.eventTimes;for(e=e.expirationTimes;0<r;){var i=31-at(r),o=1<<i;t[i]=0,n[i]=-1,e[i]=-1,r&=~o}}(e,a),e===Cl&&(Al=Cl=null,Fl=0),0==(2064&r.subtreeFlags)&&0==(2064&r.flags)||Gl||(Gl=!0,Cu(tt,(function(){return Eu(),null}))),a=0!=(15990&r.flags),0!=(15990&r.subtreeFlags)||a){a=Nl.transition,Nl.transition=null;var s=bt;bt=1;var l=Ml;Ml|=4,Pl.current=null,function(e,t){if(ei=$t,dn(e=hn())){if("selectionStart"in e)var r={start:e.selectionStart,end:e.selectionEnd};else e:{var n=(r=(r=e.ownerDocument)&&r.defaultView||window).getSelection&&r.getSelection();if(n&&0!==n.rangeCount){r=n.anchorNode;var i=n.anchorOffset,a=n.focusNode;n=n.focusOffset;try{r.nodeType,a.nodeType}catch(e){r=null;break e}var s=0,l=-1,u=-1,c=0,f=0,h=e,d=null;t:for(;;){for(var p;h!==r||0!==i&&3!==h.nodeType||(l=s+i),h!==a||0!==n&&3!==h.nodeType||(u=s+n),3===h.nodeType&&(s+=h.nodeValue.length),null!==(p=h.firstChild);)d=h,h=p;for(;;){if(h===e)break t;if(d===r&&++c===i&&(l=s),d===a&&++f===n&&(u=s),null!==(p=h.nextSibling))break;d=(h=d).parentNode}h=p}r=-1===l||-1===u?null:{start:l,end:u}}else r=null}r=r||{start:0,end:0}}else r=null;for(ti={focusedElem:e,selectionRange:r},$t=!1,Ys=t;null!==Ys;)if(e=(t=Ys).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Ys=e;else for(;null!==Ys;){t=Ys;try{var m=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var g=m.memoizedProps,v=m.memoizedState,y=t.stateNode,b=y.getSnapshotBeforeUpdate(t.elementType===t.type?g:vo(t.type,g),v);y.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=t.stateNode.containerInfo;1===w.nodeType?w.textContent="":9===w.nodeType&&w.documentElement&&w.removeChild(w.documentElement);break;default:throw Error(o(163))}}catch(e){_u(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Ys=e;break}Ys=t.return}m=tl,tl=!1}(e,r),gl(r,e),pn(ti),$t=!!ei,ti=ei=null,e.current=r,yl(r,e,i),Xe(),Ml=l,bt=s,Nl.transition=a}else e.current=r;if(Gl&&(Gl=!1,Kl=e,Ql=i),0===(a=e.pendingLanes)&&(Wl=null),function(e){if(ot&&"function"==typeof ot.onCommitFiberRoot)try{ot.onCommitFiberRoot(it,e,void 0,128==(128&e.current.flags))}catch(e){}}(r.stateNode),nu(e,Je()),null!==t)for(n=e.onRecoverableError,r=0;r<t.length;r++)n((i=t[r]).value,{componentStack:i.stack,digest:i.digest});if($l)throw $l=!1,e=Hl,Hl=null,e;0!=(1&Ql)&&0!==e.tag&&Eu(),0!=(1&(a=e.pendingLanes))?e===Jl?Xl++:(Xl=0,Jl=e):Xl=0,Vi()}(e,t,r,n)}finally{Nl.transition=i,bt=n}return null}function Eu(){if(null!==Kl){var e=wt(Ql),t=Nl.transition,r=bt;try{if(Nl.transition=null,bt=16>e?16:e,null===Kl)var n=!1;else{if(e=Kl,Kl=null,Ql=0,0!=(6&Ml))throw Error(o(331));var i=Ml;for(Ml|=4,Ys=e.current;null!==Ys;){var a=Ys,s=a.child;if(0!=(16&Ys.flags)){var l=a.deletions;if(null!==l){for(var u=0;u<l.length;u++){var c=l[u];for(Ys=c;null!==Ys;){var f=Ys;switch(f.tag){case 0:case 11:case 15:rl(8,f,a)}var h=f.child;if(null!==h)h.return=f,Ys=h;else for(;null!==Ys;){var d=(f=Ys).sibling,p=f.return;if(ol(f),f===c){Ys=null;break}if(null!==d){d.return=p,Ys=d;break}Ys=p}}}var m=a.alternate;if(null!==m){var g=m.child;if(null!==g){m.child=null;do{var v=g.sibling;g.sibling=null,g=v}while(null!==g)}}Ys=a}}if(0!=(2064&a.subtreeFlags)&&null!==s)s.return=a,Ys=s;else e:for(;null!==Ys;){if(0!=(2048&(a=Ys).flags))switch(a.tag){case 0:case 11:case 15:rl(9,a,a.return)}var y=a.sibling;if(null!==y){y.return=a.return,Ys=y;break e}Ys=a.return}}var b=e.current;for(Ys=b;null!==Ys;){var w=(s=Ys).child;if(0!=(2064&s.subtreeFlags)&&null!==w)w.return=s,Ys=w;else e:for(s=b;null!==Ys;){if(0!=(2048&(l=Ys).flags))try{switch(l.tag){case 0:case 11:case 15:nl(9,l)}}catch(e){_u(l,l.return,e)}if(l===s){Ys=null;break e}var k=l.sibling;if(null!==k){k.return=l.return,Ys=k;break e}Ys=l.return}}if(Ml=i,Vi(),ot&&"function"==typeof ot.onPostCommitFiberRoot)try{ot.onPostCommitFiberRoot(it,e)}catch(e){}n=!0}return n}finally{bt=r,Nl.transition=t}}return!1}function xu(e,t,r){e=Oo(e,t=ps(0,t=cs(r,t),1),1),t=eu(),null!==e&&(vt(e,1,t),nu(e,t))}function _u(e,t,r){if(3===e.tag)xu(e,e,r);else for(;null!==t;){if(3===t.tag){xu(t,e,r);break}if(1===t.tag){var n=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof n.componentDidCatch&&(null===Wl||!Wl.has(n))){t=Oo(t,e=ms(t,e=cs(r,e),1),1),e=eu(),null!==t&&(vt(t,1,e),nu(t,e));break}}t=t.return}}function Su(e,t,r){var n=e.pingCache;null!==n&&n.delete(t),t=eu(),e.pingedLanes|=e.suspendedLanes&r,Cl===e&&(Fl&r)===r&&(4===Tl||3===Tl&&(130023424&Fl)===Fl&&500>Je()-jl?hu(e,0):zl|=r),nu(e,t)}function Pu(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var r=eu();null!==(e=Ao(e,t))&&(vt(e,t,r),nu(e,r))}function Nu(e){var t=e.memoizedState,r=0;null!==t&&(r=t.retryLane),Pu(e,r)}function Mu(e,t){var r=0;switch(e.tag){case 13:var n=e.stateNode,i=e.memoizedState;null!==i&&(r=i.retryLane);break;case 19:n=e.stateNode;break;default:throw Error(o(314))}null!==n&&n.delete(t),Pu(e,r)}function Cu(e,t){return Ge(e,t)}function Au(e,t,r,n){this.tag=e,this.key=r,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=n,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Fu(e,t,r,n){return new Au(e,t,r,n)}function Ru(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Iu(e,t){var r=e.alternate;return null===r?((r=Fu(e.tag,t,e.key,e.mode)).elementType=e.elementType,r.type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.type=e.type,r.flags=0,r.subtreeFlags=0,r.deletions=null),r.flags=14680064&e.flags,r.childLanes=e.childLanes,r.lanes=e.lanes,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,t=e.dependencies,r.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function Tu(e,t,r,n,i,a){var s=2;if(n=e,"function"==typeof e)Ru(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case x:return Ou(r.children,i,a,t);case _:s=8,i|=8;break;case S:return(e=Fu(12,r,t,2|i)).elementType=S,e.lanes=a,e;case C:return(e=Fu(13,r,t,i)).elementType=C,e.lanes=a,e;case A:return(e=Fu(19,r,t,i)).elementType=A,e.lanes=a,e;case I:return Lu(r,i,a,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case P:s=10;break e;case N:s=9;break e;case M:s=11;break e;case F:s=14;break e;case R:s=16,n=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Fu(s,r,t,i)).elementType=e,t.type=n,t.lanes=a,t}function Ou(e,t,r,n){return(e=Fu(7,e,n,t)).lanes=r,e}function Lu(e,t,r,n){return(e=Fu(22,e,n,t)).elementType=I,e.lanes=r,e.stateNode={isHidden:!1},e}function Bu(e,t,r){return(e=Fu(6,e,null,t)).lanes=r,e}function zu(e,t,r){return(t=Fu(4,null!==e.children?e.children:[],e.key,t)).lanes=r,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Du(e,t,r,n,i){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gt(0),this.expirationTimes=gt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gt(0),this.identifierPrefix=n,this.onRecoverableError=i,this.mutableSourceEagerHydrationData=null}function Uu(e,t,r,n,i,o,a,s,l){return e=new Du(e,t,r,s,l),1===t?(t=1,!0===o&&(t|=8)):t=0,o=Fu(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:n,isDehydrated:r,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ro(o),e}function ju(e,t,r){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:E,key:null==n?null:""+n,children:e,containerInfo:t,implementation:r}}function Vu(e){if(!e)return Ni;e:{if(Ve(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Ri(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(o(171))}if(1===e.tag){var r=e.type;if(Ri(r))return Oi(e,r,t)}return t}function qu(e,t,r,n,i,o,a,s,l){return(e=Uu(r,n,!0,e,0,o,0,s,l)).context=Vu(null),r=e.current,(o=To(n=eu(),i=tu(r))).callback=null!=t?t:null,Oo(r,o,i),e.current.lanes=i,vt(e,i,n),nu(e,n),e}function $u(e,t,r,n){var i=t.current,o=eu(),a=tu(i);return r=Vu(r),null===t.context?t.context=r:t.pendingContext=r,(t=To(o,a)).payload={element:e},null!==(n=void 0===n?null:n)&&(t.callback=n),null!==(e=Oo(i,t,a))&&(ru(e,i,a,o),Lo(e,i,a)),a}function Hu(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Wu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var r=e.retryLane;e.retryLane=0!==r&&r<t?r:t}}function Gu(e,t){Wu(e,t),(e=e.alternate)&&Wu(e,t)}xl=function(e,t,r){if(null!==e)if(e.memoizedProps!==t.pendingProps||Ci.current)ws=!0;else{if(0==(e.lanes&r)&&0==(128&t.flags))return ws=!1,function(e,t,r){switch(t.tag){case 3:As(t),po();break;case 5:aa(t);break;case 1:Ri(t.type)&&Li(t);break;case 4:ia(t,t.stateNode.containerInfo);break;case 10:var n=t.type._context,i=t.memoizedProps.value;Pi(yo,n._currentValue),n._currentValue=i;break;case 13:if(null!==(n=t.memoizedState))return null!==n.dehydrated?(Pi(la,1&la.current),t.flags|=128,null):0!=(r&t.child.childLanes)?Bs(e,t,r):(Pi(la,1&la.current),null!==(e=$s(e,t,r))?e.sibling:null);Pi(la,1&la.current);break;case 19:if(n=0!=(r&t.childLanes),0!=(128&e.flags)){if(n)return Vs(e,t,r);t.flags|=128}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null,i.lastEffect=null),Pi(la,la.current),n)break;return null;case 22:case 23:return t.lanes=0,Ss(e,t,r)}return $s(e,t,r)}(e,t,r);ws=0!=(131072&e.flags)}else ws=!1,io&&0!=(1048576&t.flags)&&Zi(t,Wi,t.index);switch(t.lanes=0,t.tag){case 2:var n=t.type;qs(e,t),e=t.pendingProps;var i=Fi(t,Mi.current);So(t,r),i=_a(null,t,n,e,i,r);var a=Sa();return t.flags|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Ri(n)?(a=!0,Li(t)):a=!1,t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,Ro(t),i.updater=Vo,t.stateNode=i,i._reactInternals=t,Wo(t,n,e,r),t=Cs(null,t,n,!0,a,r)):(t.tag=0,io&&a&&eo(t),ks(null,t,i,r),t=t.child),t;case 16:n=t.elementType;e:{switch(qs(e,t),e=t.pendingProps,n=(i=n._init)(n._payload),t.type=n,i=t.tag=function(e){if("function"==typeof e)return Ru(e)?1:0;if(null!=e){if((e=e.$$typeof)===M)return 11;if(e===F)return 14}return 2}(n),e=vo(n,e),i){case 0:t=Ns(null,t,n,e,r);break e;case 1:t=Ms(null,t,n,e,r);break e;case 11:t=Es(null,t,n,e,r);break e;case 14:t=xs(null,t,n,vo(n.type,e),r);break e}throw Error(o(306,n,""))}return t;case 0:return n=t.type,i=t.pendingProps,Ns(e,t,n,i=t.elementType===n?i:vo(n,i),r);case 1:return n=t.type,i=t.pendingProps,Ms(e,t,n,i=t.elementType===n?i:vo(n,i),r);case 3:e:{if(As(t),null===e)throw Error(o(387));n=t.pendingProps,i=(a=t.memoizedState).element,Io(e,t),zo(t,n,null,r);var s=t.memoizedState;if(n=s.element,a.isDehydrated){if(a={element:n,isDehydrated:!1,cache:s.cache,pendingSuspenseBoundaries:s.pendingSuspenseBoundaries,transitions:s.transitions},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=Fs(e,t,n,r,i=cs(Error(o(423)),t));break e}if(n!==i){t=Fs(e,t,n,r,i=cs(Error(o(424)),t));break e}for(no=ui(t.stateNode.containerInfo.firstChild),ro=t,io=!0,oo=null,r=Yo(t,null,n,r),t.child=r;r;)r.flags=-3&r.flags|4096,r=r.sibling}else{if(po(),n===i){t=$s(e,t,r);break e}ks(e,t,n,r)}t=t.child}return t;case 5:return aa(t),null===e&&uo(t),n=t.type,i=t.pendingProps,a=null!==e?e.memoizedProps:null,s=i.children,ri(n,i)?s=null:null!==a&&ri(n,a)&&(t.flags|=32),Ps(e,t),ks(e,t,s,r),t.child;case 6:return null===e&&uo(t),null;case 13:return Bs(e,t,r);case 4:return ia(t,t.stateNode.containerInfo),n=t.pendingProps,null===e?t.child=Jo(t,null,n,r):ks(e,t,n,r),t.child;case 11:return n=t.type,i=t.pendingProps,Es(e,t,n,i=t.elementType===n?i:vo(n,i),r);case 7:return ks(e,t,t.pendingProps,r),t.child;case 8:case 12:return ks(e,t,t.pendingProps.children,r),t.child;case 10:e:{if(n=t.type._context,i=t.pendingProps,a=t.memoizedProps,s=i.value,Pi(yo,n._currentValue),n._currentValue=s,null!==a)if(sn(a.value,s)){if(a.children===i.children&&!Ci.current){t=$s(e,t,r);break e}}else for(null!==(a=t.child)&&(a.return=t);null!==a;){var l=a.dependencies;if(null!==l){s=a.child;for(var u=l.firstContext;null!==u;){if(u.context===n){if(1===a.tag){(u=To(-1,r&-r)).tag=2;var c=a.updateQueue;if(null!==c){var f=(c=c.shared).pending;null===f?u.next=u:(u.next=f.next,f.next=u),c.pending=u}}a.lanes|=r,null!==(u=a.alternate)&&(u.lanes|=r),_o(a.return,r,t),l.lanes|=r;break}u=u.next}}else if(10===a.tag)s=a.type===t.type?null:a.child;else if(18===a.tag){if(null===(s=a.return))throw Error(o(341));s.lanes|=r,null!==(l=s.alternate)&&(l.lanes|=r),_o(s,r,t),s=a.sibling}else s=a.child;if(null!==s)s.return=a;else for(s=a;null!==s;){if(s===t){s=null;break}if(null!==(a=s.sibling)){a.return=s.return,s=a;break}s=s.return}a=s}ks(e,t,i.children,r),t=t.child}return t;case 9:return i=t.type,n=t.pendingProps.children,So(t,r),n=n(i=Po(i)),t.flags|=1,ks(e,t,n,r),t.child;case 14:return i=vo(n=t.type,t.pendingProps),xs(e,t,n,i=vo(n.type,i),r);case 15:return _s(e,t,t.type,t.pendingProps,r);case 17:return n=t.type,i=t.pendingProps,i=t.elementType===n?i:vo(n,i),qs(e,t),t.tag=1,Ri(n)?(e=!0,Li(t)):e=!1,So(t,r),$o(t,n,i),Wo(t,n,i,r),Cs(null,t,n,!0,e,r);case 19:return Vs(e,t,r);case 22:return Ss(e,t,r)}throw Error(o(156,t.tag))};var Ku="function"==typeof reportError?reportError:function(e){console.error(e)};function Qu(e){this._internalRoot=e}function Xu(e){this._internalRoot=e}function Ju(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Yu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zu(){}function ec(e,t,r,n,i){var o=r._reactRootContainer;if(o){var a=o;if("function"==typeof i){var s=i;i=function(){var e=Hu(a);s.call(e)}}$u(t,a,e,i)}else a=function(e,t,r,n,i){if(i){if("function"==typeof n){var o=n;n=function(){var e=Hu(a);o.call(e)}}var a=qu(t,n,e,0,null,!1,0,"",Zu);return e._reactRootContainer=a,e[pi]=a.current,Vn(8===e.nodeType?e.parentNode:e),cu(),a}for(;i=e.lastChild;)e.removeChild(i);if("function"==typeof n){var s=n;n=function(){var e=Hu(l);s.call(e)}}var l=Uu(e,0,!1,null,0,!1,0,"",Zu);return e._reactRootContainer=l,e[pi]=l.current,Vn(8===e.nodeType?e.parentNode:e),cu((function(){$u(t,l,r,n)})),l}(r,t,e,i,n);return Hu(a)}Xu.prototype.render=Qu.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));$u(e,t,null,null)},Xu.prototype.unmount=Qu.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;cu((function(){$u(null,e,null,null)})),t[pi]=null}},Xu.prototype.unstable_scheduleHydration=function(e){if(e){var t=_t();e={blockedOn:null,target:e,priority:t};for(var r=0;r<It.length&&0!==t&&t<It[r].priority;r++);It.splice(r,0,e),0===r&&Bt(e)}},kt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var r=ft(t.pendingLanes);0!==r&&(yt(t,1|r),nu(t,Je()),0==(6&Ml)&&(Vl=Je()+500,Vi()))}break;case 13:cu((function(){var t=Ao(e,1);if(null!==t){var r=eu();ru(t,e,1,r)}})),Gu(e,1)}},Et=function(e){if(13===e.tag){var t=Ao(e,134217728);null!==t&&ru(t,e,134217728,eu()),Gu(e,134217728)}},xt=function(e){if(13===e.tag){var t=tu(e),r=Ao(e,t);null!==r&&ru(r,e,t,eu()),Gu(e,t)}},_t=function(){return bt},St=function(e,t){var r=bt;try{return bt=e,t()}finally{bt=r}},Ee=function(e,t,r){switch(t){case"input":if(Y(e,r),t=r.name,"radio"===r.type&&null!=t){for(r=e;r.parentNode;)r=r.parentNode;for(r=r.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<r.length;t++){var n=r[t];if(n!==e&&n.form===e.form){var i=ki(n);if(!i)throw Error(o(90));G(n),Y(n,i)}}}break;case"textarea":oe(e,r);break;case"select":null!=(t=r.value)&&re(e,!!r.multiple,t,!1)}},Me=uu,Ce=cu;var tc={usingClientEntryPoint:!1,Events:[bi,wi,ki,Pe,Ne,uu]},rc={findFiberByHostInstance:yi,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},nc={bundleType:rc.bundleType,version:rc.version,rendererPackageName:rc.rendererPackageName,rendererConfig:rc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=He(e))?null:e.stateNode},findFiberByHostInstance:rc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ic=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ic.isDisabled&&ic.supportsFiber)try{it=ic.inject(nc),ot=ic}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tc,t.createPortal=function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Ju(t))throw Error(o(200));return ju(e,t,null,r)},t.createRoot=function(e,t){if(!Ju(e))throw Error(o(299));var r=!1,n="",i=Ku;return null!=t&&(!0===t.unstable_strictMode&&(r=!0),void 0!==t.identifierPrefix&&(n=t.identifierPrefix),void 0!==t.onRecoverableError&&(i=t.onRecoverableError)),t=Uu(e,1,!1,null,0,r,0,n,i),e[pi]=t.current,Vn(8===e.nodeType?e.parentNode:e),new Qu(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=He(t))?null:e.stateNode},t.flushSync=function(e){return cu(e)},t.hydrate=function(e,t,r){if(!Yu(t))throw Error(o(200));return ec(null,e,t,!0,r)},t.hydrateRoot=function(e,t,r){if(!Ju(e))throw Error(o(405));var n=null!=r&&r.hydratedSources||null,i=!1,a="",s=Ku;if(null!=r&&(!0===r.unstable_strictMode&&(i=!0),void 0!==r.identifierPrefix&&(a=r.identifierPrefix),void 0!==r.onRecoverableError&&(s=r.onRecoverableError)),t=qu(t,null,e,1,null!=r?r:null,i,0,a,s),e[pi]=t.current,Vn(e),n)for(e=0;e<n.length;e++)i=(i=(r=n[e])._getVersion)(r._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[r,i]:t.mutableSourceEagerHydrationData.push(r,i);return new Xu(t)},t.render=function(e,t,r){if(!Yu(t))throw Error(o(200));return ec(null,e,t,!1,r)},t.unmountComponentAtNode=function(e){if(!Yu(e))throw Error(o(40));return!!e._reactRootContainer&&(cu((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[pi]=null}))})),!0)},t.unstable_batchedUpdates=uu,t.unstable_renderSubtreeIntoContainer=function(e,t,r,n){if(!Yu(r))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return ec(e,t,r,!1,n)},t.version="18.2.0-next-9e3b772b8-20220608"},935:(e,t,r)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=r(448)},921:(e,t)=>{"use strict";var r="function"==typeof Symbol&&Symbol.for,n=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,o=r?Symbol.for("react.fragment"):60107,a=r?Symbol.for("react.strict_mode"):60108,s=r?Symbol.for("react.profiler"):60114,l=r?Symbol.for("react.provider"):60109,u=r?Symbol.for("react.context"):60110,c=r?Symbol.for("react.async_mode"):60111,f=r?Symbol.for("react.concurrent_mode"):60111,h=r?Symbol.for("react.forward_ref"):60112,d=r?Symbol.for("react.suspense"):60113,p=(r&&Symbol.for("react.suspense_list"),r?Symbol.for("react.memo"):60115),m=r?Symbol.for("react.lazy"):60116;r&&Symbol.for("react.block"),r&&Symbol.for("react.fundamental"),r&&Symbol.for("react.responder"),r&&Symbol.for("react.scope");function g(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case n:switch(e=e.type){case c:case f:case o:case s:case a:case d:return e;default:switch(e=e&&e.$$typeof){case u:case h:case m:case p:case l:return e;default:return t}}case i:return t}}}t.isFragment=function(e){return g(e)===o},t.isMemo=function(e){return g(e)===p}},864:(e,t,r)=>{"use strict";e.exports=r(921)},408:(e,t)=>{"use strict";var r=Symbol.for("react.element"),n=Symbol.for("react.portal"),i=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler"),s=Symbol.for("react.provider"),l=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),h=Symbol.for("react.lazy"),d=Symbol.iterator,p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,g={};function v(e,t,r){this.props=e,this.context=t,this.refs=g,this.updater=r||p}function y(){}function b(e,t,r){this.props=e,this.context=t,this.refs=g,this.updater=r||p}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=v.prototype;var w=b.prototype=new y;w.constructor=b,m(w,v.prototype),w.isPureReactComponent=!0;var k=Array.isArray,E=Object.prototype.hasOwnProperty,x={current:null},_={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,n){var i,o={},a=null,s=null;if(null!=t)for(i in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(a=""+t.key),t)E.call(t,i)&&!_.hasOwnProperty(i)&&(o[i]=t[i]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var u=Array(l),c=0;c<l;c++)u[c]=arguments[c+2];o.children=u}if(e&&e.defaultProps)for(i in l=e.defaultProps)void 0===o[i]&&(o[i]=l[i]);return{$$typeof:r,type:e,key:a,ref:s,props:o,_owner:x.current}}function P(e){return"object"==typeof e&&null!==e&&e.$$typeof===r}var N=/\/+/g;function M(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function C(e,t,i,o,a){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case r:case n:l=!0}}if(l)return a=a(l=e),e=""===o?"."+M(l,0):o,k(a)?(i="",null!=e&&(i=e.replace(N,"$&/")+"/"),C(a,t,i,"",(function(e){return e}))):null!=a&&(P(a)&&(a=function(e,t){return{$$typeof:r,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,i+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(N,"$&/")+"/")+e)),t.push(a)),1;if(l=0,o=""===o?".":o+":",k(e))for(var u=0;u<e.length;u++){var c=o+M(s=e[u],u);l+=C(s,t,i,c,a)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(s=e.next()).done;)l+=C(s=s.value,t,i,c=o+M(s,u++),a);else if("object"===s)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return l}function A(e,t,r){if(null==e)return e;var n=[],i=0;return C(e,n,"","",(function(e){return t.call(r,e,i++)})),n}function F(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var R={current:null},I={transition:null},T={ReactCurrentDispatcher:R,ReactCurrentBatchConfig:I,ReactCurrentOwner:x};t.Children={map:A,forEach:function(e,t,r){A(e,(function(){t.apply(this,arguments)}),r)},count:function(e){var t=0;return A(e,(function(){t++})),t},toArray:function(e){return A(e,(function(e){return e}))||[]},only:function(e){if(!P(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=i,t.Profiler=a,t.PureComponent=b,t.StrictMode=o,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=T,t.cloneElement=function(e,t,n){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var i=m({},e.props),o=e.key,a=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(a=t.ref,s=x.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(u in t)E.call(t,u)&&!_.hasOwnProperty(u)&&(i[u]=void 0===t[u]&&void 0!==l?l[u]:t[u])}var u=arguments.length-2;if(1===u)i.children=n;else if(1<u){l=Array(u);for(var c=0;c<u;c++)l[c]=arguments[c+2];i.children=l}return{$$typeof:r,type:e.type,key:o,ref:a,props:i,_owner:s}},t.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=S,t.createFactory=function(e){var t=S.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=P,t.lazy=function(e){return{$$typeof:h,_payload:{_status:-1,_result:e},_init:F}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=I.transition;I.transition={};try{e()}finally{I.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return R.current.useCallback(e,t)},t.useContext=function(e){return R.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return R.current.useDeferredValue(e)},t.useEffect=function(e,t){return R.current.useEffect(e,t)},t.useId=function(){return R.current.useId()},t.useImperativeHandle=function(e,t,r){return R.current.useImperativeHandle(e,t,r)},t.useInsertionEffect=function(e,t){return R.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return R.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return R.current.useMemo(e,t)},t.useReducer=function(e,t,r){return R.current.useReducer(e,t,r)},t.useRef=function(e){return R.current.useRef(e)},t.useState=function(e){return R.current.useState(e)},t.useSyncExternalStore=function(e,t,r){return R.current.useSyncExternalStore(e,t,r)},t.useTransition=function(){return R.current.useTransition()},t.version="18.2.0"},294:(e,t,r)=>{"use strict";e.exports=r(408)},53:(e,t)=>{"use strict";function r(e,t){var r=e.length;e.push(t);e:for(;0<r;){var n=r-1>>>1,i=e[n];if(!(0<o(i,t)))break e;e[n]=t,e[r]=i,r=n}}function n(e){return 0===e.length?null:e[0]}function i(e){if(0===e.length)return null;var t=e[0],r=e.pop();if(r!==t){e[0]=r;e:for(var n=0,i=e.length,a=i>>>1;n<a;){var s=2*(n+1)-1,l=e[s],u=s+1,c=e[u];if(0>o(l,r))u<i&&0>o(c,l)?(e[n]=c,e[u]=r,n=u):(e[n]=l,e[s]=r,n=s);else{if(!(u<i&&0>o(c,r)))break e;e[n]=c,e[u]=r,n=u}}}return t}function o(e,t){var r=e.sortIndex-t.sortIndex;return 0!==r?r:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var s=Date,l=s.now();t.unstable_now=function(){return s.now()-l}}var u=[],c=[],f=1,h=null,d=3,p=!1,m=!1,g=!1,v="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=n(c);null!==t;){if(null===t.callback)i(c);else{if(!(t.startTime<=e))break;i(c),t.sortIndex=t.expirationTime,r(u,t)}t=n(c)}}function k(e){if(g=!1,w(e),!m)if(null!==n(u))m=!0,I(E);else{var t=n(c);null!==t&&T(k,t.startTime-e)}}function E(e,r){m=!1,g&&(g=!1,y(P),P=-1),p=!0;var o=d;try{for(w(r),h=n(u);null!==h&&(!(h.expirationTime>r)||e&&!C());){var a=h.callback;if("function"==typeof a){h.callback=null,d=h.priorityLevel;var s=a(h.expirationTime<=r);r=t.unstable_now(),"function"==typeof s?h.callback=s:h===n(u)&&i(u),w(r)}else i(u);h=n(u)}if(null!==h)var l=!0;else{var f=n(c);null!==f&&T(k,f.startTime-r),l=!1}return l}finally{h=null,d=o,p=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var x,_=!1,S=null,P=-1,N=5,M=-1;function C(){return!(t.unstable_now()-M<N)}function A(){if(null!==S){var e=t.unstable_now();M=e;var r=!0;try{r=S(!0,e)}finally{r?x():(_=!1,S=null)}}else _=!1}if("function"==typeof b)x=function(){b(A)};else if("undefined"!=typeof MessageChannel){var F=new MessageChannel,R=F.port2;F.port1.onmessage=A,x=function(){R.postMessage(null)}}else x=function(){v(A,0)};function I(e){S=e,_||(_=!0,x())}function T(e,r){P=v((function(){e(t.unstable_now())}),r)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||p||(m=!0,I(E))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):N=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return d},t.unstable_getFirstCallbackNode=function(){return n(u)},t.unstable_next=function(e){switch(d){case 1:case 2:case 3:var t=3;break;default:t=d}var r=d;d=t;try{return e()}finally{d=r}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=d;d=e;try{return t()}finally{d=r}},t.unstable_scheduleCallback=function(e,i,o){var a=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?a+o:a,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:f++,callback:i,priorityLevel:e,startTime:o,expirationTime:s=o+s,sortIndex:-1},o>a?(e.sortIndex=o,r(c,e),null===n(u)&&e===n(c)&&(g?(y(P),P=-1):g=!0,T(k,o-a))):(e.sortIndex=s,r(u,e),m||p||(m=!0,I(E))),e},t.unstable_shouldYield=C,t.unstable_wrapCallback=function(e){var t=d;return function(){var r=d;d=t;try{return e.apply(this,arguments)}finally{d=r}}}},840:(e,t,r)=>{"use strict";e.exports=r(53)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,