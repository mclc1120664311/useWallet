/*! For license information please see chunk.js.LICENSE.txt */
(self.webpackChunkcosDesign=self.webpackChunkcosDesign||[]).push([[284],{591:(t,e,r)=>{var n=r(8).default;function i(){"use strict";t.exports=i=function(){return e},t.exports.__esModule=!0,t.exports.default=t.exports;var e={},r=Object.prototype,o=r.hasOwnProperty,s="function"==typeof Symbol?Symbol:{},a=s.iterator||"@@iterator",u=s.asyncIterator||"@@asyncIterator",l=s.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function f(t,e,r,n){var i=e&&e.prototype instanceof p?e:p,o=Object.create(i.prototype),s=new A(n||[]);return o._invoke=function(t,e,r){var n="suspendedStart";return function(i,o){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===i)throw o;return{value:void 0,done:!0}}for(r.method=i,r.arg=o;;){var s=r.delegate;if(s){var a=_(s,r);if(a){if(a===d)continue;return a}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n="executing";var u=h(t,e,r);if("normal"===u.type){if(n=r.done?"completed":"suspendedYield",u.arg===d)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(n="completed",r.method="throw",r.arg=u.arg)}}}(t,r,s),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=f;var d={};function p(){}function m(){}function g(){}var v={};c(v,a,(function(){return this}));var y=Object.getPrototypeOf,b=y&&y(y(N([])));b&&b!==r&&o.call(b,a)&&(v=b);var w=g.prototype=p.prototype=Object.create(v);function E(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function k(t,e){function r(i,s,a,u){var l=h(t[i],t,s);if("throw"!==l.type){var c=l.arg,f=c.value;return f&&"object"==n(f)&&o.call(f,"__await")?e.resolve(f.__await).then((function(t){r("next",t,a,u)}),(function(t){r("throw",t,a,u)})):e.resolve(f).then((function(t){c.value=t,a(c)}),(function(t){return r("throw",t,a,u)}))}u(l.arg)}var i;this._invoke=function(t,n){function o(){return new e((function(e,i){r(t,n,e,i)}))}return i=i?i.then(o,o):o()}}function _(t,e){var r=t.iterator[e.method];if(void 0===r){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=void 0,_(t,e),"throw"===e.method))return d;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var n=h(r,t.iterator,e.arg);if("throw"===n.type)return e.method="throw",e.arg=n.arg,e.delegate=null,d;var i=n.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,d):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,d)}function x(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function M(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function A(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(x,this),this.reset(!0)}function N(t){if(t){var e=t[a];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,n=function e(){for(;++r<t.length;)if(o.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=void 0,e.done=!0,e};return n.next=n}}return{next:P}}function P(){return{value:void 0,done:!0}}return m.prototype=g,c(w,"constructor",g),c(g,"constructor",m),m.displayName=c(g,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===m||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,g):(t.__proto__=g,c(t,l,"GeneratorFunction")),t.prototype=Object.create(w),t},e.awrap=function(t){return{__await:t}},E(k.prototype),c(k.prototype,u,(function(){return this})),e.AsyncIterator=k,e.async=function(t,r,n,i,o){void 0===o&&(o=Promise);var s=new k(f(t,r,n,i),o);return e.isGeneratorFunction(r)?s:s.next().then((function(t){return t.done?t.value:s.next()}))},E(w),c(w,l,"Generator"),c(w,a,(function(){return this})),c(w,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},e.values=N,A.prototype={constructor:A,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(M),!t)for(var e in this)"t"===e.charAt(0)&&o.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(r,n){return s.type="throw",s.arg=t,e.next=r,n&&(e.method="next",e.arg=void 0),!!n}for(var n=this.tryEntries.length-1;n>=0;--n){var i=this.tryEntries[n],s=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var a=o.call(i,"catchLoc"),u=o.call(i,"finallyLoc");if(a&&u){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(a){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&o.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var i=n;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var s=i?i.completion:{};return s.type=t,s.arg=e,i?(this.method="next",this.next=i.finallyLoc,d):this.complete(s)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),d},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),M(r),d}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;M(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:N(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=void 0),d}},e}t.exports=i,t.exports.__esModule=!0,t.exports.default=t.exports},8:t=>{function e(r){return t.exports=e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},t.exports.__esModule=!0,t.exports.default=t.exports,e(r)}t.exports=e,t.exports.__esModule=!0,t.exports.default=t.exports},757:(t,e,r)=>{var n=r(591)();t.exports=n;try{regeneratorRuntime=n}catch(t){"object"==typeof globalThis?globalThis.regeneratorRuntime=n:Function("r","regeneratorRuntime = r")(n)}},310:(t,e,r)=>{"use strict";r.d(e,{Q:()=>kn});let n=!1,i=!1;const o={debug:1,default:2,info:2,warning:3,error:4,off:5};let s=o.default,a=null;const u=function(){try{const t=[];if(["NFD","NFC","NFKD","NFKC"].forEach((e=>{try{if("test"!=="test".normalize(e))throw new Error("bad normalize")}catch(r){t.push(e)}})),t.length)throw new Error("missing "+t.join(", "));if(String.fromCharCode(233).normalize("NFD")!==String.fromCharCode(101,769))throw new Error("broken implementation")}catch(t){return t.message}return null}();var l,c;!function(t){t.DEBUG="DEBUG",t.INFO="INFO",t.WARNING="WARNING",t.ERROR="ERROR",t.OFF="OFF"}(l||(l={})),function(t){t.UNKNOWN_ERROR="UNKNOWN_ERROR",t.NOT_IMPLEMENTED="NOT_IMPLEMENTED",t.UNSUPPORTED_OPERATION="UNSUPPORTED_OPERATION",t.NETWORK_ERROR="NETWORK_ERROR",t.SERVER_ERROR="SERVER_ERROR",t.TIMEOUT="TIMEOUT",t.BUFFER_OVERRUN="BUFFER_OVERRUN",t.NUMERIC_FAULT="NUMERIC_FAULT",t.MISSING_NEW="MISSING_NEW",t.INVALID_ARGUMENT="INVALID_ARGUMENT",t.MISSING_ARGUMENT="MISSING_ARGUMENT",t.UNEXPECTED_ARGUMENT="UNEXPECTED_ARGUMENT",t.CALL_EXCEPTION="CALL_EXCEPTION",t.INSUFFICIENT_FUNDS="INSUFFICIENT_FUNDS",t.NONCE_EXPIRED="NONCE_EXPIRED",t.REPLACEMENT_UNDERPRICED="REPLACEMENT_UNDERPRICED",t.UNPREDICTABLE_GAS_LIMIT="UNPREDICTABLE_GAS_LIMIT",t.TRANSACTION_REPLACED="TRANSACTION_REPLACED"}(c||(c={}));const f="0123456789abcdef";class h{constructor(t){Object.defineProperty(this,"version",{enumerable:!0,value:t,writable:!1})}_log(t,e){const r=t.toLowerCase();null==o[r]&&this.throwArgumentError("invalid log level name","logLevel",t),s>o[r]||console.log.apply(console,e)}debug(...t){this._log(h.levels.DEBUG,t)}info(...t){this._log(h.levels.INFO,t)}warn(...t){this._log(h.levels.WARNING,t)}makeError(t,e,r){if(i)return this.makeError("censored error",e,{});e||(e=h.errors.UNKNOWN_ERROR),r||(r={});const n=[];Object.keys(r).forEach((t=>{const e=r[t];try{if(e instanceof Uint8Array){let r="";for(let t=0;t<e.length;t++)r+=f[e[t]>>4],r+=f[15&e[t]];n.push(t+"=Uint8Array(0x"+r+")")}else n.push(t+"="+JSON.stringify(e))}catch(e){n.push(t+"="+JSON.stringify(r[t].toString()))}})),n.push(`code=${e}`),n.push(`version=${this.version}`);const o=t;let s="";switch(e){case c.NUMERIC_FAULT:{s="NUMERIC_FAULT";const e=t;switch(e){case"overflow":case"underflow":case"division-by-zero":s+="-"+e;break;case"negative-power":case"negative-width":s+="-unsupported";break;case"unbound-bitwise-result":s+="-unbound-result"}break}case c.CALL_EXCEPTION:case c.INSUFFICIENT_FUNDS:case c.MISSING_NEW:case c.NONCE_EXPIRED:case c.REPLACEMENT_UNDERPRICED:case c.TRANSACTION_REPLACED:case c.UNPREDICTABLE_GAS_LIMIT:s=e}s&&(t+=" [ See: https://links.ethers.org/v5-errors-"+s+" ]"),n.length&&(t+=" ("+n.join(", ")+")");const a=new Error(t);return a.reason=o,a.code=e,Object.keys(r).forEach((function(t){a[t]=r[t]})),a}throwError(t,e,r){throw this.makeError(t,e,r)}throwArgumentError(t,e,r){return this.throwError(t,h.errors.INVALID_ARGUMENT,{argument:e,value:r})}assert(t,e,r,n){t||this.throwError(e,r,n)}assertArgument(t,e,r,n){t||this.throwArgumentError(e,r,n)}checkNormalize(t){null==t&&(t="platform missing String.prototype.normalize"),u&&this.throwError("platform missing String.prototype.normalize",h.errors.UNSUPPORTED_OPERATION,{operation:"String.prototype.normalize",form:u})}checkSafeUint53(t,e){"number"==typeof t&&(null==e&&(e="value not safe"),(t<0||t>=9007199254740991)&&this.throwError(e,h.errors.NUMERIC_FAULT,{operation:"checkSafeInteger",fault:"out-of-safe-range",value:t}),t%1&&this.throwError(e,h.errors.NUMERIC_FAULT,{operation:"checkSafeInteger",fault:"non-integer",value:t}))}checkArgumentCount(t,e,r){r=r?": "+r:"",t<e&&this.throwError("missing argument"+r,h.errors.MISSING_ARGUMENT,{count:t,expectedCount:e}),t>e&&this.throwError("too many arguments"+r,h.errors.UNEXPECTED_ARGUMENT,{count:t,expectedCount:e})}checkNew(t,e){t!==Object&&null!=t||this.throwError("missing new",h.errors.MISSING_NEW,{name:e.name})}checkAbstract(t,e){t===e?this.throwError("cannot instantiate abstract class "+JSON.stringify(e.name)+" directly; use a sub-class",h.errors.UNSUPPORTED_OPERATION,{name:t.name,operation:"new"}):t!==Object&&null!=t||this.throwError("missing new",h.errors.MISSING_NEW,{name:e.name})}static globalLogger(){return a||(a=new h("logger/5.6.0")),a}static setCensorship(t,e){if(!t&&e&&this.globalLogger().throwError("cannot permanently disable censorship",h.errors.UNSUPPORTED_OPERATION,{operation:"setCensorship"}),n){if(!t)return;this.globalLogger().throwError("error censorship permanent",h.errors.UNSUPPORTED_OPERATION,{operation:"setCensorship"})}i=!!t,n=!!e}static setLogLevel(t){const e=o[t.toLowerCase()];null!=e?s=e:h.globalLogger().warn("invalid log level - "+t)}static from(t){return new h(t)}}h.errors=c,h.levels=l;const d=new h("properties/5.6.0");function p(t,e,r){Object.defineProperty(t,e,{enumerable:!0,value:r,writable:!1})}function m(t,e){for(let r=0;r<32;r++){if(t[e])return t[e];if(!t.prototype||"object"!=typeof t.prototype)break;t=Object.getPrototypeOf(t.prototype).constructor}return null}function g(t){return e=this,r=void 0,i=function*(){const e=Object.keys(t).map((e=>{const r=t[e];return Promise.resolve(r).then((t=>({key:e,value:t})))}));return(yield Promise.all(e)).reduce(((t,e)=>(t[e.key]=e.value,t)),{})},new((n=void 0)||(n=Promise))((function(t,o){function s(t){try{u(i.next(t))}catch(t){o(t)}}function a(t){try{u(i.throw(t))}catch(t){o(t)}}function u(e){var r;e.done?t(e.value):(r=e.value,r instanceof n?r:new n((function(t){t(r)}))).then(s,a)}u((i=i.apply(e,r||[])).next())}));var e,r,n,i}function v(t){const e={};for(const r in t)e[r]=t[r];return e}const y={bigint:!0,boolean:!0,function:!0,number:!0,string:!0};function b(t){if(null==t||y[typeof t])return!0;if(Array.isArray(t)||"object"==typeof t){if(!Object.isFrozen(t))return!1;const e=Object.keys(t);for(let r=0;r<e.length;r++){let n=null;try{n=t[e[r]]}catch(t){continue}if(!b(n))return!1}return!0}return d.throwArgumentError("Cannot deepCopy "+typeof t,"object",t)}function w(t){if(b(t))return t;if(Array.isArray(t))return Object.freeze(t.map((t=>E(t))));if("object"==typeof t){const e={};for(const r in t){const n=t[r];void 0!==n&&p(e,r,E(n))}return e}return d.throwArgumentError("Cannot deepCopy "+typeof t,"object",t)}function E(t){return w(t)}const k="providers/5.6.8";var _=function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function s(t){try{u(n.next(t))}catch(t){o(t)}}function a(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};const x=new h("abstract-signer/5.6.2"),M=["accessList","ccipReadEnabled","chainId","customData","data","from","gasLimit","gasPrice","maxFeePerGas","maxPriorityFeePerGas","nonce","to","type","value"],A=[h.errors.INSUFFICIENT_FUNDS,h.errors.NONCE_EXPIRED,h.errors.REPLACEMENT_UNDERPRICED];class N{constructor(){x.checkAbstract(new.target,N),p(this,"_isSigner",!0)}getBalance(t){return _(this,void 0,void 0,(function*(){return this._checkProvider("getBalance"),yield this.provider.getBalance(this.getAddress(),t)}))}getTransactionCount(t){return _(this,void 0,void 0,(function*(){return this._checkProvider("getTransactionCount"),yield this.provider.getTransactionCount(this.getAddress(),t)}))}estimateGas(t){return _(this,void 0,void 0,(function*(){this._checkProvider("estimateGas");const e=yield g(this.checkTransaction(t));return yield this.provider.estimateGas(e)}))}call(t,e){return _(this,void 0,void 0,(function*(){this._checkProvider("call");const r=yield g(this.checkTransaction(t));return yield this.provider.call(r,e)}))}sendTransaction(t){return _(this,void 0,void 0,(function*(){this._checkProvider("sendTransaction");const e=yield this.populateTransaction(t),r=yield this.signTransaction(e);return yield this.provider.sendTransaction(r)}))}getChainId(){return _(this,void 0,void 0,(function*(){return this._checkProvider("getChainId"),(yield this.provider.getNetwork()).chainId}))}getGasPrice(){return _(this,void 0,void 0,(function*(){return this._checkProvider("getGasPrice"),yield this.provider.getGasPrice()}))}getFeeData(){return _(this,void 0,void 0,(function*(){return this._checkProvider("getFeeData"),yield this.provider.getFeeData()}))}resolveName(t){return _(this,void 0,void 0,(function*(){return this._checkProvider("resolveName"),yield this.provider.resolveName(t)}))}checkTransaction(t){for(const e in t)-1===M.indexOf(e)&&x.throwArgumentError("invalid transaction key: "+e,"transaction",t);const e=v(t);return null==e.from?e.from=this.getAddress():e.from=Promise.all([Promise.resolve(e.from),this.getAddress()]).then((e=>(e[0].toLowerCase()!==e[1].toLowerCase()&&x.throwArgumentError("from address mismatch","transaction",t),e[0]))),e}populateTransaction(t){return _(this,void 0,void 0,(function*(){const e=yield g(this.checkTransaction(t));null!=e.to&&(e.to=Promise.resolve(e.to).then((t=>_(this,void 0,void 0,(function*(){if(null==t)return null;const e=yield this.resolveName(t);return null==e&&x.throwArgumentError("provided ENS name resolves to null","tx.to",t),e})))),e.to.catch((t=>{})));const r=null!=e.maxFeePerGas||null!=e.maxPriorityFeePerGas;if(null==e.gasPrice||2!==e.type&&!r?0!==e.type&&1!==e.type||!r||x.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas","transaction",t):x.throwArgumentError("eip-1559 transaction do not support gasPrice","transaction",t),2!==e.type&&null!=e.type||null==e.maxFeePerGas||null==e.maxPriorityFeePerGas)if(0===e.type||1===e.type)null==e.gasPrice&&(e.gasPrice=this.getGasPrice());else{const t=yield this.getFeeData();if(null==e.type)if(null!=t.maxFeePerGas&&null!=t.maxPriorityFeePerGas)if(e.type=2,null!=e.gasPrice){const t=e.gasPrice;delete e.gasPrice,e.maxFeePerGas=t,e.maxPriorityFeePerGas=t}else null==e.maxFeePerGas&&(e.maxFeePerGas=t.maxFeePerGas),null==e.maxPriorityFeePerGas&&(e.maxPriorityFeePerGas=t.maxPriorityFeePerGas);else null!=t.gasPrice?(r&&x.throwError("network does not support EIP-1559",h.errors.UNSUPPORTED_OPERATION,{operation:"populateTransaction"}),null==e.gasPrice&&(e.gasPrice=t.gasPrice),e.type=0):x.throwError("failed to get consistent fee data",h.errors.UNSUPPORTED_OPERATION,{operation:"signer.getFeeData"});else 2===e.type&&(null==e.maxFeePerGas&&(e.maxFeePerGas=t.maxFeePerGas),null==e.maxPriorityFeePerGas&&(e.maxPriorityFeePerGas=t.maxPriorityFeePerGas))}else e.type=2;return null==e.nonce&&(e.nonce=this.getTransactionCount("pending")),null==e.gasLimit&&(e.gasLimit=this.estimateGas(e).catch((t=>{if(A.indexOf(t.code)>=0)throw t;return x.throwError("cannot estimate gas; transaction may fail or may require manual gas limit",h.errors.UNPREDICTABLE_GAS_LIMIT,{error:t,tx:e})}))),null==e.chainId?e.chainId=this.getChainId():e.chainId=Promise.all([Promise.resolve(e.chainId),this.getChainId()]).then((e=>(0!==e[1]&&e[0]!==e[1]&&x.throwArgumentError("chainId address mismatch","transaction",t),e[0]))),yield g(e)}))}_checkProvider(t){this.provider||x.throwError("missing provider",h.errors.UNSUPPORTED_OPERATION,{operation:t||"_checkProvider"})}static isSigner(t){return!(!t||!t._isSigner)}}var P=r(550),S=r.n(P);const C=new h("bytes/5.6.1");function F(t){return!!t.toHexString}function R(t){return t.slice||(t.slice=function(){const e=Array.prototype.slice.call(arguments);return R(new Uint8Array(Array.prototype.slice.apply(t,e)))}),t}function I(t){return U(t)&&!(t.length%2)||T(t)}function O(t){return"number"==typeof t&&t==t&&t%1==0}function T(t){if(null==t)return!1;if(t.constructor===Uint8Array)return!0;if("string"==typeof t)return!1;if(!O(t.length)||t.length<0)return!1;for(let e=0;e<t.length;e++){const r=t[e];if(!O(r)||r<0||r>=256)return!1}return!0}function L(t,e){if(e||(e={}),"number"==typeof t){C.checkSafeUint53(t,"invalid arrayify value");const e=[];for(;t;)e.unshift(255&t),t=parseInt(String(t/256));return 0===e.length&&e.push(0),R(new Uint8Array(e))}if(e.allowMissingPrefix&&"string"==typeof t&&"0x"!==t.substring(0,2)&&(t="0x"+t),F(t)&&(t=t.toHexString()),U(t)){let r=t.substring(2);r.length%2&&("left"===e.hexPad?r="0"+r:"right"===e.hexPad?r+="0":C.throwArgumentError("hex data is odd-length","value",t));const n=[];for(let t=0;t<r.length;t+=2)n.push(parseInt(r.substring(t,t+2),16));return R(new Uint8Array(n))}return T(t)?R(new Uint8Array(t)):C.throwArgumentError("invalid arrayify value","value",t)}function B(t){const e=t.map((t=>L(t))),r=e.reduce(((t,e)=>t+e.length),0),n=new Uint8Array(r);return e.reduce(((t,e)=>(n.set(e,t),t+e.length)),0),R(n)}function j(t){let e=L(t);if(0===e.length)return e;let r=0;for(;r<e.length&&0===e[r];)r++;return r&&(e=e.slice(r)),e}function U(t,e){return!("string"!=typeof t||!t.match(/^0x[0-9A-Fa-f]*$/)||e&&t.length!==2+2*e)}const q="0123456789abcdef";function D(t,e){if(e||(e={}),"number"==typeof t){C.checkSafeUint53(t,"invalid hexlify value");let e="";for(;t;)e=q[15&t]+e,t=Math.floor(t/16);return e.length?(e.length%2&&(e="0"+e),"0x"+e):"0x00"}if("bigint"==typeof t)return(t=t.toString(16)).length%2?"0x0"+t:"0x"+t;if(e.allowMissingPrefix&&"string"==typeof t&&"0x"!==t.substring(0,2)&&(t="0x"+t),F(t))return t.toHexString();if(U(t))return t.length%2&&("left"===e.hexPad?t="0x0"+t.substring(2):"right"===e.hexPad?t+="0":C.throwArgumentError("hex data is odd-length","value",t)),t.toLowerCase();if(T(t)){let e="0x";for(let r=0;r<t.length;r++){let n=t[r];e+=q[(240&n)>>4]+q[15&n]}return e}return C.throwArgumentError("invalid hexlify value","value",t)}function V(t){if("string"!=typeof t)t=D(t);else if(!U(t)||t.length%2)return null;return(t.length-2)/2}function z(t,e,r){return"string"!=typeof t?t=D(t):(!U(t)||t.length%2)&&C.throwArgumentError("invalid hexData","value",t),e=2+2*e,null!=r?"0x"+t.substring(e,2+2*r):"0x"+t.substring(e)}function $(t){let e="0x";return t.forEach((t=>{e+=D(t).substring(2)})),e}function G(t){const e=function(t){"string"!=typeof t&&(t=D(t)),U(t)||C.throwArgumentError("invalid hex string","value",t),t=t.substring(2);let e=0;for(;e<t.length&&"0"===t[e];)e++;return"0x"+t.substring(e)}(D(t,{hexPad:"left"}));return"0x"===e?"0x0":e}function H(t,e){for("string"!=typeof t?t=D(t):U(t)||C.throwArgumentError("invalid hex string","value",t),t.length>2*e+2&&C.throwArgumentError("value out of range","value",arguments[1]);t.length<2*e+2;)t="0x0"+t.substring(2);return t}function W(t){const e={r:"0x",s:"0x",_vs:"0x",recoveryParam:0,v:0,yParityAndS:"0x",compact:"0x"};if(I(t)){let r=L(t);64===r.length?(e.v=27+(r[32]>>7),r[32]&=127,e.r=D(r.slice(0,32)),e.s=D(r.slice(32,64))):65===r.length?(e.r=D(r.slice(0,32)),e.s=D(r.slice(32,64)),e.v=r[64]):C.throwArgumentError("invalid signature string","signature",t),e.v<27&&(0===e.v||1===e.v?e.v+=27:C.throwArgumentError("signature invalid v byte","signature",t)),e.recoveryParam=1-e.v%2,e.recoveryParam&&(r[32]|=128),e._vs=D(r.slice(32,64))}else{if(e.r=t.r,e.s=t.s,e.v=t.v,e.recoveryParam=t.recoveryParam,e._vs=t._vs,null!=e._vs){const r=function(t,e){(t=L(t)).length>e&&C.throwArgumentError("value out of range","value",arguments[0]);const r=new Uint8Array(e);return r.set(t,e-t.length),R(r)}(L(e._vs),32);e._vs=D(r);const n=r[0]>=128?1:0;null==e.recoveryParam?e.recoveryParam=n:e.recoveryParam!==n&&C.throwArgumentError("signature recoveryParam mismatch _vs","signature",t),r[0]&=127;const i=D(r);null==e.s?e.s=i:e.s!==i&&C.throwArgumentError("signature v mismatch _vs","signature",t)}if(null==e.recoveryParam)null==e.v?C.throwArgumentError("signature missing v and recoveryParam","signature",t):0===e.v||1===e.v?e.recoveryParam=e.v:e.recoveryParam=1-e.v%2;else if(null==e.v)e.v=27+e.recoveryParam;else{const r=0===e.v||1===e.v?e.v:1-e.v%2;e.recoveryParam!==r&&C.throwArgumentError("signature recoveryParam mismatch v","signature",t)}null!=e.r&&U(e.r)?e.r=H(e.r,32):C.throwArgumentError("signature missing or invalid r","signature",t),null!=e.s&&U(e.s)?e.s=H(e.s,32):C.throwArgumentError("signature missing or invalid s","signature",t);const r=L(e.s);r[0]>=128&&C.throwArgumentError("signature s out of range","signature",t),e.recoveryParam&&(r[0]|=128);const n=D(r);e._vs&&(U(e._vs)||C.throwArgumentError("signature invalid _vs","signature",t),e._vs=H(e._vs,32)),null==e._vs?e._vs=n:e._vs!==n&&C.throwArgumentError("signature _vs mismatch v and s","signature",t)}return e.yParityAndS=e._vs,e.compact=e.r+e.yParityAndS.substring(2),e}var K=S().BN;const J=new h("bignumber/5.6.2"),X={},Z=9007199254740991;let Y=!1;class Q{constructor(t,e){t!==X&&J.throwError("cannot call constructor directly; use BigNumber.from",h.errors.UNSUPPORTED_OPERATION,{operation:"new (BigNumber)"}),this._hex=e,this._isBigNumber=!0,Object.freeze(this)}fromTwos(t){return et(rt(this).fromTwos(t))}toTwos(t){return et(rt(this).toTwos(t))}abs(){return"-"===this._hex[0]?Q.from(this._hex.substring(1)):this}add(t){return et(rt(this).add(rt(t)))}sub(t){return et(rt(this).sub(rt(t)))}div(t){return Q.from(t).isZero()&&nt("division-by-zero","div"),et(rt(this).div(rt(t)))}mul(t){return et(rt(this).mul(rt(t)))}mod(t){const e=rt(t);return e.isNeg()&&nt("division-by-zero","mod"),et(rt(this).umod(e))}pow(t){const e=rt(t);return e.isNeg()&&nt("negative-power","pow"),et(rt(this).pow(e))}and(t){const e=rt(t);return(this.isNegative()||e.isNeg())&&nt("unbound-bitwise-result","and"),et(rt(this).and(e))}or(t){const e=rt(t);return(this.isNegative()||e.isNeg())&&nt("unbound-bitwise-result","or"),et(rt(this).or(e))}xor(t){const e=rt(t);return(this.isNegative()||e.isNeg())&&nt("unbound-bitwise-result","xor"),et(rt(this).xor(e))}mask(t){return(this.isNegative()||t<0)&&nt("negative-width","mask"),et(rt(this).maskn(t))}shl(t){return(this.isNegative()||t<0)&&nt("negative-width","shl"),et(rt(this).shln(t))}shr(t){return(this.isNegative()||t<0)&&nt("negative-width","shr"),et(rt(this).shrn(t))}eq(t){return rt(this).eq(rt(t))}lt(t){return rt(this).lt(rt(t))}lte(t){return rt(this).lte(rt(t))}gt(t){return rt(this).gt(rt(t))}gte(t){return rt(this).gte(rt(t))}isNegative(){return"-"===this._hex[0]}isZero(){return rt(this).isZero()}toNumber(){try{return rt(this).toNumber()}catch(t){nt("overflow","toNumber",this.toString())}return null}toBigInt(){try{return BigInt(this.toString())}catch(t){}return J.throwError("this platform does not support BigInt",h.errors.UNSUPPORTED_OPERATION,{value:this.toString()})}toString(){return arguments.length>0&&(10===arguments[0]?Y||(Y=!0,J.warn("BigNumber.toString does not accept any parameters; base-10 is assumed")):16===arguments[0]?J.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()",h.errors.UNEXPECTED_ARGUMENT,{}):J.throwError("BigNumber.toString does not accept parameters",h.errors.UNEXPECTED_ARGUMENT,{})),rt(this).toString(10)}toHexString(){return this._hex}toJSON(t){return{type:"BigNumber",hex:this.toHexString()}}static from(t){if(t instanceof Q)return t;if("string"==typeof t)return t.match(/^-?0x[0-9a-f]+$/i)?new Q(X,tt(t)):t.match(/^-?[0-9]+$/)?new Q(X,tt(new K(t))):J.throwArgumentError("invalid BigNumber string","value",t);if("number"==typeof t)return t%1&&nt("underflow","BigNumber.from",t),(t>=Z||t<=-Z)&&nt("overflow","BigNumber.from",t),Q.from(String(t));const e=t;if("bigint"==typeof e)return Q.from(e.toString());if(T(e))return Q.from(D(e));if(e)if(e.toHexString){const t=e.toHexString();if("string"==typeof t)return Q.from(t)}else{let t=e._hex;if(null==t&&"BigNumber"===e.type&&(t=e.hex),"string"==typeof t&&(U(t)||"-"===t[0]&&U(t.substring(1))))return Q.from(t)}return J.throwArgumentError("invalid BigNumber value","value",t)}static isBigNumber(t){return!(!t||!t._isBigNumber)}}function tt(t){if("string"!=typeof t)return tt(t.toString(16));if("-"===t[0])return"-"===(t=t.substring(1))[0]&&J.throwArgumentError("invalid hex","value",t),"0x00"===(t=tt(t))?t:"-"+t;if("0x"!==t.substring(0,2)&&(t="0x"+t),"0x"===t)return"0x00";for(t.length%2&&(t="0x0"+t.substring(2));t.length>4&&"0x00"===t.substring(0,4);)t="0x"+t.substring(4);return t}function et(t){return Q.from(tt(t))}function rt(t){const e=Q.from(t).toHexString();return"-"===e[0]?new K("-"+e.substring(3),16):new K(e.substring(2),16)}function nt(t,e,r){const n={fault:t,operation:e};return null!=r&&(n.value=r),J.throwError(t,h.errors.NUMERIC_FAULT,n)}var it=r(94),ot=r.n(it);function st(t){return"0x"+ot().keccak_256(L(t))}const at=new h("rlp/5.6.1");function ut(t){const e=[];for(;t;)e.unshift(255&t),t>>=8;return e}function lt(t,e,r){let n=0;for(let i=0;i<r;i++)n=256*n+t[e+i];return n}function ct(t){if(Array.isArray(t)){let e=[];if(t.forEach((function(t){e=e.concat(ct(t))})),e.length<=55)return e.unshift(192+e.length),e;const r=ut(e.length);return r.unshift(247+r.length),r.concat(e)}I(t)||at.throwArgumentError("RLP object must be BytesLike","object",t);const e=Array.prototype.slice.call(L(t));if(1===e.length&&e[0]<=127)return e;if(e.length<=55)return e.unshift(128+e.length),e;const r=ut(e.length);return r.unshift(183+r.length),r.concat(e)}function ft(t){return D(ct(t))}function ht(t,e,r,n){const i=[];for(;r<e+1+n;){const o=dt(t,r);i.push(o.result),(r+=o.consumed)>e+1+n&&at.throwError("child data too short",h.errors.BUFFER_OVERRUN,{})}return{consumed:1+n,result:i}}function dt(t,e){if(0===t.length&&at.throwError("data too short",h.errors.BUFFER_OVERRUN,{}),t[e]>=248){const r=t[e]-247;e+1+r>t.length&&at.throwError("data short segment too short",h.errors.BUFFER_OVERRUN,{});const n=lt(t,e+1,r);return e+1+r+n>t.length&&at.throwError("data long segment too short",h.errors.BUFFER_OVERRUN,{}),ht(t,e,e+1+r,r+n)}if(t[e]>=192){const r=t[e]-192;return e+1+r>t.length&&at.throwError("data array too short",h.errors.BUFFER_OVERRUN,{}),ht(t,e,e+1,r)}if(t[e]>=184){const r=t[e]-183;e+1+r>t.length&&at.throwError("data array too short",h.errors.BUFFER_OVERRUN,{});const n=lt(t,e+1,r);return e+1+r+n>t.length&&at.throwError("data array too short",h.errors.BUFFER_OVERRUN,{}),{consumed:1+r+n,result:D(t.slice(e+1+r,e+1+r+n))}}if(t[e]>=128){const r=t[e]-128;return e+1+r>t.length&&at.throwError("data too short",h.errors.BUFFER_OVERRUN,{}),{consumed:1+r,result:D(t.slice(e+1,e+1+r))}}return{consumed:1,result:D(t[e])}}function pt(t){const e=L(t),r=dt(e,0);return r.consumed!==e.length&&at.throwArgumentError("invalid rlp data","data",t),r.result}const mt=new h("address/5.6.1");function gt(t){U(t,20)||mt.throwArgumentError("invalid address","address",t);const e=(t=t.toLowerCase()).substring(2).split(""),r=new Uint8Array(40);for(let t=0;t<40;t++)r[t]=e[t].charCodeAt(0);const n=L(st(r));for(let t=0;t<40;t+=2)n[t>>1]>>4>=8&&(e[t]=e[t].toUpperCase()),(15&n[t>>1])>=8&&(e[t+1]=e[t+1].toUpperCase());return"0x"+e.join("")}const vt={};for(let t=0;t<10;t++)vt[String(t)]=String(t);for(let t=0;t<26;t++)vt[String.fromCharCode(65+t)]=String(10+t);const yt=Math.floor((bt=9007199254740991,Math.log10?Math.log10(bt):Math.log(bt)/Math.LN10));var bt;function wt(t){let e=null;if("string"!=typeof t&&mt.throwArgumentError("invalid address","address",t),t.match(/^(0x)?[0-9a-fA-F]{40}$/))"0x"!==t.substring(0,2)&&(t="0x"+t),e=gt(t),t.match(/([A-F].*[a-f])|([a-f].*[A-F])/)&&e!==t&&mt.throwArgumentError("bad address checksum","address",t);else if(t.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)){for(t.substring(2,4)!==function(t){let e=(t=(t=t.toUpperCase()).substring(4)+t.substring(0,2)+"00").split("").map((t=>vt[t])).join("");for(;e.length>=yt;){let t=e.substring(0,yt);e=parseInt(t,10)%97+e.substring(t.length)}let r=String(98-parseInt(e,10)%97);for(;r.length<2;)r="0"+r;return r}(t)&&mt.throwArgumentError("bad icap checksum","address",t),r=t.substring(4),e=new K(r,36).toString(16);e.length<40;)e="0"+e;e=gt("0x"+e)}else mt.throwArgumentError("invalid address","address",t);var r;return e}const Et="hash/5.6.1",kt=new h("strings/5.6.1");var _t,xt;function Mt(t,e,r,n,i){if(t===xt.BAD_PREFIX||t===xt.UNEXPECTED_CONTINUE){let t=0;for(let n=e+1;n<r.length&&r[n]>>6==2;n++)t++;return t}return t===xt.OVERRUN?r.length-e-1:0}!function(t){t.current="",t.NFC="NFC",t.NFD="NFD",t.NFKC="NFKC",t.NFKD="NFKD"}(_t||(_t={})),function(t){t.UNEXPECTED_CONTINUE="unexpected continuation byte",t.BAD_PREFIX="bad codepoint prefix",t.OVERRUN="string overrun",t.MISSING_CONTINUE="missing continuation byte",t.OUT_OF_RANGE="out of UTF-8 range",t.UTF16_SURROGATE="UTF-16 surrogate",t.OVERLONG="overlong representation"}(xt||(xt={}));const At=Object.freeze({error:function(t,e,r,n,i){return kt.throwArgumentError(`invalid codepoint at offset ${e}; ${t}`,"bytes",r)},ignore:Mt,replace:function(t,e,r,n,i){return t===xt.OVERLONG?(n.push(i),0):(n.push(65533),Mt(t,e,r))}});function Nt(t,e){null==e&&(e=At.error),t=L(t);const r=[];let n=0;for(;n<t.length;){const i=t[n++];if(i>>7==0){r.push(i);continue}let o=null,s=null;if(192==(224&i))o=1,s=127;else if(224==(240&i))o=2,s=2047;else{if(240!=(248&i)){n+=e(128==(192&i)?xt.UNEXPECTED_CONTINUE:xt.BAD_PREFIX,n-1,t,r);continue}o=3,s=65535}if(n-1+o>=t.length){n+=e(xt.OVERRUN,n-1,t,r);continue}let a=i&(1<<8-o-1)-1;for(let i=0;i<o;i++){let i=t[n];if(128!=(192&i)){n+=e(xt.MISSING_CONTINUE,n,t,r),a=null;break}a=a<<6|63&i,n++}null!==a&&(a>1114111?n+=e(xt.OUT_OF_RANGE,n-1-o,t,r,a):a>=55296&&a<=57343?n+=e(xt.UTF16_SURROGATE,n-1-o,t,r,a):a<=s?n+=e(xt.OVERLONG,n-1-o,t,r,a):r.push(a))}return r}function Pt(t,e=_t.current){e!=_t.current&&(kt.checkNormalize(),t=t.normalize(e));let r=[];for(let e=0;e<t.length;e++){const n=t.charCodeAt(e);if(n<128)r.push(n);else if(n<2048)r.push(n>>6|192),r.push(63&n|128);else if(55296==(64512&n)){e++;const i=t.charCodeAt(e);if(e>=t.length||56320!=(64512&i))throw new Error("invalid utf-8 string");const o=65536+((1023&n)<<10)+(1023&i);r.push(o>>18|240),r.push(o>>12&63|128),r.push(o>>6&63|128),r.push(63&o|128)}else r.push(n>>12|224),r.push(n>>6&63|128),r.push(63&n|128)}return L(r)}function St(t){return t.map((t=>t<=65535?String.fromCharCode(t):(t-=65536,String.fromCharCode(55296+(t>>10&1023),56320+(1023&t))))).join("")}function Ct(t,e){return St(Nt(t,e))}function Ft(t,e=_t.current){return Nt(Pt(t,e))}function Rt(t){return st(Pt(t))}const It=new h(Et),Ot=new Uint8Array(32);Ot.fill(0);const Tt=Q.from(-1),Lt=Q.from(0),Bt=Q.from(1),jt=Q.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),Ut=H(Bt.toHexString(),32),qt=H(Lt.toHexString(),32),Dt={name:"string",version:"string",chainId:"uint256",verifyingContract:"address",salt:"bytes32"},Vt=["name","version","chainId","verifyingContract","salt"];function zt(t){return function(e){return"string"!=typeof e&&It.throwArgumentError(`invalid domain value for ${JSON.stringify(t)}`,`domain.${t}`,e),e}}const $t={name:zt("name"),version:zt("version"),chainId:function(t){try{return Q.from(t).toString()}catch(t){}return It.throwArgumentError('invalid domain value for "chainId"',"domain.chainId",t)},verifyingContract:function(t){try{return wt(t).toLowerCase()}catch(t){}return It.throwArgumentError('invalid domain value "verifyingContract"',"domain.verifyingContract",t)},salt:function(t){try{const e=L(t);if(32!==e.length)throw new Error("bad length");return D(e)}catch(t){}return It.throwArgumentError('invalid domain value "salt"',"domain.salt",t)}};function Gt(t){{const e=t.match(/^(u?)int(\d*)$/);if(e){const r=""===e[1],n=parseInt(e[2]||"256");(n%8!=0||n>256||e[2]&&e[2]!==String(n))&&It.throwArgumentError("invalid numeric width","type",t);const i=jt.mask(r?n-1:n),o=r?i.add(Bt).mul(Tt):Lt;return function(e){const r=Q.from(e);return(r.lt(o)||r.gt(i))&&It.throwArgumentError(`value out-of-bounds for ${t}`,"value",e),H(r.toTwos(256).toHexString(),32)}}}{const e=t.match(/^bytes(\d+)$/);if(e){const r=parseInt(e[1]);return(0===r||r>32||e[1]!==String(r))&&It.throwArgumentError("invalid bytes width","type",t),function(e){return L(e).length!==r&&It.throwArgumentError(`invalid length for ${t}`,"value",e),function(t){const e=L(t),r=e.length%32;return r?$([e,Ot.slice(r)]):D(e)}(e)}}}switch(t){case"address":return function(t){return H(wt(t),32)};case"bool":return function(t){return t?Ut:qt};case"bytes":return function(t){return st(t)};case"string":return function(t){return Rt(t)}}return null}function Ht(t,e){return`${t}(${e.map((({name:t,type:e})=>e+" "+t)).join(",")})`}class Wt{constructor(t){p(this,"types",Object.freeze(E(t))),p(this,"_encoderCache",{}),p(this,"_types",{});const e={},r={},n={};Object.keys(t).forEach((t=>{e[t]={},r[t]=[],n[t]={}}));for(const n in t){const i={};t[n].forEach((o=>{i[o.name]&&It.throwArgumentError(`duplicate variable name ${JSON.stringify(o.name)} in ${JSON.stringify(n)}`,"types",t),i[o.name]=!0;const s=o.type.match(/^([^\x5b]*)(\x5b|$)/)[1];s===n&&It.throwArgumentError(`circular type reference to ${JSON.stringify(s)}`,"types",t),Gt(s)||(r[s]||It.throwArgumentError(`unknown type ${JSON.stringify(s)}`,"types",t),r[s].push(n),e[n][s]=!0)}))}const i=Object.keys(r).filter((t=>0===r[t].length));0===i.length?It.throwArgumentError("missing primary type","types",t):i.length>1&&It.throwArgumentError(`ambiguous primary types or unused types: ${i.map((t=>JSON.stringify(t))).join(", ")}`,"types",t),p(this,"primaryType",i[0]),function i(o,s){s[o]&&It.throwArgumentError(`circular type reference to ${JSON.stringify(o)}`,"types",t),s[o]=!0,Object.keys(e[o]).forEach((t=>{r[t]&&(i(t,s),Object.keys(s).forEach((e=>{n[e][t]=!0})))})),delete s[o]}(this.primaryType,{});for(const e in n){const r=Object.keys(n[e]);r.sort(),this._types[e]=Ht(e,t[e])+r.map((e=>Ht(e,t[e]))).join("")}}getEncoder(t){let e=this._encoderCache[t];return e||(e=this._encoderCache[t]=this._getEncoder(t)),e}_getEncoder(t){{const e=Gt(t);if(e)return e}const e=t.match(/^(.*)(\x5b(\d*)\x5d)$/);if(e){const t=e[1],r=this.getEncoder(t),n=parseInt(e[3]);return e=>{n>=0&&e.length!==n&&It.throwArgumentError("array length mismatch; expected length ${ arrayLength }","value",e);let i=e.map(r);return this._types[t]&&(i=i.map(st)),st($(i))}}const r=this.types[t];if(r){const e=Rt(this._types[t]);return t=>{const n=r.map((({name:e,type:r})=>{const n=this.getEncoder(r)(t[e]);return this._types[r]?st(n):n}));return n.unshift(e),$(n)}}return It.throwArgumentError(`unknown type: ${t}`,"type",t)}encodeType(t){const e=this._types[t];return e||It.throwArgumentError(`unknown type: ${JSON.stringify(t)}`,"name",t),e}encodeData(t,e){return this.getEncoder(t)(e)}hashStruct(t,e){return st(this.encodeData(t,e))}encode(t){return this.encodeData(this.primaryType,t)}hash(t){return this.hashStruct(this.primaryType,t)}_visit(t,e,r){if(Gt(t))return r(t,e);const n=t.match(/^(.*)(\x5b(\d*)\x5d)$/);if(n){const t=n[1],i=parseInt(n[3]);return i>=0&&e.length!==i&&It.throwArgumentError("array length mismatch; expected length ${ arrayLength }","value",e),e.map((e=>this._visit(t,e,r)))}const i=this.types[t];return i?i.reduce(((t,{name:n,type:i})=>(t[n]=this._visit(i,e[n],r),t)),{}):It.throwArgumentError(`unknown type: ${t}`,"type",t)}visit(t,e){return this._visit(this.primaryType,t,e)}static from(t){return new Wt(t)}static getPrimaryType(t){return Wt.from(t).primaryType}static hashStruct(t,e,r){return Wt.from(e).hashStruct(t,r)}static hashDomain(t){const e=[];for(const r in t){const n=Dt[r];n||It.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(r)}`,"domain",t),e.push({name:r,type:n})}return e.sort(((t,e)=>Vt.indexOf(t.name)-Vt.indexOf(e.name))),Wt.hashStruct("EIP712Domain",{EIP712Domain:e},t)}static encode(t,e,r){return $(["0x1901",Wt.hashDomain(t),Wt.from(e).hash(r)])}static hash(t,e,r){return st(Wt.encode(t,e,r))}static resolveNames(t,e,r,n){return i=this,o=void 0,a=function*(){t=v(t);const i={};t.verifyingContract&&!U(t.verifyingContract,20)&&(i[t.verifyingContract]="0x");const o=Wt.from(e);o.visit(r,((t,e)=>("address"!==t||U(e,20)||(i[e]="0x"),e)));for(const t in i)i[t]=yield n(t);return t.verifyingContract&&i[t.verifyingContract]&&(t.verifyingContract=i[t.verifyingContract]),r=o.visit(r,((t,e)=>"address"===t&&i[e]?i[e]:e)),{domain:t,value:r}},new((s=void 0)||(s=Promise))((function(t,e){function r(t){try{u(a.next(t))}catch(t){e(t)}}function n(t){try{u(a.throw(t))}catch(t){e(t)}}function u(e){var i;e.done?t(e.value):(i=e.value,i instanceof s?i:new s((function(t){t(i)}))).then(r,n)}u((a=a.apply(i,o||[])).next())}));var i,o,s,a}static getPayload(t,e,r){Wt.hashDomain(t);const n={},i=[];Vt.forEach((e=>{const r=t[e];null!=r&&(n[e]=$t[e](r),i.push({name:e,type:Dt[e]}))}));const o=Wt.from(e),s=v(e);return s.EIP712Domain?It.throwArgumentError("types must not contain EIP712Domain type","types.EIP712Domain",e):s.EIP712Domain=i,o.encode(r),{types:s,domain:n,primaryType:o.primaryType,message:o.visit(r,((t,e)=>{if(t.match(/^bytes(\d*)/))return D(L(e));if(t.match(/^u?int/))return Q.from(e).toString();switch(t){case"address":return e.toLowerCase();case"bool":return!!e;case"string":return"string"!=typeof e&&It.throwArgumentError("invalid string","value",e),e}return It.throwArgumentError("unsupported type","type",t)}))}}}const Kt=Q.from(0);var Jt=r(715),Xt=r.n(Jt);function Zt(t,e,r){return r={path:e,exports:{},require:function(t,e){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==e&&r.path)}},t(r,r.exports),r.exports}"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==r.g?r.g:"undefined"!=typeof self&&self;var Yt=Qt;function Qt(t,e){if(!t)throw new Error(e||"Assertion failed")}Qt.equal=function(t,e,r){if(t!=e)throw new Error(r||"Assertion failed: "+t+" != "+e)};var te=Zt((function(t,e){var r=e;function n(t){return 1===t.length?"0"+t:t}function i(t){for(var e="",r=0;r<t.length;r++)e+=n(t[r].toString(16));return e}r.toArray=function(t,e){if(Array.isArray(t))return t.slice();if(!t)return[];var r=[];if("string"!=typeof t){for(var n=0;n<t.length;n++)r[n]=0|t[n];return r}if("hex"===e)for((t=t.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(t="0"+t),n=0;n<t.length;n+=2)r.push(parseInt(t[n]+t[n+1],16));else for(n=0;n<t.length;n++){var i=t.charCodeAt(n),o=i>>8,s=255&i;o?r.push(o,s):r.push(s)}return r},r.zero2=n,r.toHex=i,r.encode=function(t,e){return"hex"===e?i(t):t}})),ee=Zt((function(t,e){var r=e;r.assert=Yt,r.toArray=te.toArray,r.zero2=te.zero2,r.toHex=te.toHex,r.encode=te.encode,r.getNAF=function(t,e,r){var n=new Array(Math.max(t.bitLength(),r)+1);n.fill(0);for(var i=1<<e+1,o=t.clone(),s=0;s<n.length;s++){var a,u=o.andln(i-1);o.isOdd()?(a=u>(i>>1)-1?(i>>1)-u:u,o.isubn(a)):a=0,n[s]=a,o.iushrn(1)}return n},r.getJSF=function(t,e){var r=[[],[]];t=t.clone(),e=e.clone();for(var n,i=0,o=0;t.cmpn(-i)>0||e.cmpn(-o)>0;){var s,a,u=t.andln(3)+i&3,l=e.andln(3)+o&3;3===u&&(u=-1),3===l&&(l=-1),s=0==(1&u)?0:3!=(n=t.andln(7)+i&7)&&5!==n||2!==l?u:-u,r[0].push(s),a=0==(1&l)?0:3!=(n=e.andln(7)+o&7)&&5!==n||2!==u?l:-l,r[1].push(a),2*i===s+1&&(i=1-i),2*o===a+1&&(o=1-o),t.iushrn(1),e.iushrn(1)}return r},r.cachedProperty=function(t,e,r){var n="_"+e;t.prototype[e]=function(){return void 0!==this[n]?this[n]:this[n]=r.call(this)}},r.parseBytes=function(t){return"string"==typeof t?r.toArray(t,"hex"):t},r.intFromLE=function(t){return new(S())(t,"hex","le")}})),re=ee.getNAF,ne=ee.getJSF,ie=ee.assert;function oe(t,e){this.type=t,this.p=new(S())(e.p,16),this.red=e.prime?S().red(e.prime):S().mont(this.p),this.zero=new(S())(0).toRed(this.red),this.one=new(S())(1).toRed(this.red),this.two=new(S())(2).toRed(this.red),this.n=e.n&&new(S())(e.n,16),this.g=e.g&&this.pointFromJSON(e.g,e.gRed),this._wnafT1=new Array(4),this._wnafT2=new Array(4),this._wnafT3=new Array(4),this._wnafT4=new Array(4),this._bitLength=this.n?this.n.bitLength():0;var r=this.n&&this.p.div(this.n);!r||r.cmpn(100)>0?this.redN=null:(this._maxwellTrick=!0,this.redN=this.n.toRed(this.red))}var se=oe;function ae(t,e){this.curve=t,this.type=e,this.precomputed=null}oe.prototype.point=function(){throw new Error("Not implemented")},oe.prototype.validate=function(){throw new Error("Not implemented")},oe.prototype._fixedNafMul=function(t,e){ie(t.precomputed);var r=t._getDoubles(),n=re(e,1,this._bitLength),i=(1<<r.step+1)-(r.step%2==0?2:1);i/=3;var o,s,a=[];for(o=0;o<n.length;o+=r.step){s=0;for(var u=o+r.step-1;u>=o;u--)s=(s<<1)+n[u];a.push(s)}for(var l=this.jpoint(null,null,null),c=this.jpoint(null,null,null),f=i;f>0;f--){for(o=0;o<a.length;o++)(s=a[o])===f?c=c.mixedAdd(r.points[o]):s===-f&&(c=c.mixedAdd(r.points[o].neg()));l=l.add(c)}return l.toP()},oe.prototype._wnafMul=function(t,e){var r=4,n=t._getNAFPoints(r);r=n.wnd;for(var i=n.points,o=re(e,r,this._bitLength),s=this.jpoint(null,null,null),a=o.length-1;a>=0;a--){for(var u=0;a>=0&&0===o[a];a--)u++;if(a>=0&&u++,s=s.dblp(u),a<0)break;var l=o[a];ie(0!==l),s="affine"===t.type?l>0?s.mixedAdd(i[l-1>>1]):s.mixedAdd(i[-l-1>>1].neg()):l>0?s.add(i[l-1>>1]):s.add(i[-l-1>>1].neg())}return"affine"===t.type?s.toP():s},oe.prototype._wnafMulAdd=function(t,e,r,n,i){var o,s,a,u=this._wnafT1,l=this._wnafT2,c=this._wnafT3,f=0;for(o=0;o<n;o++){var h=(a=e[o])._getNAFPoints(t);u[o]=h.wnd,l[o]=h.points}for(o=n-1;o>=1;o-=2){var d=o-1,p=o;if(1===u[d]&&1===u[p]){var m=[e[d],null,null,e[p]];0===e[d].y.cmp(e[p].y)?(m[1]=e[d].add(e[p]),m[2]=e[d].toJ().mixedAdd(e[p].neg())):0===e[d].y.cmp(e[p].y.redNeg())?(m[1]=e[d].toJ().mixedAdd(e[p]),m[2]=e[d].add(e[p].neg())):(m[1]=e[d].toJ().mixedAdd(e[p]),m[2]=e[d].toJ().mixedAdd(e[p].neg()));var g=[-3,-1,-5,-7,0,7,5,1,3],v=ne(r[d],r[p]);for(f=Math.max(v[0].length,f),c[d]=new Array(f),c[p]=new Array(f),s=0;s<f;s++){var y=0|v[0][s],b=0|v[1][s];c[d][s]=g[3*(y+1)+(b+1)],c[p][s]=0,l[d]=m}}else c[d]=re(r[d],u[d],this._bitLength),c[p]=re(r[p],u[p],this._bitLength),f=Math.max(c[d].length,f),f=Math.max(c[p].length,f)}var w=this.jpoint(null,null,null),E=this._wnafT4;for(o=f;o>=0;o--){for(var k=0;o>=0;){var _=!0;for(s=0;s<n;s++)E[s]=0|c[s][o],0!==E[s]&&(_=!1);if(!_)break;k++,o--}if(o>=0&&k++,w=w.dblp(k),o<0)break;for(s=0;s<n;s++){var x=E[s];0!==x&&(x>0?a=l[s][x-1>>1]:x<0&&(a=l[s][-x-1>>1].neg()),w="affine"===a.type?w.mixedAdd(a):w.add(a))}}for(o=0;o<n;o++)l[o]=null;return i?w:w.toP()},oe.BasePoint=ae,ae.prototype.eq=function(){throw new Error("Not implemented")},ae.prototype.validate=function(){return this.curve.validate(this)},oe.prototype.decodePoint=function(t,e){t=ee.toArray(t,e);var r=this.p.byteLength();if((4===t[0]||6===t[0]||7===t[0])&&t.length-1==2*r)return 6===t[0]?ie(t[t.length-1]%2==0):7===t[0]&&ie(t[t.length-1]%2==1),this.point(t.slice(1,1+r),t.slice(1+r,1+2*r));if((2===t[0]||3===t[0])&&t.length-1===r)return this.pointFromX(t.slice(1,1+r),3===t[0]);throw new Error("Unknown point format")},ae.prototype.encodeCompressed=function(t){return this.encode(t,!0)},ae.prototype._encode=function(t){var e=this.curve.p.byteLength(),r=this.getX().toArray("be",e);return t?[this.getY().isEven()?2:3].concat(r):[4].concat(r,this.getY().toArray("be",e))},ae.prototype.encode=function(t,e){return ee.encode(this._encode(e),t)},ae.prototype.precompute=function(t){if(this.precomputed)return this;var e={doubles:null,naf:null,beta:null};return e.naf=this._getNAFPoints(8),e.doubles=this._getDoubles(4,t),e.beta=this._getBeta(),this.precomputed=e,this},ae.prototype._hasDoubles=function(t){if(!this.precomputed)return!1;var e=this.precomputed.doubles;return!!e&&e.points.length>=Math.ceil((t.bitLength()+1)/e.step)},ae.prototype._getDoubles=function(t,e){if(this.precomputed&&this.precomputed.doubles)return this.precomputed.doubles;for(var r=[this],n=this,i=0;i<e;i+=t){for(var o=0;o<t;o++)n=n.dbl();r.push(n)}return{step:t,points:r}},ae.prototype._getNAFPoints=function(t){if(this.precomputed&&this.precomputed.naf)return this.precomputed.naf;for(var e=[this],r=(1<<t)-1,n=1===r?null:this.dbl(),i=1;i<r;i++)e[i]=e[i-1].add(n);return{wnd:t,points:e}},ae.prototype._getBeta=function(){return null},ae.prototype.dblp=function(t){for(var e=this,r=0;r<t;r++)e=e.dbl();return e};var ue=Zt((function(t){"function"==typeof Object.create?t.exports=function(t,e){e&&(t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(t,e){if(e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}}})),le=ee.assert;function ce(t){se.call(this,"short",t),this.a=new(S())(t.a,16).toRed(this.red),this.b=new(S())(t.b,16).toRed(this.red),this.tinv=this.two.redInvm(),this.zeroA=0===this.a.fromRed().cmpn(0),this.threeA=0===this.a.fromRed().sub(this.p).cmpn(-3),this.endo=this._getEndomorphism(t),this._endoWnafT1=new Array(4),this._endoWnafT2=new Array(4)}ue(ce,se);var fe=ce;function he(t,e,r,n){se.BasePoint.call(this,t,"affine"),null===e&&null===r?(this.x=null,this.y=null,this.inf=!0):(this.x=new(S())(e,16),this.y=new(S())(r,16),n&&(this.x.forceRed(this.curve.red),this.y.forceRed(this.curve.red)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.inf=!1)}function de(t,e,r,n){se.BasePoint.call(this,t,"jacobian"),null===e&&null===r&&null===n?(this.x=this.curve.one,this.y=this.curve.one,this.z=new(S())(0)):(this.x=new(S())(e,16),this.y=new(S())(r,16),this.z=new(S())(n,16)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.zOne=this.z===this.curve.one}ce.prototype._getEndomorphism=function(t){if(this.zeroA&&this.g&&this.n&&1===this.p.modn(3)){var e,r;if(t.beta)e=new(S())(t.beta,16).toRed(this.red);else{var n=this._getEndoRoots(this.p);e=(e=n[0].cmp(n[1])<0?n[0]:n[1]).toRed(this.red)}if(t.lambda)r=new(S())(t.lambda,16);else{var i=this._getEndoRoots(this.n);0===this.g.mul(i[0]).x.cmp(this.g.x.redMul(e))?r=i[0]:(r=i[1],le(0===this.g.mul(r).x.cmp(this.g.x.redMul(e))))}return{beta:e,lambda:r,basis:t.basis?t.basis.map((function(t){return{a:new(S())(t.a,16),b:new(S())(t.b,16)}})):this._getEndoBasis(r)}}},ce.prototype._getEndoRoots=function(t){var e=t===this.p?this.red:S().mont(t),r=new(S())(2).toRed(e).redInvm(),n=r.redNeg(),i=new(S())(3).toRed(e).redNeg().redSqrt().redMul(r);return[n.redAdd(i).fromRed(),n.redSub(i).fromRed()]},ce.prototype._getEndoBasis=function(t){for(var e,r,n,i,o,s,a,u,l,c=this.n.ushrn(Math.floor(this.n.bitLength()/2)),f=t,h=this.n.clone(),d=new(S())(1),p=new(S())(0),m=new(S())(0),g=new(S())(1),v=0;0!==f.cmpn(0);){var y=h.div(f);u=h.sub(y.mul(f)),l=m.sub(y.mul(d));var b=g.sub(y.mul(p));if(!n&&u.cmp(c)<0)e=a.neg(),r=d,n=u.neg(),i=l;else if(n&&2==++v)break;a=u,h=f,f=u,m=d,d=l,g=p,p=b}o=u.neg(),s=l;var w=n.sqr().add(i.sqr());return o.sqr().add(s.sqr()).cmp(w)>=0&&(o=e,s=r),n.negative&&(n=n.neg(),i=i.neg()),o.negative&&(o=o.neg(),s=s.neg()),[{a:n,b:i},{a:o,b:s}]},ce.prototype._endoSplit=function(t){var e=this.endo.basis,r=e[0],n=e[1],i=n.b.mul(t).divRound(this.n),o=r.b.neg().mul(t).divRound(this.n),s=i.mul(r.a),a=o.mul(n.a),u=i.mul(r.b),l=o.mul(n.b);return{k1:t.sub(s).sub(a),k2:u.add(l).neg()}},ce.prototype.pointFromX=function(t,e){(t=new(S())(t,16)).red||(t=t.toRed(this.red));var r=t.redSqr().redMul(t).redIAdd(t.redMul(this.a)).redIAdd(this.b),n=r.redSqrt();if(0!==n.redSqr().redSub(r).cmp(this.zero))throw new Error("invalid point");var i=n.fromRed().isOdd();return(e&&!i||!e&&i)&&(n=n.redNeg()),this.point(t,n)},ce.prototype.validate=function(t){if(t.inf)return!0;var e=t.x,r=t.y,n=this.a.redMul(e),i=e.redSqr().redMul(e).redIAdd(n).redIAdd(this.b);return 0===r.redSqr().redISub(i).cmpn(0)},ce.prototype._endoWnafMulAdd=function(t,e,r){for(var n=this._endoWnafT1,i=this._endoWnafT2,o=0;o<t.length;o++){var s=this._endoSplit(e[o]),a=t[o],u=a._getBeta();s.k1.negative&&(s.k1.ineg(),a=a.neg(!0)),s.k2.negative&&(s.k2.ineg(),u=u.neg(!0)),n[2*o]=a,n[2*o+1]=u,i[2*o]=s.k1,i[2*o+1]=s.k2}for(var l=this._wnafMulAdd(1,n,i,2*o,r),c=0;c<2*o;c++)n[c]=null,i[c]=null;return l},ue(he,se.BasePoint),ce.prototype.point=function(t,e,r){return new he(this,t,e,r)},ce.prototype.pointFromJSON=function(t,e){return he.fromJSON(this,t,e)},he.prototype._getBeta=function(){if(this.curve.endo){var t=this.precomputed;if(t&&t.beta)return t.beta;var e=this.curve.point(this.x.redMul(this.curve.endo.beta),this.y);if(t){var r=this.curve,n=function(t){return r.point(t.x.redMul(r.endo.beta),t.y)};t.beta=e,e.precomputed={beta:null,naf:t.naf&&{wnd:t.naf.wnd,points:t.naf.points.map(n)},doubles:t.doubles&&{step:t.doubles.step,points:t.doubles.points.map(n)}}}return e}},he.prototype.toJSON=function(){return this.precomputed?[this.x,this.y,this.precomputed&&{doubles:this.precomputed.doubles&&{step:this.precomputed.doubles.step,points:this.precomputed.doubles.points.slice(1)},naf:this.precomputed.naf&&{wnd:this.precomputed.naf.wnd,points:this.precomputed.naf.points.slice(1)}}]:[this.x,this.y]},he.fromJSON=function(t,e,r){"string"==typeof e&&(e=JSON.parse(e));var n=t.point(e[0],e[1],r);if(!e[2])return n;function i(e){return t.point(e[0],e[1],r)}var o=e[2];return n.precomputed={beta:null,doubles:o.doubles&&{step:o.doubles.step,points:[n].concat(o.doubles.points.map(i))},naf:o.naf&&{wnd:o.naf.wnd,points:[n].concat(o.naf.points.map(i))}},n},he.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+">"},he.prototype.isInfinity=function(){return this.inf},he.prototype.add=function(t){if(this.inf)return t;if(t.inf)return this;if(this.eq(t))return this.dbl();if(this.neg().eq(t))return this.curve.point(null,null);if(0===this.x.cmp(t.x))return this.curve.point(null,null);var e=this.y.redSub(t.y);0!==e.cmpn(0)&&(e=e.redMul(this.x.redSub(t.x).redInvm()));var r=e.redSqr().redISub(this.x).redISub(t.x),n=e.redMul(this.x.redSub(r)).redISub(this.y);return this.curve.point(r,n)},he.prototype.dbl=function(){if(this.inf)return this;var t=this.y.redAdd(this.y);if(0===t.cmpn(0))return this.curve.point(null,null);var e=this.curve.a,r=this.x.redSqr(),n=t.redInvm(),i=r.redAdd(r).redIAdd(r).redIAdd(e).redMul(n),o=i.redSqr().redISub(this.x.redAdd(this.x)),s=i.redMul(this.x.redSub(o)).redISub(this.y);return this.curve.point(o,s)},he.prototype.getX=function(){return this.x.fromRed()},he.prototype.getY=function(){return this.y.fromRed()},he.prototype.mul=function(t){return t=new(S())(t,16),this.isInfinity()?this:this._hasDoubles(t)?this.curve._fixedNafMul(this,t):this.curve.endo?this.curve._endoWnafMulAdd([this],[t]):this.curve._wnafMul(this,t)},he.prototype.mulAdd=function(t,e,r){var n=[this,e],i=[t,r];return this.curve.endo?this.curve._endoWnafMulAdd(n,i):this.curve._wnafMulAdd(1,n,i,2)},he.prototype.jmulAdd=function(t,e,r){var n=[this,e],i=[t,r];return this.curve.endo?this.curve._endoWnafMulAdd(n,i,!0):this.curve._wnafMulAdd(1,n,i,2,!0)},he.prototype.eq=function(t){return this===t||this.inf===t.inf&&(this.inf||0===this.x.cmp(t.x)&&0===this.y.cmp(t.y))},he.prototype.neg=function(t){if(this.inf)return this;var e=this.curve.point(this.x,this.y.redNeg());if(t&&this.precomputed){var r=this.precomputed,n=function(t){return t.neg()};e.precomputed={naf:r.naf&&{wnd:r.naf.wnd,points:r.naf.points.map(n)},doubles:r.doubles&&{step:r.doubles.step,points:r.doubles.points.map(n)}}}return e},he.prototype.toJ=function(){return this.inf?this.curve.jpoint(null,null,null):this.curve.jpoint(this.x,this.y,this.curve.one)},ue(de,se.BasePoint),ce.prototype.jpoint=function(t,e,r){return new de(this,t,e,r)},de.prototype.toP=function(){if(this.isInfinity())return this.curve.point(null,null);var t=this.z.redInvm(),e=t.redSqr(),r=this.x.redMul(e),n=this.y.redMul(e).redMul(t);return this.curve.point(r,n)},de.prototype.neg=function(){return this.curve.jpoint(this.x,this.y.redNeg(),this.z)},de.prototype.add=function(t){if(this.isInfinity())return t;if(t.isInfinity())return this;var e=t.z.redSqr(),r=this.z.redSqr(),n=this.x.redMul(e),i=t.x.redMul(r),o=this.y.redMul(e.redMul(t.z)),s=t.y.redMul(r.redMul(this.z)),a=n.redSub(i),u=o.redSub(s);if(0===a.cmpn(0))return 0!==u.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var l=a.redSqr(),c=l.redMul(a),f=n.redMul(l),h=u.redSqr().redIAdd(c).redISub(f).redISub(f),d=u.redMul(f.redISub(h)).redISub(o.redMul(c)),p=this.z.redMul(t.z).redMul(a);return this.curve.jpoint(h,d,p)},de.prototype.mixedAdd=function(t){if(this.isInfinity())return t.toJ();if(t.isInfinity())return this;var e=this.z.redSqr(),r=this.x,n=t.x.redMul(e),i=this.y,o=t.y.redMul(e).redMul(this.z),s=r.redSub(n),a=i.redSub(o);if(0===s.cmpn(0))return 0!==a.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var u=s.redSqr(),l=u.redMul(s),c=r.redMul(u),f=a.redSqr().redIAdd(l).redISub(c).redISub(c),h=a.redMul(c.redISub(f)).redISub(i.redMul(l)),d=this.z.redMul(s);return this.curve.jpoint(f,h,d)},de.prototype.dblp=function(t){if(0===t)return this;if(this.isInfinity())return this;if(!t)return this.dbl();var e;if(this.curve.zeroA||this.curve.threeA){var r=this;for(e=0;e<t;e++)r=r.dbl();return r}var n=this.curve.a,i=this.curve.tinv,o=this.x,s=this.y,a=this.z,u=a.redSqr().redSqr(),l=s.redAdd(s);for(e=0;e<t;e++){var c=o.redSqr(),f=l.redSqr(),h=f.redSqr(),d=c.redAdd(c).redIAdd(c).redIAdd(n.redMul(u)),p=o.redMul(f),m=d.redSqr().redISub(p.redAdd(p)),g=p.redISub(m),v=d.redMul(g);v=v.redIAdd(v).redISub(h);var y=l.redMul(a);e+1<t&&(u=u.redMul(h)),o=m,a=y,l=v}return this.curve.jpoint(o,l.redMul(i),a)},de.prototype.dbl=function(){return this.isInfinity()?this:this.curve.zeroA?this._zeroDbl():this.curve.threeA?this._threeDbl():this._dbl()},de.prototype._zeroDbl=function(){var t,e,r;if(this.zOne){var n=this.x.redSqr(),i=this.y.redSqr(),o=i.redSqr(),s=this.x.redAdd(i).redSqr().redISub(n).redISub(o);s=s.redIAdd(s);var a=n.redAdd(n).redIAdd(n),u=a.redSqr().redISub(s).redISub(s),l=o.redIAdd(o);l=(l=l.redIAdd(l)).redIAdd(l),t=u,e=a.redMul(s.redISub(u)).redISub(l),r=this.y.redAdd(this.y)}else{var c=this.x.redSqr(),f=this.y.redSqr(),h=f.redSqr(),d=this.x.redAdd(f).redSqr().redISub(c).redISub(h);d=d.redIAdd(d);var p=c.redAdd(c).redIAdd(c),m=p.redSqr(),g=h.redIAdd(h);g=(g=g.redIAdd(g)).redIAdd(g),t=m.redISub(d).redISub(d),e=p.redMul(d.redISub(t)).redISub(g),r=(r=this.y.redMul(this.z)).redIAdd(r)}return this.curve.jpoint(t,e,r)},de.prototype._threeDbl=function(){var t,e,r;if(this.zOne){var n=this.x.redSqr(),i=this.y.redSqr(),o=i.redSqr(),s=this.x.redAdd(i).redSqr().redISub(n).redISub(o);s=s.redIAdd(s);var a=n.redAdd(n).redIAdd(n).redIAdd(this.curve.a),u=a.redSqr().redISub(s).redISub(s);t=u;var l=o.redIAdd(o);l=(l=l.redIAdd(l)).redIAdd(l),e=a.redMul(s.redISub(u)).redISub(l),r=this.y.redAdd(this.y)}else{var c=this.z.redSqr(),f=this.y.redSqr(),h=this.x.redMul(f),d=this.x.redSub(c).redMul(this.x.redAdd(c));d=d.redAdd(d).redIAdd(d);var p=h.redIAdd(h),m=(p=p.redIAdd(p)).redAdd(p);t=d.redSqr().redISub(m),r=this.y.redAdd(this.z).redSqr().redISub(f).redISub(c);var g=f.redSqr();g=(g=(g=g.redIAdd(g)).redIAdd(g)).redIAdd(g),e=d.redMul(p.redISub(t)).redISub(g)}return this.curve.jpoint(t,e,r)},de.prototype._dbl=function(){var t=this.curve.a,e=this.x,r=this.y,n=this.z,i=n.redSqr().redSqr(),o=e.redSqr(),s=r.redSqr(),a=o.redAdd(o).redIAdd(o).redIAdd(t.redMul(i)),u=e.redAdd(e),l=(u=u.redIAdd(u)).redMul(s),c=a.redSqr().redISub(l.redAdd(l)),f=l.redISub(c),h=s.redSqr();h=(h=(h=h.redIAdd(h)).redIAdd(h)).redIAdd(h);var d=a.redMul(f).redISub(h),p=r.redAdd(r).redMul(n);return this.curve.jpoint(c,d,p)},de.prototype.trpl=function(){if(!this.curve.zeroA)return this.dbl().add(this);var t=this.x.redSqr(),e=this.y.redSqr(),r=this.z.redSqr(),n=e.redSqr(),i=t.redAdd(t).redIAdd(t),o=i.redSqr(),s=this.x.redAdd(e).redSqr().redISub(t).redISub(n),a=(s=(s=(s=s.redIAdd(s)).redAdd(s).redIAdd(s)).redISub(o)).redSqr(),u=n.redIAdd(n);u=(u=(u=u.redIAdd(u)).redIAdd(u)).redIAdd(u);var l=i.redIAdd(s).redSqr().redISub(o).redISub(a).redISub(u),c=e.redMul(l);c=(c=c.redIAdd(c)).redIAdd(c);var f=this.x.redMul(a).redISub(c);f=(f=f.redIAdd(f)).redIAdd(f);var h=this.y.redMul(l.redMul(u.redISub(l)).redISub(s.redMul(a)));h=(h=(h=h.redIAdd(h)).redIAdd(h)).redIAdd(h);var d=this.z.redAdd(s).redSqr().redISub(r).redISub(a);return this.curve.jpoint(f,h,d)},de.prototype.mul=function(t,e){return t=new(S())(t,e),this.curve._wnafMul(this,t)},de.prototype.eq=function(t){if("affine"===t.type)return this.eq(t.toJ());if(this===t)return!0;var e=this.z.redSqr(),r=t.z.redSqr();if(0!==this.x.redMul(r).redISub(t.x.redMul(e)).cmpn(0))return!1;var n=e.redMul(this.z),i=r.redMul(t.z);return 0===this.y.redMul(i).redISub(t.y.redMul(n)).cmpn(0)},de.prototype.eqXToP=function(t){var e=this.z.redSqr(),r=t.toRed(this.curve.red).redMul(e);if(0===this.x.cmp(r))return!0;for(var n=t.clone(),i=this.curve.redN.redMul(e);;){if(n.iadd(this.curve.n),n.cmp(this.curve.p)>=0)return!1;if(r.redIAdd(i),0===this.x.cmp(r))return!0}},de.prototype.inspect=function(){return this.isInfinity()?"<EC JPoint Infinity>":"<EC JPoint x: "+this.x.toString(16,2)+" y: "+this.y.toString(16,2)+" z: "+this.z.toString(16,2)+">"},de.prototype.isInfinity=function(){return 0===this.z.cmpn(0)};var pe=Zt((function(t,e){var r=e;r.base=se,r.short=fe,r.mont=null,r.edwards=null})),me=Zt((function(t,e){var r,n=e,i=ee.assert;function o(t){"short"===t.type?this.curve=new pe.short(t):"edwards"===t.type?this.curve=new pe.edwards(t):this.curve=new pe.mont(t),this.g=this.curve.g,this.n=this.curve.n,this.hash=t.hash,i(this.g.validate(),"Invalid curve"),i(this.g.mul(this.n).isInfinity(),"Invalid curve, G*N != O")}function s(t,e){Object.defineProperty(n,t,{configurable:!0,enumerable:!0,get:function(){var r=new o(e);return Object.defineProperty(n,t,{configurable:!0,enumerable:!0,value:r}),r}})}n.PresetCurve=o,s("p192",{type:"short",prime:"p192",p:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",a:"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",b:"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",n:"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",hash:Xt().sha256,gRed:!1,g:["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012","07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"]}),s("p224",{type:"short",prime:"p224",p:"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",a:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",b:"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",n:"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",hash:Xt().sha256,gRed:!1,g:["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21","bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"]}),s("p256",{type:"short",prime:null,p:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",a:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",b:"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",n:"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",hash:Xt().sha256,gRed:!1,g:["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296","4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"]}),s("p384",{type:"short",prime:null,p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",a:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",b:"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",n:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",hash:Xt().sha384,gRed:!1,g:["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7","3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"]}),s("p521",{type:"short",prime:null,p:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",a:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",b:"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",n:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",hash:Xt().sha512,gRed:!1,g:["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66","00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"]}),s("curve25519",{type:"mont",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"76d06",b:"1",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:Xt().sha256,gRed:!1,g:["9"]}),s("ed25519",{type:"edwards",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"-1",c:"1",d:"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:Xt().sha256,gRed:!1,g:["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a","6666666666666666666666666666666666666666666666666666666666666658"]});try{r=null.crash()}catch(t){r=void 0}s("secp256k1",{type:"short",prime:"k256",p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",a:"0",b:"7",n:"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",h:"1",hash:Xt().sha256,beta:"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",lambda:"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",basis:[{a:"3086d221a7d46bcde86c90e49284eb15",b:"-e4437ed6010e88286f547fa90abfe4c3"},{a:"114ca50f7a8e2f3f657c1108d9d44cfd8",b:"3086d221a7d46bcde86c90e49284eb15"}],gRed:!1,g:["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798","483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",r]})}));function ge(t){if(!(this instanceof ge))return new ge(t);this.hash=t.hash,this.predResist=!!t.predResist,this.outLen=this.hash.outSize,this.minEntropy=t.minEntropy||this.hash.hmacStrength,this._reseed=null,this.reseedInterval=null,this.K=null,this.V=null;var e=te.toArray(t.entropy,t.entropyEnc||"hex"),r=te.toArray(t.nonce,t.nonceEnc||"hex"),n=te.toArray(t.pers,t.persEnc||"hex");Yt(e.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._init(e,r,n)}var ve=ge;ge.prototype._init=function(t,e,r){var n=t.concat(e).concat(r);this.K=new Array(this.outLen/8),this.V=new Array(this.outLen/8);for(var i=0;i<this.V.length;i++)this.K[i]=0,this.V[i]=1;this._update(n),this._reseed=1,this.reseedInterval=281474976710656},ge.prototype._hmac=function(){return new(Xt().hmac)(this.hash,this.K)},ge.prototype._update=function(t){var e=this._hmac().update(this.V).update([0]);t&&(e=e.update(t)),this.K=e.digest(),this.V=this._hmac().update(this.V).digest(),t&&(this.K=this._hmac().update(this.V).update([1]).update(t).digest(),this.V=this._hmac().update(this.V).digest())},ge.prototype.reseed=function(t,e,r,n){"string"!=typeof e&&(n=r,r=e,e=null),t=te.toArray(t,e),r=te.toArray(r,n),Yt(t.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._update(t.concat(r||[])),this._reseed=1},ge.prototype.generate=function(t,e,r,n){if(this._reseed>this.reseedInterval)throw new Error("Reseed is required");"string"!=typeof e&&(n=r,r=e,e=null),r&&(r=te.toArray(r,n||"hex"),this._update(r));for(var i=[];i.length<t;)this.V=this._hmac().update(this.V).digest(),i=i.concat(this.V);var o=i.slice(0,t);return this._update(r),this._reseed++,te.encode(o,e)};var ye=ee.assert;function be(t,e){this.ec=t,this.priv=null,this.pub=null,e.priv&&this._importPrivate(e.priv,e.privEnc),e.pub&&this._importPublic(e.pub,e.pubEnc)}var we=be;be.fromPublic=function(t,e,r){return e instanceof be?e:new be(t,{pub:e,pubEnc:r})},be.fromPrivate=function(t,e,r){return e instanceof be?e:new be(t,{priv:e,privEnc:r})},be.prototype.validate=function(){var t=this.getPublic();return t.isInfinity()?{result:!1,reason:"Invalid public key"}:t.validate()?t.mul(this.ec.curve.n).isInfinity()?{result:!0,reason:null}:{result:!1,reason:"Public key * N != O"}:{result:!1,reason:"Public key is not a point"}},be.prototype.getPublic=function(t,e){return"string"==typeof t&&(e=t,t=null),this.pub||(this.pub=this.ec.g.mul(this.priv)),e?this.pub.encode(e,t):this.pub},be.prototype.getPrivate=function(t){return"hex"===t?this.priv.toString(16,2):this.priv},be.prototype._importPrivate=function(t,e){this.priv=new(S())(t,e||16),this.priv=this.priv.umod(this.ec.curve.n)},be.prototype._importPublic=function(t,e){if(t.x||t.y)return"mont"===this.ec.curve.type?ye(t.x,"Need x coordinate"):"short"!==this.ec.curve.type&&"edwards"!==this.ec.curve.type||ye(t.x&&t.y,"Need both x and y coordinate"),void(this.pub=this.ec.curve.point(t.x,t.y));this.pub=this.ec.curve.decodePoint(t,e)},be.prototype.derive=function(t){return t.validate()||ye(t.validate(),"public point not validated"),t.mul(this.priv).getX()},be.prototype.sign=function(t,e,r){return this.ec.sign(t,this,e,r)},be.prototype.verify=function(t,e){return this.ec.verify(t,e,this)},be.prototype.inspect=function(){return"<Key priv: "+(this.priv&&this.priv.toString(16,2))+" pub: "+(this.pub&&this.pub.inspect())+" >"};var Ee=ee.assert;function ke(t,e){if(t instanceof ke)return t;this._importDER(t,e)||(Ee(t.r&&t.s,"Signature without r or s"),this.r=new(S())(t.r,16),this.s=new(S())(t.s,16),void 0===t.recoveryParam?this.recoveryParam=null:this.recoveryParam=t.recoveryParam)}var _e=ke;function xe(){this.place=0}function Me(t,e){var r=t[e.place++];if(!(128&r))return r;var n=15&r;if(0===n||n>4)return!1;for(var i=0,o=0,s=e.place;o<n;o++,s++)i<<=8,i|=t[s],i>>>=0;return!(i<=127)&&(e.place=s,i)}function Ae(t){for(var e=0,r=t.length-1;!t[e]&&!(128&t[e+1])&&e<r;)e++;return 0===e?t:t.slice(e)}function Ne(t,e){if(e<128)t.push(e);else{var r=1+(Math.log(e)/Math.LN2>>>3);for(t.push(128|r);--r;)t.push(e>>>(r<<3)&255);t.push(e)}}ke.prototype._importDER=function(t,e){t=ee.toArray(t,e);var r=new xe;if(48!==t[r.place++])return!1;var n=Me(t,r);if(!1===n)return!1;if(n+r.place!==t.length)return!1;if(2!==t[r.place++])return!1;var i=Me(t,r);if(!1===i)return!1;var o=t.slice(r.place,i+r.place);if(r.place+=i,2!==t[r.place++])return!1;var s=Me(t,r);if(!1===s)return!1;if(t.length!==s+r.place)return!1;var a=t.slice(r.place,s+r.place);if(0===o[0]){if(!(128&o[1]))return!1;o=o.slice(1)}if(0===a[0]){if(!(128&a[1]))return!1;a=a.slice(1)}return this.r=new(S())(o),this.s=new(S())(a),this.recoveryParam=null,!0},ke.prototype.toDER=function(t){var e=this.r.toArray(),r=this.s.toArray();for(128&e[0]&&(e=[0].concat(e)),128&r[0]&&(r=[0].concat(r)),e=Ae(e),r=Ae(r);!(r[0]||128&r[1]);)r=r.slice(1);var n=[2];Ne(n,e.length),(n=n.concat(e)).push(2),Ne(n,r.length);var i=n.concat(r),o=[48];return Ne(o,i.length),o=o.concat(i),ee.encode(o,t)};var Pe=function(){throw new Error("unsupported")},Se=ee.assert;function Ce(t){if(!(this instanceof Ce))return new Ce(t);"string"==typeof t&&(Se(Object.prototype.hasOwnProperty.call(me,t),"Unknown curve "+t),t=me[t]),t instanceof me.PresetCurve&&(t={curve:t}),this.curve=t.curve.curve,this.n=this.curve.n,this.nh=this.n.ushrn(1),this.g=this.curve.g,this.g=t.curve.g,this.g.precompute(t.curve.n.bitLength()+1),this.hash=t.hash||t.curve.hash}var Fe=Ce;Ce.prototype.keyPair=function(t){return new we(this,t)},Ce.prototype.keyFromPrivate=function(t,e){return we.fromPrivate(this,t,e)},Ce.prototype.keyFromPublic=function(t,e){return we.fromPublic(this,t,e)},Ce.prototype.genKeyPair=function(t){t||(t={});for(var e=new ve({hash:this.hash,pers:t.pers,persEnc:t.persEnc||"utf8",entropy:t.entropy||Pe(this.hash.hmacStrength),entropyEnc:t.entropy&&t.entropyEnc||"utf8",nonce:this.n.toArray()}),r=this.n.byteLength(),n=this.n.sub(new(S())(2));;){var i=new(S())(e.generate(r));if(!(i.cmp(n)>0))return i.iaddn(1),this.keyFromPrivate(i)}},Ce.prototype._truncateToN=function(t,e){var r=8*t.byteLength()-this.n.bitLength();return r>0&&(t=t.ushrn(r)),!e&&t.cmp(this.n)>=0?t.sub(this.n):t},Ce.prototype.sign=function(t,e,r,n){"object"==typeof r&&(n=r,r=null),n||(n={}),e=this.keyFromPrivate(e,r),t=this._truncateToN(new(S())(t,16));for(var i=this.n.byteLength(),o=e.getPrivate().toArray("be",i),s=t.toArray("be",i),a=new ve({hash:this.hash,entropy:o,nonce:s,pers:n.pers,persEnc:n.persEnc||"utf8"}),u=this.n.sub(new(S())(1)),l=0;;l++){var c=n.k?n.k(l):new(S())(a.generate(this.n.byteLength()));if(!((c=this._truncateToN(c,!0)).cmpn(1)<=0||c.cmp(u)>=0)){var f=this.g.mul(c);if(!f.isInfinity()){var h=f.getX(),d=h.umod(this.n);if(0!==d.cmpn(0)){var p=c.invm(this.n).mul(d.mul(e.getPrivate()).iadd(t));if(0!==(p=p.umod(this.n)).cmpn(0)){var m=(f.getY().isOdd()?1:0)|(0!==h.cmp(d)?2:0);return n.canonical&&p.cmp(this.nh)>0&&(p=this.n.sub(p),m^=1),new _e({r:d,s:p,recoveryParam:m})}}}}}},Ce.prototype.verify=function(t,e,r,n){t=this._truncateToN(new(S())(t,16)),r=this.keyFromPublic(r,n);var i=(e=new _e(e,"hex")).r,o=e.s;if(i.cmpn(1)<0||i.cmp(this.n)>=0)return!1;if(o.cmpn(1)<0||o.cmp(this.n)>=0)return!1;var s,a=o.invm(this.n),u=a.mul(t).umod(this.n),l=a.mul(i).umod(this.n);return this.curve._maxwellTrick?!(s=this.g.jmulAdd(u,r.getPublic(),l)).isInfinity()&&s.eqXToP(i):!(s=this.g.mulAdd(u,r.getPublic(),l)).isInfinity()&&0===s.getX().umod(this.n).cmp(i)},Ce.prototype.recoverPubKey=function(t,e,r,n){Se((3&r)===r,"The recovery param is more than two bits"),e=new _e(e,n);var i=this.n,o=new(S())(t),s=e.r,a=e.s,u=1&r,l=r>>1;if(s.cmp(this.curve.p.umod(this.curve.n))>=0&&l)throw new Error("Unable to find sencond key candinate");s=l?this.curve.pointFromX(s.add(this.curve.n),u):this.curve.pointFromX(s,u);var c=e.r.invm(i),f=i.sub(o).mul(c).umod(i),h=a.mul(c).umod(i);return this.g.mulAdd(f,s,h)},Ce.prototype.getKeyRecoveryParam=function(t,e,r,n){if(null!==(e=new _e(e,n)).recoveryParam)return e.recoveryParam;for(var i=0;i<4;i++){var o;try{o=this.recoverPubKey(t,e,i)}catch(t){continue}if(o.eq(r))return i}throw new Error("Unable to find valid recovery factor")};var Re=Zt((function(t,e){var r=e;r.version="6.5.4",r.utils=ee,r.rand=function(){throw new Error("unsupported")},r.curve=pe,r.curves=me,r.ec=Fe,r.eddsa=null})).ec;const Ie=new h("signing-key/5.6.2");let Oe=null;function Te(){return Oe||(Oe=new Re("secp256k1")),Oe}class Le{constructor(t){p(this,"curve","secp256k1"),p(this,"privateKey",D(t)),32!==V(this.privateKey)&&Ie.throwArgumentError("invalid private key","privateKey","[[ REDACTED ]]");const e=Te().keyFromPrivate(L(this.privateKey));p(this,"publicKey","0x"+e.getPublic(!1,"hex")),p(this,"compressedPublicKey","0x"+e.getPublic(!0,"hex")),p(this,"_isSigningKey",!0)}_addPoint(t){const e=Te().keyFromPublic(L(this.publicKey)),r=Te().keyFromPublic(L(t));return"0x"+e.pub.add(r.pub).encodeCompressed("hex")}signDigest(t){const e=Te().keyFromPrivate(L(this.privateKey)),r=L(t);32!==r.length&&Ie.throwArgumentError("bad digest length","digest",t);const n=e.sign(r,{canonical:!0});return W({recoveryParam:n.recoveryParam,r:H("0x"+n.r.toString(16),32),s:H("0x"+n.s.toString(16),32)})}computeSharedSecret(t){const e=Te().keyFromPrivate(L(this.privateKey)),r=Te().keyFromPublic(L(Be(t)));return H("0x"+e.derive(r.getPublic()).toString(16),32)}static isSigningKey(t){return!(!t||!t._isSigningKey)}}function Be(t,e){const r=L(t);if(32===r.length){const t=new Le(r);return e?"0x"+Te().keyFromPrivate(r).getPublic(!0,"hex"):t.publicKey}return 33===r.length?e?D(r):"0x"+Te().keyFromPublic(r).getPublic(!1,"hex"):65===r.length?e?"0x"+Te().keyFromPublic(r).getPublic(!0,"hex"):D(r):Ie.throwArgumentError("invalid public or private key","key","[REDACTED]")}const je=new h("transactions/5.6.2");var Ue;function qe(t){return"0x"===t?null:wt(t)}function De(t){return"0x"===t?Kt:Q.from(t)}function Ve(t,e){return function(t){return wt(z(st(z(Be(t),1)),12))}(function(t,e){const r=W(e),n={r:L(r.r),s:L(r.s)};return"0x"+Te().recoverPubKey(L(t),n,r.recoveryParam).encode("hex",!1)}(L(t),e))}function ze(t,e){const r=j(Q.from(t).toHexString());return r.length>32&&je.throwArgumentError("invalid length for "+e,"transaction:"+e,t),r}function $e(t,e){return{address:wt(t),storageKeys:(e||[]).map(((e,r)=>(32!==V(e)&&je.throwArgumentError("invalid access list storageKey",`accessList[${t}:${r}]`,e),e.toLowerCase())))}}function Ge(t){if(Array.isArray(t))return t.map(((t,e)=>Array.isArray(t)?(t.length>2&&je.throwArgumentError("access list expected to be [ address, storageKeys[] ]",`value[${e}]`,t),$e(t[0],t[1])):$e(t.address,t.storageKeys)));const e=Object.keys(t).map((e=>{const r=t[e].reduce(((t,e)=>(t[e]=!0,t)),{});return $e(e,Object.keys(r).sort())}));return e.sort(((t,e)=>t.address.localeCompare(e.address))),e}function He(t){return Ge(t).map((t=>[t.address,t.storageKeys]))}function We(t,e){if(null!=t.gasPrice){const e=Q.from(t.gasPrice),r=Q.from(t.maxFeePerGas||0);e.eq(r)||je.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas","tx",{gasPrice:e,maxFeePerGas:r})}const r=[ze(t.chainId||0,"chainId"),ze(t.nonce||0,"nonce"),ze(t.maxPriorityFeePerGas||0,"maxPriorityFeePerGas"),ze(t.maxFeePerGas||0,"maxFeePerGas"),ze(t.gasLimit||0,"gasLimit"),null!=t.to?wt(t.to):"0x",ze(t.value||0,"value"),t.data||"0x",He(t.accessList||[])];if(e){const t=W(e);r.push(ze(t.recoveryParam,"recoveryParam")),r.push(j(t.r)),r.push(j(t.s))}return $(["0x02",ft(r)])}function Ke(t,e){const r=[ze(t.chainId||0,"chainId"),ze(t.nonce||0,"nonce"),ze(t.gasPrice||0,"gasPrice"),ze(t.gasLimit||0,"gasLimit"),null!=t.to?wt(t.to):"0x",ze(t.value||0,"value"),t.data||"0x",He(t.accessList||[])];if(e){const t=W(e);r.push(ze(t.recoveryParam,"recoveryParam")),r.push(j(t.r)),r.push(j(t.s))}return $(["0x01",ft(r)])}function Je(t,e,r){try{const r=De(e[0]).toNumber();if(0!==r&&1!==r)throw new Error("bad recid");t.v=r}catch(t){je.throwArgumentError("invalid v for transaction type: 1","v",e[0])}t.r=H(e[1],32),t.s=H(e[2],32);try{const e=st(r(t));t.from=Ve(e,{r:t.r,s:t.s,recoveryParam:t.v})}catch(t){}}function Xe(t){t=atob(t);const e=[];for(let r=0;r<t.length;r++)e.push(t.charCodeAt(r));return L(e)}function Ze(t){t=L(t);let e="";for(let r=0;r<t.length;r++)e+=String.fromCharCode(t[r]);return btoa(e)}!function(t){t[t.legacy=0]="legacy",t[t.eip2930=1]="eip2930",t[t.eip1559=2]="eip1559"}(Ue||(Ue={}));function Ye(t,e){return r=this,n=void 0,o=function*(){null==e&&(e={});const r={method:e.method||"GET",headers:e.headers||{},body:e.body||void 0};!0!==e.skipFetchSetup&&(r.mode="cors",r.cache="no-cache",r.credentials="same-origin",r.redirect="follow",r.referrer="client");const n=yield fetch(t,r),i=yield n.arrayBuffer(),o={};return n.headers.forEach?n.headers.forEach(((t,e)=>{o[e.toLowerCase()]=t})):n.headers.keys().forEach((t=>{o[t.toLowerCase()]=n.headers.get(t)})),{headers:o,statusCode:n.status,statusMessage:n.statusText,body:L(new Uint8Array(i))}},new((i=void 0)||(i=Promise))((function(t,e){function s(t){try{u(o.next(t))}catch(t){e(t)}}function a(t){try{u(o.throw(t))}catch(t){e(t)}}function u(e){var r;e.done?t(e.value):(r=e.value,r instanceof i?r:new i((function(t){t(r)}))).then(s,a)}u((o=o.apply(r,n||[])).next())}));var r,n,i,o}const Qe=new h("web/5.6.1");function tr(t){return new Promise((e=>{setTimeout(e,t)}))}function er(t,e){if(null==t)return null;if("string"==typeof t)return t;if(I(t)){if(e&&("text"===e.split("/")[0]||"application/json"===e.split(";")[0].trim()))try{return Ct(t)}catch(t){}return D(t)}return t}function rr(t,e,r){let n=null;if(null!=e){n=Pt(e);const r="string"==typeof t?{url:t}:v(t);r.headers?0!==Object.keys(r.headers).filter((t=>"content-type"===t.toLowerCase())).length||(r.headers=v(r.headers),r.headers["content-type"]="application/json"):r.headers={"content-type":"application/json"},t=r}return function(t,e,r){const n="object"==typeof t&&null!=t.throttleLimit?t.throttleLimit:12;Qe.assertArgument(n>0&&n%1==0,"invalid connection throttle limit","connection.throttleLimit",n);const i="object"==typeof t?t.throttleCallback:null,o="object"==typeof t&&"number"==typeof t.throttleSlotInterval?t.throttleSlotInterval:100;Qe.assertArgument(o>0&&o%1==0,"invalid connection throttle slot interval","connection.throttleSlotInterval",o);const s="object"==typeof t&&!!t.errorPassThrough,a={};let u=null;const l={method:"GET"};let c=!1,f=12e4;if("string"==typeof t)u=t;else if("object"==typeof t){if(null!=t&&null!=t.url||Qe.throwArgumentError("missing URL","connection.url",t),u=t.url,"number"==typeof t.timeout&&t.timeout>0&&(f=t.timeout),t.headers)for(const e in t.headers)a[e.toLowerCase()]={key:e,value:String(t.headers[e])},["if-none-match","if-modified-since"].indexOf(e.toLowerCase())>=0&&(c=!0);if(l.allowGzip=!!t.allowGzip,null!=t.user&&null!=t.password){"https:"!==u.substring(0,6)&&!0!==t.allowInsecureAuthentication&&Qe.throwError("basic authentication requires a secure https url",h.errors.INVALID_ARGUMENT,{argument:"url",url:u,user:t.user,password:"[REDACTED]"});const e=t.user+":"+t.password;a.authorization={key:"Authorization",value:"Basic "+Ze(Pt(e))}}null!=t.skipFetchSetup&&(l.skipFetchSetup=!!t.skipFetchSetup)}const d=new RegExp("^data:([a-z0-9-]+/[a-z0-9-]+);base64,(.*)$","i"),p=u?u.match(d):null;if(p)try{const t={statusCode:200,statusMessage:"OK",headers:{"content-type":p[1]},body:Xe(p[2])};let e=t.body;return r&&(e=r(t.body,t)),Promise.resolve(e)}catch(t){Qe.throwError("processing response error",h.errors.SERVER_ERROR,{body:er(p[1],p[2]),error:t,requestBody:null,requestMethod:"GET",url:u})}e&&(l.method="POST",l.body=e,null==a["content-type"]&&(a["content-type"]={key:"Content-Type",value:"application/octet-stream"}),null==a["content-length"]&&(a["content-length"]={key:"Content-Length",value:String(e.length)}));const m={};Object.keys(a).forEach((t=>{const e=a[t];m[e.key]=e.value})),l.headers=m;const g=function(){let t=null;return{promise:new Promise((function(e,r){f&&(t=setTimeout((()=>{null!=t&&(t=null,r(Qe.makeError("timeout",h.errors.TIMEOUT,{requestBody:er(l.body,m["content-type"]),requestMethod:l.method,timeout:f,url:u})))}),f))})),cancel:function(){null!=t&&(clearTimeout(t),t=null)}}}(),v=function(){return t=this,e=void 0,f=function*(){for(let t=0;t<n;t++){let e=null;try{if(e=yield Ye(u,l),t<n)if(301===e.statusCode||302===e.statusCode){const t=e.headers.location||"";if("GET"===l.method&&t.match(/^https:/)){u=e.headers.location;continue}}else if(429===e.statusCode){let r=!0;if(i&&(r=yield i(t,u)),r){let r=0;const n=e.headers["retry-after"];r="string"==typeof n&&n.match(/^[1-9][0-9]*$/)?1e3*parseInt(n):o*parseInt(String(Math.random()*Math.pow(2,t))),yield tr(r);continue}}}catch(t){e=t.response,null==e&&(g.cancel(),Qe.throwError("missing response",h.errors.SERVER_ERROR,{requestBody:er(l.body,m["content-type"]),requestMethod:l.method,serverError:t,url:u}))}let a=e.body;if(c&&304===e.statusCode?a=null:!s&&(e.statusCode<200||e.statusCode>=300)&&(g.cancel(),Qe.throwError("bad response",h.errors.SERVER_ERROR,{status:e.statusCode,headers:e.headers,body:er(a,e.headers?e.headers["content-type"]:null),requestBody:er(l.body,m["content-type"]),requestMethod:l.method,url:u})),r)try{const t=yield r(a,e);return g.cancel(),t}catch(r){if(r.throttleRetry&&t<n){let e=!0;if(i&&(e=yield i(t,u)),e){const e=o*parseInt(String(Math.random()*Math.pow(2,t)));yield tr(e);continue}}g.cancel(),Qe.throwError("processing response error",h.errors.SERVER_ERROR,{body:er(a,e.headers?e.headers["content-type"]:null),error:r,requestBody:er(l.body,m["content-type"]),requestMethod:l.method,url:u})}return g.cancel(),a}return Qe.throwError("failed response",h.errors.SERVER_ERROR,{requestBody:er(l.body,m["content-type"]),requestMethod:l.method,url:u})},new((a=void 0)||(a=Promise))((function(r,n){function i(t){try{s(f.next(t))}catch(t){n(t)}}function o(t){try{s(f.throw(t))}catch(t){n(t)}}function s(t){var e;t.done?r(t.value):(e=t.value,e instanceof a?e:new a((function(t){t(e)}))).then(i,o)}s((f=f.apply(t,e||[])).next())}));var t,e,a,f}();return Promise.race([g.promise,v])}(t,n,((t,e)=>{let n=null;if(null!=t)try{n=JSON.parse(Ct(t))}catch(e){Qe.throwError("invalid JSON",h.errors.SERVER_ERROR,{body:t,error:e})}return r&&(n=r(n,e)),n}))}function nr(t,e){return e||(e={}),null==(e=v(e)).floor&&(e.floor=0),null==e.ceiling&&(e.ceiling=1e4),null==e.interval&&(e.interval=250),new Promise((function(r,n){let i=null,o=!1;const s=()=>!o&&(o=!0,i&&clearTimeout(i),!0);e.timeout&&(i=setTimeout((()=>{s()&&n(new Error("timeout"))}),e.timeout));const a=e.retryLimit;let u=0;!function i(){return t().then((function(t){if(void 0!==t)s()&&r(t);else if(e.oncePoll)e.oncePoll.once("poll",i);else if(e.onceBlock)e.onceBlock.once("block",i);else if(!o){if(u++,u>a)return void(s()&&n(new Error("retry limit reached")));let t=e.interval*parseInt(String(Math.random()*Math.pow(2,u)));t<e.floor&&(t=e.floor),t>e.ceiling&&(t=e.ceiling),setTimeout(i,t)}return null}),(function(t){s()&&n(t)}))}()}))}const ir=new h("abstract-provider/5.6.1");class or{constructor(){ir.checkAbstract(new.target,or),p(this,"_isProvider",!0)}getFeeData(){return t=this,e=void 0,n=function*(){const{block:t,gasPrice:e}=yield g({block:this.getBlock("latest"),gasPrice:this.getGasPrice().catch((t=>null))});let r=null,n=null;return t&&t.baseFeePerGas&&(n=Q.from("1500000000"),r=t.baseFeePerGas.mul(2).add(n)),{maxFeePerGas:r,maxPriorityFeePerGas:n,gasPrice:e}},new((r=void 0)||(r=Promise))((function(i,o){function s(t){try{u(n.next(t))}catch(t){o(t)}}function a(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}));var t,e,r,n}addListener(t,e){return this.on(t,e)}removeListener(t,e){return this.off(t,e)}static isProvider(t){return!(!t||!t._isProvider)}}class sr{constructor(t){p(this,"alphabet",t),p(this,"base",t.length),p(this,"_alphabetMap",{}),p(this,"_leader",t.charAt(0));for(let e=0;e<t.length;e++)this._alphabetMap[t.charAt(e)]=e}encode(t){let e=L(t);if(0===e.length)return"";let r=[0];for(let t=0;t<e.length;++t){let n=e[t];for(let t=0;t<r.length;++t)n+=r[t]<<8,r[t]=n%this.base,n=n/this.base|0;for(;n>0;)r.push(n%this.base),n=n/this.base|0}let n="";for(let t=0;0===e[t]&&t<e.length-1;++t)n+=this._leader;for(let t=r.length-1;t>=0;--t)n+=this.alphabet[r[t]];return n}decode(t){if("string"!=typeof t)throw new TypeError("Expected String");let e=[];if(0===t.length)return new Uint8Array(e);e.push(0);for(let r=0;r<t.length;r++){let n=this._alphabetMap[t[r]];if(void 0===n)throw new Error("Non-base"+this.base+" character");let i=n;for(let t=0;t<e.length;++t)i+=e[t]*this.base,e[t]=255&i,i>>=8;for(;i>0;)e.push(255&i),i>>=8}for(let r=0;t[r]===this._leader&&r<t.length-1;++r)e.push(0);return L(new Uint8Array(e.reverse()))}}new sr("abcdefghijklmnopqrstuvwxyz234567");const ar=new sr("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");function ur(t,e){e||(e=function(t){return[parseInt(t,16)]});let r=0,n={};return t.split(",").forEach((t=>{let i=t.split(":");r+=parseInt(i[0],16),n[r]=e(i[1])})),n}function lr(t){let e=0;return t.split(",").map((t=>{let r=t.split("-");1===r.length?r[1]="0":""===r[1]&&(r[1]="1");let n=e+parseInt(r[0],16);return e=parseInt(r[1],16),{l:n,h:e}}))}function cr(t,e){let r=0;for(let n=0;n<e.length;n++){let i=e[n];if(r+=i.l,t>=r&&t<=r+i.h&&(t-r)%(i.d||1)==0){if(i.e&&-1!==i.e.indexOf(t-r))continue;return i}}return null}const fr=lr("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d"),hr="ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((t=>parseInt(t,16))),dr=[{h:25,s:32,l:65},{h:30,s:32,e:[23],l:127},{h:54,s:1,e:[48],l:64,d:2},{h:14,s:1,l:57,d:2},{h:44,s:1,l:17,d:2},{h:10,s:1,e:[2,6,8],l:61,d:2},{h:16,s:1,l:68,d:2},{h:84,s:1,e:[18,24,66],l:19,d:2},{h:26,s:32,e:[17],l:435},{h:22,s:1,l:71,d:2},{h:15,s:80,l:40},{h:31,s:32,l:16},{h:32,s:1,l:80,d:2},{h:52,s:1,l:42,d:2},{h:12,s:1,l:55,d:2},{h:40,s:1,e:[38],l:15,d:2},{h:14,s:1,l:48,d:2},{h:37,s:48,l:49},{h:148,s:1,l:6351,d:2},{h:88,s:1,l:160,d:2},{h:15,s:16,l:704},{h:25,s:26,l:854},{h:25,s:32,l:55915},{h:37,s:40,l:1247},{h:25,s:-119711,l:53248},{h:25,s:-119763,l:52},{h:25,s:-119815,l:52},{h:25,s:-119867,e:[1,4,5,7,8,11,12,17],l:52},{h:25,s:-119919,l:52},{h:24,s:-119971,e:[2,7,8,17],l:52},{h:24,s:-120023,e:[2,7,13,15,16,17],l:52},{h:25,s:-120075,l:52},{h:25,s:-120127,l:52},{h:25,s:-120179,l:52},{h:25,s:-120231,l:52},{h:25,s:-120283,l:52},{h:25,s:-120335,l:52},{h:24,s:-119543,e:[17],l:56},{h:24,s:-119601,e:[17],l:58},{h:24,s:-119659,e:[17],l:58},{h:24,s:-119717,e:[17],l:58},{h:24,s:-119775,e:[17],l:58}],pr=ur("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3"),mr=ur("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7"),gr=ur("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D",(function(t){if(t.length%4!=0)throw new Error("bad data");let e=[];for(let r=0;r<t.length;r+=4)e.push(parseInt(t.substring(r,r+4),16));return e})),vr=lr("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");function yr(t){if(t.match(/^[a-z0-9-]*$/i)&&t.length<=59)return t.toLowerCase();let e=Ft(t);var r;r=e.map((t=>{if(hr.indexOf(t)>=0)return[];if(t>=65024&&t<=65039)return[];let e=function(t){let e=cr(t,dr);if(e)return[t+e.s];let r=pr[t];if(r)return r;let n=mr[t];return n?[t+n[0]]:gr[t]||null}(t);return e||[t]})),e=r.reduce(((t,e)=>(e.forEach((e=>{t.push(e)})),t)),[]),e=Ft(St(e),_t.NFKC),e.forEach((t=>{if(cr(t,vr))throw new Error("STRINGPREP_CONTAINS_PROHIBITED")})),e.forEach((t=>{if(cr(t,fr))throw new Error("STRINGPREP_CONTAINS_UNASSIGNED")}));let n=St(e);if("-"===n.substring(0,1)||"--"===n.substring(2,4)||"-"===n.substring(n.length-1))throw new Error("invalid hyphen");if(n.length>63)throw new Error("too long");return n}const br=new h(Et),wr=new Uint8Array(32);wr.fill(0);const Er=new RegExp("^((.*)\\.)?([^.]+)$");function kr(t){"string"!=typeof t&&br.throwArgumentError("invalid ENS name; not a string","name",t);let e=t,r=wr;for(;e.length;){const n=e.match(Er);null!=n&&""!==n[2]||br.throwArgumentError("invalid ENS address; missing component","name",t),r=st(B([r,st(Pt(yr(n[3])))])),e=n[2]||""}return D(r)}const _r=new h("networks/5.6.4");function xr(t){const e=function(e,r){null==r&&(r={});const n=[];if(e.InfuraProvider&&"-"!==r.infura)try{n.push(new e.InfuraProvider(t,r.infura))}catch(t){}if(e.EtherscanProvider&&"-"!==r.etherscan)try{n.push(new e.EtherscanProvider(t,r.etherscan))}catch(t){}if(e.AlchemyProvider&&"-"!==r.alchemy)try{n.push(new e.AlchemyProvider(t,r.alchemy))}catch(t){}if(e.PocketProvider&&"-"!==r.pocket){const i=["goerli","ropsten","rinkeby"];try{const o=new e.PocketProvider(t,r.pocket);o.network&&-1===i.indexOf(o.network.name)&&n.push(o)}catch(t){}}if(e.CloudflareProvider&&"-"!==r.cloudflare)try{n.push(new e.CloudflareProvider(t))}catch(t){}if(e.AnkrProvider&&"-"!==r.ankr)try{const i=["ropsten"],o=new e.AnkrProvider(t,r.ankr);o.network&&-1===i.indexOf(o.network.name)&&n.push(o)}catch(t){}if(0===n.length)return null;if(e.FallbackProvider){let i=1;return null!=r.quorum?i=r.quorum:"homestead"===t&&(i=2),new e.FallbackProvider(n,i)}return n[0]};return e.renetwork=function(t){return xr(t)},e}function Mr(t,e){const r=function(r,n){return r.JsonRpcProvider?new r.JsonRpcProvider(t,e):null};return r.renetwork=function(e){return Mr(t,e)},r}const Ar={chainId:1,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"homestead",_defaultProvider:xr("homestead")},Nr={chainId:3,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"ropsten",_defaultProvider:xr("ropsten")},Pr={chainId:63,name:"classicMordor",_defaultProvider:Mr("https://www.ethercluster.com/mordor","classicMordor")},Sr={unspecified:{chainId:0,name:"unspecified"},homestead:Ar,mainnet:Ar,morden:{chainId:2,name:"morden"},ropsten:Nr,testnet:Nr,rinkeby:{chainId:4,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"rinkeby",_defaultProvider:xr("rinkeby")},kovan:{chainId:42,name:"kovan",_defaultProvider:xr("kovan")},goerli:{chainId:5,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"goerli",_defaultProvider:xr("goerli")},kintsugi:{chainId:1337702,name:"kintsugi"},classic:{chainId:61,name:"classic",_defaultProvider:Mr("https://www.ethercluster.com/etc","classic")},classicMorden:{chainId:62,name:"classicMorden"},classicMordor:Pr,classicTestnet:Pr,classicKotti:{chainId:6,name:"classicKotti",_defaultProvider:Mr("https://www.ethercluster.com/kotti","classicKotti")},xdai:{chainId:100,name:"xdai"},matic:{chainId:137,name:"matic",_defaultProvider:xr("matic")},maticmum:{chainId:80001,name:"maticmum"},optimism:{chainId:10,name:"optimism",_defaultProvider:xr("optimism")},"optimism-kovan":{chainId:69,name:"optimism-kovan"},"optimism-goerli":{chainId:420,name:"optimism-goerli"},arbitrum:{chainId:42161,name:"arbitrum"},"arbitrum-rinkeby":{chainId:421611,name:"arbitrum-rinkeby"},bnb:{chainId:56,name:"bnb"},bnbt:{chainId:97,name:"bnbt"}};function Cr(t){return"0x"+Xt().sha256().update(L(t)).digest("hex")}new h("sha2/5.6.1");var Fr=r(882),Rr=r.n(Fr);const Ir=new h(k);class Or{constructor(){this.formats=this.getDefaultFormats()}getDefaultFormats(){const t={},e=this.address.bind(this),r=this.bigNumber.bind(this),n=this.blockTag.bind(this),i=this.data.bind(this),o=this.hash.bind(this),s=this.hex.bind(this),a=this.number.bind(this),u=this.type.bind(this);return t.transaction={hash:o,type:u,accessList:Or.allowNull(this.accessList.bind(this),null),blockHash:Or.allowNull(o,null),blockNumber:Or.allowNull(a,null),transactionIndex:Or.allowNull(a,null),confirmations:Or.allowNull(a,null),from:e,gasPrice:Or.allowNull(r),maxPriorityFeePerGas:Or.allowNull(r),maxFeePerGas:Or.allowNull(r),gasLimit:r,to:Or.allowNull(e,null),value:r,nonce:a,data:i,r:Or.allowNull(this.uint256),s:Or.allowNull(this.uint256),v:Or.allowNull(a),creates:Or.allowNull(e,null),raw:Or.allowNull(i)},t.transactionRequest={from:Or.allowNull(e),nonce:Or.allowNull(a),gasLimit:Or.allowNull(r),gasPrice:Or.allowNull(r),maxPriorityFeePerGas:Or.allowNull(r),maxFeePerGas:Or.allowNull(r),to:Or.allowNull(e),value:Or.allowNull(r),data:Or.allowNull((t=>this.data(t,!0))),type:Or.allowNull(a),accessList:Or.allowNull(this.accessList.bind(this),null)},t.receiptLog={transactionIndex:a,blockNumber:a,transactionHash:o,address:e,topics:Or.arrayOf(o),data:i,logIndex:a,blockHash:o},t.receipt={to:Or.allowNull(this.address,null),from:Or.allowNull(this.address,null),contractAddress:Or.allowNull(e,null),transactionIndex:a,root:Or.allowNull(s),gasUsed:r,logsBloom:Or.allowNull(i),blockHash:o,transactionHash:o,logs:Or.arrayOf(this.receiptLog.bind(this)),blockNumber:a,confirmations:Or.allowNull(a,null),cumulativeGasUsed:r,effectiveGasPrice:Or.allowNull(r),status:Or.allowNull(a),type:u},t.block={hash:Or.allowNull(o),parentHash:o,number:a,timestamp:a,nonce:Or.allowNull(s),difficulty:this.difficulty.bind(this),gasLimit:r,gasUsed:r,miner:Or.allowNull(e),extraData:i,transactions:Or.allowNull(Or.arrayOf(o)),baseFeePerGas:Or.allowNull(r)},t.blockWithTransactions=v(t.block),t.blockWithTransactions.transactions=Or.allowNull(Or.arrayOf(this.transactionResponse.bind(this))),t.filter={fromBlock:Or.allowNull(n,void 0),toBlock:Or.allowNull(n,void 0),blockHash:Or.allowNull(o,void 0),address:Or.allowNull(e,void 0),topics:Or.allowNull(this.topics.bind(this),void 0)},t.filterLog={blockNumber:Or.allowNull(a),blockHash:Or.allowNull(o),transactionIndex:a,removed:Or.allowNull(this.boolean.bind(this)),address:e,data:Or.allowFalsish(i,"0x"),topics:Or.arrayOf(o),transactionHash:o,logIndex:a},t}accessList(t){return Ge(t||[])}number(t){return"0x"===t?0:Q.from(t).toNumber()}type(t){return"0x"===t||null==t?0:Q.from(t).toNumber()}bigNumber(t){return Q.from(t)}boolean(t){if("boolean"==typeof t)return t;if("string"==typeof t){if("true"===(t=t.toLowerCase()))return!0;if("false"===t)return!1}throw new Error("invalid boolean - "+t)}hex(t,e){return"string"==typeof t&&(e||"0x"===t.substring(0,2)||(t="0x"+t),U(t))?t.toLowerCase():Ir.throwArgumentError("invalid hash","value",t)}data(t,e){const r=this.hex(t,e);if(r.length%2!=0)throw new Error("invalid data; odd-length - "+t);return r}address(t){return wt(t)}callAddress(t){if(!U(t,32))return null;const e=wt(z(t,12));return"0x0000000000000000000000000000000000000000"===e?null:e}contractAddress(t){return function(t){let e=null;try{e=wt(t.from)}catch(e){mt.throwArgumentError("missing from address","transaction",t)}return wt(z(st(ft([e,j(L(Q.from(t.nonce).toHexString()))])),12))}(t)}blockTag(t){if(null==t)return"latest";if("earliest"===t)return"0x0";if("latest"===t||"pending"===t)return t;if("number"==typeof t||U(t))return G(t);throw new Error("invalid blockTag")}hash(t,e){const r=this.hex(t,e);return 32!==V(r)?Ir.throwArgumentError("invalid hash","value",t):r}difficulty(t){if(null==t)return null;const e=Q.from(t);try{return e.toNumber()}catch(t){}return null}uint256(t){if(!U(t))throw new Error("invalid uint256");return H(t,32)}_block(t,e){null!=t.author&&null==t.miner&&(t.miner=t.author);const r=null!=t._difficulty?t._difficulty:t.difficulty,n=Or.check(e,t);return n._difficulty=null==r?null:Q.from(r),n}block(t){return this._block(t,this.formats.block)}blockWithTransactions(t){return this._block(t,this.formats.blockWithTransactions)}transactionRequest(t){return Or.check(this.formats.transactionRequest,t)}transactionResponse(t){null!=t.gas&&null==t.gasLimit&&(t.gasLimit=t.gas),t.to&&Q.from(t.to).isZero()&&(t.to="0x0000000000000000000000000000000000000000"),null!=t.input&&null==t.data&&(t.data=t.input),null==t.to&&null==t.creates&&(t.creates=this.contractAddress(t)),1!==t.type&&2!==t.type||null!=t.accessList||(t.accessList=[]);const e=Or.check(this.formats.transaction,t);if(null!=t.chainId){let r=t.chainId;U(r)&&(r=Q.from(r).toNumber()),e.chainId=r}else{let r=t.networkId;null==r&&null==e.v&&(r=t.chainId),U(r)&&(r=Q.from(r).toNumber()),"number"!=typeof r&&null!=e.v&&(r=(e.v-35)/2,r<0&&(r=0),r=parseInt(r)),"number"!=typeof r&&(r=0),e.chainId=r}return e.blockHash&&"x"===e.blockHash.replace(/0/g,"")&&(e.blockHash=null),e}transaction(t){return function(t){const e=L(t);if(e[0]>127)return function(t){const e=pt(t);9!==e.length&&6!==e.length&&je.throwArgumentError("invalid raw transaction","rawTransaction",t);const r={nonce:De(e[0]).toNumber(),gasPrice:De(e[1]),gasLimit:De(e[2]),to:qe(e[3]),value:De(e[4]),data:e[5],chainId:0};if(6===e.length)return r;try{r.v=Q.from(e[6]).toNumber()}catch(t){return r}if(r.r=H(e[7],32),r.s=H(e[8],32),Q.from(r.r).isZero()&&Q.from(r.s).isZero())r.chainId=r.v,r.v=0;else{r.chainId=Math.floor((r.v-35)/2),r.chainId<0&&(r.chainId=0);let n=r.v-27;const i=e.slice(0,6);0!==r.chainId&&(i.push(D(r.chainId)),i.push("0x"),i.push("0x"),n-=2*r.chainId+8);const o=st(ft(i));try{r.from=Ve(o,{r:D(r.r),s:D(r.s),recoveryParam:n})}catch(t){}r.hash=st(t)}return r.type=null,r}(e);switch(e[0]){case 1:return function(t){const e=pt(t.slice(1));8!==e.length&&11!==e.length&&je.throwArgumentError("invalid component count for transaction type: 1","payload",D(t));const r={type:1,chainId:De(e[0]).toNumber(),nonce:De(e[1]).toNumber(),gasPrice:De(e[2]),gasLimit:De(e[3]),to:qe(e[4]),value:De(e[5]),data:e[6],accessList:Ge(e[7])};return 8===e.length||(r.hash=st(t),Je(r,e.slice(8),Ke)),r}(e);case 2:return function(t){const e=pt(t.slice(1));9!==e.length&&12!==e.length&&je.throwArgumentError("invalid component count for transaction type: 2","payload",D(t));const r=De(e[2]),n=De(e[3]),i={type:2,chainId:De(e[0]).toNumber(),nonce:De(e[1]).toNumber(),maxPriorityFeePerGas:r,maxFeePerGas:n,gasPrice:null,gasLimit:De(e[4]),to:qe(e[5]),value:De(e[6]),data:e[7],accessList:Ge(e[8])};return 9===e.length||(i.hash=st(t),Je(i,e.slice(9),We)),i}(e)}return je.throwError(`unsupported transaction type: ${e[0]}`,h.errors.UNSUPPORTED_OPERATION,{operation:"parseTransaction",transactionType:e[0]})}(t)}receiptLog(t){return Or.check(this.formats.receiptLog,t)}receipt(t){const e=Or.check(this.formats.receipt,t);if(null!=e.root)if(e.root.length<=4){const t=Q.from(e.root).toNumber();0===t||1===t?(null!=e.status&&e.status!==t&&Ir.throwArgumentError("alt-root-status/status mismatch","value",{root:e.root,status:e.status}),e.status=t,delete e.root):Ir.throwArgumentError("invalid alt-root-status","value.root",e.root)}else 66!==e.root.length&&Ir.throwArgumentError("invalid root hash","value.root",e.root);return null!=e.status&&(e.byzantium=!0),e}topics(t){return Array.isArray(t)?t.map((t=>this.topics(t))):null!=t?this.hash(t,!0):null}filter(t){return Or.check(this.formats.filter,t)}filterLog(t){return Or.check(this.formats.filterLog,t)}static check(t,e){const r={};for(const n in t)try{const i=t[n](e[n]);void 0!==i&&(r[n]=i)}catch(t){throw t.checkKey=n,t.checkValue=e[n],t}return r}static allowNull(t,e){return function(r){return null==r?e:t(r)}}static allowFalsish(t,e){return function(r){return r?t(r):e}}static arrayOf(t){return function(e){if(!Array.isArray(e))throw new Error("not an array");const r=[];return e.forEach((function(e){r.push(t(e))})),r}}}var Tr=function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function s(t){try{u(n.next(t))}catch(t){o(t)}}function a(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};const Lr=new h(k);function Br(t){return null==t?"null":(32!==V(t)&&Lr.throwArgumentError("invalid topic","topic",t),t.toLowerCase())}function jr(t){for(t=t.slice();t.length>0&&null==t[t.length-1];)t.pop();return t.map((t=>{if(Array.isArray(t)){const e={};t.forEach((t=>{e[Br(t)]=!0}));const r=Object.keys(e);return r.sort(),r.join("|")}return Br(t)})).join("&")}function Ur(t){if("string"==typeof t){if(32===V(t=t.toLowerCase()))return"tx:"+t;if(-1===t.indexOf(":"))return t}else{if(Array.isArray(t))return"filter:*:"+jr(t);if(class extends class{constructor(t){for(const e in t)this[e]=E(t[e])}}{static isForkEvent(t){return!(!t||!t._isForkEvent)}}.isForkEvent(t))throw Lr.warn("not implemented"),new Error("not implemented");if(t&&"object"==typeof t)return"filter:"+(t.address||"*")+":"+jr(t.topics||[])}throw new Error("invalid event - "+t)}function qr(){return(new Date).getTime()}function Dr(t){return new Promise((e=>{setTimeout(e,t)}))}const Vr=["block","network","pending","poll"];class zr{constructor(t,e,r){p(this,"tag",t),p(this,"listener",e),p(this,"once",r),this._lastBlockNumber=-2,this._inflight=!1}get event(){switch(this.type){case"tx":return this.hash;case"filter":return this.filter}return this.tag}get type(){return this.tag.split(":")[0]}get hash(){const t=this.tag.split(":");return"tx"!==t[0]?null:t[1]}get filter(){const t=this.tag.split(":");if("filter"!==t[0])return null;const e=t[1],r=""===(n=t[2])?[]:n.split(/&/g).map((t=>{if(""===t)return[];const e=t.split("|").map((t=>"null"===t?null:t));return 1===e.length?e[0]:e}));var n;const i={};return r.length>0&&(i.topics=r),e&&"*"!==e&&(i.address=e),i}pollable(){return this.tag.indexOf(":")>=0||Vr.indexOf(this.tag)>=0}}const $r={0:{symbol:"btc",p2pkh:0,p2sh:5,prefix:"bc"},2:{symbol:"ltc",p2pkh:48,p2sh:50,prefix:"ltc"},3:{symbol:"doge",p2pkh:30,p2sh:22},60:{symbol:"eth",ilk:"eth"},61:{symbol:"etc",ilk:"eth"},700:{symbol:"xdai",ilk:"eth"}};function Gr(t){return H(Q.from(t).toHexString(),32)}function Hr(t){return ar.encode(B([t,z(Cr(Cr(t)),0,4)]))}const Wr=new RegExp("^(ipfs)://(.*)$","i"),Kr=[new RegExp("^(https)://(.*)$","i"),new RegExp("^(data):(.*)$","i"),Wr,new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$","i")];function Jr(t,e){try{return Ct(Xr(t,e))}catch(t){}return null}function Xr(t,e){if("0x"===t)return null;const r=Q.from(z(t,e,e+32)).toNumber(),n=Q.from(z(t,r,r+32)).toNumber();return z(t,r+32,r+32+n)}function Zr(t){return t.match(/^ipfs:\/\/ipfs\//i)?t=t.substring(12):t.match(/^ipfs:\/\//i)?t=t.substring(7):Lr.throwArgumentError("unsupported IPFS format","link",t),`https://gateway.ipfs.io/ipfs/${t}`}function Yr(t){const e=L(t);if(e.length>32)throw new Error("internal; should not happen");const r=new Uint8Array(32);return r.set(e,32-e.length),r}function Qr(t){if(t.length%32==0)return t;const e=new Uint8Array(32*Math.ceil(t.length/32));return e.set(t),e}function tn(t){const e=[];let r=0;for(let n=0;n<t.length;n++)e.push(null),r+=32;for(let n=0;n<t.length;n++){const i=L(t[n]);e[n]=Yr(r),e.push(Yr(i.length)),e.push(Qr(i)),r+=32+32*Math.ceil(i.length/32)}return $(e)}class en{constructor(t,e,r,n){p(this,"provider",t),p(this,"name",r),p(this,"address",t.formatter.address(e)),p(this,"_resolvedAddress",n)}supportsWildcard(){return this._supportsEip2544||(this._supportsEip2544=this.provider.call({to:this.address,data:"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000"}).then((t=>Q.from(t).eq(1))).catch((t=>{if(t.code===h.errors.CALL_EXCEPTION)return!1;throw this._supportsEip2544=null,t}))),this._supportsEip2544}_fetch(t,e){return Tr(this,void 0,void 0,(function*(){const r={to:this.address,ccipReadEnabled:!0,data:$([t,kr(this.name),e||"0x"])};let n=!1;var i;(yield this.supportsWildcard())&&(n=!0,r.data=$(["0x9061b923",tn([(i=this.name,D(B(i.split(".").map((t=>{const e=Pt("_"+yr(t));return e[0]=e.length-1,e}))))+"00"),r.data])]));try{let t=yield this.provider.call(r);return L(t).length%32==4&&Lr.throwError("resolver threw error",h.errors.CALL_EXCEPTION,{transaction:r,data:t}),n&&(t=Xr(t,0)),t}catch(t){if(t.code===h.errors.CALL_EXCEPTION)return null;throw t}}))}_fetchBytes(t,e){return Tr(this,void 0,void 0,(function*(){const r=yield this._fetch(t,e);return null!=r?Xr(r,0):null}))}_getAddress(t,e){const r=$r[String(t)];if(null==r&&Lr.throwError(`unsupported coin type: ${t}`,h.errors.UNSUPPORTED_OPERATION,{operation:`getAddress(${t})`}),"eth"===r.ilk)return this.provider.formatter.address(e);const n=L(e);if(null!=r.p2pkh){const t=e.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);if(t){const e=parseInt(t[1],16);if(t[2].length===2*e&&e>=1&&e<=75)return Hr(B([[r.p2pkh],"0x"+t[2]]))}}if(null!=r.p2sh){const t=e.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);if(t){const e=parseInt(t[1],16);if(t[2].length===2*e&&e>=1&&e<=75)return Hr(B([[r.p2sh],"0x"+t[2]]))}}if(null!=r.prefix){const t=n[1];let e=n[0];if(0===e?20!==t&&32!==t&&(e=-1):e=-1,e>=0&&n.length===2+t&&t>=1&&t<=75){const t=Rr().toWords(n.slice(2));return t.unshift(e),Rr().encode(r.prefix,t)}}return null}getAddress(t){return Tr(this,void 0,void 0,(function*(){if(null==t&&(t=60),60===t)try{const t=yield this._fetch("0x3b3b57de");return"0x"===t||"0x0000000000000000000000000000000000000000000000000000000000000000"===t?null:this.provider.formatter.callAddress(t)}catch(t){if(t.code===h.errors.CALL_EXCEPTION)return null;throw t}const e=yield this._fetchBytes("0xf1cb7e06",Gr(t));if(null==e||"0x"===e)return null;const r=this._getAddress(t,e);return null==r&&Lr.throwError("invalid or unsupported coin data",h.errors.UNSUPPORTED_OPERATION,{operation:`getAddress(${t})`,coinType:t,data:e}),r}))}getAvatar(){return Tr(this,void 0,void 0,(function*(){const t=[{type:"name",content:this.name}];try{const e=yield this.getText("avatar");if(null==e)return null;for(let r=0;r<Kr.length;r++){const n=e.match(Kr[r]);if(null==n)continue;const i=n[1].toLowerCase();switch(i){case"https":return t.push({type:"url",content:e}),{linkage:t,url:e};case"data":return t.push({type:"data",content:e}),{linkage:t,url:e};case"ipfs":return t.push({type:"ipfs",content:e}),{linkage:t,url:Zr(e)};case"erc721":case"erc1155":{const r="erc721"===i?"0xc87b56dd":"0x0e89341c";t.push({type:i,content:e});const o=this._resolvedAddress||(yield this.getAddress()),s=(n[2]||"").split("/");if(2!==s.length)return null;const a=yield this.provider.formatter.address(s[0]),u=H(Q.from(s[1]).toHexString(),32);if("erc721"===i){const e=this.provider.formatter.callAddress(yield this.provider.call({to:a,data:$(["0x6352211e",u])}));if(o!==e)return null;t.push({type:"owner",content:e})}else if("erc1155"===i){const e=Q.from(yield this.provider.call({to:a,data:$(["0x00fdd58e",H(o,32),u])}));if(e.isZero())return null;t.push({type:"balance",content:e.toString()})}const l={to:this.provider.formatter.address(s[0]),data:$([r,u])};let c=Jr(yield this.provider.call(l),0);if(null==c)return null;t.push({type:"metadata-url-base",content:c}),"erc1155"===i&&(c=c.replace("{id}",u.substring(2)),t.push({type:"metadata-url-expanded",content:c})),c.match(/^ipfs:/i)&&(c=Zr(c)),t.push({type:"metadata-url",content:c});const f=yield rr(c);if(!f)return null;t.push({type:"metadata",content:JSON.stringify(f)});let h=f.image;if("string"!=typeof h)return null;if(h.match(/^(https:\/\/|data:)/i));else{if(null==h.match(Wr))return null;t.push({type:"url-ipfs",content:h}),h=Zr(h)}return t.push({type:"url",content:h}),{linkage:t,url:h}}}}}catch(t){}return null}))}getContentHash(){return Tr(this,void 0,void 0,(function*(){const t=yield this._fetchBytes("0xbc1c58d1");if(null==t||"0x"===t)return null;const e=t.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);if(e){const t=parseInt(e[3],16);if(e[4].length===2*t)return"ipfs://"+ar.encode("0x"+e[1])}const r=t.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);if(r){const t=parseInt(r[3],16);if(r[4].length===2*t)return"ipns://"+ar.encode("0x"+r[1])}const n=t.match(/^0xe40101fa011b20([0-9a-f]*)$/);if(n&&64===n[1].length)return"bzz://"+n[1];const i=t.match(/^0x90b2c605([0-9a-f]*)$/);if(i&&68===i[1].length){const t={"=":"","+":"-","/":"_"};return"sia://"+Ze("0x"+i[1]).replace(/[=+\/]/g,(e=>t[e]))}return Lr.throwError("invalid or unsupported content hash data",h.errors.UNSUPPORTED_OPERATION,{operation:"getContentHash()",data:t})}))}getText(t){return Tr(this,void 0,void 0,(function*(){let e=Pt(t);e=B([Gr(64),Gr(e.length),e]),e.length%32!=0&&(e=B([e,H("0x",32-t.length%32)]));const r=yield this._fetchBytes("0x59d1d43c",D(e));return null==r||"0x"===r?null:Ct(r)}))}}let rn=null,nn=1;class on extends or{constructor(t){if(super(),this._events=[],this._emitted={block:-2},this.disableCcipRead=!1,this.formatter=new.target.getFormatter(),p(this,"anyNetwork","any"===t),this.anyNetwork&&(t=this.detectNetwork()),t instanceof Promise)this._networkPromise=t,t.catch((t=>{})),this._ready().catch((t=>{}));else{const e=m(new.target,"getNetwork")(t);e?(p(this,"_network",e),this.emit("network",e,null)):Lr.throwArgumentError("invalid network","network",t)}this._maxInternalBlockNumber=-1024,this._lastBlockNumber=-2,this._maxFilterBlockRange=10,this._pollingInterval=4e3,this._fastQueryDate=0}_ready(){return Tr(this,void 0,void 0,(function*(){if(null==this._network){let t=null;if(this._networkPromise)try{t=yield this._networkPromise}catch(t){}null==t&&(t=yield this.detectNetwork()),t||Lr.throwError("no network detected",h.errors.UNKNOWN_ERROR,{}),null==this._network&&(this.anyNetwork?this._network=t:p(this,"_network",t),this.emit("network",t,null))}return this._network}))}get ready(){return nr((()=>this._ready().then((t=>t),(t=>{if(t.code!==h.errors.NETWORK_ERROR||"noNetwork"!==t.event)throw t}))))}static getFormatter(){return null==rn&&(rn=new Or),rn}static getNetwork(t){return function(t){if(null==t)return null;if("number"==typeof t){for(const e in Sr){const r=Sr[e];if(r.chainId===t)return{name:r.name,chainId:r.chainId,ensAddress:r.ensAddress||null,_defaultProvider:r._defaultProvider||null}}return{chainId:t,name:"unknown"}}if("string"==typeof t){const e=Sr[t];return null==e?null:{name:e.name,chainId:e.chainId,ensAddress:e.ensAddress,_defaultProvider:e._defaultProvider||null}}const e=Sr[t.name];if(!e)return"number"!=typeof t.chainId&&_r.throwArgumentError("invalid network chainId","network",t),t;0!==t.chainId&&t.chainId!==e.chainId&&_r.throwArgumentError("network chainId mismatch","network",t);let r=t._defaultProvider||null;var n;return null==r&&e._defaultProvider&&(r=(n=e._defaultProvider)&&"function"==typeof n.renetwork?e._defaultProvider.renetwork(t):e._defaultProvider),{name:t.name,chainId:e.chainId,ensAddress:t.ensAddress||e.ensAddress||null,_defaultProvider:r}}(null==t?"homestead":t)}ccipReadFetch(t,e,r){return Tr(this,void 0,void 0,(function*(){if(this.disableCcipRead||0===r.length)return null;const n=t.to.toLowerCase(),i=e.toLowerCase(),o=[];for(let t=0;t<r.length;t++){const e=r[t],s=e.replace("{sender}",n).replace("{data}",i),a=e.indexOf("{data}")>=0?null:JSON.stringify({data:i,sender:n}),u=yield rr({url:s,errorPassThrough:!0},a,((t,e)=>(t.status=e.statusCode,t)));if(u.data)return u.data;const l=u.message||"unknown error";if(u.status>=400&&u.status<500)return Lr.throwError(`response not found during CCIP fetch: ${l}`,h.errors.SERVER_ERROR,{url:e,errorMessage:l});o.push(l)}return Lr.throwError(`error encountered during CCIP fetch: ${o.map((t=>JSON.stringify(t))).join(", ")}`,h.errors.SERVER_ERROR,{urls:r,errorMessages:o})}))}_getInternalBlockNumber(t){return Tr(this,void 0,void 0,(function*(){if(yield this._ready(),t>0)for(;this._internalBlockNumber;){const e=this._internalBlockNumber;try{const r=yield e;if(qr()-r.respTime<=t)return r.blockNumber;break}catch(t){if(this._internalBlockNumber===e)break}}const e=qr(),r=g({blockNumber:this.perform("getBlockNumber",{}),networkError:this.getNetwork().then((t=>null),(t=>t))}).then((({blockNumber:t,networkError:n})=>{if(n)throw this._internalBlockNumber===r&&(this._internalBlockNumber=null),n;const i=qr();return(t=Q.from(t).toNumber())<this._maxInternalBlockNumber&&(t=this._maxInternalBlockNumber),this._maxInternalBlockNumber=t,this._setFastBlockNumber(t),{blockNumber:t,reqTime:e,respTime:i}}));return this._internalBlockNumber=r,r.catch((t=>{this._internalBlockNumber===r&&(this._internalBlockNumber=null)})),(yield r).blockNumber}))}poll(){return Tr(this,void 0,void 0,(function*(){const t=nn++,e=[];let r=null;try{r=yield this._getInternalBlockNumber(100+this.pollingInterval/2)}catch(t){return void this.emit("error",t)}if(this._setFastBlockNumber(r),this.emit("poll",t,r),r!==this._lastBlockNumber){if(-2===this._emitted.block&&(this._emitted.block=r-1),Math.abs(this._emitted.block-r)>1e3)Lr.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${r})`),this.emit("error",Lr.makeError("network block skew detected",h.errors.NETWORK_ERROR,{blockNumber:r,event:"blockSkew",previousBlockNumber:this._emitted.block})),this.emit("block",r);else for(let t=this._emitted.block+1;t<=r;t++)this.emit("block",t);this._emitted.block!==r&&(this._emitted.block=r,Object.keys(this._emitted).forEach((t=>{if("block"===t)return;const e=this._emitted[t];"pending"!==e&&r-e>12&&delete this._emitted[t]}))),-2===this._lastBlockNumber&&(this._lastBlockNumber=r-1),this._events.forEach((t=>{switch(t.type){case"tx":{const r=t.hash;let n=this.getTransactionReceipt(r).then((t=>t&&null!=t.blockNumber?(this._emitted["t:"+r]=t.blockNumber,this.emit(r,t),null):null)).catch((t=>{this.emit("error",t)}));e.push(n);break}case"filter":if(!t._inflight){t._inflight=!0;const n=t.filter;n.fromBlock=t._lastBlockNumber+1,n.toBlock=r,n.toBlock-this._maxFilterBlockRange>n.fromBlock&&(n.fromBlock=n.toBlock-this._maxFilterBlockRange);const i=this.getLogs(n).then((e=>{t._inflight=!1,0!==e.length&&e.forEach((e=>{e.blockNumber>t._lastBlockNumber&&(t._lastBlockNumber=e.blockNumber),this._emitted["b:"+e.blockHash]=e.blockNumber,this._emitted["t:"+e.transactionHash]=e.blockNumber,this.emit(n,e)}))})).catch((e=>{this.emit("error",e),t._inflight=!1}));e.push(i)}}})),this._lastBlockNumber=r,Promise.all(e).then((()=>{this.emit("didPoll",t)})).catch((t=>{this.emit("error",t)}))}else this.emit("didPoll",t)}))}resetEventsBlock(t){this._lastBlockNumber=t-1,this.polling&&this.poll()}get network(){return this._network}detectNetwork(){return Tr(this,void 0,void 0,(function*(){return Lr.throwError("provider does not support network detection",h.errors.UNSUPPORTED_OPERATION,{operation:"provider.detectNetwork"})}))}getNetwork(){return Tr(this,void 0,void 0,(function*(){const t=yield this._ready(),e=yield this.detectNetwork();if(t.chainId!==e.chainId){if(this.anyNetwork)return this._network=e,this._lastBlockNumber=-2,this._fastBlockNumber=null,this._fastBlockNumberPromise=null,this._fastQueryDate=0,this._emitted.block=-2,this._maxInternalBlockNumber=-1024,this._internalBlockNumber=null,this.emit("network",e,t),yield Dr(0),this._network;const r=Lr.makeError("underlying network changed",h.errors.NETWORK_ERROR,{event:"changed",network:t,detectedNetwork:e});throw this.emit("error",r),r}return t}))}get blockNumber(){return this._getInternalBlockNumber(100+this.pollingInterval/2).then((t=>{this._setFastBlockNumber(t)}),(t=>{})),null!=this._fastBlockNumber?this._fastBlockNumber:-1}get polling(){return null!=this._poller}set polling(t){t&&!this._poller?(this._poller=setInterval((()=>{this.poll()}),this.pollingInterval),this._bootstrapPoll||(this._bootstrapPoll=setTimeout((()=>{this.poll(),this._bootstrapPoll=setTimeout((()=>{this._poller||this.poll(),this._bootstrapPoll=null}),this.pollingInterval)}),0))):!t&&this._poller&&(clearInterval(this._poller),this._poller=null)}get pollingInterval(){return this._pollingInterval}set pollingInterval(t){if("number"!=typeof t||t<=0||parseInt(String(t))!=t)throw new Error("invalid polling interval");this._pollingInterval=t,this._poller&&(clearInterval(this._poller),this._poller=setInterval((()=>{this.poll()}),this._pollingInterval))}_getFastBlockNumber(){const t=qr();return t-this._fastQueryDate>2*this._pollingInterval&&(this._fastQueryDate=t,this._fastBlockNumberPromise=this.getBlockNumber().then((t=>((null==this._fastBlockNumber||t>this._fastBlockNumber)&&(this._fastBlockNumber=t),this._fastBlockNumber)))),this._fastBlockNumberPromise}_setFastBlockNumber(t){null!=this._fastBlockNumber&&t<this._fastBlockNumber||(this._fastQueryDate=qr(),(null==this._fastBlockNumber||t>this._fastBlockNumber)&&(this._fastBlockNumber=t,this._fastBlockNumberPromise=Promise.resolve(t)))}waitForTransaction(t,e,r){return Tr(this,void 0,void 0,(function*(){return this._waitForTransaction(t,null==e?1:e,r||0,null)}))}_waitForTransaction(t,e,r,n){return Tr(this,void 0,void 0,(function*(){const i=yield this.getTransactionReceipt(t);return(i?i.confirmations:0)>=e?i:new Promise(((i,o)=>{const s=[];let a=!1;const u=function(){return!!a||(a=!0,s.forEach((t=>{t()})),!1)},l=t=>{t.confirmations<e||u()||i(t)};if(this.on(t,l),s.push((()=>{this.removeListener(t,l)})),n){let r=n.startBlock,i=null;const l=s=>Tr(this,void 0,void 0,(function*(){a||(yield Dr(1e3),this.getTransactionCount(n.from).then((c=>Tr(this,void 0,void 0,(function*(){if(!a){if(c<=n.nonce)r=s;else{{const e=yield this.getTransaction(t);if(e&&null!=e.blockNumber)return}for(null==i&&(i=r-3,i<n.startBlock&&(i=n.startBlock));i<=s;){if(a)return;const r=yield this.getBlockWithTransactions(i);for(let i=0;i<r.transactions.length;i++){const s=r.transactions[i];if(s.hash===t)return;if(s.from===n.from&&s.nonce===n.nonce){if(a)return;const r=yield this.waitForTransaction(s.hash,e);if(u())return;let i="replaced";return s.data===n.data&&s.to===n.to&&s.value.eq(n.value)?i="repriced":"0x"===s.data&&s.from===s.to&&s.value.isZero()&&(i="cancelled"),void o(Lr.makeError("transaction was replaced",h.errors.TRANSACTION_REPLACED,{cancelled:"replaced"===i||"cancelled"===i,reason:i,replacement:this._wrapTransaction(s),hash:t,receipt:r}))}}i++}}a||this.once("block",l)}}))),(t=>{a||this.once("block",l)})))}));if(a)return;this.once("block",l),s.push((()=>{this.removeListener("block",l)}))}if("number"==typeof r&&r>0){const t=setTimeout((()=>{u()||o(Lr.makeError("timeout exceeded",h.errors.TIMEOUT,{timeout:r}))}),r);t.unref&&t.unref(),s.push((()=>{clearTimeout(t)}))}}))}))}getBlockNumber(){return Tr(this,void 0,void 0,(function*(){return this._getInternalBlockNumber(0)}))}getGasPrice(){return Tr(this,void 0,void 0,(function*(){yield this.getNetwork();const t=yield this.perform("getGasPrice",{});try{return Q.from(t)}catch(e){return Lr.throwError("bad result from backend",h.errors.SERVER_ERROR,{method:"getGasPrice",result:t,error:e})}}))}getBalance(t,e){return Tr(this,void 0,void 0,(function*(){yield this.getNetwork();const r=yield g({address:this._getAddress(t),blockTag:this._getBlockTag(e)}),n=yield this.perform("getBalance",r);try{return Q.from(n)}catch(t){return Lr.throwError("bad result from backend",h.errors.SERVER_ERROR,{method:"getBalance",params:r,result:n,error:t})}}))}getTransactionCount(t,e){return Tr(this,void 0,void 0,(function*(){yield this.getNetwork();const r=yield g({address:this._getAddress(t),blockTag:this._getBlockTag(e)}),n=yield this.perform("getTransactionCount",r);try{return Q.from(n).toNumber()}catch(t){return Lr.throwError("bad result from backend",h.errors.SERVER_ERROR,{method:"getTransactionCount",params:r,result:n,error:t})}}))}getCode(t,e){return Tr(this,void 0,void 0,(function*(){yield this.getNetwork();const r=yield g({address:this._getAddress(t),blockTag:this._getBlockTag(e)}),n=yield this.perform("getCode",r);try{return D(n)}catch(t){return Lr.throwError("bad result from backend",h.errors.SERVER_ERROR,{method:"getCode",params:r,result:n,error:t})}}))}getStorageAt(t,e,r){return Tr(this,void 0,void 0,(function*(){yield this.getNetwork();const n=yield g({address:this._getAddress(t),blockTag:this._getBlockTag(r),position:Promise.resolve(e).then((t=>G(t)))}),i=yield this.perform("getStorageAt",n);try{return D(i)}catch(t){return Lr.throwError("bad result from backend",h.errors.SERVER_ERROR,{method:"getStorageAt",params:n,result:i,error:t})}}))}_wrapTransaction(t,e,r){if(null!=e&&32!==V(e))throw new Error("invalid response - sendTransaction");const n=t;return null!=e&&t.hash!==e&&Lr.throwError("Transaction hash mismatch from Provider.sendTransaction.",h.errors.UNKNOWN_ERROR,{expectedHash:t.hash,returnedHash:e}),n.wait=(e,n)=>Tr(this,void 0,void 0,(function*(){let i;null==e&&(e=1),null==n&&(n=0),0!==e&&null!=r&&(i={data:t.data,from:t.from,nonce:t.nonce,to:t.to,value:t.value,startBlock:r});const o=yield this._waitForTransaction(t.hash,e,n,i);return null==o&&0===e?null:(this._emitted["t:"+t.hash]=o.blockNumber,0===o.status&&Lr.throwError("transaction failed",h.errors.CALL_EXCEPTION,{transactionHash:t.hash,transaction:t,receipt:o}),o)})),n}sendTransaction(t){return Tr(this,void 0,void 0,(function*(){yield this.getNetwork();const e=yield Promise.resolve(t).then((t=>D(t))),r=this.formatter.transaction(t);null==r.confirmations&&(r.confirmations=0);const n=yield this._getInternalBlockNumber(100+2*this.pollingInterval);try{const t=yield this.perform("sendTransaction",{signedTransaction:e});return this._wrapTransaction(r,t,n)}catch(t){throw t.transaction=r,t.transactionHash=r.hash,t}}))}_getTransactionRequest(t){return Tr(this,void 0,void 0,(function*(){const e=yield t,r={};return["from","to"].forEach((t=>{null!=e[t]&&(r[t]=Promise.resolve(e[t]).then((t=>t?this._getAddress(t):null)))})),["gasLimit","gasPrice","maxFeePerGas","maxPriorityFeePerGas","value"].forEach((t=>{null!=e[t]&&(r[t]=Promise.resolve(e[t]).then((t=>t?Q.from(t):null)))})),["type"].forEach((t=>{null!=e[t]&&(r[t]=Promise.resolve(e[t]).then((t=>null!=t?t:null)))})),e.accessList&&(r.accessList=this.formatter.accessList(e.accessList)),["data"].forEach((t=>{null!=e[t]&&(r[t]=Promise.resolve(e[t]).then((t=>t?D(t):null)))})),this.formatter.transactionRequest(yield g(r))}))}_getFilter(t){return Tr(this,void 0,void 0,(function*(){t=yield t;const e={};return null!=t.address&&(e.address=this._getAddress(t.address)),["blockHash","topics"].forEach((r=>{null!=t[r]&&(e[r]=t[r])})),["fromBlock","toBlock"].forEach((r=>{null!=t[r]&&(e[r]=this._getBlockTag(t[r]))})),this.formatter.filter(yield g(e))}))}_call(t,e,r){return Tr(this,void 0,void 0,(function*(){r>=10&&Lr.throwError("CCIP read exceeded maximum redirections",h.errors.SERVER_ERROR,{redirects:r,transaction:t});const n=t.to,i=yield this.perform("call",{transaction:t,blockTag:e});if(r>=0&&"latest"===e&&null!=n&&"0x556f1830"===i.substring(0,10)&&V(i)%32==4)try{const o=z(i,4),s=z(o,0,32);Q.from(s).eq(n)||Lr.throwError("CCIP Read sender did not match",h.errors.CALL_EXCEPTION,{name:"OffchainLookup",signature:"OffchainLookup(address,string[],bytes,bytes4,bytes)",transaction:t,data:i});const a=[],u=Q.from(z(o,32,64)).toNumber(),l=Q.from(z(o,u,u+32)).toNumber(),c=z(o,u+32);for(let e=0;e<l;e++){const r=Jr(c,32*e);null==r&&Lr.throwError("CCIP Read contained corrupt URL string",h.errors.CALL_EXCEPTION,{name:"OffchainLookup",signature:"OffchainLookup(address,string[],bytes,bytes4,bytes)",transaction:t,data:i}),a.push(r)}const f=Xr(o,64);Q.from(z(o,100,128)).isZero()||Lr.throwError("CCIP Read callback selector included junk",h.errors.CALL_EXCEPTION,{name:"OffchainLookup",signature:"OffchainLookup(address,string[],bytes,bytes4,bytes)",transaction:t,data:i});const d=z(o,96,100),p=Xr(o,128),m=yield this.ccipReadFetch(t,f,a);null==m&&Lr.throwError("CCIP Read disabled or provided no URLs",h.errors.CALL_EXCEPTION,{name:"OffchainLookup",signature:"OffchainLookup(address,string[],bytes,bytes4,bytes)",transaction:t,data:i});const g={to:n,data:$([d,tn([m,p])])};return this._call(g,e,r+1)}catch(t){if(t.code===h.errors.SERVER_ERROR)throw t}try{return D(i)}catch(r){return Lr.throwError("bad result from backend",h.errors.SERVER_ERROR,{method:"call",params:{transaction:t,blockTag:e},result:i,error:r})}}))}call(t,e){return Tr(this,void 0,void 0,(function*(){yield this.getNetwork();const r=yield g({transaction:this._getTransactionRequest(t),blockTag:this._getBlockTag(e),ccipReadEnabled:Promise.resolve(t.ccipReadEnabled)});return this._call(r.transaction,r.blockTag,r.ccipReadEnabled?0:-1)}))}estimateGas(t){return Tr(this,void 0,void 0,(function*(){yield this.getNetwork();const e=yield g({transaction:this._getTransactionRequest(t)}),r=yield this.perform("estimateGas",e);try{return Q.from(r)}catch(t){return Lr.throwError("bad result from backend",h.errors.SERVER_ERROR,{method:"estimateGas",params:e,result:r,error:t})}}))}_getAddress(t){return Tr(this,void 0,void 0,(function*(){"string"!=typeof(t=yield t)&&Lr.throwArgumentError("invalid address or ENS name","name",t);const e=yield this.resolveName(t);return null==e&&Lr.throwError("ENS name not configured",h.errors.UNSUPPORTED_OPERATION,{operation:`resolveName(${JSON.stringify(t)})`}),e}))}_getBlock(t,e){return Tr(this,void 0,void 0,(function*(){yield this.getNetwork(),t=yield t;let r=-128;const n={includeTransactions:!!e};if(U(t,32))n.blockHash=t;else try{n.blockTag=yield this._getBlockTag(t),U(n.blockTag)&&(r=parseInt(n.blockTag.substring(2),16))}catch(e){Lr.throwArgumentError("invalid block hash or block tag","blockHashOrBlockTag",t)}return nr((()=>Tr(this,void 0,void 0,(function*(){const t=yield this.perform("getBlock",n);if(null==t)return null!=n.blockHash&&null==this._emitted["b:"+n.blockHash]||null!=n.blockTag&&r>this._emitted.block?null:void 0;if(e){let e=null;for(let r=0;r<t.transactions.length;r++){const n=t.transactions[r];if(null==n.blockNumber)n.confirmations=0;else if(null==n.confirmations){null==e&&(e=yield this._getInternalBlockNumber(100+2*this.pollingInterval));let t=e-n.blockNumber+1;t<=0&&(t=1),n.confirmations=t}}const r=this.formatter.blockWithTransactions(t);return r.transactions=r.transactions.map((t=>this._wrapTransaction(t))),r}return this.formatter.block(t)}))),{oncePoll:this})}))}getBlock(t){return this._getBlock(t,!1)}getBlockWithTransactions(t){return this._getBlock(t,!0)}getTransaction(t){return Tr(this,void 0,void 0,(function*(){yield this.getNetwork(),t=yield t;const e={transactionHash:this.formatter.hash(t,!0)};return nr((()=>Tr(this,void 0,void 0,(function*(){const r=yield this.perform("getTransaction",e);if(null==r)return null==this._emitted["t:"+t]?null:void 0;const n=this.formatter.transactionResponse(r);if(null==n.blockNumber)n.confirmations=0;else if(null==n.confirmations){let t=(yield this._getInternalBlockNumber(100+2*this.pollingInterval))-n.blockNumber+1;t<=0&&(t=1),n.confirmations=t}return this._wrapTransaction(n)}))),{oncePoll:this})}))}getTransactionReceipt(t){return Tr(this,void 0,void 0,(function*(){yield this.getNetwork(),t=yield t;const e={transactionHash:this.formatter.hash(t,!0)};return nr((()=>Tr(this,void 0,void 0,(function*(){const r=yield this.perform("getTransactionReceipt",e);if(null==r)return null==this._emitted["t:"+t]?null:void 0;if(null==r.blockHash)return;const n=this.formatter.receipt(r);if(null==n.blockNumber)n.confirmations=0;else if(null==n.confirmations){let t=(yield this._getInternalBlockNumber(100+2*this.pollingInterval))-n.blockNumber+1;t<=0&&(t=1),n.confirmations=t}return n}))),{oncePoll:this})}))}getLogs(t){return Tr(this,void 0,void 0,(function*(){yield this.getNetwork();const e=yield g({filter:this._getFilter(t)}),r=yield this.perform("getLogs",e);return r.forEach((t=>{null==t.removed&&(t.removed=!1)})),Or.arrayOf(this.formatter.filterLog.bind(this.formatter))(r)}))}getEtherPrice(){return Tr(this,void 0,void 0,(function*(){return yield this.getNetwork(),this.perform("getEtherPrice",{})}))}_getBlockTag(t){return Tr(this,void 0,void 0,(function*(){if("number"==typeof(t=yield t)&&t<0){t%1&&Lr.throwArgumentError("invalid BlockTag","blockTag",t);let e=yield this._getInternalBlockNumber(100+2*this.pollingInterval);return e+=t,e<0&&(e=0),this.formatter.blockTag(e)}return this.formatter.blockTag(t)}))}getResolver(t){return Tr(this,void 0,void 0,(function*(){let e=t;for(;;){if(""===e||"."===e)return null;if("eth"!==t&&"eth"===e)return null;const r=yield this._getResolver(e,"getResolver");if(null!=r){const n=new en(this,r,t);return e===t||(yield n.supportsWildcard())?n:null}e=e.split(".").slice(1).join(".")}}))}_getResolver(t,e){return Tr(this,void 0,void 0,(function*(){null==e&&(e="ENS");const r=yield this.getNetwork();r.ensAddress||Lr.throwError("network does not support ENS",h.errors.UNSUPPORTED_OPERATION,{operation:e,network:r.name});try{const e=yield this.call({to:r.ensAddress,data:"0x0178b8bf"+kr(t).substring(2)});return this.formatter.callAddress(e)}catch(t){}return null}))}resolveName(t){return Tr(this,void 0,void 0,(function*(){t=yield t;try{return Promise.resolve(this.formatter.address(t))}catch(e){if(U(t))throw e}"string"!=typeof t&&Lr.throwArgumentError("invalid ENS name","name",t);const e=yield this.getResolver(t);return e?yield e.getAddress():null}))}lookupAddress(t){return Tr(this,void 0,void 0,(function*(){t=yield t;const e=(t=this.formatter.address(t)).substring(2).toLowerCase()+".addr.reverse",r=yield this._getResolver(e,"lookupAddress");if(null==r)return null;const n=Jr(yield this.call({to:r,data:"0x691f3431"+kr(e).substring(2)}),0);return(yield this.resolveName(n))!=t?null:n}))}getAvatar(t){return Tr(this,void 0,void 0,(function*(){let e=null;if(U(t)){const r=this.formatter.address(t).substring(2).toLowerCase()+".addr.reverse",n=yield this._getResolver(r,"getAvatar");if(!n)return null;e=new en(this,n,r);try{const t=yield e.getAvatar();if(t)return t.url}catch(t){if(t.code!==h.errors.CALL_EXCEPTION)throw t}try{const t=Jr(yield this.call({to:n,data:"0x691f3431"+kr(r).substring(2)}),0);e=yield this.getResolver(t)}catch(t){if(t.code!==h.errors.CALL_EXCEPTION)throw t;return null}}else if(e=yield this.getResolver(t),!e)return null;const r=yield e.getAvatar();return null==r?null:r.url}))}perform(t,e){return Lr.throwError(t+" not implemented",h.errors.NOT_IMPLEMENTED,{operation:t})}_startEvent(t){this.polling=this._events.filter((t=>t.pollable())).length>0}_stopEvent(t){this.polling=this._events.filter((t=>t.pollable())).length>0}_addEventListener(t,e,r){const n=new zr(Ur(t),e,r);return this._events.push(n),this._startEvent(n),this}on(t,e){return this._addEventListener(t,e,!1)}once(t,e){return this._addEventListener(t,e,!0)}emit(t,...e){let r=!1,n=[],i=Ur(t);return this._events=this._events.filter((t=>t.tag!==i||(setTimeout((()=>{t.listener.apply(this,e)}),0),r=!0,!t.once||(n.push(t),!1)))),n.forEach((t=>{this._stopEvent(t)})),r}listenerCount(t){if(!t)return this._events.length;let e=Ur(t);return this._events.filter((t=>t.tag===e)).length}listeners(t){if(null==t)return this._events.map((t=>t.listener));let e=Ur(t);return this._events.filter((t=>t.tag===e)).map((t=>t.listener))}off(t,e){if(null==e)return this.removeAllListeners(t);const r=[];let n=!1,i=Ur(t);return this._events=this._events.filter((t=>t.tag!==i||t.listener!=e||!!n||(n=!0,r.push(t),!1))),r.forEach((t=>{this._stopEvent(t)})),this}removeAllListeners(t){let e=[];if(null==t)e=this._events,this._events=[];else{const r=Ur(t);this._events=this._events.filter((t=>t.tag!==r||(e.push(t),!1)))}return e.forEach((t=>{this._stopEvent(t)})),this}}var sn=function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function s(t){try{u(n.next(t))}catch(t){o(t)}}function a(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};const an=new h(k),un=["call","estimateGas"];function ln(t,e){if(null==t)return null;if("string"==typeof t.message&&t.message.match("reverted")){const r=U(t.data)?t.data:null;if(!e||r)return{message:t.message,data:r}}if("object"==typeof t){for(const r in t){const n=ln(t[r],e);if(n)return n}return null}if("string"==typeof t)try{return ln(JSON.parse(t),e)}catch(t){}return null}function cn(t,e,r){const n=r.transaction||r.signedTransaction;if("call"===t){const t=ln(e,!0);if(t)return t.data;an.throwError("missing revert data in call exception; Transaction reverted without a reason string",h.errors.CALL_EXCEPTION,{data:"0x",transaction:n,error:e})}if("estimateGas"===t){let r=ln(e.body,!1);null==r&&(r=ln(e,!1)),r&&an.throwError("cannot estimate gas; transaction may fail or may require manual gas limit",h.errors.UNPREDICTABLE_GAS_LIMIT,{reason:r.message,method:t,transaction:n,error:e})}let i=e.message;throw e.code===h.errors.SERVER_ERROR&&e.error&&"string"==typeof e.error.message?i=e.error.message:"string"==typeof e.body?i=e.body:"string"==typeof e.responseText&&(i=e.responseText),i=(i||"").toLowerCase(),i.match(/insufficient funds|base fee exceeds gas limit/i)&&an.throwError("insufficient funds for intrinsic transaction cost",h.errors.INSUFFICIENT_FUNDS,{error:e,method:t,transaction:n}),i.match(/nonce (is )?too low/i)&&an.throwError("nonce has already been used",h.errors.NONCE_EXPIRED,{error:e,method:t,transaction:n}),i.match(/replacement transaction underpriced|transaction gas price.*too low/i)&&an.throwError("replacement fee too low",h.errors.REPLACEMENT_UNDERPRICED,{error:e,method:t,transaction:n}),i.match(/only replay-protected/i)&&an.throwError("legacy pre-eip-155 transactions not supported",h.errors.UNSUPPORTED_OPERATION,{error:e,method:t,transaction:n}),un.indexOf(t)>=0&&i.match(/gas required exceeds allowance|always failing transaction|execution reverted/)&&an.throwError("cannot estimate gas; transaction may fail or may require manual gas limit",h.errors.UNPREDICTABLE_GAS_LIMIT,{error:e,method:t,transaction:n}),e}function fn(t){return new Promise((function(e){setTimeout(e,t)}))}function hn(t){if(t.error){const e=new Error(t.error.message);throw e.code=t.error.code,e.data=t.error.data,e}return t.result}function dn(t){return t?t.toLowerCase():t}const pn={};class mn extends N{constructor(t,e,r){if(super(),t!==pn)throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");p(this,"provider",e),null==r&&(r=0),"string"==typeof r?(p(this,"_address",this.provider.formatter.address(r)),p(this,"_index",null)):"number"==typeof r?(p(this,"_index",r),p(this,"_address",null)):an.throwArgumentError("invalid address or index","addressOrIndex",r)}connect(t){return an.throwError("cannot alter JSON-RPC Signer connection",h.errors.UNSUPPORTED_OPERATION,{operation:"connect"})}connectUnchecked(){return new gn(pn,this.provider,this._address||this._index)}getAddress(){return this._address?Promise.resolve(this._address):this.provider.send("eth_accounts",[]).then((t=>(t.length<=this._index&&an.throwError("unknown account #"+this._index,h.errors.UNSUPPORTED_OPERATION,{operation:"getAddress"}),this.provider.formatter.address(t[this._index]))))}sendUncheckedTransaction(t){t=v(t);const e=this.getAddress().then((t=>(t&&(t=t.toLowerCase()),t)));if(null==t.gasLimit){const r=v(t);r.from=e,t.gasLimit=this.provider.estimateGas(r)}return null!=t.to&&(t.to=Promise.resolve(t.to).then((t=>sn(this,void 0,void 0,(function*(){if(null==t)return null;const e=yield this.provider.resolveName(t);return null==e&&an.throwArgumentError("provided ENS name resolves to null","tx.to",t),e}))))),g({tx:g(t),sender:e}).then((({tx:e,sender:r})=>{null!=e.from?e.from.toLowerCase()!==r&&an.throwArgumentError("from address mismatch","transaction",t):e.from=r;const n=this.provider.constructor.hexlifyTransaction(e,{from:!0});return this.provider.send("eth_sendTransaction",[n]).then((t=>t),(t=>cn("sendTransaction",t,n)))}))}signTransaction(t){return an.throwError("signing transactions is unsupported",h.errors.UNSUPPORTED_OPERATION,{operation:"signTransaction"})}sendTransaction(t){return sn(this,void 0,void 0,(function*(){const e=yield this.provider._getInternalBlockNumber(100+2*this.provider.pollingInterval),r=yield this.sendUncheckedTransaction(t);try{return yield nr((()=>sn(this,void 0,void 0,(function*(){const t=yield this.provider.getTransaction(r);if(null!==t)return this.provider._wrapTransaction(t,r,e)}))),{oncePoll:this.provider})}catch(t){throw t.transactionHash=r,t}}))}signMessage(t){return sn(this,void 0,void 0,(function*(){const e="string"==typeof t?Pt(t):t,r=yield this.getAddress();return yield this.provider.send("personal_sign",[D(e),r.toLowerCase()])}))}_legacySignMessage(t){return sn(this,void 0,void 0,(function*(){const e="string"==typeof t?Pt(t):t,r=yield this.getAddress();return yield this.provider.send("eth_sign",[r.toLowerCase(),D(e)])}))}_signTypedData(t,e,r){return sn(this,void 0,void 0,(function*(){const n=yield Wt.resolveNames(t,e,r,(t=>this.provider.resolveName(t))),i=yield this.getAddress();return yield this.provider.send("eth_signTypedData_v4",[i.toLowerCase(),JSON.stringify(Wt.getPayload(n.domain,e,n.value))])}))}unlock(t){return sn(this,void 0,void 0,(function*(){const e=this.provider,r=yield this.getAddress();return e.send("personal_unlockAccount",[r.toLowerCase(),t,null])}))}}class gn extends mn{sendTransaction(t){return this.sendUncheckedTransaction(t).then((t=>({hash:t,nonce:null,gasLimit:null,gasPrice:null,data:null,value:null,chainId:null,confirmations:0,from:null,wait:e=>this.provider.waitForTransaction(t,e)})))}}const vn={chainId:!0,data:!0,gasLimit:!0,gasPrice:!0,nonce:!0,to:!0,value:!0,type:!0,accessList:!0,maxFeePerGas:!0,maxPriorityFeePerGas:!0};class yn extends on{constructor(t,e){let r=e;null==r&&(r=new Promise(((t,e)=>{setTimeout((()=>{this.detectNetwork().then((e=>{t(e)}),(t=>{e(t)}))}),0)}))),super(r),t||(t=m(this.constructor,"defaultUrl")()),p(this,"connection","string"==typeof t?Object.freeze({url:t}):Object.freeze(v(t))),this._nextId=42}get _cache(){return null==this._eventLoopCache&&(this._eventLoopCache={}),this._eventLoopCache}static defaultUrl(){return"http://localhost:8545"}detectNetwork(){return this._cache.detectNetwork||(this._cache.detectNetwork=this._uncachedDetectNetwork(),setTimeout((()=>{this._cache.detectNetwork=null}),0)),this._cache.detectNetwork}_uncachedDetectNetwork(){return sn(this,void 0,void 0,(function*(){yield fn(0);let t=null;try{t=yield this.send("eth_chainId",[])}catch(e){try{t=yield this.send("net_version",[])}catch(t){}}if(null!=t){const e=m(this.constructor,"getNetwork");try{return e(Q.from(t).toNumber())}catch(e){return an.throwError("could not detect network",h.errors.NETWORK_ERROR,{chainId:t,event:"invalidNetwork",serverError:e})}}return an.throwError("could not detect network",h.errors.NETWORK_ERROR,{event:"noNetwork"})}))}getSigner(t){return new mn(pn,this,t)}getUncheckedSigner(t){return this.getSigner(t).connectUnchecked()}listAccounts(){return this.send("eth_accounts",[]).then((t=>t.map((t=>this.formatter.address(t)))))}send(t,e){const r={method:t,params:e,id:this._nextId++,jsonrpc:"2.0"};this.emit("debug",{action:"request",request:E(r),provider:this});const n=["eth_chainId","eth_blockNumber"].indexOf(t)>=0;if(n&&this._cache[t])return this._cache[t];const i=rr(this.connection,JSON.stringify(r),hn).then((t=>(this.emit("debug",{action:"response",request:r,response:t,provider:this}),t)),(t=>{throw this.emit("debug",{action:"response",error:t,request:r,provider:this}),t}));return n&&(this._cache[t]=i,setTimeout((()=>{this._cache[t]=null}),0)),i}prepareRequest(t,e){switch(t){case"getBlockNumber":return["eth_blockNumber",[]];case"getGasPrice":return["eth_gasPrice",[]];case"getBalance":return["eth_getBalance",[dn(e.address),e.blockTag]];case"getTransactionCount":return["eth_getTransactionCount",[dn(e.address),e.blockTag]];case"getCode":return["eth_getCode",[dn(e.address),e.blockTag]];case"getStorageAt":return["eth_getStorageAt",[dn(e.address),H(e.position,32),e.blockTag]];case"sendTransaction":return["eth_sendRawTransaction",[e.signedTransaction]];case"getBlock":return e.blockTag?["eth_getBlockByNumber",[e.blockTag,!!e.includeTransactions]]:e.blockHash?["eth_getBlockByHash",[e.blockHash,!!e.includeTransactions]]:null;case"getTransaction":return["eth_getTransactionByHash",[e.transactionHash]];case"getTransactionReceipt":return["eth_getTransactionReceipt",[e.transactionHash]];case"call":return["eth_call",[m(this.constructor,"hexlifyTransaction")(e.transaction,{from:!0}),e.blockTag]];case"estimateGas":return["eth_estimateGas",[m(this.constructor,"hexlifyTransaction")(e.transaction,{from:!0})]];case"getLogs":return e.filter&&null!=e.filter.address&&(e.filter.address=dn(e.filter.address)),["eth_getLogs",[e.filter]]}return null}perform(t,e){return sn(this,void 0,void 0,(function*(){if("call"===t||"estimateGas"===t){const t=e.transaction;if(t&&null!=t.type&&Q.from(t.type).isZero()&&null==t.maxFeePerGas&&null==t.maxPriorityFeePerGas){const r=yield this.getFeeData();null==r.maxFeePerGas&&null==r.maxPriorityFeePerGas&&((e=v(e)).transaction=v(t),delete e.transaction.type)}}const r=this.prepareRequest(t,e);null==r&&an.throwError(t+" not implemented",h.errors.NOT_IMPLEMENTED,{operation:t});try{return yield this.send(r[0],r[1])}catch(r){return cn(t,r,e)}}))}_startEvent(t){"pending"===t.tag&&this._startPending(),super._startEvent(t)}_startPending(){if(null!=this._pendingFilter)return;const t=this,e=this.send("eth_newPendingTransactionFilter",[]);this._pendingFilter=e,e.then((function(r){return function n(){t.send("eth_getFilterChanges",[r]).then((function(r){if(t._pendingFilter!=e)return null;let n=Promise.resolve();return r.forEach((function(e){t._emitted["t:"+e.toLowerCase()]="pending",n=n.then((function(){return t.getTransaction(e).then((function(e){return t.emit("pending",e),null}))}))})),n.then((function(){return fn(1e3)}))})).then((function(){if(t._pendingFilter==e)return setTimeout((function(){n()}),0),null;t.send("eth_uninstallFilter",[r])})).catch((t=>{}))}(),r})).catch((t=>{}))}_stopEvent(t){"pending"===t.tag&&0===this.listenerCount("pending")&&(this._pendingFilter=null),super._stopEvent(t)}static hexlifyTransaction(t,e){const r=v(vn);if(e)for(const t in e)e[t]&&(r[t]=!0);var n,i;i=r,(n=t)&&"object"==typeof n||d.throwArgumentError("invalid object","object",n),Object.keys(n).forEach((t=>{i[t]||d.throwArgumentError("invalid object key - "+t,"transaction:"+t,n)}));const o={};return["chainId","gasLimit","gasPrice","type","maxFeePerGas","maxPriorityFeePerGas","nonce","value"].forEach((function(e){if(null==t[e])return;const r=G(Q.from(t[e]));"gasLimit"===e&&(e="gas"),o[e]=r})),["from","to","data"].forEach((function(e){null!=t[e]&&(o[e]=D(t[e]))})),t.accessList&&(o.accessList=Ge(t.accessList)),o}}const bn=new h(k);let wn=1;function En(t,e){const r="Web3LegacyFetcher";return function(t,n){const i={method:t,params:n,id:wn++,jsonrpc:"2.0"};return new Promise(((t,n)=>{this.emit("debug",{action:"request",fetcher:r,request:E(i),provider:this}),e(i,((e,o)=>{if(e)return this.emit("debug",{action:"response",fetcher:r,error:e,request:i,provider:this}),n(e);if(this.emit("debug",{action:"response",fetcher:r,request:i,response:o,provider:this}),o.error){const t=new Error(o.error.message);return t.code=o.error.code,t.data=o.error.data,n(t)}t(o.result)}))}))}}class kn extends yn{constructor(t,e){null==t&&bn.throwArgumentError("missing provider","provider",t);let r=null,n=null,i=null;"function"==typeof t?(r="unknown:",n=t):(r=t.host||t.path||"",!r&&t.isMetaMask&&(r="metamask"),i=t,t.request?(""===r&&(r="eip-1193:"),n=function(t){return function(e,r){null==r&&(r=[]);const n={method:e,params:r};return this.emit("debug",{action:"request",fetcher:"Eip1193Fetcher",request:E(n),provider:this}),t.request(n).then((t=>(this.emit("debug",{action:"response",fetcher:"Eip1193Fetcher",request:n,response:t,provider:this}),t)),(t=>{throw this.emit("debug",{action:"response",fetcher:"Eip1193Fetcher",request:n,error:t,provider:this}),t}))}}(t)):t.sendAsync?n=En(0,t.sendAsync.bind(t)):t.send?n=En(0,t.send.bind(t)):bn.throwArgumentError("unsupported provider","provider",t),r||(r="unknown:")),super(r,e),p(this,"jsonRpcFetchFunc",n),p(this,"provider",i)}send(t,e){return this.jsonRpcFetchFunc(t,e)}}},469:(t,e,r)=>{"use strict";function n(){return n=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},n.apply(this,arguments)}function i(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}r.d(e,{Z:()=>oo}),r(757);var o=r(156),s=r.n(o);function a(t,e){if(null==t)return{};var r,n,i=function(t,e){if(null==t)return{};var r,n,i={},o=Object.keys(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||(i[r]=t[r]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(i[r]=t[r])}return i}function u(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function l(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?u(Object(r),!0).forEach((function(e){i(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):u(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function c(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function f(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function h(t,e,r){return e&&f(t.prototype,e),r&&f(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}function d(t,e){return d=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},d(t,e)}function p(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&d(t,e)}function m(t){return m=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},m(t)}function g(t){return g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},g(t)}function v(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function y(t,e){if(e&&("object"===g(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return v(t)}function b(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=m(t);if(e){var i=m(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return y(this,r)}}function w(){w=function(){return t};var t={},e=Object.prototype,r=e.hasOwnProperty,n="function"==typeof Symbol?Symbol:{},i=n.iterator||"@@iterator",o=n.asyncIterator||"@@asyncIterator",s=n.toStringTag||"@@toStringTag";function a(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{a({},"")}catch(t){a=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var i=e&&e.prototype instanceof f?e:f,o=Object.create(i.prototype),s=new M(n||[]);return o._invoke=function(t,e,r){var n="suspendedStart";return function(i,o){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===i)throw o;return{value:void 0,done:!0}}for(r.method=i,r.arg=o;;){var s=r.delegate;if(s){var a=k(s,r);if(a){if(a===c)continue;return a}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n="executing";var u=l(t,e,r);if("normal"===u.type){if(n=r.done?"completed":"suspendedYield",u.arg===c)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(n="completed",r.method="throw",r.arg=u.arg)}}}(t,r,s),o}function l(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=u;var c={};function f(){}function h(){}function d(){}var p={};a(p,i,(function(){return this}));var m=Object.getPrototypeOf,v=m&&m(m(A([])));v&&v!==e&&r.call(v,i)&&(p=v);var y=d.prototype=f.prototype=Object.create(p);function b(t){["next","throw","return"].forEach((function(e){a(t,e,(function(t){return this._invoke(e,t)}))}))}function E(t,e){function n(i,o,s,a){var u=l(t[i],t,o);if("throw"!==u.type){var c=u.arg,f=c.value;return f&&"object"==g(f)&&r.call(f,"__await")?e.resolve(f.__await).then((function(t){n("next",t,s,a)}),(function(t){n("throw",t,s,a)})):e.resolve(f).then((function(t){c.value=t,s(c)}),(function(t){return n("throw",t,s,a)}))}a(u.arg)}var i;this._invoke=function(t,r){function o(){return new e((function(e,i){n(t,r,e,i)}))}return i=i?i.then(o,o):o()}}function k(t,e){var r=t.iterator[e.method];if(void 0===r){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=void 0,k(t,e),"throw"===e.method))return c;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return c}var n=l(r,t.iterator,e.arg);if("throw"===n.type)return e.method="throw",e.arg=n.arg,e.delegate=null,c;var i=n.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,c):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,c)}function _(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function x(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(_,this),this.reset(!0)}function A(t){if(t){var e=t[i];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,o=function e(){for(;++n<t.length;)if(r.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return o.next=o}}return{next:N}}function N(){return{value:void 0,done:!0}}return h.prototype=d,a(y,"constructor",d),a(d,"constructor",h),h.displayName=a(d,s,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===h||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,d):(t.__proto__=d,a(t,s,"GeneratorFunction")),t.prototype=Object.create(y),t},t.awrap=function(t){return{__await:t}},b(E.prototype),a(E.prototype,o,(function(){return this})),t.AsyncIterator=E,t.async=function(e,r,n,i,o){void 0===o&&(o=Promise);var s=new E(u(e,r,n,i),o);return t.isGeneratorFunction(r)?s:s.next().then((function(t){return t.done?t.value:s.next()}))},b(y),a(y,s,"Generator"),a(y,i,(function(){return this})),a(y,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=A,M.prototype={constructor:M,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(x),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(r,n){return s.type="throw",s.arg=t,e.next=r,n&&(e.method="next",e.arg=void 0),!!n}for(var i=this.tryEntries.length-1;i>=0;--i){var o=this.tryEntries[i],s=o.completion;if("root"===o.tryLoc)return n("end");if(o.tryLoc<=this.prev){var a=r.call(o,"catchLoc"),u=r.call(o,"finallyLoc");if(a&&u){if(this.prev<o.catchLoc)return n(o.catchLoc,!0);if(this.prev<o.finallyLoc)return n(o.finallyLoc)}else if(a){if(this.prev<o.catchLoc)return n(o.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return n(o.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var i=this.tryEntries[n];if(i.tryLoc<=this.prev&&r.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var s=o?o.completion:{};return s.type=t,s.arg=e,o?(this.method="next",this.next=o.finallyLoc,c):this.complete(s)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),c},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),x(r),c}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;x(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:A(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=void 0),c}},t}function E(t,e,r,n,i,o,s){try{var a=t[o](s),u=a.value}catch(t){return void r(t)}a.done?e(u):Promise.resolve(u).then(n,i)}function k(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var o=t.apply(e,r);function s(t){E(o,n,i,s,a,"next",t)}function a(t){E(o,n,i,s,a,"throw",t)}s(void 0)}))}}var _,x=r(111),M=r.n(x),A=l({},x),N=A.version,P=A.render,S=A.unmountComponentAtNode;try{Number((N||"").split(".")[0])>=18&&(_=A.createRoot)}catch(t){}function C(t){var e=A.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;e&&"object"===g(e)&&(e.usingClientEntryPoint=t)}var F="__rc_react_root__";function R(t){return I.apply(this,arguments)}function I(){return(I=k(w().mark((function t(e){return w().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",Promise.resolve().then((function(){var t;null===(t=e[F])||void 0===t||t.unmount(),delete e[F]})));case 1:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function O(t){S(t)}function T(){return(T=k(w().mark((function t(e){return w().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(void 0===_){t.next=2;break}return t.abrupt("return",R(e));case 2:O(e);case 3:case"end":return t.stop()}}),t)})))).apply(this,arguments)}var L=r(184),B=r.n(L);function j(t){if(Array.isArray(t))return t}function U(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function q(t,e){if(t){if("string"==typeof t)return U(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?U(t,e):void 0}}function D(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function V(t,e){return j(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,o=[],s=!0,a=!1;try{for(r=r.call(t);!(s=(n=r.next()).done)&&(o.push(n.value),!e||o.length!==e);s=!0);}catch(t){a=!0,i=t}finally{try{s||null==r.return||r.return()}finally{if(a)throw i}}return o}}(t,e)||q(t,e)||D()}var z=r(864);function $(){return!("undefined"==typeof window||!window.document||!window.document.createElement)}function G(t,e){var r={};return r[t.toLowerCase()]=e.toLowerCase(),r["Webkit".concat(t)]="webkit".concat(e),r["Moz".concat(t)]="moz".concat(e),r["ms".concat(t)]="MS".concat(e),r["O".concat(t)]="o".concat(e.toLowerCase()),r}var H,W,K,J=(H=$(),W="undefined"!=typeof window?window:{},K={animationend:G("Animation","AnimationEnd"),transitionend:G("Transition","TransitionEnd")},H&&("AnimationEvent"in W||delete K.animationend.animation,"TransitionEvent"in W||delete K.transitionend.transition),K),X={};if($()){var Z=document.createElement("div");X=Z.style}var Y={};function Q(t){if(Y[t])return Y[t];var e=J[t];if(e)for(var r=Object.keys(e),n=r.length,i=0;i<n;i+=1){var o=r[i];if(Object.prototype.hasOwnProperty.call(e,o)&&o in X)return Y[t]=e[o],Y[t]}return""}var tt=Q("animationend"),et=Q("transitionend"),rt=!(!tt||!et),nt=tt||"animationend",it=et||"transitionend";function ot(t,e){return t?"object"===g(t)?t[e.replace(/-\w/g,(function(t){return t[1].toUpperCase()}))]:"".concat(t,"-").concat(e):null}var st="none",at="appear",ut="enter",lt="leave",ct="none",ft="prepare",ht="start",dt="active",pt="end";function mt(t){var e=o.useRef(!1),r=V(o.useState(t),2),n=r[0],i=r[1];return o.useEffect((function(){return e.current=!1,function(){e.current=!0}}),[]),[n,function(t,r){r&&e.current||i(t)}]}var gt=function(t){return+setTimeout(t,16)},vt=function(t){return clearTimeout(t)};"undefined"!=typeof window&&"requestAnimationFrame"in window&&(gt=function(t){return window.requestAnimationFrame(t)},vt=function(t){return window.cancelAnimationFrame(t)});var yt=0,bt=new Map;function wt(t){bt.delete(t)}function Et(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=yt+=1;function n(e){if(0===e)wt(r),t();else{var i=gt((function(){n(e-1)}));bt.set(r,i)}}return n(e),r}Et.cancel=function(t){var e=bt.get(t);return wt(e),vt(e)};const kt=$()?o.useLayoutEffect:o.useEffect;var _t=[ft,ht,dt,pt];function xt(t){return t===dt||t===pt}function Mt(t,e,r,n){var s=n.motionEnter,a=void 0===s||s,u=n.motionAppear,c=void 0===u||u,f=n.motionLeave,h=void 0===f||f,d=n.motionDeadline,p=n.motionLeaveImmediately,m=n.onAppearPrepare,g=n.onEnterPrepare,v=n.onLeavePrepare,y=n.onAppearStart,b=n.onEnterStart,w=n.onLeaveStart,E=n.onAppearActive,k=n.onEnterActive,_=n.onLeaveActive,x=n.onAppearEnd,M=n.onEnterEnd,A=n.onLeaveEnd,N=n.onVisibleChanged,P=V(mt(),2),S=P[0],C=P[1],F=V(mt(st),2),R=F[0],I=F[1],O=V(mt(null),2),T=O[0],L=O[1],B=(0,o.useRef)(!1),j=(0,o.useRef)(null);function U(){return r()}var q=(0,o.useRef)(!1);function D(t){var e=U();if(!t||t.deadline||t.target===e){var r,n=q.current;R===at&&n?r=null==x?void 0:x(e,t):R===ut&&n?r=null==M?void 0:M(e,t):R===lt&&n&&(r=null==A?void 0:A(e,t)),R!==st&&n&&!1!==r&&(I(st,!0),L(null,!0))}}var z=function(t){var e=(0,o.useRef)(),r=(0,o.useRef)(t);r.current=t;var n=o.useCallback((function(t){r.current(t)}),[]);function i(t){t&&(t.removeEventListener(it,n),t.removeEventListener(nt,n))}return o.useEffect((function(){return function(){i(e.current)}}),[]),[function(t){e.current&&e.current!==t&&i(e.current),t&&t!==e.current&&(t.addEventListener(it,n),t.addEventListener(nt,n),e.current=t)},i]}(D),$=V(z,1)[0],G=o.useMemo((function(){var t,e,r;switch(R){case at:return i(t={},ft,m),i(t,ht,y),i(t,dt,E),t;case ut:return i(e={},ft,g),i(e,ht,b),i(e,dt,k),e;case lt:return i(r={},ft,v),i(r,ht,w),i(r,dt,_),r;default:return{}}}),[R]),H=V(function(t,e){var r=V(mt(ct),2),n=r[0],i=r[1],s=function(){var t=o.useRef(null);function e(){Et.cancel(t.current)}return o.useEffect((function(){return function(){e()}}),[]),[function r(n){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;e();var o=Et((function(){i<=1?n({isCanceled:function(){return o!==t.current}}):r(n,i-1)}));t.current=o},e]}(),a=V(s,2),u=a[0],l=a[1];return kt((function(){if(n!==ct&&n!==pt){var t=_t.indexOf(n),r=_t[t+1],o=e(n);!1===o?i(r,!0):u((function(t){function e(){t.isCanceled()||i(r,!0)}!0===o?e():Promise.resolve(o).then(e)}))}}),[t,n]),o.useEffect((function(){return function(){l()}}),[]),[function(){i(ft,!0)},n]}(R,(function(t){if(t===ft){var e=G.prepare;return!!e&&e(U())}var r;return K in G&&L((null===(r=G[K])||void 0===r?void 0:r.call(G,U(),null))||null),K===dt&&($(U()),d>0&&(clearTimeout(j.current),j.current=setTimeout((function(){D({deadline:!0})}),d))),!0})),2),W=H[0],K=H[1],J=xt(K);q.current=J,kt((function(){C(e);var r,n=B.current;B.current=!0,t&&(!n&&e&&c&&(r=at),n&&e&&a&&(r=ut),(n&&!e&&h||!n&&p&&!e&&h)&&(r=lt),r&&(I(r),W()))}),[e]),(0,o.useEffect)((function(){(R===at&&!c||R===ut&&!a||R===lt&&!h)&&I(st)}),[c,a,h]),(0,o.useEffect)((function(){return function(){B.current=!1,clearTimeout(j.current)}}),[]),(0,o.useEffect)((function(){void 0!==S&&R===st&&(null==N||N(S))}),[S,R]);var X=T;return G.prepare&&K===ht&&(X=l({transition:"none"},X)),[R,K,X,null!=S?S:e]}const At=function(t){p(r,t);var e=b(r);function r(){return c(this,r),e.apply(this,arguments)}return h(r,[{key:"render",value:function(){return this.props.children}}]),r}(o.Component),Nt=function(t){var e=t;function r(t){return!(!t.motionName||!e)}"object"===g(t)&&(e=t.transitionSupport);var n=o.forwardRef((function(t,e){var n=t.visible,s=void 0===n||n,a=t.removeOnLeave,u=void 0===a||a,c=t.forceRender,f=t.children,h=t.motionName,d=t.leavedClassName,p=t.eventProps,m=r(t),v=(0,o.useRef)(),y=(0,o.useRef)(),b=V(Mt(m,s,(function(){try{return v.current instanceof HTMLElement?v.current:(t=y.current)instanceof HTMLElement?t:M().findDOMNode(t)}catch(t){return null}var t}),t),4),w=b[0],E=b[1],k=b[2],_=b[3],x=o.useRef(_);_&&(x.current=!0);var A,N=o.useCallback((function(t){v.current=t,function(t,e){"function"==typeof t?t(e):"object"===g(t)&&t&&"current"in t&&(t.current=e)}(e,t)}),[e]),P=l(l({},p),{},{visible:s});if(f)if(w!==st&&r(t)){var S,C;E===ft?C="prepare":xt(E)?C="active":E===ht&&(C="start"),A=f(l(l({},P),{},{className:B()(ot(h,w),(S={},i(S,ot(h,"".concat(w,"-").concat(C)),C),i(S,h,"string"==typeof h),S)),style:k}),N)}else A=_?f(l({},P),N):!u&&x.current?f(l(l({},P),{},{className:d}),N):c?f(l(l({},P),{},{style:{display:"none"}}),N):null;else A=null;return o.isValidElement(A)&&function(t){var e,r,n=(0,z.isMemo)(t)?t.type.type:t.type;return!("function"==typeof n&&!(null===(e=n.prototype)||void 0===e?void 0:e.render)||"function"==typeof t&&!(null===(r=t.prototype)||void 0===r?void 0:r.render))}(A)&&(A.ref||(A=o.cloneElement(A,{ref:N}))),o.createElement(At,{ref:y},A)}));return n.displayName="CSSMotion",n}(rt);var Pt="add",St="keep",Ct="remove",Ft="removed";function Rt(t){var e;return l(l({},e=t&&"object"===g(t)&&"key"in t?t:{key:t}),{},{key:String(e.key)})}function It(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return t.map(Rt)}function Ot(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],r=[],n=0,i=e.length,o=It(t),s=It(e);o.forEach((function(t){for(var e=!1,o=n;o<i;o+=1){var a=s[o];if(a.key===t.key){n<o&&(r=r.concat(s.slice(n,o).map((function(t){return l(l({},t),{},{status:Pt})}))),n=o),r.push(l(l({},a),{},{status:St})),n+=1,e=!0;break}}e||r.push(l(l({},t),{},{status:Ct}))})),n<i&&(r=r.concat(s.slice(n).map((function(t){return l(l({},t),{},{status:Pt})}))));var a={};r.forEach((function(t){var e=t.key;a[e]=(a[e]||0)+1}));var u=Object.keys(a).filter((function(t){return a[t]>1}));return u.forEach((function(t){r=r.filter((function(e){var r=e.key,n=e.status;return r!==t||n!==Ct})),r.forEach((function(e){e.key===t&&(e.status=St)}))})),r}var Tt=["component","children","onVisibleChanged","onAllRemoved"],Lt=["status"],Bt=["eventProps","visible","children","motionName","motionAppear","motionEnter","motionLeave","motionLeaveImmediately","motionDeadline","removeOnLeave","leavedClassName","onAppearStart","onAppearActive","onAppearEnd","onEnterStart","onEnterActive","onEnterEnd","onLeaveStart","onLeaveActive","onLeaveEnd"];const jt=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Nt,r=function(t){p(i,t);var r=b(i);function i(){var t;c(this,i);for(var e=arguments.length,n=new Array(e),o=0;o<e;o++)n[o]=arguments[o];return(t=r.call.apply(r,[this].concat(n))).state={keyEntities:[]},t.removeKey=function(e){var r=t.state.keyEntities.map((function(t){return t.key!==e?t:l(l({},t),{},{status:Ft})}));return t.setState({keyEntities:r}),r.filter((function(t){return t.status!==Ft})).length},t}return h(i,[{key:"render",value:function(){var t=this,r=this.state.keyEntities,i=this.props,s=i.component,u=i.children,l=i.onVisibleChanged,c=i.onAllRemoved,f=a(i,Tt),h=s||o.Fragment,d={};return Bt.forEach((function(t){d[t]=f[t],delete f[t]})),delete f.keys,o.createElement(h,f,r.map((function(r){var i=r.status,s=a(r,Lt),f=i===Pt||i===St;return o.createElement(e,n({},d,{key:s.key,visible:f,eventProps:s,onVisibleChanged:function(e){null==l||l(e,{key:s.key}),e||0===t.removeKey(s.key)&&c&&c()}}),u)})))}}],[{key:"getDerivedStateFromProps",value:function(t,e){var r=t.keys,n=e.keyEntities,i=It(r);return{keyEntities:Ot(n,i).filter((function(t){var e=n.find((function(e){var r=e.key;return t.key===r}));return!e||e.status!==Ft||t.status!==Ct}))}}}]),i}(o.Component);return r.defaultProps={component:"div"},r}(rt);var Ut=function(t){p(r,t);var e=b(r);function r(){var t;c(this,r);for(var n=arguments.length,i=new Array(n),o=0;o<n;o++)i[o]=arguments[o];return(t=e.call.apply(e,[this].concat(i))).closeTimer=null,t.close=function(e){e&&e.stopPropagation(),t.clearCloseTimer();var r=t.props,n=r.onClose,i=r.noticeKey;n&&n(i)},t.startCloseTimer=function(){t.props.duration&&(t.closeTimer=window.setTimeout((function(){t.close()}),1e3*t.props.duration))},t.clearCloseTimer=function(){t.closeTimer&&(clearTimeout(t.closeTimer),t.closeTimer=null)},t}return h(r,[{key:"componentDidMount",value:function(){this.startCloseTimer()}},{key:"componentDidUpdate",value:function(t){(this.props.duration!==t.duration||this.props.updateMark!==t.updateMark||this.props.visible!==t.visible&&this.props.visible)&&this.restartCloseTimer()}},{key:"componentWillUnmount",value:function(){this.clearCloseTimer()}},{key:"restartCloseTimer",value:function(){this.clearCloseTimer(),this.startCloseTimer()}},{key:"render",value:function(){var t=this,e=this.props,r=e.prefixCls,s=e.className,a=e.closable,u=e.closeIcon,l=e.style,c=e.onClick,f=e.children,h=e.holder,d="".concat(r,"-notice"),p=Object.keys(this.props).reduce((function(e,r){return"data-"!==r.substr(0,5)&&"aria-"!==r.substr(0,5)&&"role"!==r||(e[r]=t.props[r]),e}),{}),m=o.createElement("div",n({className:B()(d,s,i({},"".concat(d,"-closable"),a)),style:l,onMouseEnter:this.clearCloseTimer,onMouseLeave:this.startCloseTimer,onClick:c},p),o.createElement("div",{className:"".concat(d,"-content")},f),a?o.createElement("a",{tabIndex:0,onClick:this.close,className:"".concat(d,"-close")},u||o.createElement("span",{className:"".concat(d,"-close-x")})):null);return h?M().createPortal(m,h):m}}]),r}(o.Component);function qt(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}function Dt(t){return function(t){if(Array.isArray(t))return U(t)}(t)||qt(t)||q(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Vt(t){var e=o.useRef({}),r=V(o.useState([]),2),i=r[0],s=r[1];return[function(r){var i=!0;t.add(r,(function(t,r){var a=r.key;if(t&&(!e.current[a]||i)){var u=o.createElement(Ut,n({},r,{holder:t}));e.current[a]=u,s((function(t){var e=t.findIndex((function(t){return t.key===r.key}));if(-1===e)return[].concat(Dt(t),[u]);var n=Dt(t);return n[e]=u,n}))}i=!1}))},o.createElement(o.Fragment,null,i)]}Ut.defaultProps={onClose:function(){},duration:1.5};var zt=["getContainer"],$t=0,Gt=Date.now();function Ht(){var t=$t;return $t+=1,"rcNotification_".concat(Gt,"_").concat(t)}var Wt=function(t){p(r,t);var e=b(r);function r(){var t;c(this,r);for(var n=arguments.length,i=new Array(n),o=0;o<n;o++)i[o]=arguments[o];return(t=e.call.apply(e,[this].concat(i))).state={notices:[]},t.hookRefs=new Map,t.add=function(e,r){var n=e.key||Ht(),i=l(l({},e),{},{key:n}),o=t.props.maxCount;t.setState((function(t){var e=t.notices,s=e.map((function(t){return t.notice.key})).indexOf(n),a=e.concat();return-1!==s?a.splice(s,1,{notice:i,holderCallback:r}):(o&&e.length>=o&&(i.key=a[0].notice.key,i.updateMark=Ht(),i.userPassKey=n,a.shift()),a.push({notice:i,holderCallback:r})),{notices:a}}))},t.remove=function(e){t.setState((function(t){return{notices:t.notices.filter((function(t){var r=t.notice,n=r.key;return(r.userPassKey||n)!==e}))}}))},t.noticePropsMap={},t}return h(r,[{key:"getTransitionName",value:function(){var t=this.props,e=t.prefixCls,r=t.animation,n=this.props.transitionName;return!n&&r&&(n="".concat(e,"-").concat(r)),n}},{key:"render",value:function(){var t=this,e=this.state.notices,r=this.props,i=r.prefixCls,s=r.className,a=r.closeIcon,u=r.style,c=[];return e.forEach((function(r,n){var o=r.notice,s=r.holderCallback,u=n===e.length-1?o.updateMark:void 0,f=o.key,h=o.userPassKey,d=l(l(l({prefixCls:i,closeIcon:a},o),o.props),{},{key:f,noticeKey:h||f,updateMark:u,onClose:function(e){var r;t.remove(e),null===(r=o.onClose)||void 0===r||r.call(o)},onClick:o.onClick,children:o.content});c.push(f),t.noticePropsMap[f]={props:d,holderCallback:s}})),o.createElement("div",{className:B()(i,s),style:u},o.createElement(jt,{keys:c,motionName:this.getTransitionName(),onVisibleChanged:function(e,r){var n=r.key;e||delete t.noticePropsMap[n]}},(function(e){var r=e.key,s=e.className,a=e.style,u=e.visible,c=t.noticePropsMap[r],f=c.props,h=c.holderCallback;return h?o.createElement("div",{key:r,className:B()(s,"".concat(i,"-hook-holder")),style:l({},a),ref:function(e){void 0!==r&&(e?(t.hookRefs.set(r,e),h(e,f)):t.hookRefs.delete(r))}}):o.createElement(Ut,n({},f,{className:B()(s,null==f?void 0:f.className),style:l(l({},a),null==f?void 0:f.style),visible:u}))})))}}]),r}(o.Component);Wt.newInstance=void 0,Wt.defaultProps={prefixCls:"rc-notification",animation:"fade",style:{top:65,left:"50%"}},Wt.newInstance=function(t,e){var r=t||{},i=r.getContainer,s=a(r,zt),u=document.createElement("div");i?i().appendChild(u):document.body.appendChild(u);var l,c,f=!1;l=o.createElement(Wt,n({},s,{ref:function(t){f||(f=!0,e({notice:function(e){t.add(e)},removeNotice:function(e){t.remove(e)},component:t,destroy:function(){!function(t){T.apply(this,arguments)}(u),u.parentNode&&u.parentNode.removeChild(u)},useNotification:function(){return Vt(t)}}))}})),c=u,_?function(t,e){C(!0);var r=e[F]||_(e);C(!1),r.render(t),e[F]=r}(l,c):function(t,e){P(t,e)}(l,c)};const Kt=Wt,Jt={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 00203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z"}}]},name:"close",theme:"outlined"},Xt=(0,o.createContext)({});function Zt(t,e){(function(t){return"string"==typeof t&&-1!==t.indexOf(".")&&1===parseFloat(t)})(t)&&(t="100%");var r=function(t){return"string"==typeof t&&-1!==t.indexOf("%")}(t);return t=360===e?t:Math.min(e,Math.max(0,parseFloat(t))),r&&(t=parseInt(String(t*e),10)/100),Math.abs(t-e)<1e-6?1:t=360===e?(t<0?t%e+e:t%e)/parseFloat(String(e)):t%e/parseFloat(String(e))}function Yt(t){return Math.min(1,Math.max(0,t))}function Qt(t){return t=parseFloat(t),(isNaN(t)||t<0||t>1)&&(t=1),t}function te(t){return t<=1?"".concat(100*Number(t),"%"):t}function ee(t){return 1===t.length?"0"+t:String(t)}function re(t,e,r){t=Zt(t,255),e=Zt(e,255),r=Zt(r,255);var n=Math.max(t,e,r),i=Math.min(t,e,r),o=0,s=0,a=(n+i)/2;if(n===i)s=0,o=0;else{var u=n-i;switch(s=a>.5?u/(2-n-i):u/(n+i),n){case t:o=(e-r)/u+(e<r?6:0);break;case e:o=(r-t)/u+2;break;case r:o=(t-e)/u+4}o/=6}return{h:o,s,l:a}}function ne(t,e,r){return r<0&&(r+=1),r>1&&(r-=1),r<1/6?t+6*r*(e-t):r<.5?e:r<2/3?t+(e-t)*(2/3-r)*6:t}function ie(t,e,r){t=Zt(t,255),e=Zt(e,255),r=Zt(r,255);var n=Math.max(t,e,r),i=Math.min(t,e,r),o=0,s=n,a=n-i,u=0===n?0:a/n;if(n===i)o=0;else{switch(n){case t:o=(e-r)/a+(e<r?6:0);break;case e:o=(r-t)/a+2;break;case r:o=(t-e)/a+4}o/=6}return{h:o,s:u,v:s}}function oe(t,e,r,n){var i=[ee(Math.round(t).toString(16)),ee(Math.round(e).toString(16)),ee(Math.round(r).toString(16))];return n&&i[0].startsWith(i[0].charAt(1))&&i[1].startsWith(i[1].charAt(1))&&i[2].startsWith(i[2].charAt(1))?i[0].charAt(0)+i[1].charAt(0)+i[2].charAt(0):i.join("")}function se(t){return ae(t)/255}function ae(t){return parseInt(t,16)}var ue={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",goldenrod:"#daa520",gold:"#ffd700",gray:"#808080",green:"#008000",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavenderblush:"#fff0f5",lavender:"#e6e6fa",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"};function le(t){var e,r,n,i={r:0,g:0,b:0},o=1,s=null,a=null,u=null,l=!1,c=!1;return"string"==typeof t&&(t=function(t){if(0===(t=t.trim().toLowerCase()).length)return!1;var e=!1;if(ue[t])t=ue[t],e=!0;else if("transparent"===t)return{r:0,g:0,b:0,a:0,format:"name"};var r=de.rgb.exec(t);return r?{r:r[1],g:r[2],b:r[3]}:(r=de.rgba.exec(t))?{r:r[1],g:r[2],b:r[3],a:r[4]}:(r=de.hsl.exec(t))?{h:r[1],s:r[2],l:r[3]}:(r=de.hsla.exec(t))?{h:r[1],s:r[2],l:r[3],a:r[4]}:(r=de.hsv.exec(t))?{h:r[1],s:r[2],v:r[3]}:(r=de.hsva.exec(t))?{h:r[1],s:r[2],v:r[3],a:r[4]}:(r=de.hex8.exec(t))?{r:ae(r[1]),g:ae(r[2]),b:ae(r[3]),a:se(r[4]),format:e?"name":"hex8"}:(r=de.hex6.exec(t))?{r:ae(r[1]),g:ae(r[2]),b:ae(r[3]),format:e?"name":"hex"}:(r=de.hex4.exec(t))?{r:ae(r[1]+r[1]),g:ae(r[2]+r[2]),b:ae(r[3]+r[3]),a:se(r[4]+r[4]),format:e?"name":"hex8"}:!!(r=de.hex3.exec(t))&&{r:ae(r[1]+r[1]),g:ae(r[2]+r[2]),b:ae(r[3]+r[3]),format:e?"name":"hex"}}(t)),"object"==typeof t&&(pe(t.r)&&pe(t.g)&&pe(t.b)?(e=t.r,r=t.g,n=t.b,i={r:255*Zt(e,255),g:255*Zt(r,255),b:255*Zt(n,255)},l=!0,c="%"===String(t.r).substr(-1)?"prgb":"rgb"):pe(t.h)&&pe(t.s)&&pe(t.v)?(s=te(t.s),a=te(t.v),i=function(t,e,r){t=6*Zt(t,360),e=Zt(e,100),r=Zt(r,100);var n=Math.floor(t),i=t-n,o=r*(1-e),s=r*(1-i*e),a=r*(1-(1-i)*e),u=n%6;return{r:255*[r,s,o,o,a,r][u],g:255*[a,r,r,s,o,o][u],b:255*[o,o,a,r,r,s][u]}}(t.h,s,a),l=!0,c="hsv"):pe(t.h)&&pe(t.s)&&pe(t.l)&&(s=te(t.s),u=te(t.l),i=function(t,e,r){var n,i,o;if(t=Zt(t,360),e=Zt(e,100),r=Zt(r,100),0===e)i=r,o=r,n=r;else{var s=r<.5?r*(1+e):r+e-r*e,a=2*r-s;n=ne(a,s,t+1/3),i=ne(a,s,t),o=ne(a,s,t-1/3)}return{r:255*n,g:255*i,b:255*o}}(t.h,s,u),l=!0,c="hsl"),Object.prototype.hasOwnProperty.call(t,"a")&&(o=t.a)),o=Qt(o),{ok:l,format:t.format||c,r:Math.min(255,Math.max(i.r,0)),g:Math.min(255,Math.max(i.g,0)),b:Math.min(255,Math.max(i.b,0)),a:o}}var ce="(?:".concat("[-\\+]?\\d*\\.\\d+%?",")|(?:").concat("[-\\+]?\\d+%?",")"),fe="[\\s|\\(]+(".concat(ce,")[,|\\s]+(").concat(ce,")[,|\\s]+(").concat(ce,")\\s*\\)?"),he="[\\s|\\(]+(".concat(ce,")[,|\\s]+(").concat(ce,")[,|\\s]+(").concat(ce,")[,|\\s]+(").concat(ce,")\\s*\\)?"),de={CSS_UNIT:new RegExp(ce),rgb:new RegExp("rgb"+fe),rgba:new RegExp("rgba"+he),hsl:new RegExp("hsl"+fe),hsla:new RegExp("hsla"+he),hsv:new RegExp("hsv"+fe),hsva:new RegExp("hsva"+he),hex3:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex4:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex8:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/};function pe(t){return Boolean(de.CSS_UNIT.exec(String(t)))}var me=[{index:7,opacity:.15},{index:6,opacity:.25},{index:5,opacity:.3},{index:5,opacity:.45},{index:5,opacity:.65},{index:5,opacity:.85},{index:4,opacity:.9},{index:3,opacity:.95},{index:2,opacity:.97},{index:1,opacity:.98}];function ge(t){var e=ie(t.r,t.g,t.b);return{h:360*e.h,s:e.s,v:e.v}}function ve(t){var e=t.r,r=t.g,n=t.b;return"#".concat(oe(e,r,n,!1))}function ye(t,e,r){var n=r/100;return{r:(e.r-t.r)*n+t.r,g:(e.g-t.g)*n+t.g,b:(e.b-t.b)*n+t.b}}function be(t,e,r){var n;return(n=Math.round(t.h)>=60&&Math.round(t.h)<=240?r?Math.round(t.h)-2*e:Math.round(t.h)+2*e:r?Math.round(t.h)+2*e:Math.round(t.h)-2*e)<0?n+=360:n>=360&&(n-=360),n}function we(t,e,r){return 0===t.h&&0===t.s?t.s:((n=r?t.s-.16*e:4===e?t.s+.16:t.s+.05*e)>1&&(n=1),r&&5===e&&n>.1&&(n=.1),n<.06&&(n=.06),Number(n.toFixed(2)));var n}function Ee(t,e,r){var n;return(n=r?t.v+.05*e:t.v-.15*e)>1&&(n=1),Number(n.toFixed(2))}function ke(t){for(var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=[],n=le(t),i=5;i>0;i-=1){var o=ge(n),s=ve(le({h:be(o,i,!0),s:we(o,i,!0),v:Ee(o,i,!0)}));r.push(s)}r.push(ve(n));for(var a=1;a<=4;a+=1){var u=ge(n),l=ve(le({h:be(u,a),s:we(u,a),v:Ee(u,a)}));r.push(l)}return"dark"===e.theme?me.map((function(t){var n=t.index,i=t.opacity;return ve(ye(le(e.backgroundColor||"#141414"),le(r[n]),100*i))})):r}var _e={red:"#F5222D",volcano:"#FA541C",orange:"#FA8C16",gold:"#FAAD14",yellow:"#FADB14",lime:"#A0D911",green:"#52C41A",cyan:"#13C2C2",blue:"#1890FF",geekblue:"#2F54EB",purple:"#722ED1",magenta:"#EB2F96",grey:"#666666"},xe={},Me={};Object.keys(_e).forEach((function(t){xe[t]=ke(_e[t]),xe[t].primary=xe[t][5],Me[t]=ke(_e[t],{theme:"dark",backgroundColor:"#141414"}),Me[t].primary=Me[t][5]})),xe.red,xe.volcano,xe.gold,xe.orange,xe.yellow,xe.lime,xe.green,xe.cyan,xe.blue,xe.geekblue,xe.purple,xe.magenta,xe.grey;var Ae={};function Ne(t,e){}const Pe=function(t,e){!function(t,e,r){e||Ae[r]||(t(!1,r),Ae[r]=!0)}(Ne,t,e)};var Se="rc-util-key";function Ce(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.mark;return e?e.startsWith("data-")?e:"data-".concat(e):Se}function Fe(t){return t.attachTo?t.attachTo:document.querySelector("head")||document.body}function Re(t){var e,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!$())return null;var n,i=document.createElement("style");(null===(e=r.csp)||void 0===e?void 0:e.nonce)&&(i.nonce=null===(n=r.csp)||void 0===n?void 0:n.nonce),i.innerHTML=t;var o=Fe(r),s=o.firstChild;return r.prepend&&o.prepend?o.prepend(i):r.prepend&&s?o.insertBefore(i,s):o.appendChild(i),i}var Ie=new Map;function Oe(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=Fe(e);return Array.from(Ie.get(r).children).find((function(r){return"STYLE"===r.tagName&&r.getAttribute(Ce(e))===t}))}function Te(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n=Fe(r);if(!Ie.has(n)){var i=Re("",r),o=i.parentNode;Ie.set(n,o),o.removeChild(i)}var s,a,u,l=Oe(e,r);if(l)return(null===(s=r.csp)||void 0===s?void 0:s.nonce)&&l.nonce!==(null===(a=r.csp)||void 0===a?void 0:a.nonce)&&(l.nonce=null===(u=r.csp)||void 0===u?void 0:u.nonce),l.innerHTML!==t&&(l.innerHTML=t),l;var c=Re(t,r);return c.setAttribute(Ce(r),e),c}function Le(t){return"object"===g(t)&&"string"==typeof t.name&&"string"==typeof t.theme&&("object"===g(t.icon)||"function"==typeof t.icon)}function Be(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Object.keys(t).reduce((function(e,r){var n=t[r];return"class"===r?(e.className=n,delete e.class):e[r]=n,e}),{})}function je(t,e,r){return r?s().createElement(t.tag,l(l({key:e},Be(t.attrs)),r),(t.children||[]).map((function(r,n){return je(r,"".concat(e,"-").concat(t.tag,"-").concat(n))}))):s().createElement(t.tag,l({key:e},Be(t.attrs)),(t.children||[]).map((function(r,n){return je(r,"".concat(e,"-").concat(t.tag,"-").concat(n))})))}function Ue(t){return ke(t)[0]}function qe(t){return t?Array.isArray(t)?t:[t]:[]}var De="\n.anticon {\n  display: inline-block;\n  color: inherit;\n  font-style: normal;\n  line-height: 0;\n  text-align: center;\n  text-transform: none;\n  vertical-align: -0.125em;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.anticon > * {\n  line-height: 1;\n}\n\n.anticon svg {\n  display: inline-block;\n}\n\n.anticon::before {\n  display: none;\n}\n\n.anticon .anticon-icon {\n  display: block;\n}\n\n.anticon[tabindex] {\n  cursor: pointer;\n}\n\n.anticon-spin::before,\n.anticon-spin {\n  display: inline-block;\n  -webkit-animation: loadingCircle 1s infinite linear;\n  animation: loadingCircle 1s infinite linear;\n}\n\n@-webkit-keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n",Ve=["icon","className","onClick","style","primaryColor","secondaryColor"],ze={primaryColor:"#333",secondaryColor:"#E6E6E6",calculated:!1},$e=function(t){var e=t.icon,r=t.className,n=t.onClick,i=t.style,s=t.primaryColor,u=t.secondaryColor,c=a(t,Ve),f=ze;if(s&&(f={primaryColor:s,secondaryColor:u||Ue(s)}),function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:De,e=(0,o.useContext)(Xt).csp;(0,o.useEffect)((function(){Te(t,"@ant-design-icons",{prepend:!0,csp:e})}),[])}(),function(t,e){Pe(t,"[@ant-design/icons] ".concat(e))}(Le(e),"icon should be icon definiton, but got ".concat(e)),!Le(e))return null;var h=e;return h&&"function"==typeof h.icon&&(h=l(l({},h),{},{icon:h.icon(f.primaryColor,f.secondaryColor)})),je(h.icon,"svg-".concat(h.name),l({className:r,onClick:n,style:i,"data-icon":h.name,width:"1em",height:"1em",fill:"currentColor","aria-hidden":"true"},c))};$e.displayName="IconReact",$e.getTwoToneColors=function(){return l({},ze)},$e.setTwoToneColors=function(t){var e=t.primaryColor,r=t.secondaryColor;ze.primaryColor=e,ze.secondaryColor=r||Ue(e),ze.calculated=!!r};const Ge=$e;function He(t){var e=V(qe(t),2),r=e[0],n=e[1];return Ge.setTwoToneColors({primaryColor:r,secondaryColor:n})}var We=["className","icon","spin","rotate","tabIndex","onClick","twoToneColor"];He("#1890ff");var Ke=o.forwardRef((function(t,e){var r,n=t.className,s=t.icon,u=t.spin,c=t.rotate,f=t.tabIndex,h=t.onClick,d=t.twoToneColor,p=a(t,We),m=o.useContext(Xt).prefixCls,g=void 0===m?"anticon":m,v=B()(g,(i(r={},"".concat(g,"-").concat(s.name),!!s.name),i(r,"".concat(g,"-spin"),!!u||"loading"===s.name),r),n),y=f;void 0===y&&h&&(y=-1);var b=c?{msTransform:"rotate(".concat(c,"deg)"),transform:"rotate(".concat(c,"deg)")}:void 0,w=V(qe(d),2),E=w[0],k=w[1];return o.createElement("span",l(l({role:"img","aria-label":s.name},p),{},{ref:e,tabIndex:y,onClick:h,className:v}),o.createElement(Ge,{icon:s,primaryColor:E,secondaryColor:k,style:b}))}));Ke.displayName="AntdIcon",Ke.getTwoToneColor=function(){var t=Ge.getTwoToneColors();return t.calculated?[t.primaryColor,t.secondaryColor]:t.primaryColor},Ke.setTwoToneColor=He;const Je=Ke;var Xe=function(t,e){return o.createElement(Je,l(l({},t),{},{ref:e,icon:Jt}))};Xe.displayName="CloseOutlined";const Ze=o.forwardRef(Xe),Ye={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M699 353h-46.9c-10.2 0-19.9 4.9-25.9 13.3L469 584.3l-71.2-98.8c-6-8.3-15.6-13.3-25.9-13.3H325c-6.5 0-10.3 7.4-6.5 12.7l124.6 172.8a31.8 31.8 0 0051.7 0l210.6-292c3.9-5.3.1-12.7-6.4-12.7z"}},{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"}}]},name:"check-circle",theme:"outlined"};var Qe=function(t,e){return o.createElement(Je,l(l({},t),{},{ref:e,icon:Ye}))};Qe.displayName="CheckCircleOutlined";const tr=o.forwardRef(Qe),er={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M685.4 354.8c0-4.4-3.6-8-8-8l-66 .3L512 465.6l-99.3-118.4-66.1-.3c-4.4 0-8 3.5-8 8 0 1.9.7 3.7 1.9 5.2l130.1 155L340.5 670a8.32 8.32 0 00-1.9 5.2c0 4.4 3.6 8 8 8l66.1-.3L512 564.4l99.3 118.4 66 .3c4.4 0 8-3.5 8-8 0-1.9-.7-3.7-1.9-5.2L553.5 515l130.1-155c1.2-1.4 1.8-3.3 1.8-5.2z"}},{tag:"path",attrs:{d:"M512 65C264.6 65 64 265.6 64 513s200.6 448 448 448 448-200.6 448-448S759.4 65 512 65zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"}}]},name:"close-circle",theme:"outlined"};var rr=function(t,e){return o.createElement(Je,l(l({},t),{},{ref:e,icon:er}))};rr.displayName="CloseCircleOutlined";const nr=o.forwardRef(rr),ir={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"}},{tag:"path",attrs:{d:"M464 688a48 48 0 1096 0 48 48 0 10-96 0zm24-112h48c4.4 0 8-3.6 8-8V296c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8z"}}]},name:"exclamation-circle",theme:"outlined"};var or=function(t,e){return o.createElement(Je,l(l({},t),{},{ref:e,icon:ir}))};or.displayName="ExclamationCircleOutlined";const sr=o.forwardRef(or),ar={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"}},{tag:"path",attrs:{d:"M464 336a48 48 0 1096 0 48 48 0 10-96 0zm72 112h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V456c0-4.4-3.6-8-8-8z"}}]},name:"info-circle",theme:"outlined"};var ur=function(t,e){return o.createElement(Je,l(l({},t),{},{ref:e,icon:ar}))};ur.displayName="InfoCircleOutlined";const lr=o.forwardRef(ur);var cr=o.createContext({getPrefixCls:function(t,e){return e||(t?"ant-".concat(t):"ant")}}),fr=cr.Consumer;function hr(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=[];return s().Children.forEach(t,(function(t){(null!=t||e.keepEmpty)&&(Array.isArray(t)?r=r.concat(hr(t)):(0,z.isFragment)(t)&&t.props?r=r.concat(hr(t.props.children,e)):r.push(t))})),r}var dr="RC_FORM_INTERNAL_HOOKS",pr=function(){Pe(!1,"Can not find FormContext. Please make sure you wrap Field under Form.")};const mr=o.createContext({getFieldValue:pr,getFieldsValue:pr,getFieldError:pr,getFieldWarning:pr,getFieldsError:pr,isFieldsTouched:pr,isFieldTouched:pr,isFieldValidating:pr,isFieldsValidating:pr,resetFields:pr,setFields:pr,setFieldsValue:pr,validateFields:pr,submit:pr,getInternalHooks:function(){return pr(),{dispatch:pr,initEntityValue:pr,registerField:pr,useSubscribe:pr,setInitialValues:pr,destroyForm:pr,setCallbacks:pr,registerWatch:pr,getFields:pr,setValidateMessages:pr,setPreserve:pr,getInitialValue:pr}}});function gr(t){return null==t?[]:Array.isArray(t)?t:[t]}function vr(){return vr=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},vr.apply(this,arguments)}function yr(t){return yr=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},yr(t)}function br(t,e){return br=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},br(t,e)}function wr(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}function Er(t,e,r){return Er=wr()?Reflect.construct.bind():function(t,e,r){var n=[null];n.push.apply(n,e);var i=new(Function.bind.apply(t,n));return r&&br(i,r.prototype),i},Er.apply(null,arguments)}function kr(t){var e="function"==typeof Map?new Map:void 0;return kr=function(t){if(null===t||(r=t,-1===Function.toString.call(r).indexOf("[native code]")))return t;var r;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,n)}function n(){return Er(t,arguments,yr(this).constructor)}return n.prototype=Object.create(t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),br(n,t)},kr(t)}var _r=/%[sdj%]/g;function xr(t){if(!t||!t.length)return null;var e={};return t.forEach((function(t){var r=t.field;e[r]=e[r]||[],e[r].push(t)})),e}function Mr(t){for(var e=arguments.length,r=new Array(e>1?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];var i=0,o=r.length;if("function"==typeof t)return t.apply(null,r);if("string"==typeof t){var s=t.replace(_r,(function(t){if("%%"===t)return"%";if(i>=o)return t;switch(t){case"%s":return String(r[i++]);case"%d":return Number(r[i++]);case"%j":try{return JSON.stringify(r[i++])}catch(t){return"[Circular]"}break;default:return t}}));return s}return t}function Ar(t,e){return null==t||!("array"!==e||!Array.isArray(t)||t.length)||!(!function(t){return"string"===t||"url"===t||"hex"===t||"email"===t||"date"===t||"pattern"===t}(e)||"string"!=typeof t||t)}function Nr(t,e,r){var n=0,i=t.length;!function o(s){if(s&&s.length)r(s);else{var a=n;n+=1,a<i?e(t[a],o):r([])}}([])}"undefined"!=typeof process&&process.env;var Pr=function(t){var e,r;function n(e,r){var n;return(n=t.call(this,"Async Validation Error")||this).errors=e,n.fields=r,n}return r=t,(e=n).prototype=Object.create(r.prototype),e.prototype.constructor=e,br(e,r),n}(kr(Error));function Sr(t,e){return function(r){var n,i;return n=t.fullFields?function(t,e){for(var r=t,n=0;n<e.length;n++){if(null==r)return r;r=r[e[n]]}return r}(e,t.fullFields):e[r.field||t.fullField],(i=r)&&void 0!==i.message?(r.field=r.field||t.fullField,r.fieldValue=n,r):{message:"function"==typeof r?r():r,fieldValue:n,field:r.field||t.fullField}}}function Cr(t,e){if(e)for(var r in e)if(e.hasOwnProperty(r)){var n=e[r];"object"==typeof n&&"object"==typeof t[r]?t[r]=vr({},t[r],n):t[r]=n}return t}var Fr,Rr=function(t,e,r,n,i,o){!t.required||r.hasOwnProperty(t.field)&&!Ar(e,o||t.type)||n.push(Mr(i.messages.required,t.fullField))},Ir=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+\.)+[a-zA-Z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}))$/,Or=/^#?([a-f0-9]{6}|[a-f0-9]{3})$/i,Tr={integer:function(t){return Tr.number(t)&&parseInt(t,10)===t},float:function(t){return Tr.number(t)&&!Tr.integer(t)},array:function(t){return Array.isArray(t)},regexp:function(t){if(t instanceof RegExp)return!0;try{return!!new RegExp(t)}catch(t){return!1}},date:function(t){return"function"==typeof t.getTime&&"function"==typeof t.getMonth&&"function"==typeof t.getYear&&!isNaN(t.getTime())},number:function(t){return!isNaN(t)&&"number"==typeof t},object:function(t){return"object"==typeof t&&!Tr.array(t)},method:function(t){return"function"==typeof t},email:function(t){return"string"==typeof t&&t.length<=320&&!!t.match(Ir)},url:function(t){return"string"==typeof t&&t.length<=2048&&!!t.match(function(){if(Fr)return Fr;var t="[a-fA-F\\d:]",e=function(e){return e&&e.includeBoundaries?"(?:(?<=\\s|^)(?="+t+")|(?<="+t+")(?=\\s|$))":""},r="(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}",n="[a-fA-F\\d]{1,4}",i=("\n(?:\n(?:"+n+":){7}(?:"+n+"|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:"+n+":){6}(?:"+r+"|:"+n+"|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:"+n+":){5}(?::"+r+"|(?::"+n+"){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:"+n+":){4}(?:(?::"+n+"){0,1}:"+r+"|(?::"+n+"){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:"+n+":){3}(?:(?::"+n+"){0,2}:"+r+"|(?::"+n+"){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:"+n+":){2}(?:(?::"+n+"){0,3}:"+r+"|(?::"+n+"){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:"+n+":){1}(?:(?::"+n+"){0,4}:"+r+"|(?::"+n+"){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::(?:(?::"+n+"){0,5}:"+r+"|(?::"+n+"){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1\n").replace(/\s*\/\/.*$/gm,"").replace(/\n/g,"").trim(),o=new RegExp("(?:^"+r+"$)|(?:^"+i+"$)"),s=new RegExp("^"+r+"$"),a=new RegExp("^"+i+"$"),u=function(t){return t&&t.exact?o:new RegExp("(?:"+e(t)+r+e(t)+")|(?:"+e(t)+i+e(t)+")","g")};u.v4=function(t){return t&&t.exact?s:new RegExp(""+e(t)+r+e(t),"g")},u.v6=function(t){return t&&t.exact?a:new RegExp(""+e(t)+i+e(t),"g")};var l=u.v4().source,c=u.v6().source;return Fr=new RegExp("(?:^(?:(?:(?:[a-z]+:)?//)|www\\.)(?:\\S+(?::\\S*)?@)?(?:localhost|"+l+"|"+c+'|(?:(?:[a-z\\u00a1-\\uffff0-9][-_]*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#][^\\s"]*)?$)',"i")}())},hex:function(t){return"string"==typeof t&&!!t.match(Or)}},Lr=Rr,Br=function(t,e,r,n,i){(/^\s+$/.test(e)||""===e)&&n.push(Mr(i.messages.whitespace,t.fullField))},jr=function(t,e,r,n,i){if(t.required&&void 0===e)Rr(t,e,r,n,i);else{var o=t.type;["integer","float","array","regexp","object","method","email","number","date","url","hex"].indexOf(o)>-1?Tr[o](e)||n.push(Mr(i.messages.types[o],t.fullField,t.type)):o&&typeof e!==t.type&&n.push(Mr(i.messages.types[o],t.fullField,t.type))}},Ur=function(t,e,r,n,i){var o="number"==typeof t.len,s="number"==typeof t.min,a="number"==typeof t.max,u=e,l=null,c="number"==typeof e,f="string"==typeof e,h=Array.isArray(e);if(c?l="number":f?l="string":h&&(l="array"),!l)return!1;h&&(u=e.length),f&&(u=e.replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,"_").length),o?u!==t.len&&n.push(Mr(i.messages[l].len,t.fullField,t.len)):s&&!a&&u<t.min?n.push(Mr(i.messages[l].min,t.fullField,t.min)):a&&!s&&u>t.max?n.push(Mr(i.messages[l].max,t.fullField,t.max)):s&&a&&(u<t.min||u>t.max)&&n.push(Mr(i.messages[l].range,t.fullField,t.min,t.max))},qr=function(t,e,r,n,i){t.enum=Array.isArray(t.enum)?t.enum:[],-1===t.enum.indexOf(e)&&n.push(Mr(i.messages.enum,t.fullField,t.enum.join(", ")))},Dr=function(t,e,r,n,i){t.pattern&&(t.pattern instanceof RegExp?(t.pattern.lastIndex=0,t.pattern.test(e)||n.push(Mr(i.messages.pattern.mismatch,t.fullField,e,t.pattern))):"string"==typeof t.pattern&&(new RegExp(t.pattern).test(e)||n.push(Mr(i.messages.pattern.mismatch,t.fullField,e,t.pattern))))},Vr=function(t,e,r,n,i){var o=t.type,s=[];if(t.required||!t.required&&n.hasOwnProperty(t.field)){if(Ar(e,o)&&!t.required)return r();Lr(t,e,n,s,i,o),Ar(e,o)||jr(t,e,n,s,i)}r(s)},zr={string:function(t,e,r,n,i){var o=[];if(t.required||!t.required&&n.hasOwnProperty(t.field)){if(Ar(e,"string")&&!t.required)return r();Lr(t,e,n,o,i,"string"),Ar(e,"string")||(jr(t,e,n,o,i),Ur(t,e,n,o,i),Dr(t,e,n,o,i),!0===t.whitespace&&Br(t,e,n,o,i))}r(o)},method:function(t,e,r,n,i){var o=[];if(t.required||!t.required&&n.hasOwnProperty(t.field)){if(Ar(e)&&!t.required)return r();Lr(t,e,n,o,i),void 0!==e&&jr(t,e,n,o,i)}r(o)},number:function(t,e,r,n,i){var o=[];if(t.required||!t.required&&n.hasOwnProperty(t.field)){if(""===e&&(e=void 0),Ar(e)&&!t.required)return r();Lr(t,e,n,o,i),void 0!==e&&(jr(t,e,n,o,i),Ur(t,e,n,o,i))}r(o)},boolean:function(t,e,r,n,i){var o=[];if(t.required||!t.required&&n.hasOwnProperty(t.field)){if(Ar(e)&&!t.required)return r();Lr(t,e,n,o,i),void 0!==e&&jr(t,e,n,o,i)}r(o)},regexp:function(t,e,r,n,i){var o=[];if(t.required||!t.required&&n.hasOwnProperty(t.field)){if(Ar(e)&&!t.required)return r();Lr(t,e,n,o,i),Ar(e)||jr(t,e,n,o,i)}r(o)},integer:function(t,e,r,n,i){var o=[];if(t.required||!t.required&&n.hasOwnProperty(t.field)){if(Ar(e)&&!t.required)return r();Lr(t,e,n,o,i),void 0!==e&&(jr(t,e,n,o,i),Ur(t,e,n,o,i))}r(o)},float:function(t,e,r,n,i){var o=[];if(t.required||!t.required&&n.hasOwnProperty(t.field)){if(Ar(e)&&!t.required)return r();Lr(t,e,n,o,i),void 0!==e&&(jr(t,e,n,o,i),Ur(t,e,n,o,i))}r(o)},array:function(t,e,r,n,i){var o=[];if(t.required||!t.required&&n.hasOwnProperty(t.field)){if(null==e&&!t.required)return r();Lr(t,e,n,o,i,"array"),null!=e&&(jr(t,e,n,o,i),Ur(t,e,n,o,i))}r(o)},object:function(t,e,r,n,i){var o=[];if(t.required||!t.required&&n.hasOwnProperty(t.field)){if(Ar(e)&&!t.required)return r();Lr(t,e,n,o,i),void 0!==e&&jr(t,e,n,o,i)}r(o)},enum:function(t,e,r,n,i){var o=[];if(t.required||!t.required&&n.hasOwnProperty(t.field)){if(Ar(e)&&!t.required)return r();Lr(t,e,n,o,i),void 0!==e&&qr(t,e,n,o,i)}r(o)},pattern:function(t,e,r,n,i){var o=[];if(t.required||!t.required&&n.hasOwnProperty(t.field)){if(Ar(e,"string")&&!t.required)return r();Lr(t,e,n,o,i),Ar(e,"string")||Dr(t,e,n,o,i)}r(o)},date:function(t,e,r,n,i){var o=[];if(t.required||!t.required&&n.hasOwnProperty(t.field)){if(Ar(e,"date")&&!t.required)return r();var s;Lr(t,e,n,o,i),Ar(e,"date")||(s=e instanceof Date?e:new Date(e),jr(t,s,n,o,i),s&&Ur(t,s.getTime(),n,o,i))}r(o)},url:Vr,hex:Vr,email:Vr,required:function(t,e,r,n,i){var o=[],s=Array.isArray(e)?"array":typeof e;Lr(t,e,n,o,i,s),r(o)},any:function(t,e,r,n,i){var o=[];if(t.required||!t.required&&n.hasOwnProperty(t.field)){if(Ar(e)&&!t.required)return r();Lr(t,e,n,o,i)}r(o)}};function $r(){return{default:"Validation error on field %s",required:"%s is required",enum:"%s must be one of %s",whitespace:"%s cannot be empty",date:{format:"%s date %s is invalid for format %s",parse:"%s date could not be parsed, %s is invalid ",invalid:"%s date %s is invalid"},types:{string:"%s is not a %s",method:"%s is not a %s (function)",array:"%s is not an %s",object:"%s is not an %s",number:"%s is not a %s",date:"%s is not a %s",boolean:"%s is not a %s",integer:"%s is not an %s",float:"%s is not a %s",regexp:"%s is not a valid %s",email:"%s is not a valid %s",url:"%s is not a valid %s",hex:"%s is not a valid %s"},string:{len:"%s must be exactly %s characters",min:"%s must be at least %s characters",max:"%s cannot be longer than %s characters",range:"%s must be between %s and %s characters"},number:{len:"%s must equal %s",min:"%s cannot be less than %s",max:"%s cannot be greater than %s",range:"%s must be between %s and %s"},array:{len:"%s must be exactly %s in length",min:"%s cannot be less than %s in length",max:"%s cannot be greater than %s in length",range:"%s must be between %s and %s in length"},pattern:{mismatch:"%s value %s does not match pattern %s"},clone:function(){var t=JSON.parse(JSON.stringify(this));return t.clone=this.clone,t}}}var Gr=$r(),Hr=function(){function t(t){this.rules=null,this._messages=Gr,this.define(t)}var e=t.prototype;return e.define=function(t){var e=this;if(!t)throw new Error("Cannot configure a schema with no rules");if("object"!=typeof t||Array.isArray(t))throw new Error("Rules must be an object");this.rules={},Object.keys(t).forEach((function(r){var n=t[r];e.rules[r]=Array.isArray(n)?n:[n]}))},e.messages=function(t){return t&&(this._messages=Cr($r(),t)),this._messages},e.validate=function(e,r,n){var i=this;void 0===r&&(r={}),void 0===n&&(n=function(){});var o=e,s=r,a=n;if("function"==typeof s&&(a=s,s={}),!this.rules||0===Object.keys(this.rules).length)return a&&a(null,o),Promise.resolve(o);if(s.messages){var u=this.messages();u===Gr&&(u=$r()),Cr(u,s.messages),s.messages=u}else s.messages=this.messages();var l={};(s.keys||Object.keys(this.rules)).forEach((function(t){var r=i.rules[t],n=o[t];r.forEach((function(r){var s=r;"function"==typeof s.transform&&(o===e&&(o=vr({},o)),n=o[t]=s.transform(n)),(s="function"==typeof s?{validator:s}:vr({},s)).validator=i.getValidationMethod(s),s.validator&&(s.field=t,s.fullField=s.fullField||t,s.type=i.getType(s),l[t]=l[t]||[],l[t].push({rule:s,value:n,source:o,field:t}))}))}));var c={};return function(t,e,r,n,i){if(e.first){var o=new Promise((function(e,o){var s=function(t){var e=[];return Object.keys(t).forEach((function(r){e.push.apply(e,t[r]||[])})),e}(t);Nr(s,r,(function(t){return n(t),t.length?o(new Pr(t,xr(t))):e(i)}))}));return o.catch((function(t){return t})),o}var s=!0===e.firstFields?Object.keys(t):e.firstFields||[],a=Object.keys(t),u=a.length,l=0,c=[],f=new Promise((function(e,o){var f=function(t){if(c.push.apply(c,t),++l===u)return n(c),c.length?o(new Pr(c,xr(c))):e(i)};a.length||(n(c),e(i)),a.forEach((function(e){var n=t[e];-1!==s.indexOf(e)?Nr(n,r,f):function(t,e,r){var n=[],i=0,o=t.length;function s(t){n.push.apply(n,t||[]),++i===o&&r(n)}t.forEach((function(t){e(t,s)}))}(n,r,f)}))}));return f.catch((function(t){return t})),f}(l,s,(function(e,r){var n,i=e.rule,a=!("object"!==i.type&&"array"!==i.type||"object"!=typeof i.fields&&"object"!=typeof i.defaultField);function u(t,e){return vr({},e,{fullField:i.fullField+"."+t,fullFields:i.fullFields?[].concat(i.fullFields,[t]):[t]})}function l(n){void 0===n&&(n=[]);var l=Array.isArray(n)?n:[n];!s.suppressWarning&&l.length&&t.warning("async-validator:",l),l.length&&void 0!==i.message&&(l=[].concat(i.message));var f=l.map(Sr(i,o));if(s.first&&f.length)return c[i.field]=1,r(f);if(a){if(i.required&&!e.value)return void 0!==i.message?f=[].concat(i.message).map(Sr(i,o)):s.error&&(f=[s.error(i,Mr(s.messages.required,i.field))]),r(f);var h={};i.defaultField&&Object.keys(e.value).map((function(t){h[t]=i.defaultField})),h=vr({},h,e.rule.fields);var d={};Object.keys(h).forEach((function(t){var e=h[t],r=Array.isArray(e)?e:[e];d[t]=r.map(u.bind(null,t))}));var p=new t(d);p.messages(s.messages),e.rule.options&&(e.rule.options.messages=s.messages,e.rule.options.error=s.error),p.validate(e.value,e.rule.options||s,(function(t){var e=[];f&&f.length&&e.push.apply(e,f),t&&t.length&&e.push.apply(e,t),r(e.length?e:null)}))}else r(f)}if(a=a&&(i.required||!i.required&&e.value),i.field=e.field,i.asyncValidator)n=i.asyncValidator(i,e.value,l,e.source,s);else if(i.validator){try{n=i.validator(i,e.value,l,e.source,s)}catch(t){null==console.error||console.error(t),s.suppressValidatorError||setTimeout((function(){throw t}),0),l(t.message)}!0===n?l():!1===n?l("function"==typeof i.message?i.message(i.fullField||i.field):i.message||(i.fullField||i.field)+" fails"):n instanceof Array?l(n):n instanceof Error&&l(n.message)}n&&n.then&&n.then((function(){return l()}),(function(t){return l(t)}))}),(function(t){!function(t){for(var e,r,n=[],i={},s=0;s<t.length;s++)e=t[s],r=void 0,Array.isArray(e)?n=(r=n).concat.apply(r,e):n.push(e);n.length?(i=xr(n),a(n,i)):a(null,o)}(t)}),o)},e.getType=function(t){if(void 0===t.type&&t.pattern instanceof RegExp&&(t.type="pattern"),"function"!=typeof t.validator&&t.type&&!zr.hasOwnProperty(t.type))throw new Error(Mr("Unknown rule type %s",t.type));return t.type||"string"},e.getValidationMethod=function(t){if("function"==typeof t.validator)return t.validator;var e=Object.keys(t),r=e.indexOf("message");return-1!==r&&e.splice(r,1),1===e.length&&"required"===e[0]?zr.required:zr[this.getType(t)]||void 0},t}();Hr.register=function(t,e){if("function"!=typeof e)throw new Error("Cannot register a validator by type, validator is not a function");zr[t]=e},Hr.warning=function(){},Hr.messages=Gr,Hr.validators=zr;var Wr="'${name}' is not a valid ${type}",Kr={default:"Validation error on field '${name}'",required:"'${name}' is required",enum:"'${name}' must be one of [${enum}]",whitespace:"'${name}' cannot be empty",date:{format:"'${name}' is invalid for format date",parse:"'${name}' could not be parsed as date",invalid:"'${name}' is invalid date"},types:{string:Wr,method:Wr,array:Wr,object:Wr,number:Wr,date:Wr,boolean:Wr,integer:Wr,float:Wr,regexp:Wr,email:Wr,url:Wr,hex:Wr},string:{len:"'${name}' must be exactly ${len} characters",min:"'${name}' must be at least ${min} characters",max:"'${name}' cannot be longer than ${max} characters",range:"'${name}' must be between ${min} and ${max} characters"},number:{len:"'${name}' must equal ${len}",min:"'${name}' cannot be less than ${min}",max:"'${name}' cannot be greater than ${max}",range:"'${name}' must be between ${min} and ${max}"},array:{len:"'${name}' must be exactly ${len} in length",min:"'${name}' cannot be less than ${min} in length",max:"'${name}' cannot be greater than ${max} in length",range:"'${name}' must be between ${min} and ${max} in length"},pattern:{mismatch:"'${name}' does not match pattern ${pattern}"}};function Jr(t,e){for(var r=t,n=0;n<e.length;n+=1){if(null==r)return;r=r[e[n]]}return r}function Xr(t,e,r,n){if(!e.length)return r;var i,o,s=j(i=e)||qt(i)||q(i)||D(),a=s[0],u=s.slice(1);return o=t||"number"!=typeof a?Array.isArray(t)?Dt(t):l({},t):[],n&&void 0===r&&1===u.length?delete o[a][u[0]]:o[a]=Xr(o[a],u,r,n),o}function Zr(t,e,r){var n=arguments.length>3&&void 0!==arguments[3]&&arguments[3];return e.length&&n&&void 0===r&&!Jr(t,e.slice(0,-1))?t:Xr(t,e,r,n)}const Yr=function t(e){return Array.isArray(e)?function(e){return e.map((function(e){return t(e)}))}(e):"object"===g(e)&&null!==e?function(e){if(Object.getPrototypeOf(e)===Object.prototype){var r={};for(var n in e)r[n]=t(e[n]);return r}return e}(e):e};function Qr(t){return gr(t)}function tn(t,e){return Jr(t,e)}function en(t,e,r){var n=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=Zr(t,e,r,n);return i}function rn(t,e){var r={};return e.forEach((function(e){var n=tn(t,e);r=en(r,e,n)})),r}function nn(t,e){return t&&t.some((function(t){return un(t,e)}))}function on(t){return"object"===g(t)&&null!==t&&Object.getPrototypeOf(t)===Object.prototype}function sn(t,e){var r=Array.isArray(t)?Dt(t):l({},t);return e?(Object.keys(e).forEach((function(t){var n=r[t],i=e[t],o=on(n)&&on(i);r[t]=o?sn(n,i||{}):Yr(i)})),r):r}function an(t){for(var e=arguments.length,r=new Array(e>1?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];return r.reduce((function(t,e){return sn(t,e)}),t)}function un(t,e){return!(!t||!e||t.length!==e.length)&&t.every((function(t,r){return e[r]===t}))}function ln(t){var e=arguments.length<=1?void 0:arguments[1];return e&&e.target&&"object"===g(e.target)&&t in e.target?e.target[t]:e}function cn(t,e,r){var n=t.length;if(e<0||e>=n||r<0||r>=n)return t;var i=t[e],o=e-r;return o>0?[].concat(Dt(t.slice(0,r)),[i],Dt(t.slice(r,e)),Dt(t.slice(e+1,n))):o<0?[].concat(Dt(t.slice(0,e)),Dt(t.slice(e+1,r+1)),[i],Dt(t.slice(r+1,n))):t}var fn=Hr;function hn(t,e){return t.replace(/\$\{\w+\}/g,(function(t){var r=t.slice(2,-1);return e[r]}))}var dn="CODE_LOGIC_ERROR";function pn(t,e,r,n,i){return mn.apply(this,arguments)}function mn(){return mn=k(w().mark((function t(e,r,n,s,a){var u,c,f,h,d,p,m,g,v;return w().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return delete(u=l({},n)).ruleIndex,u.validator&&(c=u.validator,u.validator=function(){try{return c.apply(void 0,arguments)}catch(t){return console.error(t),Promise.reject(dn)}}),f=null,u&&"array"===u.type&&u.defaultField&&(f=u.defaultField,delete u.defaultField),h=new fn(i({},e,[u])),d=an({},Kr,s.validateMessages),h.messages(d),p=[],t.prev=9,t.next=12,Promise.resolve(h.validate(i({},e,r),l({},s)));case 12:t.next=17;break;case 14:t.prev=14,t.t0=t.catch(9),t.t0.errors&&(p=t.t0.errors.map((function(t,e){var r=t.message,n=r===dn?d.default:r;return o.isValidElement(n)?o.cloneElement(n,{key:"error_".concat(e)}):n})));case 17:if(p.length||!f){t.next=22;break}return t.next=20,Promise.all(r.map((function(t,r){return pn("".concat(e,".").concat(r),t,f,s,a)})));case 20:return m=t.sent,t.abrupt("return",m.reduce((function(t,e){return[].concat(Dt(t),Dt(e))}),[]));case 22:return g=l(l({},n),{},{name:e,enum:(n.enum||[]).join(", ")},a),v=p.map((function(t){return"string"==typeof t?hn(t,g):t})),t.abrupt("return",v);case 25:case"end":return t.stop()}}),t,null,[[9,14]])}))),mn.apply(this,arguments)}function gn(){return(gn=k(w().mark((function t(e){return w().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",Promise.all(e).then((function(t){var e;return(e=[]).concat.apply(e,Dt(t))})));case 1:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function vn(){return(vn=k(w().mark((function t(e){var r;return w().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=0,t.abrupt("return",new Promise((function(t){e.forEach((function(n){n.then((function(n){n.errors.length&&t([n]),(r+=1)===e.length&&t([])}))}))})));case 2:case"end":return t.stop()}}),t)})))).apply(this,arguments)}var yn=["name"],bn=[];function wn(t,e,r,n,i,o){return"function"==typeof t?t(e,r,"source"in o?{source:o.source}:{}):n!==i}var En=function(t){p(r,t);var e=b(r);function r(t){var n;return c(this,r),(n=e.call(this,t)).state={resetCount:0},n.cancelRegisterFunc=null,n.mounted=!1,n.touched=!1,n.dirty=!1,n.validatePromise=null,n.prevValidating=void 0,n.errors=bn,n.warnings=bn,n.cancelRegister=function(){var t=n.props,e=t.preserve,r=t.isListField,i=t.name;n.cancelRegisterFunc&&n.cancelRegisterFunc(r,e,Qr(i)),n.cancelRegisterFunc=null},n.getNamePath=function(){var t=n.props,e=t.name,r=t.fieldContext.prefixName;return void 0!==e?[].concat(Dt(void 0===r?[]:r),Dt(e)):[]},n.getRules=function(){var t=n.props,e=t.rules,r=void 0===e?[]:e,i=t.fieldContext;return r.map((function(t){return"function"==typeof t?t(i):t}))},n.refresh=function(){n.mounted&&n.setState((function(t){return{resetCount:t.resetCount+1}}))},n.triggerMetaEvent=function(t){var e=n.props.onMetaChange;null==e||e(l(l({},n.getMeta()),{},{destroy:t}))},n.onStoreChange=function(t,e,r){var i=n.props,o=i.shouldUpdate,s=i.dependencies,a=void 0===s?[]:s,u=i.onReset,l=r.store,c=n.getNamePath(),f=n.getValue(t),h=n.getValue(l),d=e&&nn(e,c);switch("valueUpdate"===r.type&&"external"===r.source&&f!==h&&(n.touched=!0,n.dirty=!0,n.validatePromise=null,n.errors=bn,n.warnings=bn,n.triggerMetaEvent()),r.type){case"reset":if(!e||d)return n.touched=!1,n.dirty=!1,n.validatePromise=null,n.errors=bn,n.warnings=bn,n.triggerMetaEvent(),null==u||u(),void n.refresh();break;case"remove":if(o)return void n.reRender();break;case"setField":if(d){var p=r.data;return"touched"in p&&(n.touched=p.touched),"validating"in p&&!("originRCField"in p)&&(n.validatePromise=p.validating?Promise.resolve([]):null),"errors"in p&&(n.errors=p.errors||bn),"warnings"in p&&(n.warnings=p.warnings||bn),n.dirty=!0,n.triggerMetaEvent(),void n.reRender()}if(o&&!c.length&&wn(o,t,l,f,h,r))return void n.reRender();break;case"dependenciesUpdate":if(a.map(Qr).some((function(t){return nn(r.relatedFields,t)})))return void n.reRender();break;default:if(d||(!a.length||c.length||o)&&wn(o,t,l,f,h,r))return void n.reRender()}!0===o&&n.reRender()},n.validateRules=function(t){var e=n.getNamePath(),r=n.getValue(),i=Promise.resolve().then((function(){if(!n.mounted)return[];var o=n.props,s=o.validateFirst,a=void 0!==s&&s,u=o.messageVariables,c=(t||{}).triggerName,f=n.getRules();c&&(f=f.filter((function(t){var e=t.validateTrigger;return!e||gr(e).includes(c)})));var h=function(t,e,r,n,i,o){var s,a=t.join("."),u=r.map((function(t,e){var r=t.validator,n=l(l({},t),{},{ruleIndex:e});return r&&(n.validator=function(t,e,n){var i=!1,o=r(t,e,(function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];Promise.resolve().then((function(){Pe(!i,"Your validator function has already return a promise. `callback` will be ignored."),i||n.apply(void 0,e)}))}));i=o&&"function"==typeof o.then&&"function"==typeof o.catch,Pe(i,"`callback` is deprecated. Please return a promise instead."),i&&o.then((function(){n()})).catch((function(t){n(t||" ")}))}),n})).sort((function(t,e){var r=t.warningOnly,n=t.ruleIndex,i=e.warningOnly,o=e.ruleIndex;return!!r==!!i?n-o:r?1:-1}));if(!0===i)s=new Promise(function(){var t=k(w().mark((function t(r,i){var s,l,c;return w().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:s=0;case 1:if(!(s<u.length)){t.next=12;break}return l=u[s],t.next=5,pn(a,e,l,n,o);case 5:if(!(c=t.sent).length){t.next=9;break}return i([{errors:c,rule:l}]),t.abrupt("return");case 9:s+=1,t.next=1;break;case 12:r([]);case 13:case"end":return t.stop()}}),t)})));return function(e,r){return t.apply(this,arguments)}}());else{var c=u.map((function(t){return pn(a,e,t,n,o).then((function(e){return{errors:e,rule:t}}))}));s=(i?function(t){return vn.apply(this,arguments)}(c):function(t){return gn.apply(this,arguments)}(c)).then((function(t){return Promise.reject(t)}))}return s.catch((function(t){return t})),s}(e,r,f,t,a,u);return h.catch((function(t){return t})).then((function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:bn;if(n.validatePromise===i){n.validatePromise=null;var e=[],r=[];t.forEach((function(t){var n=t.rule.warningOnly,i=t.errors,o=void 0===i?bn:i;n?r.push.apply(r,Dt(o)):e.push.apply(e,Dt(o))})),n.errors=e,n.warnings=r,n.triggerMetaEvent(),n.reRender()}})),h}));return n.validatePromise=i,n.dirty=!0,n.errors=bn,n.warnings=bn,n.triggerMetaEvent(),n.reRender(),i},n.isFieldValidating=function(){return!!n.validatePromise},n.isFieldTouched=function(){return n.touched},n.isFieldDirty=function(){return!(!n.dirty&&void 0===n.props.initialValue)||void 0!==(0,n.props.fieldContext.getInternalHooks(dr).getInitialValue)(n.getNamePath())},n.getErrors=function(){return n.errors},n.getWarnings=function(){return n.warnings},n.isListField=function(){return n.props.isListField},n.isList=function(){return n.props.isList},n.isPreserve=function(){return n.props.preserve},n.getMeta=function(){return n.prevValidating=n.isFieldValidating(),{touched:n.isFieldTouched(),validating:n.prevValidating,errors:n.errors,warnings:n.warnings,name:n.getNamePath()}},n.getOnlyChild=function(t){if("function"==typeof t){var e=n.getMeta();return l(l({},n.getOnlyChild(t(n.getControlled(),e,n.props.fieldContext))),{},{isFunction:!0})}var r=hr(t);return 1===r.length&&o.isValidElement(r[0])?{child:r[0],isFunction:!1}:{child:r,isFunction:!1}},n.getValue=function(t){var e=n.props.fieldContext.getFieldsValue,r=n.getNamePath();return tn(t||e(!0),r)},n.getControlled=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=n.props,r=e.trigger,o=e.validateTrigger,s=e.getValueFromEvent,a=e.normalize,u=e.valuePropName,c=e.getValueProps,f=e.fieldContext,h=void 0!==o?o:f.validateTrigger,d=n.getNamePath(),p=f.getInternalHooks,m=f.getFieldsValue,g=p(dr),v=g.dispatch,y=n.getValue(),b=c||function(t){return i({},u,t)},w=t[r],E=l(l({},t),b(y));E[r]=function(){var t;n.touched=!0,n.dirty=!0,n.triggerMetaEvent();for(var e=arguments.length,r=new Array(e),i=0;i<e;i++)r[i]=arguments[i];t=s?s.apply(void 0,r):ln.apply(void 0,[u].concat(r)),a&&(t=a(t,y,m(!0))),v({type:"updateValue",namePath:d,value:t}),w&&w.apply(void 0,r)};var k=gr(h||[]);return k.forEach((function(t){var e=E[t];E[t]=function(){e&&e.apply(void 0,arguments);var r=n.props.rules;r&&r.length&&v({type:"validateField",namePath:d,triggerName:t})}})),E},t.fieldContext&&(0,(0,t.fieldContext.getInternalHooks)(dr).initEntityValue)(v(n)),n}return h(r,[{key:"componentDidMount",value:function(){var t=this.props,e=t.shouldUpdate,r=t.fieldContext;if(this.mounted=!0,r){var n=(0,r.getInternalHooks)(dr).registerField;this.cancelRegisterFunc=n(this)}!0===e&&this.reRender()}},{key:"componentWillUnmount",value:function(){this.cancelRegister(),this.triggerMetaEvent(!0),this.mounted=!1}},{key:"reRender",value:function(){this.mounted&&this.forceUpdate()}},{key:"render",value:function(){var t,e=this.state.resetCount,r=this.props.children,n=this.getOnlyChild(r),i=n.child;return n.isFunction?t=i:o.isValidElement(i)?t=o.cloneElement(i,this.getControlled(i.props)):(Pe(!i,"`children` of Field is not validate ReactElement."),t=i),o.createElement(o.Fragment,{key:e},t)}}]),r}(o.Component);En.contextType=mr,En.defaultProps={trigger:"onChange",valuePropName:"value"};const kn=function(t){var e=t.name,r=a(t,yn),i=o.useContext(mr),s=void 0!==e?Qr(e):void 0,u="keep";return r.isListField||(u="_".concat((s||[]).join("_"))),o.createElement(En,n({key:u,name:s},r,{fieldContext:i}))},_n=o.createContext(null);var xn="__@field_split__";function Mn(t){return t.map((function(t){return"".concat(g(t),":").concat(t)})).join(xn)}var An=function(){function t(){c(this,t),this.kvs=new Map}return h(t,[{key:"set",value:function(t,e){this.kvs.set(Mn(t),e)}},{key:"get",value:function(t){return this.kvs.get(Mn(t))}},{key:"update",value:function(t,e){var r=e(this.get(t));r?this.set(t,r):this.delete(t)}},{key:"delete",value:function(t){this.kvs.delete(Mn(t))}},{key:"map",value:function(t){return Dt(this.kvs.entries()).map((function(e){var r=V(e,2),n=r[0],i=r[1],o=n.split(xn);return t({key:o.map((function(t){var e=V(t.match(/^([^:]*):(.*)$/),3),r=e[1],n=e[2];return"number"===r?Number(n):n})),value:i})}))}},{key:"toJSON",value:function(){var t={};return this.map((function(e){var r=e.key,n=e.value;return t[r.join(".")]=n,null})),t}}]),t}();const Nn=An;var Pn=["name","errors"],Sn=h((function t(e){var r=this;c(this,t),this.formHooked=!1,this.forceRootUpdate=void 0,this.subscribable=!0,this.store={},this.fieldEntities=[],this.initialValues={},this.callbacks={},this.validateMessages=null,this.preserve=null,this.lastValidatePromise=null,this.getForm=function(){return{getFieldValue:r.getFieldValue,getFieldsValue:r.getFieldsValue,getFieldError:r.getFieldError,getFieldWarning:r.getFieldWarning,getFieldsError:r.getFieldsError,isFieldsTouched:r.isFieldsTouched,isFieldTouched:r.isFieldTouched,isFieldValidating:r.isFieldValidating,isFieldsValidating:r.isFieldsValidating,resetFields:r.resetFields,setFields:r.setFields,setFieldsValue:r.setFieldsValue,validateFields:r.validateFields,submit:r.submit,_init:!0,getInternalHooks:r.getInternalHooks}},this.getInternalHooks=function(t){return t===dr?(r.formHooked=!0,{dispatch:r.dispatch,initEntityValue:r.initEntityValue,registerField:r.registerField,useSubscribe:r.useSubscribe,setInitialValues:r.setInitialValues,destroyForm:r.destroyForm,setCallbacks:r.setCallbacks,setValidateMessages:r.setValidateMessages,getFields:r.getFields,setPreserve:r.setPreserve,getInitialValue:r.getInitialValue,registerWatch:r.registerWatch}):(Pe(!1,"`getInternalHooks` is internal usage. Should not call directly."),null)},this.useSubscribe=function(t){r.subscribable=t},this.prevWithoutPreserves=null,this.setInitialValues=function(t,e){if(r.initialValues=t||{},e){var n,i=an({},t,r.store);null===(n=r.prevWithoutPreserves)||void 0===n||n.map((function(e){var r=e.key;i=en(i,r,tn(t,r))})),r.prevWithoutPreserves=null,r.updateStore(i)}},this.destroyForm=function(){var t=new Nn;r.getFieldEntities(!0).forEach((function(e){r.isMergedPreserve(e.isPreserve())||t.set(e.getNamePath(),!0)})),r.prevWithoutPreserves=t},this.getInitialValue=function(t){var e=tn(r.initialValues,t);return t.length?Yr(e):e},this.setCallbacks=function(t){r.callbacks=t},this.setValidateMessages=function(t){r.validateMessages=t},this.setPreserve=function(t){r.preserve=t},this.watchList=[],this.registerWatch=function(t){return r.watchList.push(t),function(){r.watchList=r.watchList.filter((function(e){return e!==t}))}},this.notifyWatch=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];if(r.watchList.length){var e=r.getFieldsValue();r.watchList.forEach((function(r){r(e,t)}))}},this.timeoutId=null,this.warningUnhooked=function(){},this.updateStore=function(t){r.store=t},this.getFieldEntities=function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return t?r.fieldEntities.filter((function(t){return t.getNamePath().length})):r.fieldEntities},this.getFieldsMap=function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],e=new Nn;return r.getFieldEntities(t).forEach((function(t){var r=t.getNamePath();e.set(r,t)})),e},this.getFieldEntitiesForNamePathList=function(t){if(!t)return r.getFieldEntities(!0);var e=r.getFieldsMap(!0);return t.map((function(t){var r=Qr(t);return e.get(r)||{INVALIDATE_NAME_PATH:Qr(t)}}))},this.getFieldsValue=function(t,e){if(r.warningUnhooked(),!0===t&&!e)return r.store;var n=r.getFieldEntitiesForNamePathList(Array.isArray(t)?t:null),i=[];return n.forEach((function(r){var n,o="INVALIDATE_NAME_PATH"in r?r.INVALIDATE_NAME_PATH:r.getNamePath();if(t||!(null===(n=r.isListField)||void 0===n?void 0:n.call(r)))if(e){var s="getMeta"in r?r.getMeta():null;e(s)&&i.push(o)}else i.push(o)})),rn(r.store,i.map(Qr))},this.getFieldValue=function(t){r.warningUnhooked();var e=Qr(t);return tn(r.store,e)},this.getFieldsError=function(t){return r.warningUnhooked(),r.getFieldEntitiesForNamePathList(t).map((function(e,r){return e&&!("INVALIDATE_NAME_PATH"in e)?{name:e.getNamePath(),errors:e.getErrors(),warnings:e.getWarnings()}:{name:Qr(t[r]),errors:[],warnings:[]}}))},this.getFieldError=function(t){r.warningUnhooked();var e=Qr(t);return r.getFieldsError([e])[0].errors},this.getFieldWarning=function(t){r.warningUnhooked();var e=Qr(t);return r.getFieldsError([e])[0].warnings},this.isFieldsTouched=function(){r.warningUnhooked();for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];var i,o=e[0],s=e[1],a=!1;0===e.length?i=null:1===e.length?Array.isArray(o)?(i=o.map(Qr),a=!1):(i=null,a=o):(i=o.map(Qr),a=s);var u=r.getFieldEntities(!0),l=function(t){return t.isFieldTouched()};if(!i)return a?u.every(l):u.some(l);var c=new Nn;i.forEach((function(t){c.set(t,[])})),u.forEach((function(t){var e=t.getNamePath();i.forEach((function(r){r.every((function(t,r){return e[r]===t}))&&c.update(r,(function(e){return[].concat(Dt(e),[t])}))}))}));var f=function(t){return t.some(l)},h=c.map((function(t){return t.value}));return a?h.every(f):h.some(f)},this.isFieldTouched=function(t){return r.warningUnhooked(),r.isFieldsTouched([t])},this.isFieldsValidating=function(t){r.warningUnhooked();var e=r.getFieldEntities();if(!t)return e.some((function(t){return t.isFieldValidating()}));var n=t.map(Qr);return e.some((function(t){var e=t.getNamePath();return nn(n,e)&&t.isFieldValidating()}))},this.isFieldValidating=function(t){return r.warningUnhooked(),r.isFieldsValidating([t])},this.resetWithFieldInitialValue=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=new Nn,n=r.getFieldEntities(!0);n.forEach((function(t){var r=t.props.initialValue,n=t.getNamePath();if(void 0!==r){var i=e.get(n)||new Set;i.add({entity:t,value:r}),e.set(n,i)}}));var i,o=function(n){n.forEach((function(n){if(void 0!==n.props.initialValue){var i=n.getNamePath();if(void 0!==r.getInitialValue(i))Pe(!1,"Form already set 'initialValues' with path '".concat(i.join("."),"'. Field can not overwrite it."));else{var o=e.get(i);if(o&&o.size>1)Pe(!1,"Multiple Field with path '".concat(i.join("."),"' set 'initialValue'. Can not decide which one to pick."));else if(o){var s=r.getFieldValue(i);t.skipExist&&void 0!==s||r.updateStore(en(r.store,i,Dt(o)[0].value))}}}}))};t.entities?i=t.entities:t.namePathList?(i=[],t.namePathList.forEach((function(t){var r,n=e.get(t);n&&(r=i).push.apply(r,Dt(Dt(n).map((function(t){return t.entity}))))}))):i=n,o(i)},this.resetFields=function(t){r.warningUnhooked();var e=r.store;if(!t)return r.updateStore(an({},r.initialValues)),r.resetWithFieldInitialValue(),r.notifyObservers(e,null,{type:"reset"}),void r.notifyWatch();var n=t.map(Qr);n.forEach((function(t){var e=r.getInitialValue(t);r.updateStore(en(r.store,t,e))})),r.resetWithFieldInitialValue({namePathList:n}),r.notifyObservers(e,n,{type:"reset"}),r.notifyWatch(n)},this.setFields=function(t){r.warningUnhooked();var e=r.store,n=[];t.forEach((function(t){var i=t.name,o=(t.errors,a(t,Pn)),s=Qr(i);n.push(s),"value"in o&&r.updateStore(en(r.store,s,o.value)),r.notifyObservers(e,[s],{type:"setField",data:t})})),r.notifyWatch(n)},this.getFields=function(){return r.getFieldEntities(!0).map((function(t){var e=t.getNamePath(),n=l(l({},t.getMeta()),{},{name:e,value:r.getFieldValue(e)});return Object.defineProperty(n,"originRCField",{value:!0}),n}))},this.initEntityValue=function(t){var e=t.props.initialValue;if(void 0!==e){var n=t.getNamePath();void 0===tn(r.store,n)&&r.updateStore(en(r.store,n,e))}},this.isMergedPreserve=function(t){var e=void 0!==t?t:r.preserve;return null==e||e},this.registerField=function(t){r.fieldEntities.push(t);var e=t.getNamePath();if(r.notifyWatch([e]),void 0!==t.props.initialValue){var n=r.store;r.resetWithFieldInitialValue({entities:[t],skipExist:!0}),r.notifyObservers(n,[t.getNamePath()],{type:"valueUpdate",source:"internal"})}return function(n,i){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];if(r.fieldEntities=r.fieldEntities.filter((function(e){return e!==t})),!r.isMergedPreserve(i)&&(!n||o.length>1)){var s=n?void 0:r.getInitialValue(e);if(e.length&&r.getFieldValue(e)!==s&&r.fieldEntities.every((function(t){return!un(t.getNamePath(),e)}))){var a=r.store;r.updateStore(en(a,e,s,!0)),r.notifyObservers(a,[e],{type:"remove"}),r.triggerDependenciesUpdate(a,e)}}r.notifyWatch([e])}},this.dispatch=function(t){switch(t.type){case"updateValue":var e=t.namePath,n=t.value;r.updateValue(e,n);break;case"validateField":var i=t.namePath,o=t.triggerName;r.validateFields([i],{triggerName:o})}},this.notifyObservers=function(t,e,n){if(r.subscribable){var i=l(l({},n),{},{store:r.getFieldsValue(!0)});r.getFieldEntities().forEach((function(r){(0,r.onStoreChange)(t,e,i)}))}else r.forceRootUpdate()},this.triggerDependenciesUpdate=function(t,e){var n=r.getDependencyChildrenFields(e);return n.length&&r.validateFields(n),r.notifyObservers(t,n,{type:"dependenciesUpdate",relatedFields:[e].concat(Dt(n))}),n},this.updateValue=function(t,e){var n=Qr(t),i=r.store;r.updateStore(en(r.store,n,e)),r.notifyObservers(i,[n],{type:"valueUpdate",source:"internal"}),r.notifyWatch([n]);var o=r.triggerDependenciesUpdate(i,n),s=r.callbacks.onValuesChange;s&&s(rn(r.store,[n]),r.getFieldsValue()),r.triggerOnFieldsChange([n].concat(Dt(o)))},this.setFieldsValue=function(t){r.warningUnhooked();var e=r.store;if(t){var n=an(r.store,t);r.updateStore(n)}r.notifyObservers(e,null,{type:"valueUpdate",source:"external"}),r.notifyWatch()},this.getDependencyChildrenFields=function(t){var e=new Set,n=[],i=new Nn;return r.getFieldEntities().forEach((function(t){(t.props.dependencies||[]).forEach((function(e){var r=Qr(e);i.update(r,(function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Set;return e.add(t),e}))}))})),function t(r){(i.get(r)||new Set).forEach((function(r){if(!e.has(r)){e.add(r);var i=r.getNamePath();r.isFieldDirty()&&i.length&&(n.push(i),t(i))}}))}(t),n},this.triggerOnFieldsChange=function(t,e){var n=r.callbacks.onFieldsChange;if(n){var i=r.getFields();if(e){var o=new Nn;e.forEach((function(t){var e=t.name,r=t.errors;o.set(e,r)})),i.forEach((function(t){t.errors=o.get(t.name)||t.errors}))}n(i.filter((function(e){var r=e.name;return nn(t,r)})),i)}},this.validateFields=function(t,e){r.warningUnhooked();var n=!!t,i=n?t.map(Qr):[],o=[];r.getFieldEntities(!0).forEach((function(s){if(n||i.push(s.getNamePath()),(null==e?void 0:e.recursive)&&n){var a=s.getNamePath();a.every((function(e,r){return t[r]===e||void 0===t[r]}))&&i.push(a)}if(s.props.rules&&s.props.rules.length){var u=s.getNamePath();if(!n||nn(i,u)){var c=s.validateRules(l({validateMessages:l(l({},Kr),r.validateMessages)},e));o.push(c.then((function(){return{name:u,errors:[],warnings:[]}})).catch((function(t){var e=[],r=[];return t.forEach((function(t){var n=t.rule.warningOnly,i=t.errors;n?r.push.apply(r,Dt(i)):e.push.apply(e,Dt(i))})),e.length?Promise.reject({name:u,errors:e,warnings:r}):{name:u,errors:e,warnings:r}})))}}}));var s=function(t){var e=!1,r=t.length,n=[];return t.length?new Promise((function(i,o){t.forEach((function(t,s){t.catch((function(t){return e=!0,t})).then((function(t){r-=1,n[s]=t,r>0||(e&&o(n),i(n))}))}))})):Promise.resolve([])}(o);r.lastValidatePromise=s,s.catch((function(t){return t})).then((function(t){var e=t.map((function(t){return t.name}));r.notifyObservers(r.store,e,{type:"validateFinish"}),r.triggerOnFieldsChange(e,t)}));var a=s.then((function(){return r.lastValidatePromise===s?Promise.resolve(r.getFieldsValue(i)):Promise.reject([])})).catch((function(t){var e=t.filter((function(t){return t&&t.errors.length}));return Promise.reject({values:r.getFieldsValue(i),errorFields:e,outOfDate:r.lastValidatePromise!==s})}));return a.catch((function(t){return t})),a},this.submit=function(){r.warningUnhooked(),r.validateFields().then((function(t){var e=r.callbacks.onFinish;if(e)try{e(t)}catch(t){console.error(t)}})).catch((function(t){var e=r.callbacks.onFinishFailed;e&&e(t)}))},this.forceRootUpdate=e}));const Cn=function(t){var e=o.useRef(),r=V(o.useState({}),2)[1];if(!e.current)if(t)e.current=t;else{var n=new Sn((function(){r({})}));e.current=n.getForm()}return[e.current]};var Fn=o.createContext({triggerFormChange:function(){},triggerFormFinish:function(){},registerForm:function(){},unregisterForm:function(){}}),Rn=function(t){var e=t.validateMessages,r=t.onFormChange,n=t.onFormFinish,s=t.children,a=o.useContext(Fn),u=o.useRef({});return o.createElement(Fn.Provider,{value:l(l({},a),{},{validateMessages:l(l({},a.validateMessages),e),triggerFormChange:function(t,e){r&&r(t,{changedFields:e,forms:u.current}),a.triggerFormChange(t,e)},triggerFormFinish:function(t,e){n&&n(t,{values:e,forms:u.current}),a.triggerFormFinish(t,e)},registerForm:function(t,e){t&&(u.current=l(l({},u.current),{},i({},t,e))),a.registerForm(t,e)},unregisterForm:function(t){var e=l({},u.current);delete e[t],u.current=e,a.unregisterForm(t)}})},s)};const In=Fn;var On=["name","initialValues","fields","form","preserve","children","component","validateMessages","validateTrigger","onValuesChange","onFieldsChange","onFinish","onFinishFailed"];const Tn=function(t,e){var r=t.name,i=t.initialValues,s=t.fields,u=t.form,c=t.preserve,f=t.children,h=t.component,d=void 0===h?"form":h,p=t.validateMessages,m=t.validateTrigger,v=void 0===m?"onChange":m,y=t.onValuesChange,b=t.onFieldsChange,w=t.onFinish,E=t.onFinishFailed,k=a(t,On),_=o.useContext(In),x=V(Cn(u),1)[0],M=x.getInternalHooks(dr),A=M.useSubscribe,N=M.setInitialValues,P=M.setCallbacks,S=M.setValidateMessages,C=M.setPreserve,F=M.destroyForm;o.useImperativeHandle(e,(function(){return x})),o.useEffect((function(){return _.registerForm(r,x),function(){_.unregisterForm(r)}}),[_,x,r]),S(l(l({},_.validateMessages),p)),P({onValuesChange:y,onFieldsChange:function(t){if(_.triggerFormChange(r,t),b){for(var e=arguments.length,n=new Array(e>1?e-1:0),i=1;i<e;i++)n[i-1]=arguments[i];b.apply(void 0,[t].concat(n))}},onFinish:function(t){_.triggerFormFinish(r,t),w&&w(t)},onFinishFailed:E}),C(c);var R,I=o.useRef(null);N(i,!I.current),I.current||(I.current=!0),o.useEffect((function(){return F}),[]);var O="function"==typeof f;R=O?f(x.getFieldsValue(!0),x):f,A(!O);var T=o.useRef();o.useEffect((function(){(function(t,e){if(t===e)return!0;if(!t&&e||t&&!e)return!1;if(!t||!e||"object"!==g(t)||"object"!==g(e))return!1;var r=Object.keys(t),n=Object.keys(e),i=new Set([].concat(Dt(r),Dt(n)));return Dt(i).every((function(r){var n=t[r],i=e[r];return"function"==typeof n&&"function"==typeof i||n===i}))})(T.current||[],s||[])||x.setFields(s||[]),T.current=s}),[s,x]);var L=o.useMemo((function(){return l(l({},x),{},{validateTrigger:v})}),[x,v]),B=o.createElement(mr.Provider,{value:L},R);return!1===d?B:o.createElement(d,n({},k,{onSubmit:function(t){t.preventDefault(),t.stopPropagation(),x.submit()},onReset:function(t){var e;t.preventDefault(),x.resetFields(),null===(e=k.onReset)||void 0===e||e.call(k,t)}}),B)};function Ln(t){try{return JSON.stringify(t)}catch(t){return Math.random()}}var Bn=o.forwardRef(Tn);Bn.FormProvider=Rn,Bn.Field=kn,Bn.List=function(t){var e=t.name,r=t.initialValue,n=t.children,i=t.rules,s=t.validateTrigger,a=o.useContext(mr),u=o.useRef({keys:[],id:0}).current,c=o.useMemo((function(){var t=Qr(a.prefixName)||[];return[].concat(Dt(t),Dt(Qr(e)))}),[a.prefixName,e]),f=o.useMemo((function(){return l(l({},a),{},{prefixName:c})}),[a,c]),h=o.useMemo((function(){return{getKey:function(t){var e=c.length,r=t[e];return[u.keys[r],t.slice(e+1)]}}}),[c]);return"function"!=typeof n?(Pe(!1,"Form.List only accepts function as children."),null):o.createElement(_n.Provider,{value:h},o.createElement(mr.Provider,{value:f},o.createElement(kn,{name:[],shouldUpdate:function(t,e,r){return"internal"!==r.source&&t!==e},rules:i,validateTrigger:s,initialValue:r,isList:!0},(function(t,e){var r=t.value,i=void 0===r?[]:r,o=t.onChange,s=a.getFieldValue,l=function(){return s(c||[])||[]},f={add:function(t,e){var r=l();e>=0&&e<=r.length?(u.keys=[].concat(Dt(u.keys.slice(0,e)),[u.id],Dt(u.keys.slice(e))),o([].concat(Dt(r.slice(0,e)),[t],Dt(r.slice(e))))):(u.keys=[].concat(Dt(u.keys),[u.id]),o([].concat(Dt(r),[t]))),u.id+=1},remove:function(t){var e=l(),r=new Set(Array.isArray(t)?t:[t]);r.size<=0||(u.keys=u.keys.filter((function(t,e){return!r.has(e)})),o(e.filter((function(t,e){return!r.has(e)}))))},move:function(t,e){if(t!==e){var r=l();t<0||t>=r.length||e<0||e>=r.length||(u.keys=cn(u.keys,t,e),o(cn(r,t,e)))}}},h=i||[];return Array.isArray(h)||(h=[]),n(h.map((function(t,e){var r=u.keys[e];return void 0===r&&(u.keys[e]=u.id,r=u.keys[e],u.id+=1),{name:e,key:r,isListField:!0}})),f,e)}))))},Bn.useForm=Cn,Bn.useWatch=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1?arguments[1]:void 0,r=(0,o.useState)(),n=V(r,2),i=n[0],s=n[1],a=(0,o.useMemo)((function(){return Ln(i)}),[i]),u=(0,o.useRef)(a);u.current=a;var l=(0,o.useContext)(mr),c=e||l,f=c&&c._init,h=Qr(t),d=(0,o.useRef)(h);return d.current=h,(0,o.useEffect)((function(){if(f){var t=c.getFieldsValue,e=(0,(0,c.getInternalHooks)(dr).registerWatch)((function(t){var e=tn(t,d.current),r=Ln(e);u.current!==r&&(u.current=r,s(e))})),r=tn(t(),d.current);return s(r),e}}),[]),i};var jn=Number.isNaN||function(t){return"number"==typeof t&&t!=t};function Un(t,e){if(t.length!==e.length)return!1;for(var r=0;r<t.length;r++)if(!((n=t[r])===(i=e[r])||jn(n)&&jn(i)))return!1;var n,i;return!0}const qn={placeholder:"Select time",rangePlaceholder:["Start time","End time"]};var Dn={lang:n({placeholder:"Select date",yearPlaceholder:"Select year",quarterPlaceholder:"Select quarter",monthPlaceholder:"Select month",weekPlaceholder:"Select week",rangePlaceholder:["Start date","End date"],rangeYearPlaceholder:["Start year","End year"],rangeQuarterPlaceholder:["Start quarter","End quarter"],rangeMonthPlaceholder:["Start month","End month"],rangeWeekPlaceholder:["Start week","End week"]},{locale:"en_US",today:"Today",now:"Now",backToToday:"Back to today",ok:"OK",clear:"Clear",month:"Month",year:"Year",timeSelect:"select time",dateSelect:"select date",weekSelect:"Choose a week",monthSelect:"Choose a month",yearSelect:"Choose a year",decadeSelect:"Choose a decade",yearFormat:"YYYY",dateFormat:"M/D/YYYY",dayFormat:"D",dateTimeFormat:"M/D/YYYY HH:mm:ss",monthBeforeYear:!0,previousMonth:"Previous month (PageUp)",nextMonth:"Next month (PageDown)",previousYear:"Last year (Control + left)",nextYear:"Next year (Control + right)",previousDecade:"Last decade",nextDecade:"Next decade",previousCentury:"Last century",nextCentury:"Next century"}),timePickerLocale:n({},qn)},Vn="${label} is not a valid ${type}";const zn={locale:"en",Pagination:{items_per_page:"/ page",jump_to:"Go to",jump_to_confirm:"confirm",page:"Page",prev_page:"Previous Page",next_page:"Next Page",prev_5:"Previous 5 Pages",next_5:"Next 5 Pages",prev_3:"Previous 3 Pages",next_3:"Next 3 Pages",page_size:"Page Size"},DatePicker:Dn,TimePicker:qn,Calendar:Dn,global:{placeholder:"Please select"},Table:{filterTitle:"Filter menu",filterConfirm:"OK",filterReset:"Reset",filterEmptyText:"No filters",filterCheckall:"Select all items",filterSearchPlaceholder:"Search in filters",emptyText:"No data",selectAll:"Select current page",selectInvert:"Invert current page",selectNone:"Clear all data",selectionAll:"Select all data",sortTitle:"Sort",expand:"Expand row",collapse:"Collapse row",triggerDesc:"Click to sort descending",triggerAsc:"Click to sort ascending",cancelSort:"Click to cancel sorting"},Modal:{okText:"OK",cancelText:"Cancel",justOkText:"OK"},Popconfirm:{okText:"OK",cancelText:"Cancel"},Transfer:{titles:["",""],searchPlaceholder:"Search here",itemUnit:"item",itemsUnit:"items",remove:"Remove",selectCurrent:"Select current page",removeCurrent:"Remove current page",selectAll:"Select all data",removeAll:"Remove all data",selectInvert:"Invert current page"},Upload:{uploading:"Uploading...",removeFile:"Remove file",uploadError:"Upload error",previewFile:"Preview file",downloadFile:"Download file"},Empty:{description:"No Data"},Icon:{icon:"icon"},Text:{edit:"Edit",copy:"Copy",copied:"Copied",expand:"Expand"},PageHeader:{back:"Back"},Form:{optional:"(optional)",defaultValidateMessages:{default:"Field validation error for ${label}",required:"Please enter ${label}",enum:"${label} must be one of [${enum}]",whitespace:"${label} cannot be a blank character",date:{format:"${label} date format is invalid",parse:"${label} cannot be converted to a date",invalid:"${label} is an invalid date"},types:{string:Vn,method:Vn,array:Vn,object:Vn,number:Vn,date:Vn,boolean:Vn,integer:Vn,float:Vn,regexp:Vn,email:Vn,url:Vn,hex:Vn},string:{len:"${label} must be ${len} characters",min:"${label} must be at least ${min} characters",max:"${label} must be up to ${max} characters",range:"${label} must be between ${min}-${max} characters"},number:{len:"${label} must be equal to ${len}",min:"${label} must be minimum ${min}",max:"${label} must be maximum ${max}",range:"${label} must be between ${min}-${max}"},array:{len:"Must be ${len} ${label}",min:"At least ${min} ${label}",max:"At most ${max} ${label}",range:"The amount of ${label} must be between ${min}-${max}"},pattern:{mismatch:"${label} does not match the pattern ${pattern}"}}},Image:{preview:"Preview"}};var $n=n({},zn.Modal);function Gn(t){$n=t?n(n({},$n),t):n({},zn.Modal)}const Hn=(0,o.createContext)(void 0);var Wn=function(t){p(r,t);var e=b(r);function r(t){var i;return c(this,r),(i=e.call(this,t)).getMemoizedContextValue=function(t,e){void 0===e&&(e=Un);var r=null;function n(){for(var n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];if(r&&r.lastThis===this&&e(n,r.lastArgs))return r.lastResult;var o=t.apply(this,n);return r={lastResult:o,lastArgs:n,lastThis:this},o}return n.clear=function(){r=null},n}((function(t){return n(n({},t),{exist:!0})})),Gn(t.locale&&t.locale.Modal),i}return h(r,[{key:"componentDidMount",value:function(){Gn(this.props.locale&&this.props.locale.Modal)}},{key:"componentDidUpdate",value:function(t){var e=this.props.locale;t.locale!==e&&Gn(e&&e.Modal)}},{key:"componentWillUnmount",value:function(){Gn()}},{key:"render",value:function(){var t=this.props,e=t.locale,r=t.children,n=this.getMemoizedContextValue(e);return o.createElement(Hn.Provider,{value:n},r)}}]),r}(o.Component);Wn.defaultProps={locale:{}};const Kn=zn;var Jn=function(t){p(r,t);var e=b(r);function r(){return c(this,r),e.apply(this,arguments)}return h(r,[{key:"getLocale",value:function(){var t=this.props,e=t.componentName,r=t.defaultLocale||Kn[null!=e?e:"global"],i=this.context,o=e&&i?i[e]:{};return n(n({},r instanceof Function?r():r),o||{})}},{key:"getLocaleCode",value:function(){var t=this.context,e=t&&t.locale;return t&&t.exist&&!e?Kn.locale:e}},{key:"render",value:function(){return this.props.children(this.getLocale(),this.getLocaleCode(),this.context)}}]),r}(o.Component);Jn.defaultProps={componentName:"global"},Jn.contextType=Hn;const Xn={icon:{tag:"svg",attrs:{viewBox:"0 0 1024 1024",focusable:"false"},children:[{tag:"path",attrs:{d:"M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z"}}]},name:"loading",theme:"outlined"};var Zn=function(t,e){return o.createElement(Je,l(l({},t),{},{ref:e,icon:Xn}))};Zn.displayName="LoadingOutlined";const Yn=o.forwardRef(Zn),Qn={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z"}}]},name:"exclamation-circle",theme:"filled"};var ti=function(t,e){return o.createElement(Je,l(l({},t),{},{ref:e,icon:Qn}))};ti.displayName="ExclamationCircleFilled";const ei=o.forwardRef(ti),ri={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z"}}]},name:"close-circle",theme:"filled"};var ni=function(t,e){return o.createElement(Je,l(l({},t),{},{ref:e,icon:ri}))};ni.displayName="CloseCircleFilled";const ii=o.forwardRef(ni),oi={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm193.5 301.7l-210.6 292a31.8 31.8 0 01-51.7 0L318.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H699c6.5 0 10.3 7.4 6.5 12.7z"}}]},name:"check-circle",theme:"filled"};var si=function(t,e){return o.createElement(Je,l(l({},t),{},{ref:e,icon:oi}))};si.displayName="CheckCircleFilled";const ai=o.forwardRef(si),ui={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm32 664c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V456c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272zm-32-344a48.01 48.01 0 010-96 48.01 48.01 0 010 96z"}}]},name:"info-circle",theme:"filled"};var li=function(t,e){return o.createElement(Je,l(l({},t),{},{ref:e,icon:ui}))};li.displayName="InfoCircleFilled";var ci,fi,hi,di,pi=3,mi=1,gi="",vi="move-up",yi=!1,bi=!1;function wi(){return mi++}function Ei(t,e){var r=t.prefixCls,n=t.getPopupContainer,i=qi(),o=i.getPrefixCls,s=i.getRootPrefixCls,a=i.getIconPrefixCls,u=o("message",r||gi),l=s(t.rootPrefixCls,u),c=a();if(ci)e({prefixCls:u,rootPrefixCls:l,iconPrefixCls:c,instance:ci});else{var f={prefixCls:u,transitionName:yi?vi:"".concat(l,"-").concat(vi),style:{top:fi},getContainer:hi||n,maxCount:di};Kt.newInstance(f,(function(t){ci?e({prefixCls:u,rootPrefixCls:l,iconPrefixCls:c,instance:ci}):(ci=t,e({prefixCls:u,rootPrefixCls:l,iconPrefixCls:c,instance:t}))}))}}var ki={info:o.forwardRef(li),success:ai,error:ii,warning:ei,loading:Yn},_i=Object.keys(ki);function xi(t,e,r){var n,s=void 0!==t.duration?t.duration:pi,a=ki[t.type],u=B()("".concat(e,"-custom-content"),(i(n={},"".concat(e,"-").concat(t.type),t.type),i(n,"".concat(e,"-rtl"),!0===bi),n));return{key:t.key,duration:s,style:t.style||{},className:t.className,content:o.createElement(zi,{iconPrefixCls:r},o.createElement("div",{className:u},t.icon||a&&o.createElement(a,null),o.createElement("span",null,t.content))),onClose:t.onClose,onClick:t.onClick}}var Mi={open:function(t){var e=t.key||wi(),r=new Promise((function(r){var i=function(){return"function"==typeof t.onClose&&t.onClose(),r(!0)};Ei(t,(function(r){var o=r.prefixCls,s=r.iconPrefixCls;r.instance.notice(xi(n(n({},t),{key:e,onClose:i}),o,s))}))})),i=function(){ci&&ci.removeNotice(e)};return i.then=function(t,e){return r.then(t,e)},i.promise=r,i},config:function(t){void 0!==t.top&&(fi=t.top,ci=null),void 0!==t.duration&&(pi=t.duration),void 0!==t.prefixCls&&(gi=t.prefixCls),void 0!==t.getContainer&&(hi=t.getContainer,ci=null),void 0!==t.transitionName&&(vi=t.transitionName,ci=null,yi=!0),void 0!==t.maxCount&&(di=t.maxCount,ci=null),void 0!==t.rtl&&(bi=t.rtl)},destroy:function(t){if(ci)if(t)(0,ci.removeNotice)(t);else{(0,ci.destroy)(),ci=null}}};function Ai(t,e){t[e]=function(r,i,o){return function(t){return"[object Object]"===Object.prototype.toString.call(t)&&!!t.content}(r)?t.open(n(n({},r),{type:e})):("function"==typeof i&&(o=i,i=void 0),t.open({content:r,duration:i,type:e,onClose:o}))}}_i.forEach((function(t){return Ai(Mi,t)})),Mi.warn=Mi.warning,Mi.useMessage=function(t,e){return function(){var r,i,s=null,a=V(Vt({add:function(t,e){null==s||s.component.add(t,e)}}),2),u=a[0],l=a[1],c=o.useRef({});return c.current.open=function(o){var a=o.prefixCls,l=r("message",a),c=r(),f=o.key||wi(),h=new Promise((function(r){var a=function(){return"function"==typeof o.onClose&&o.onClose(),r(!0)};t(n(n({},o),{prefixCls:l,rootPrefixCls:c,getPopupContainer:i}),(function(t){var r=t.prefixCls,i=t.instance;s=i,u(e(n(n({},o),{key:f,onClose:a}),r))}))})),d=function(){s&&s.removeNotice(f)};return d.then=function(t,e){return h.then(t,e)},d.promise=h,d},_i.forEach((function(t){return Ai(c.current,t)})),[c.current,o.createElement(fr,{key:"holder"},(function(t){return r=t.getPrefixCls,i=t.getPopupContainer,l}))]}}(Ei,xi);const Ni=Mi;var Pi=function(){function t(e,r){var n;if(void 0===e&&(e=""),void 0===r&&(r={}),e instanceof t)return e;"number"==typeof e&&(e=function(t){return{r:t>>16,g:(65280&t)>>8,b:255&t}}(e)),this.originalInput=e;var i=le(e);this.originalInput=e,this.r=i.r,this.g=i.g,this.b=i.b,this.a=i.a,this.roundA=Math.round(100*this.a)/100,this.format=null!==(n=r.format)&&void 0!==n?n:i.format,this.gradientType=r.gradientType,this.r<1&&(this.r=Math.round(this.r)),this.g<1&&(this.g=Math.round(this.g)),this.b<1&&(this.b=Math.round(this.b)),this.isValid=i.ok}return t.prototype.isDark=function(){return this.getBrightness()<128},t.prototype.isLight=function(){return!this.isDark()},t.prototype.getBrightness=function(){var t=this.toRgb();return(299*t.r+587*t.g+114*t.b)/1e3},t.prototype.getLuminance=function(){var t=this.toRgb(),e=t.r/255,r=t.g/255,n=t.b/255;return.2126*(e<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4))+.7152*(r<=.03928?r/12.92:Math.pow((r+.055)/1.055,2.4))+.0722*(n<=.03928?n/12.92:Math.pow((n+.055)/1.055,2.4))},t.prototype.getAlpha=function(){return this.a},t.prototype.setAlpha=function(t){return this.a=Qt(t),this.roundA=Math.round(100*this.a)/100,this},t.prototype.toHsv=function(){var t=ie(this.r,this.g,this.b);return{h:360*t.h,s:t.s,v:t.v,a:this.a}},t.prototype.toHsvString=function(){var t=ie(this.r,this.g,this.b),e=Math.round(360*t.h),r=Math.round(100*t.s),n=Math.round(100*t.v);return 1===this.a?"hsv(".concat(e,", ").concat(r,"%, ").concat(n,"%)"):"hsva(".concat(e,", ").concat(r,"%, ").concat(n,"%, ").concat(this.roundA,")")},t.prototype.toHsl=function(){var t=re(this.r,this.g,this.b);return{h:360*t.h,s:t.s,l:t.l,a:this.a}},t.prototype.toHslString=function(){var t=re(this.r,this.g,this.b),e=Math.round(360*t.h),r=Math.round(100*t.s),n=Math.round(100*t.l);return 1===this.a?"hsl(".concat(e,", ").concat(r,"%, ").concat(n,"%)"):"hsla(".concat(e,", ").concat(r,"%, ").concat(n,"%, ").concat(this.roundA,")")},t.prototype.toHex=function(t){return void 0===t&&(t=!1),oe(this.r,this.g,this.b,t)},t.prototype.toHexString=function(t){return void 0===t&&(t=!1),"#"+this.toHex(t)},t.prototype.toHex8=function(t){return void 0===t&&(t=!1),function(t,e,r,n,i){var o,s=[ee(Math.round(t).toString(16)),ee(Math.round(e).toString(16)),ee(Math.round(r).toString(16)),ee((o=n,Math.round(255*parseFloat(o)).toString(16)))];return i&&s[0].startsWith(s[0].charAt(1))&&s[1].startsWith(s[1].charAt(1))&&s[2].startsWith(s[2].charAt(1))&&s[3].startsWith(s[3].charAt(1))?s[0].charAt(0)+s[1].charAt(0)+s[2].charAt(0)+s[3].charAt(0):s.join("")}(this.r,this.g,this.b,this.a,t)},t.prototype.toHex8String=function(t){return void 0===t&&(t=!1),"#"+this.toHex8(t)},t.prototype.toRgb=function(){return{r:Math.round(this.r),g:Math.round(this.g),b:Math.round(this.b),a:this.a}},t.prototype.toRgbString=function(){var t=Math.round(this.r),e=Math.round(this.g),r=Math.round(this.b);return 1===this.a?"rgb(".concat(t,", ").concat(e,", ").concat(r,")"):"rgba(".concat(t,", ").concat(e,", ").concat(r,", ").concat(this.roundA,")")},t.prototype.toPercentageRgb=function(){var t=function(t){return"".concat(Math.round(100*Zt(t,255)),"%")};return{r:t(this.r),g:t(this.g),b:t(this.b),a:this.a}},t.prototype.toPercentageRgbString=function(){var t=function(t){return Math.round(100*Zt(t,255))};return 1===this.a?"rgb(".concat(t(this.r),"%, ").concat(t(this.g),"%, ").concat(t(this.b),"%)"):"rgba(".concat(t(this.r),"%, ").concat(t(this.g),"%, ").concat(t(this.b),"%, ").concat(this.roundA,")")},t.prototype.toName=function(){if(0===this.a)return"transparent";if(this.a<1)return!1;for(var t="#"+oe(this.r,this.g,this.b,!1),e=0,r=Object.entries(ue);e<r.length;e++){var n=r[e],i=n[0];if(t===n[1])return i}return!1},t.prototype.toString=function(t){var e=Boolean(t);t=null!=t?t:this.format;var r=!1,n=this.a<1&&this.a>=0;return e||!n||!t.startsWith("hex")&&"name"!==t?("rgb"===t&&(r=this.toRgbString()),"prgb"===t&&(r=this.toPercentageRgbString()),"hex"!==t&&"hex6"!==t||(r=this.toHexString()),"hex3"===t&&(r=this.toHexString(!0)),"hex4"===t&&(r=this.toHex8String(!0)),"hex8"===t&&(r=this.toHex8String()),"name"===t&&(r=this.toName()),"hsl"===t&&(r=this.toHslString()),"hsv"===t&&(r=this.toHsvString()),r||this.toHexString()):"name"===t&&0===this.a?this.toName():this.toRgbString()},t.prototype.toNumber=function(){return(Math.round(this.r)<<16)+(Math.round(this.g)<<8)+Math.round(this.b)},t.prototype.clone=function(){return new t(this.toString())},t.prototype.lighten=function(e){void 0===e&&(e=10);var r=this.toHsl();return r.l+=e/100,r.l=Yt(r.l),new t(r)},t.prototype.brighten=function(e){void 0===e&&(e=10);var r=this.toRgb();return r.r=Math.max(0,Math.min(255,r.r-Math.round(-e/100*255))),r.g=Math.max(0,Math.min(255,r.g-Math.round(-e/100*255))),r.b=Math.max(0,Math.min(255,r.b-Math.round(-e/100*255))),new t(r)},t.prototype.darken=function(e){void 0===e&&(e=10);var r=this.toHsl();return r.l-=e/100,r.l=Yt(r.l),new t(r)},t.prototype.tint=function(t){return void 0===t&&(t=10),this.mix("white",t)},t.prototype.shade=function(t){return void 0===t&&(t=10),this.mix("black",t)},t.prototype.desaturate=function(e){void 0===e&&(e=10);var r=this.toHsl();return r.s-=e/100,r.s=Yt(r.s),new t(r)},t.prototype.saturate=function(e){void 0===e&&(e=10);var r=this.toHsl();return r.s+=e/100,r.s=Yt(r.s),new t(r)},t.prototype.greyscale=function(){return this.desaturate(100)},t.prototype.spin=function(e){var r=this.toHsl(),n=(r.h+e)%360;return r.h=n<0?360+n:n,new t(r)},t.prototype.mix=function(e,r){void 0===r&&(r=50);var n=this.toRgb(),i=new t(e).toRgb(),o=r/100;return new t({r:(i.r-n.r)*o+n.r,g:(i.g-n.g)*o+n.g,b:(i.b-n.b)*o+n.b,a:(i.a-n.a)*o+n.a})},t.prototype.analogous=function(e,r){void 0===e&&(e=6),void 0===r&&(r=30);var n=this.toHsl(),i=360/r,o=[this];for(n.h=(n.h-(i*e>>1)+720)%360;--e;)n.h=(n.h+i)%360,o.push(new t(n));return o},t.prototype.complement=function(){var e=this.toHsl();return e.h=(e.h+180)%360,new t(e)},t.prototype.monochromatic=function(e){void 0===e&&(e=6);for(var r=this.toHsv(),n=r.h,i=r.s,o=r.v,s=[],a=1/e;e--;)s.push(new t({h:n,s:i,v:o})),o=(o+a)%1;return s},t.prototype.splitcomplement=function(){var e=this.toHsl(),r=e.h;return[this,new t({h:(r+72)%360,s:e.s,l:e.l}),new t({h:(r+216)%360,s:e.s,l:e.l})]},t.prototype.onBackground=function(e){var r=this.toRgb(),n=new t(e).toRgb();return new t({r:n.r+(r.r-n.r)*r.a,g:n.g+(r.g-n.g)*r.a,b:n.b+(r.b-n.b)*r.a})},t.prototype.triad=function(){return this.polyad(3)},t.prototype.tetrad=function(){return this.polyad(4)},t.prototype.polyad=function(e){for(var r=this.toHsl(),n=r.h,i=[this],o=360/e,s=1;s<e;s++)i.push(new t({h:(n+s*o)%360,s:r.s,l:r.l}));return i},t.prototype.equals=function(e){return this.toRgbString()===new t(e).toRgbString()},t}(),Si="-ant-".concat(Date.now(),"-").concat(Math.random());var Ci=o.createContext(!1),Fi=function(t){var e=t.children,r=t.disabled,n=o.useContext(Ci);return o.createElement(Ci.Provider,{value:r||n},e)},Ri=o.createContext(void 0),Ii=function(t){var e=t.children,r=t.size;return o.createElement(Ri.Consumer,null,(function(t){return o.createElement(Ri.Provider,{value:r||t},e)}))};const Oi=Ri;var Ti,Li,Bi=["getTargetContainer","getPopupContainer","renderEmpty","pageHeader","input","pagination","form"];function ji(){return Ti||"ant"}function Ui(){return Li||"anticon"}var qi=function(){return{getPrefixCls:function(t,e){return e||(t?"".concat(ji(),"-").concat(t):ji())},getIconPrefixCls:Ui,getRootPrefixCls:function(t,e){return t||Ti||(e&&e.includes("-")?e.replace(/^(.*)-[^-]*$/,"$1"):ji())}}},Di=function(t){var e,r,i=t.children,s=t.csp,a=t.autoInsertSpaceInButton,u=t.form,l=t.locale,c=t.componentSize,f=t.direction,h=t.space,d=t.virtual,p=t.dropdownMatchSelectWidth,m=t.legacyLocale,g=t.parentContext,v=t.iconPrefixCls,y=t.componentDisabled,b=o.useCallback((function(e,r){var n=t.prefixCls;if(r)return r;var i=n||g.getPrefixCls("");return e?"".concat(i,"-").concat(e):i}),[g.getPrefixCls,t.prefixCls]),w=n(n({},g),{csp:s,autoInsertSpaceInButton:a,locale:l||m,direction:f,space:h,virtual:d,dropdownMatchSelectWidth:p,getPrefixCls:b});Bi.forEach((function(e){var r=t[e];r&&(w[e]=r)}));var E,k,_,x,M,A,N=(E=w,"value"in(A=o.useRef({})).current&&(k=A.current.condition,_=E,x=Object.keys(k),M=Object.keys(_),!(x.length!==M.length||x.some((function(t){return k[t]!==_[t]}))))||(A.current.value=w,A.current.condition=E),A.current.value),P=o.useMemo((function(){return{prefixCls:v,csp:s}}),[v,s]),S=i,C={};return l&&(C=(null===(e=l.Form)||void 0===e?void 0:e.defaultValidateMessages)||(null===(r=zn.Form)||void 0===r?void 0:r.defaultValidateMessages)||{}),u&&u.validateMessages&&(C=n(n({},C),u.validateMessages)),Object.keys(C).length>0&&(S=o.createElement(Rn,{validateMessages:C},i)),l&&(S=o.createElement(Wn,{locale:l,_ANT_MARK__:"internalMark"},S)),(v||s)&&(S=o.createElement(Xt.Provider,{value:P},S)),c&&(S=o.createElement(Ii,{size:c},S)),void 0!==y&&(S=o.createElement(Fi,{disabled:y},S)),o.createElement(cr.Provider,{value:N},S)},Vi=function(t){return o.useEffect((function(){t.direction&&(Ni.config({rtl:"rtl"===t.direction}),oo.config({rtl:"rtl"===t.direction}))}),[t.direction]),o.createElement(Jn,null,(function(e,r,i){return o.createElement(fr,null,(function(e){return o.createElement(Di,n({parentContext:e,legacyLocale:i},t))}))}))};Vi.ConfigContext=cr,Vi.SizeContext=Oi,Vi.config=function(t){var e=t.prefixCls,r=t.iconPrefixCls,n=t.theme;void 0!==e&&(Ti=e),void 0!==r&&(Li=r),n&&function(t,e){var r=function(t,e){var r={},n=function(t,e){var r=t.clone();return(r=(null==e?void 0:e(r))||r).toRgbString()},i=function(t,e){var i=new Pi(t),o=ke(i.toRgbString());r["".concat(e,"-color")]=n(i),r["".concat(e,"-color-disabled")]=o[1],r["".concat(e,"-color-hover")]=o[4],r["".concat(e,"-color-active")]=o[7],r["".concat(e,"-color-outline")]=i.clone().setAlpha(.2).toRgbString(),r["".concat(e,"-color-deprecated-bg")]=o[1],r["".concat(e,"-color-deprecated-border")]=o[3]};if(e.primaryColor){i(e.primaryColor,"primary");var o=new Pi(e.primaryColor),s=ke(o.toRgbString());s.forEach((function(t,e){r["primary-".concat(e+1)]=t})),r["primary-color-deprecated-l-35"]=n(o,(function(t){return t.lighten(35)})),r["primary-color-deprecated-l-20"]=n(o,(function(t){return t.lighten(20)})),r["primary-color-deprecated-t-20"]=n(o,(function(t){return t.tint(20)})),r["primary-color-deprecated-t-50"]=n(o,(function(t){return t.tint(50)})),r["primary-color-deprecated-f-12"]=n(o,(function(t){return t.setAlpha(.12*t.getAlpha())}));var a=new Pi(s[0]);r["primary-color-active-deprecated-f-30"]=n(a,(function(t){return t.setAlpha(.3*t.getAlpha())})),r["primary-color-active-deprecated-d-02"]=n(a,(function(t){return t.darken(2)}))}e.successColor&&i(e.successColor,"success"),e.warningColor&&i(e.warningColor,"warning"),e.errorColor&&i(e.errorColor,"error"),e.infoColor&&i(e.infoColor,"info");var u=Object.keys(r).map((function(e){return"--".concat(t,"-").concat(e,": ").concat(r[e],";")}));return"\n  :root {\n    ".concat(u.join("\n"),"\n  }\n  ").trim()}(t,e);$()&&Te(r,"".concat(Si,"-dynamic-theme"))}(ji(),n)};const zi=Vi;var $i,Gi,Hi,Wi={},Ki=4.5,Ji=24,Xi=24,Zi="",Yi="topRight",Qi=!1;function to(t){var e,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Ji,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Xi;switch(t){case"top":e={left:"50%",transform:"translateX(-50%)",right:"auto",top:r,bottom:"auto"};break;case"topLeft":e={left:0,top:r,bottom:"auto"};break;case"topRight":e={right:0,top:r,bottom:"auto"};break;case"bottom":e={left:"50%",transform:"translateX(-50%)",right:"auto",top:"auto",bottom:n};break;case"bottomLeft":e={left:0,top:"auto",bottom:n};break;default:e={right:0,top:"auto",bottom:n}}return e}function eo(t,e){var r=t.placement,n=void 0===r?Yi:r,o=t.top,s=t.bottom,a=t.getContainer,u=void 0===a?$i:a,l=t.prefixCls,c=qi(),f=c.getPrefixCls,h=c.getIconPrefixCls,d=f("notification",l||Zi),p=h(),m="".concat(d,"-").concat(n),g=Wi[m];if(g)Promise.resolve(g).then((function(t){e({prefixCls:"".concat(d,"-notice"),iconPrefixCls:p,instance:t})}));else{var v=B()("".concat(d,"-").concat(n),i({},"".concat(d,"-rtl"),!0===Qi));Wi[m]=new Promise((function(t){Kt.newInstance({prefixCls:d,className:v,style:to(n,o,s),getContainer:u,maxCount:Hi},(function(r){t(r),e({prefixCls:"".concat(d,"-notice"),iconPrefixCls:p,instance:r})}))}))}}var ro={success:tr,info:lr,error:nr,warning:sr};function no(t,e,r){var n=t.duration,s=t.icon,a=t.type,u=t.description,l=t.message,c=t.btn,f=t.onClose,h=t.onClick,d=t.key,p=t.style,m=t.className,g=t.closeIcon,v=void 0===g?Gi:g,y=void 0===n?Ki:n,b=null;s?b=o.createElement("span",{className:"".concat(e,"-icon")},t.icon):a&&(b=o.createElement(ro[a]||null,{className:"".concat(e,"-icon ").concat(e,"-icon-").concat(a)}));var w=o.createElement("span",{className:"".concat(e,"-close-x")},v||o.createElement(Ze,{className:"".concat(e,"-close-icon")})),E=!u&&b?o.createElement("span",{className:"".concat(e,"-message-single-line-auto-margin")}):null;return{content:o.createElement(zi,{iconPrefixCls:r},o.createElement("div",{className:b?"".concat(e,"-with-icon"):"",role:"alert"},b,o.createElement("div",{className:"".concat(e,"-message")},E,l),o.createElement("div",{className:"".concat(e,"-description")},u),c?o.createElement("span",{className:"".concat(e,"-btn")},c):null)),duration:y,closable:!0,closeIcon:w,onClose:f,onClick:h,key:d,style:p||{},className:B()(m,i({},"".concat(e,"-").concat(a),!!a))}}var io={open:function(t){eo(t,(function(e){var r=e.prefixCls,n=e.iconPrefixCls;e.instance.notice(no(t,r,n))}))},close:function(t){Object.keys(Wi).forEach((function(e){return Promise.resolve(Wi[e]).then((function(e){e.removeNotice(t)}))}))},config:function(t){var e=t.duration,r=t.placement,n=t.bottom,i=t.top,o=t.getContainer,s=t.closeIcon,a=t.prefixCls;void 0!==a&&(Zi=a),void 0!==e&&(Ki=e),void 0!==r?Yi=r:t.rtl&&(Yi="topLeft"),void 0!==n&&(Xi=n),void 0!==i&&(Ji=i),void 0!==o&&($i=o),void 0!==s&&(Gi=s),void 0!==t.rtl&&(Qi=t.rtl),void 0!==t.maxCount&&(Hi=t.maxCount)},destroy:function(){Object.keys(Wi).forEach((function(t){Promise.resolve(Wi[t]).then((function(t){t.destroy()})),delete Wi[t]}))}};["success","info","warning","error"].forEach((function(t){io[t]=function(e){return io.open(n(n({},e),{type:t}))}})),io.warn=io.warning,io.useNotification=function(t,e){return function(){var r,i=null,s=V(Vt({add:function(t,e){null==i||i.component.add(t,e)}}),2),a=s[0],u=s[1],l=o.useRef({});return l.current.open=function(o){var s=o.prefixCls,u=r("notification",s);t(n(n({},o),{prefixCls:u}),(function(t){var r=t.prefixCls,n=t.instance;i=n,a(e(o,r))}))},["success","info","warning","error"].forEach((function(t){l.current[t]=function(e){return l.current.open(n(n({},e),{type:t}))}})),[l.current,o.createElement(fr,{key:"holder"},(function(t){return r=t.getPrefixCls,u}))]}}(eo,no);const oo=io},164:()=>{},882:t=>{"use strict";for(var e="qpzry9x8gf2tvdw0s3jn54khce6mua7l",r={},n=0;n<e.length;n++){var i=e.charAt(n);if(void 0!==r[i])throw new TypeError(i+" is ambiguous");r[i]=n}function o(t){var e=t>>25;return(33554431&t)<<5^996825010&-(e>>0&1)^642813549&-(e>>1&1)^513874426&-(e>>2&1)^1027748829&-(e>>3&1)^705979059&-(e>>4&1)}function s(t){for(var e=1,r=0;r<t.length;++r){var n=t.charCodeAt(r);if(n<33||n>126)return"Invalid prefix ("+t+")";e=o(e)^n>>5}for(e=o(e),r=0;r<t.length;++r){var i=t.charCodeAt(r);e=o(e)^31&i}return e}function a(t,e){if(e=e||90,t.length<8)return t+" too short";if(t.length>e)return"Exceeds length limit";var n=t.toLowerCase(),i=t.toUpperCase();if(t!==n&&t!==i)return"Mixed-case string "+t;var a=(t=n).lastIndexOf("1");if(-1===a)return"No separator character for "+t;if(0===a)return"Missing prefix for "+t;var u=t.slice(0,a),l=t.slice(a+1);if(l.length<6)return"Data too short";var c=s(u);if("string"==typeof c)return c;for(var f=[],h=0;h<l.length;++h){var d=l.charAt(h),p=r[d];if(void 0===p)return"Unknown character "+d;c=o(c)^p,h+6>=l.length||f.push(p)}return 1!==c?"Invalid checksum for "+t:{prefix:u,words:f}}function u(t,e,r,n){for(var i=0,o=0,s=(1<<r)-1,a=[],u=0;u<t.length;++u)for(i=i<<e|t[u],o+=e;o>=r;)o-=r,a.push(i>>o&s);if(n)o>0&&a.push(i<<r-o&s);else{if(o>=e)return"Excess padding";if(i<<r-o&s)return"Non-zero padding"}return a}t.exports={decodeUnsafe:function(){var t=a.apply(null,arguments);if("object"==typeof t)return t},decode:function(t){var e=a.apply(null,arguments);if("object"==typeof e)return e;throw new Error(e)},encode:function(t,r,n){if(n=n||90,t.length+7+r.length>n)throw new TypeError("Exceeds length limit");var i=s(t=t.toLowerCase());if("string"==typeof i)throw new Error(i);for(var a=t+"1",u=0;u<r.length;++u){var l=r[u];if(l>>5!=0)throw new Error("Non 5-bit word");i=o(i)^l,a+=e.charAt(l)}for(u=0;u<6;++u)i=o(i);for(i^=1,u=0;u<6;++u)a+=e.charAt(i>>5*(5-u)&31);return a},toWordsUnsafe:function(t){var e=u(t,8,5,!0);if(Array.isArray(e))return e},toWords:function(t){var e=u(t,8,5,!0);if(Array.isArray(e))return e;throw new Error(e)},fromWordsUnsafe:function(t){var e=u(t,5,8,!1);if(Array.isArray(e))return e},fromWords:function(t){var e=u(t,5,8,!1);if(Array.isArray(e))return e;throw new Error(e)}}},550:function(t,e,r){!function(t,e){"use strict";function n(t,e){if(!t)throw new Error(e||"Assertion failed")}function i(t,e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}function o(t,e,r){if(o.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==e&&"be"!==e||(r=e,e=10),this._init(t||0,e||10,r||"be"))}var s;"object"==typeof t?t.exports=o:e.BN=o,o.BN=o,o.wordSize=26;try{s="undefined"!=typeof window&&void 0!==window.Buffer?window.Buffer:r(601).Buffer}catch(t){}function a(t,e){var r=t.charCodeAt(e);return r>=48&&r<=57?r-48:r>=65&&r<=70?r-55:r>=97&&r<=102?r-87:void n(!1,"Invalid character in "+t)}function u(t,e,r){var n=a(t,r);return r-1>=e&&(n|=a(t,r-1)<<4),n}function l(t,e,r,i){for(var o=0,s=0,a=Math.min(t.length,r),u=e;u<a;u++){var l=t.charCodeAt(u)-48;o*=i,s=l>=49?l-49+10:l>=17?l-17+10:l,n(l>=0&&s<i,"Invalid character"),o+=s}return o}function c(t,e){t.words=e.words,t.length=e.length,t.negative=e.negative,t.red=e.red}if(o.isBN=function(t){return t instanceof o||null!==t&&"object"==typeof t&&t.constructor.wordSize===o.wordSize&&Array.isArray(t.words)},o.max=function(t,e){return t.cmp(e)>0?t:e},o.min=function(t,e){return t.cmp(e)<0?t:e},o.prototype._init=function(t,e,r){if("number"==typeof t)return this._initNumber(t,e,r);if("object"==typeof t)return this._initArray(t,e,r);"hex"===e&&(e=16),n(e===(0|e)&&e>=2&&e<=36);var i=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&(i++,this.negative=1),i<t.length&&(16===e?this._parseHex(t,i,r):(this._parseBase(t,e,i),"le"===r&&this._initArray(this.toArray(),e,r)))},o.prototype._initNumber=function(t,e,r){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(n(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===r&&this._initArray(this.toArray(),e,r)},o.prototype._initArray=function(t,e,r){if(n("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var o,s,a=0;if("be"===r)for(i=t.length-1,o=0;i>=0;i-=3)s=t[i]|t[i-1]<<8|t[i-2]<<16,this.words[o]|=s<<a&67108863,this.words[o+1]=s>>>26-a&67108863,(a+=24)>=26&&(a-=26,o++);else if("le"===r)for(i=0,o=0;i<t.length;i+=3)s=t[i]|t[i+1]<<8|t[i+2]<<16,this.words[o]|=s<<a&67108863,this.words[o+1]=s>>>26-a&67108863,(a+=24)>=26&&(a-=26,o++);return this._strip()},o.prototype._parseHex=function(t,e,r){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var i,o=0,s=0;if("be"===r)for(n=t.length-1;n>=e;n-=2)i=u(t,e,n)<<o,this.words[s]|=67108863&i,o>=18?(o-=18,s+=1,this.words[s]|=i>>>26):o+=8;else for(n=(t.length-e)%2==0?e+1:e;n<t.length;n+=2)i=u(t,e,n)<<o,this.words[s]|=67108863&i,o>=18?(o-=18,s+=1,this.words[s]|=i>>>26):o+=8;this._strip()},o.prototype._parseBase=function(t,e,r){this.words=[0],this.length=1;for(var n=0,i=1;i<=67108863;i*=e)n++;n--,i=i/e|0;for(var o=t.length-r,s=o%n,a=Math.min(o,o-s)+r,u=0,c=r;c<a;c+=n)u=l(t,c,c+n,e),this.imuln(i),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u);if(0!==s){var f=1;for(u=l(t,c,t.length,e),c=0;c<s;c++)f*=e;this.imuln(f),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u)}this._strip()},o.prototype.copy=function(t){t.words=new Array(this.length);for(var e=0;e<this.length;e++)t.words[e]=this.words[e];t.length=this.length,t.negative=this.negative,t.red=this.red},o.prototype._move=function(t){c(t,this)},o.prototype.clone=function(){var t=new o(null);return this.copy(t),t},o.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},o.prototype._strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},o.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},"undefined"!=typeof Symbol&&"function"==typeof Symbol.for)try{o.prototype[Symbol.for("nodejs.util.inspect.custom")]=f}catch(t){o.prototype.inspect=f}else o.prototype.inspect=f;function f(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"}var h=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],d=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],p=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function m(t,e,r){r.negative=e.negative^t.negative;var n=t.length+e.length|0;r.length=n,n=n-1|0;var i=0|t.words[0],o=0|e.words[0],s=i*o,a=67108863&s,u=s/67108864|0;r.words[0]=a;for(var l=1;l<n;l++){for(var c=u>>>26,f=67108863&u,h=Math.min(l,e.length-1),d=Math.max(0,l-t.length+1);d<=h;d++){var p=l-d|0;c+=(s=(i=0|t.words[p])*(o=0|e.words[d])+f)/67108864|0,f=67108863&s}r.words[l]=0|f,u=0|c}return 0!==u?r.words[l]=0|u:r.length--,r._strip()}o.prototype.toString=function(t,e){var r;if(e=0|e||1,16===(t=t||10)||"hex"===t){r="";for(var i=0,o=0,s=0;s<this.length;s++){var a=this.words[s],u=(16777215&(a<<i|o)).toString(16);o=a>>>24-i&16777215,(i+=2)>=26&&(i-=26,s--),r=0!==o||s!==this.length-1?h[6-u.length]+u+r:u+r}for(0!==o&&(r=o.toString(16)+r);r.length%e!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}if(t===(0|t)&&t>=2&&t<=36){var l=d[t],c=p[t];r="";var f=this.clone();for(f.negative=0;!f.isZero();){var m=f.modrn(c).toString(t);r=(f=f.idivn(c)).isZero()?m+r:h[l-m.length]+m+r}for(this.isZero()&&(r="0"+r);r.length%e!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}n(!1,"Base should be between 2 and 36")},o.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&n(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},o.prototype.toJSON=function(){return this.toString(16,2)},s&&(o.prototype.toBuffer=function(t,e){return this.toArrayLike(s,t,e)}),o.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)},o.prototype.toArrayLike=function(t,e,r){this._strip();var i=this.byteLength(),o=r||Math.max(1,i);n(i<=o,"byte array longer than desired length"),n(o>0,"Requested array length <= 0");var s=function(t,e){return t.allocUnsafe?t.allocUnsafe(e):new t(e)}(t,o);return this["_toArrayLike"+("le"===e?"LE":"BE")](s,i),s},o.prototype._toArrayLikeLE=function(t,e){for(var r=0,n=0,i=0,o=0;i<this.length;i++){var s=this.words[i]<<o|n;t[r++]=255&s,r<t.length&&(t[r++]=s>>8&255),r<t.length&&(t[r++]=s>>16&255),6===o?(r<t.length&&(t[r++]=s>>24&255),n=0,o=0):(n=s>>>24,o+=2)}if(r<t.length)for(t[r++]=n;r<t.length;)t[r++]=0},o.prototype._toArrayLikeBE=function(t,e){for(var r=t.length-1,n=0,i=0,o=0;i<this.length;i++){var s=this.words[i]<<o|n;t[r--]=255&s,r>=0&&(t[r--]=s>>8&255),r>=0&&(t[r--]=s>>16&255),6===o?(r>=0&&(t[r--]=s>>24&255),n=0,o=0):(n=s>>>24,o+=2)}if(r>=0)for(t[r--]=n;r>=0;)t[r--]=0},Math.clz32?o.prototype._countBits=function(t){return 32-Math.clz32(t)}:o.prototype._countBits=function(t){var e=t,r=0;return e>=4096&&(r+=13,e>>>=13),e>=64&&(r+=7,e>>>=7),e>=8&&(r+=4,e>>>=4),e>=2&&(r+=2,e>>>=2),r+e},o.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,r=0;return 0==(8191&e)&&(r+=13,e>>>=13),0==(127&e)&&(r+=7,e>>>=7),0==(15&e)&&(r+=4,e>>>=4),0==(3&e)&&(r+=2,e>>>=2),0==(1&e)&&r++,r},o.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},o.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;e<this.length;e++){var r=this._zeroBits(this.words[e]);if(t+=r,26!==r)break}return t},o.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},o.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},o.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},o.prototype.isNeg=function(){return 0!==this.negative},o.prototype.neg=function(){return this.clone().ineg()},o.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},o.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var e=0;e<t.length;e++)this.words[e]=this.words[e]|t.words[e];return this._strip()},o.prototype.ior=function(t){return n(0==(this.negative|t.negative)),this.iuor(t)},o.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},o.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},o.prototype.iuand=function(t){var e;e=this.length>t.length?t:this;for(var r=0;r<e.length;r++)this.words[r]=this.words[r]&t.words[r];return this.length=e.length,this._strip()},o.prototype.iand=function(t){return n(0==(this.negative|t.negative)),this.iuand(t)},o.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},o.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},o.prototype.iuxor=function(t){var e,r;this.length>t.length?(e=this,r=t):(e=t,r=this);for(var n=0;n<r.length;n++)this.words[n]=e.words[n]^r.words[n];if(this!==e)for(;n<e.length;n++)this.words[n]=e.words[n];return this.length=e.length,this._strip()},o.prototype.ixor=function(t){return n(0==(this.negative|t.negative)),this.iuxor(t)},o.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},o.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},o.prototype.inotn=function(t){n("number"==typeof t&&t>=0);var e=0|Math.ceil(t/26),r=t%26;this._expand(e),r>0&&e--;for(var i=0;i<e;i++)this.words[i]=67108863&~this.words[i];return r>0&&(this.words[i]=~this.words[i]&67108863>>26-r),this._strip()},o.prototype.notn=function(t){return this.clone().inotn(t)},o.prototype.setn=function(t,e){n("number"==typeof t&&t>=0);var r=t/26|0,i=t%26;return this._expand(r+1),this.words[r]=e?this.words[r]|1<<i:this.words[r]&~(1<<i),this._strip()},o.prototype.iadd=function(t){var e,r,n;if(0!==this.negative&&0===t.negative)return this.negative=0,e=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,e=this.isub(t),t.negative=1,e._normSign();this.length>t.length?(r=this,n=t):(r=t,n=this);for(var i=0,o=0;o<n.length;o++)e=(0|r.words[o])+(0|n.words[o])+i,this.words[o]=67108863&e,i=e>>>26;for(;0!==i&&o<r.length;o++)e=(0|r.words[o])+i,this.words[o]=67108863&e,i=e>>>26;if(this.length=r.length,0!==i)this.words[this.length]=i,this.length++;else if(r!==this)for(;o<r.length;o++)this.words[o]=r.words[o];return this},o.prototype.add=function(t){var e;return 0!==t.negative&&0===this.negative?(t.negative=0,e=this.sub(t),t.negative^=1,e):0===t.negative&&0!==this.negative?(this.negative=0,e=t.sub(this),this.negative=1,e):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},o.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var r,n,i=this.cmp(t);if(0===i)return this.negative=0,this.length=1,this.words[0]=0,this;i>0?(r=this,n=t):(r=t,n=this);for(var o=0,s=0;s<n.length;s++)o=(e=(0|r.words[s])-(0|n.words[s])+o)>>26,this.words[s]=67108863&e;for(;0!==o&&s<r.length;s++)o=(e=(0|r.words[s])+o)>>26,this.words[s]=67108863&e;if(0===o&&s<r.length&&r!==this)for(;s<r.length;s++)this.words[s]=r.words[s];return this.length=Math.max(this.length,s),r!==this&&(this.negative=1),this._strip()},o.prototype.sub=function(t){return this.clone().isub(t)};var g=function(t,e,r){var n,i,o,s=t.words,a=e.words,u=r.words,l=0,c=0|s[0],f=8191&c,h=c>>>13,d=0|s[1],p=8191&d,m=d>>>13,g=0|s[2],v=8191&g,y=g>>>13,b=0|s[3],w=8191&b,E=b>>>13,k=0|s[4],_=8191&k,x=k>>>13,M=0|s[5],A=8191&M,N=M>>>13,P=0|s[6],S=8191&P,C=P>>>13,F=0|s[7],R=8191&F,I=F>>>13,O=0|s[8],T=8191&O,L=O>>>13,B=0|s[9],j=8191&B,U=B>>>13,q=0|a[0],D=8191&q,V=q>>>13,z=0|a[1],$=8191&z,G=z>>>13,H=0|a[2],W=8191&H,K=H>>>13,J=0|a[3],X=8191&J,Z=J>>>13,Y=0|a[4],Q=8191&Y,tt=Y>>>13,et=0|a[5],rt=8191&et,nt=et>>>13,it=0|a[6],ot=8191&it,st=it>>>13,at=0|a[7],ut=8191&at,lt=at>>>13,ct=0|a[8],ft=8191&ct,ht=ct>>>13,dt=0|a[9],pt=8191&dt,mt=dt>>>13;r.negative=t.negative^e.negative,r.length=19;var gt=(l+(n=Math.imul(f,D))|0)+((8191&(i=(i=Math.imul(f,V))+Math.imul(h,D)|0))<<13)|0;l=((o=Math.imul(h,V))+(i>>>13)|0)+(gt>>>26)|0,gt&=67108863,n=Math.imul(p,D),i=(i=Math.imul(p,V))+Math.imul(m,D)|0,o=Math.imul(m,V);var vt=(l+(n=n+Math.imul(f,$)|0)|0)+((8191&(i=(i=i+Math.imul(f,G)|0)+Math.imul(h,$)|0))<<13)|0;l=((o=o+Math.imul(h,G)|0)+(i>>>13)|0)+(vt>>>26)|0,vt&=67108863,n=Math.imul(v,D),i=(i=Math.imul(v,V))+Math.imul(y,D)|0,o=Math.imul(y,V),n=n+Math.imul(p,$)|0,i=(i=i+Math.imul(p,G)|0)+Math.imul(m,$)|0,o=o+Math.imul(m,G)|0;var yt=(l+(n=n+Math.imul(f,W)|0)|0)+((8191&(i=(i=i+Math.imul(f,K)|0)+Math.imul(h,W)|0))<<13)|0;l=((o=o+Math.imul(h,K)|0)+(i>>>13)|0)+(yt>>>26)|0,yt&=67108863,n=Math.imul(w,D),i=(i=Math.imul(w,V))+Math.imul(E,D)|0,o=Math.imul(E,V),n=n+Math.imul(v,$)|0,i=(i=i+Math.imul(v,G)|0)+Math.imul(y,$)|0,o=o+Math.imul(y,G)|0,n=n+Math.imul(p,W)|0,i=(i=i+Math.imul(p,K)|0)+Math.imul(m,W)|0,o=o+Math.imul(m,K)|0;var bt=(l+(n=n+Math.imul(f,X)|0)|0)+((8191&(i=(i=i+Math.imul(f,Z)|0)+Math.imul(h,X)|0))<<13)|0;l=((o=o+Math.imul(h,Z)|0)+(i>>>13)|0)+(bt>>>26)|0,bt&=67108863,n=Math.imul(_,D),i=(i=Math.imul(_,V))+Math.imul(x,D)|0,o=Math.imul(x,V),n=n+Math.imul(w,$)|0,i=(i=i+Math.imul(w,G)|0)+Math.imul(E,$)|0,o=o+Math.imul(E,G)|0,n=n+Math.imul(v,W)|0,i=(i=i+Math.imul(v,K)|0)+Math.imul(y,W)|0,o=o+Math.imul(y,K)|0,n=n+Math.imul(p,X)|0,i=(i=i+Math.imul(p,Z)|0)+Math.imul(m,X)|0,o=o+Math.imul(m,Z)|0;var wt=(l+(n=n+Math.imul(f,Q)|0)|0)+((8191&(i=(i=i+Math.imul(f,tt)|0)+Math.imul(h,Q)|0))<<13)|0;l=((o=o+Math.imul(h,tt)|0)+(i>>>13)|0)+(wt>>>26)|0,wt&=67108863,n=Math.imul(A,D),i=(i=Math.imul(A,V))+Math.imul(N,D)|0,o=Math.imul(N,V),n=n+Math.imul(_,$)|0,i=(i=i+Math.imul(_,G)|0)+Math.imul(x,$)|0,o=o+Math.imul(x,G)|0,n=n+Math.imul(w,W)|0,i=(i=i+Math.imul(w,K)|0)+Math.imul(E,W)|0,o=o+Math.imul(E,K)|0,n=n+Math.imul(v,X)|0,i=(i=i+Math.imul(v,Z)|0)+Math.imul(y,X)|0,o=o+Math.imul(y,Z)|0,n=n+Math.imul(p,Q)|0,i=(i=i+Math.imul(p,tt)|0)+Math.imul(m,Q)|0,o=o+Math.imul(m,tt)|0;var Et=(l+(n=n+Math.imul(f,rt)|0)|0)+((8191&(i=(i=i+Math.imul(f,nt)|0)+Math.imul(h,rt)|0))<<13)|0;l=((o=o+Math.imul(h,nt)|0)+(i>>>13)|0)+(Et>>>26)|0,Et&=67108863,n=Math.imul(S,D),i=(i=Math.imul(S,V))+Math.imul(C,D)|0,o=Math.imul(C,V),n=n+Math.imul(A,$)|0,i=(i=i+Math.imul(A,G)|0)+Math.imul(N,$)|0,o=o+Math.imul(N,G)|0,n=n+Math.imul(_,W)|0,i=(i=i+Math.imul(_,K)|0)+Math.imul(x,W)|0,o=o+Math.imul(x,K)|0,n=n+Math.imul(w,X)|0,i=(i=i+Math.imul(w,Z)|0)+Math.imul(E,X)|0,o=o+Math.imul(E,Z)|0,n=n+Math.imul(v,Q)|0,i=(i=i+Math.imul(v,tt)|0)+Math.imul(y,Q)|0,o=o+Math.imul(y,tt)|0,n=n+Math.imul(p,rt)|0,i=(i=i+Math.imul(p,nt)|0)+Math.imul(m,rt)|0,o=o+Math.imul(m,nt)|0;var kt=(l+(n=n+Math.imul(f,ot)|0)|0)+((8191&(i=(i=i+Math.imul(f,st)|0)+Math.imul(h,ot)|0))<<13)|0;l=((o=o+Math.imul(h,st)|0)+(i>>>13)|0)+(kt>>>26)|0,kt&=67108863,n=Math.imul(R,D),i=(i=Math.imul(R,V))+Math.imul(I,D)|0,o=Math.imul(I,V),n=n+Math.imul(S,$)|0,i=(i=i+Math.imul(S,G)|0)+Math.imul(C,$)|0,o=o+Math.imul(C,G)|0,n=n+Math.imul(A,W)|0,i=(i=i+Math.imul(A,K)|0)+Math.imul(N,W)|0,o=o+Math.imul(N,K)|0,n=n+Math.imul(_,X)|0,i=(i=i+Math.imul(_,Z)|0)+Math.imul(x,X)|0,o=o+Math.imul(x,Z)|0,n=n+Math.imul(w,Q)|0,i=(i=i+Math.imul(w,tt)|0)+Math.imul(E,Q)|0,o=o+Math.imul(E,tt)|0,n=n+Math.imul(v,rt)|0,i=(i=i+Math.imul(v,nt)|0)+Math.imul(y,rt)|0,o=o+Math.imul(y,nt)|0,n=n+Math.imul(p,ot)|0,i=(i=i+Math.imul(p,st)|0)+Math.imul(m,ot)|0,o=o+Math.imul(m,st)|0;var _t=(l+(n=n+Math.imul(f,ut)|0)|0)+((8191&(i=(i=i+Math.imul(f,lt)|0)+Math.imul(h,ut)|0))<<13)|0;l=((o=o+Math.imul(h,lt)|0)+(i>>>13)|0)+(_t>>>26)|0,_t&=67108863,n=Math.imul(T,D),i=(i=Math.imul(T,V))+Math.imul(L,D)|0,o=Math.imul(L,V),n=n+Math.imul(R,$)|0,i=(i=i+Math.imul(R,G)|0)+Math.imul(I,$)|0,o=o+Math.imul(I,G)|0,n=n+Math.imul(S,W)|0,i=(i=i+Math.imul(S,K)|0)+Math.imul(C,W)|0,o=o+Math.imul(C,K)|0,n=n+Math.imul(A,X)|0,i=(i=i+Math.imul(A,Z)|0)+Math.imul(N,X)|0,o=o+Math.imul(N,Z)|0,n=n+Math.imul(_,Q)|0,i=(i=i+Math.imul(_,tt)|0)+Math.imul(x,Q)|0,o=o+Math.imul(x,tt)|0,n=n+Math.imul(w,rt)|0,i=(i=i+Math.imul(w,nt)|0)+Math.imul(E,rt)|0,o=o+Math.imul(E,nt)|0,n=n+Math.imul(v,ot)|0,i=(i=i+Math.imul(v,st)|0)+Math.imul(y,ot)|0,o=o+Math.imul(y,st)|0,n=n+Math.imul(p,ut)|0,i=(i=i+Math.imul(p,lt)|0)+Math.imul(m,ut)|0,o=o+Math.imul(m,lt)|0;var xt=(l+(n=n+Math.imul(f,ft)|0)|0)+((8191&(i=(i=i+Math.imul(f,ht)|0)+Math.imul(h,ft)|0))<<13)|0;l=((o=o+Math.imul(h,ht)|0)+(i>>>13)|0)+(xt>>>26)|0,xt&=67108863,n=Math.imul(j,D),i=(i=Math.imul(j,V))+Math.imul(U,D)|0,o=Math.imul(U,V),n=n+Math.imul(T,$)|0,i=(i=i+Math.imul(T,G)|0)+Math.imul(L,$)|0,o=o+Math.imul(L,G)|0,n=n+Math.imul(R,W)|0,i=(i=i+Math.imul(R,K)|0)+Math.imul(I,W)|0,o=o+Math.imul(I,K)|0,n=n+Math.imul(S,X)|0,i=(i=i+Math.imul(S,Z)|0)+Math.imul(C,X)|0,o=o+Math.imul(C,Z)|0,n=n+Math.imul(A,Q)|0,i=(i=i+Math.imul(A,tt)|0)+Math.imul(N,Q)|0,o=o+Math.imul(N,tt)|0,n=n+Math.imul(_,rt)|0,i=(i=i+Math.imul(_,nt)|0)+Math.imul(x,rt)|0,o=o+Math.imul(x,nt)|0,n=n+Math.imul(w,ot)|0,i=(i=i+Math.imul(w,st)|0)+Math.imul(E,ot)|0,o=o+Math.imul(E,st)|0,n=n+Math.imul(v,ut)|0,i=(i=i+Math.imul(v,lt)|0)+Math.imul(y,ut)|0,o=o+Math.imul(y,lt)|0,n=n+Math.imul(p,ft)|0,i=(i=i+Math.imul(p,ht)|0)+Math.imul(m,ft)|0,o=o+Math.imul(m,ht)|0;var Mt=(l+(n=n+Math.imul(f,pt)|0)|0)+((8191&(i=(i=i+Math.imul(f,mt)|0)+Math.imul(h,pt)|0))<<13)|0;l=((o=o+Math.imul(h,mt)|0)+(i>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,n=Math.imul(j,$),i=(i=Math.imul(j,G))+Math.imul(U,$)|0,o=Math.imul(U,G),n=n+Math.imul(T,W)|0,i=(i=i+Math.imul(T,K)|0)+Math.imul(L,W)|0,o=o+Math.imul(L,K)|0,n=n+Math.imul(R,X)|0,i=(i=i+Math.imul(R,Z)|0)+Math.imul(I,X)|0,o=o+Math.imul(I,Z)|0,n=n+Math.imul(S,Q)|0,i=(i=i+Math.imul(S,tt)|0)+Math.imul(C,Q)|0,o=o+Math.imul(C,tt)|0,n=n+Math.imul(A,rt)|0,i=(i=i+Math.imul(A,nt)|0)+Math.imul(N,rt)|0,o=o+Math.imul(N,nt)|0,n=n+Math.imul(_,ot)|0,i=(i=i+Math.imul(_,st)|0)+Math.imul(x,ot)|0,o=o+Math.imul(x,st)|0,n=n+Math.imul(w,ut)|0,i=(i=i+Math.imul(w,lt)|0)+Math.imul(E,ut)|0,o=o+Math.imul(E,lt)|0,n=n+Math.imul(v,ft)|0,i=(i=i+Math.imul(v,ht)|0)+Math.imul(y,ft)|0,o=o+Math.imul(y,ht)|0;var At=(l+(n=n+Math.imul(p,pt)|0)|0)+((8191&(i=(i=i+Math.imul(p,mt)|0)+Math.imul(m,pt)|0))<<13)|0;l=((o=o+Math.imul(m,mt)|0)+(i>>>13)|0)+(At>>>26)|0,At&=67108863,n=Math.imul(j,W),i=(i=Math.imul(j,K))+Math.imul(U,W)|0,o=Math.imul(U,K),n=n+Math.imul(T,X)|0,i=(i=i+Math.imul(T,Z)|0)+Math.imul(L,X)|0,o=o+Math.imul(L,Z)|0,n=n+Math.imul(R,Q)|0,i=(i=i+Math.imul(R,tt)|0)+Math.imul(I,Q)|0,o=o+Math.imul(I,tt)|0,n=n+Math.imul(S,rt)|0,i=(i=i+Math.imul(S,nt)|0)+Math.imul(C,rt)|0,o=o+Math.imul(C,nt)|0,n=n+Math.imul(A,ot)|0,i=(i=i+Math.imul(A,st)|0)+Math.imul(N,ot)|0,o=o+Math.imul(N,st)|0,n=n+Math.imul(_,ut)|0,i=(i=i+Math.imul(_,lt)|0)+Math.imul(x,ut)|0,o=o+Math.imul(x,lt)|0,n=n+Math.imul(w,ft)|0,i=(i=i+Math.imul(w,ht)|0)+Math.imul(E,ft)|0,o=o+Math.imul(E,ht)|0;var Nt=(l+(n=n+Math.imul(v,pt)|0)|0)+((8191&(i=(i=i+Math.imul(v,mt)|0)+Math.imul(y,pt)|0))<<13)|0;l=((o=o+Math.imul(y,mt)|0)+(i>>>13)|0)+(Nt>>>26)|0,Nt&=67108863,n=Math.imul(j,X),i=(i=Math.imul(j,Z))+Math.imul(U,X)|0,o=Math.imul(U,Z),n=n+Math.imul(T,Q)|0,i=(i=i+Math.imul(T,tt)|0)+Math.imul(L,Q)|0,o=o+Math.imul(L,tt)|0,n=n+Math.imul(R,rt)|0,i=(i=i+Math.imul(R,nt)|0)+Math.imul(I,rt)|0,o=o+Math.imul(I,nt)|0,n=n+Math.imul(S,ot)|0,i=(i=i+Math.imul(S,st)|0)+Math.imul(C,ot)|0,o=o+Math.imul(C,st)|0,n=n+Math.imul(A,ut)|0,i=(i=i+Math.imul(A,lt)|0)+Math.imul(N,ut)|0,o=o+Math.imul(N,lt)|0,n=n+Math.imul(_,ft)|0,i=(i=i+Math.imul(_,ht)|0)+Math.imul(x,ft)|0,o=o+Math.imul(x,ht)|0;var Pt=(l+(n=n+Math.imul(w,pt)|0)|0)+((8191&(i=(i=i+Math.imul(w,mt)|0)+Math.imul(E,pt)|0))<<13)|0;l=((o=o+Math.imul(E,mt)|0)+(i>>>13)|0)+(Pt>>>26)|0,Pt&=67108863,n=Math.imul(j,Q),i=(i=Math.imul(j,tt))+Math.imul(U,Q)|0,o=Math.imul(U,tt),n=n+Math.imul(T,rt)|0,i=(i=i+Math.imul(T,nt)|0)+Math.imul(L,rt)|0,o=o+Math.imul(L,nt)|0,n=n+Math.imul(R,ot)|0,i=(i=i+Math.imul(R,st)|0)+Math.imul(I,ot)|0,o=o+Math.imul(I,st)|0,n=n+Math.imul(S,ut)|0,i=(i=i+Math.imul(S,lt)|0)+Math.imul(C,ut)|0,o=o+Math.imul(C,lt)|0,n=n+Math.imul(A,ft)|0,i=(i=i+Math.imul(A,ht)|0)+Math.imul(N,ft)|0,o=o+Math.imul(N,ht)|0;var St=(l+(n=n+Math.imul(_,pt)|0)|0)+((8191&(i=(i=i+Math.imul(_,mt)|0)+Math.imul(x,pt)|0))<<13)|0;l=((o=o+Math.imul(x,mt)|0)+(i>>>13)|0)+(St>>>26)|0,St&=67108863,n=Math.imul(j,rt),i=(i=Math.imul(j,nt))+Math.imul(U,rt)|0,o=Math.imul(U,nt),n=n+Math.imul(T,ot)|0,i=(i=i+Math.imul(T,st)|0)+Math.imul(L,ot)|0,o=o+Math.imul(L,st)|0,n=n+Math.imul(R,ut)|0,i=(i=i+Math.imul(R,lt)|0)+Math.imul(I,ut)|0,o=o+Math.imul(I,lt)|0,n=n+Math.imul(S,ft)|0,i=(i=i+Math.imul(S,ht)|0)+Math.imul(C,ft)|0,o=o+Math.imul(C,ht)|0;var Ct=(l+(n=n+Math.imul(A,pt)|0)|0)+((8191&(i=(i=i+Math.imul(A,mt)|0)+Math.imul(N,pt)|0))<<13)|0;l=((o=o+Math.imul(N,mt)|0)+(i>>>13)|0)+(Ct>>>26)|0,Ct&=67108863,n=Math.imul(j,ot),i=(i=Math.imul(j,st))+Math.imul(U,ot)|0,o=Math.imul(U,st),n=n+Math.imul(T,ut)|0,i=(i=i+Math.imul(T,lt)|0)+Math.imul(L,ut)|0,o=o+Math.imul(L,lt)|0,n=n+Math.imul(R,ft)|0,i=(i=i+Math.imul(R,ht)|0)+Math.imul(I,ft)|0,o=o+Math.imul(I,ht)|0;var Ft=(l+(n=n+Math.imul(S,pt)|0)|0)+((8191&(i=(i=i+Math.imul(S,mt)|0)+Math.imul(C,pt)|0))<<13)|0;l=((o=o+Math.imul(C,mt)|0)+(i>>>13)|0)+(Ft>>>26)|0,Ft&=67108863,n=Math.imul(j,ut),i=(i=Math.imul(j,lt))+Math.imul(U,ut)|0,o=Math.imul(U,lt),n=n+Math.imul(T,ft)|0,i=(i=i+Math.imul(T,ht)|0)+Math.imul(L,ft)|0,o=o+Math.imul(L,ht)|0;var Rt=(l+(n=n+Math.imul(R,pt)|0)|0)+((8191&(i=(i=i+Math.imul(R,mt)|0)+Math.imul(I,pt)|0))<<13)|0;l=((o=o+Math.imul(I,mt)|0)+(i>>>13)|0)+(Rt>>>26)|0,Rt&=67108863,n=Math.imul(j,ft),i=(i=Math.imul(j,ht))+Math.imul(U,ft)|0,o=Math.imul(U,ht);var It=(l+(n=n+Math.imul(T,pt)|0)|0)+((8191&(i=(i=i+Math.imul(T,mt)|0)+Math.imul(L,pt)|0))<<13)|0;l=((o=o+Math.imul(L,mt)|0)+(i>>>13)|0)+(It>>>26)|0,It&=67108863;var Ot=(l+(n=Math.imul(j,pt))|0)+((8191&(i=(i=Math.imul(j,mt))+Math.imul(U,pt)|0))<<13)|0;return l=((o=Math.imul(U,mt))+(i>>>13)|0)+(Ot>>>26)|0,Ot&=67108863,u[0]=gt,u[1]=vt,u[2]=yt,u[3]=bt,u[4]=wt,u[5]=Et,u[6]=kt,u[7]=_t,u[8]=xt,u[9]=Mt,u[10]=At,u[11]=Nt,u[12]=Pt,u[13]=St,u[14]=Ct,u[15]=Ft,u[16]=Rt,u[17]=It,u[18]=Ot,0!==l&&(u[19]=l,r.length++),r};function v(t,e,r){r.negative=e.negative^t.negative,r.length=t.length+e.length;for(var n=0,i=0,o=0;o<r.length-1;o++){var s=i;i=0;for(var a=67108863&n,u=Math.min(o,e.length-1),l=Math.max(0,o-t.length+1);l<=u;l++){var c=o-l,f=(0|t.words[c])*(0|e.words[l]),h=67108863&f;a=67108863&(h=h+a|0),i+=(s=(s=s+(f/67108864|0)|0)+(h>>>26)|0)>>>26,s&=67108863}r.words[o]=a,n=s,s=i}return 0!==n?r.words[o]=n:r.length--,r._strip()}function y(t,e,r){return v(t,e,r)}function b(t,e){this.x=t,this.y=e}Math.imul||(g=m),o.prototype.mulTo=function(t,e){var r=this.length+t.length;return 10===this.length&&10===t.length?g(this,t,e):r<63?m(this,t,e):r<1024?v(this,t,e):y(this,t,e)},b.prototype.makeRBT=function(t){for(var e=new Array(t),r=o.prototype._countBits(t)-1,n=0;n<t;n++)e[n]=this.revBin(n,r,t);return e},b.prototype.revBin=function(t,e,r){if(0===t||t===r-1)return t;for(var n=0,i=0;i<e;i++)n|=(1&t)<<e-i-1,t>>=1;return n},b.prototype.permute=function(t,e,r,n,i,o){for(var s=0;s<o;s++)n[s]=e[t[s]],i[s]=r[t[s]]},b.prototype.transform=function(t,e,r,n,i,o){this.permute(o,t,e,r,n,i);for(var s=1;s<i;s<<=1)for(var a=s<<1,u=Math.cos(2*Math.PI/a),l=Math.sin(2*Math.PI/a),c=0;c<i;c+=a)for(var f=u,h=l,d=0;d<s;d++){var p=r[c+d],m=n[c+d],g=r[c+d+s],v=n[c+d+s],y=f*g-h*v;v=f*v+h*g,g=y,r[c+d]=p+g,n[c+d]=m+v,r[c+d+s]=p-g,n[c+d+s]=m-v,d!==a&&(y=u*f-l*h,h=u*h+l*f,f=y)}},b.prototype.guessLen13b=function(t,e){var r=1|Math.max(e,t),n=1&r,i=0;for(r=r/2|0;r;r>>>=1)i++;return 1<<i+1+n},b.prototype.conjugate=function(t,e,r){if(!(r<=1))for(var n=0;n<r/2;n++){var i=t[n];t[n]=t[r-n-1],t[r-n-1]=i,i=e[n],e[n]=-e[r-n-1],e[r-n-1]=-i}},b.prototype.normalize13b=function(t,e){for(var r=0,n=0;n<e/2;n++){var i=8192*Math.round(t[2*n+1]/e)+Math.round(t[2*n]/e)+r;t[n]=67108863&i,r=i<67108864?0:i/67108864|0}return t},b.prototype.convert13b=function(t,e,r,i){for(var o=0,s=0;s<e;s++)o+=0|t[s],r[2*s]=8191&o,o>>>=13,r[2*s+1]=8191&o,o>>>=13;for(s=2*e;s<i;++s)r[s]=0;n(0===o),n(0==(-8192&o))},b.prototype.stub=function(t){for(var e=new Array(t),r=0;r<t;r++)e[r]=0;return e},b.prototype.mulp=function(t,e,r){var n=2*this.guessLen13b(t.length,e.length),i=this.makeRBT(n),o=this.stub(n),s=new Array(n),a=new Array(n),u=new Array(n),l=new Array(n),c=new Array(n),f=new Array(n),h=r.words;h.length=n,this.convert13b(t.words,t.length,s,n),this.convert13b(e.words,e.length,l,n),this.transform(s,o,a,u,n,i),this.transform(l,o,c,f,n,i);for(var d=0;d<n;d++){var p=a[d]*c[d]-u[d]*f[d];u[d]=a[d]*f[d]+u[d]*c[d],a[d]=p}return this.conjugate(a,u,n),this.transform(a,u,h,o,n,i),this.conjugate(h,o,n),this.normalize13b(h,n),r.negative=t.negative^e.negative,r.length=t.length+e.length,r._strip()},o.prototype.mul=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),this.mulTo(t,e)},o.prototype.mulf=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),y(this,t,e)},o.prototype.imul=function(t){return this.clone().mulTo(t,this)},o.prototype.imuln=function(t){var e=t<0;e&&(t=-t),n("number"==typeof t),n(t<67108864);for(var r=0,i=0;i<this.length;i++){var o=(0|this.words[i])*t,s=(67108863&o)+(67108863&r);r>>=26,r+=o/67108864|0,r+=s>>>26,this.words[i]=67108863&s}return 0!==r&&(this.words[i]=r,this.length++),e?this.ineg():this},o.prototype.muln=function(t){return this.clone().imuln(t)},o.prototype.sqr=function(){return this.mul(this)},o.prototype.isqr=function(){return this.imul(this.clone())},o.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),r=0;r<e.length;r++){var n=r/26|0,i=r%26;e[r]=t.words[n]>>>i&1}return e}(t);if(0===e.length)return new o(1);for(var r=this,n=0;n<e.length&&0===e[n];n++,r=r.sqr());if(++n<e.length)for(var i=r.sqr();n<e.length;n++,i=i.sqr())0!==e[n]&&(r=r.mul(i));return r},o.prototype.iushln=function(t){n("number"==typeof t&&t>=0);var e,r=t%26,i=(t-r)/26,o=67108863>>>26-r<<26-r;if(0!==r){var s=0;for(e=0;e<this.length;e++){var a=this.words[e]&o,u=(0|this.words[e])-a<<r;this.words[e]=u|s,s=a>>>26-r}s&&(this.words[e]=s,this.length++)}if(0!==i){for(e=this.length-1;e>=0;e--)this.words[e+i]=this.words[e];for(e=0;e<i;e++)this.words[e]=0;this.length+=i}return this._strip()},o.prototype.ishln=function(t){return n(0===this.negative),this.iushln(t)},o.prototype.iushrn=function(t,e,r){var i;n("number"==typeof t&&t>=0),i=e?(e-e%26)/26:0;var o=t%26,s=Math.min((t-o)/26,this.length),a=67108863^67108863>>>o<<o,u=r;if(i-=s,i=Math.max(0,i),u){for(var l=0;l<s;l++)u.words[l]=this.words[l];u.length=s}if(0===s);else if(this.length>s)for(this.length-=s,l=0;l<this.length;l++)this.words[l]=this.words[l+s];else this.words[0]=0,this.length=1;var c=0;for(l=this.length-1;l>=0&&(0!==c||l>=i);l--){var f=0|this.words[l];this.words[l]=c<<26-o|f>>>o,c=f&a}return u&&0!==c&&(u.words[u.length++]=c),0===this.length&&(this.words[0]=0,this.length=1),this._strip()},o.prototype.ishrn=function(t,e,r){return n(0===this.negative),this.iushrn(t,e,r)},o.prototype.shln=function(t){return this.clone().ishln(t)},o.prototype.ushln=function(t){return this.clone().iushln(t)},o.prototype.shrn=function(t){return this.clone().ishrn(t)},o.prototype.ushrn=function(t){return this.clone().iushrn(t)},o.prototype.testn=function(t){n("number"==typeof t&&t>=0);var e=t%26,r=(t-e)/26,i=1<<e;return!(this.length<=r||!(this.words[r]&i))},o.prototype.imaskn=function(t){n("number"==typeof t&&t>=0);var e=t%26,r=(t-e)/26;if(n(0===this.negative,"imaskn works only with positive numbers"),this.length<=r)return this;if(0!==e&&r++,this.length=Math.min(r,this.length),0!==e){var i=67108863^67108863>>>e<<e;this.words[this.length-1]&=i}return this._strip()},o.prototype.maskn=function(t){return this.clone().imaskn(t)},o.prototype.iaddn=function(t){return n("number"==typeof t),n(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<=t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},o.prototype._iaddn=function(t){this.words[0]+=t;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},o.prototype.isubn=function(t){if(n("number"==typeof t),n(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this._strip()},o.prototype.addn=function(t){return this.clone().iaddn(t)},o.prototype.subn=function(t){return this.clone().isubn(t)},o.prototype.iabs=function(){return this.negative=0,this},o.prototype.abs=function(){return this.clone().iabs()},o.prototype._ishlnsubmul=function(t,e,r){var i,o,s=t.length+r;this._expand(s);var a=0;for(i=0;i<t.length;i++){o=(0|this.words[i+r])+a;var u=(0|t.words[i])*e;a=((o-=67108863&u)>>26)-(u/67108864|0),this.words[i+r]=67108863&o}for(;i<this.length-r;i++)a=(o=(0|this.words[i+r])+a)>>26,this.words[i+r]=67108863&o;if(0===a)return this._strip();for(n(-1===a),a=0,i=0;i<this.length;i++)a=(o=-(0|this.words[i])+a)>>26,this.words[i]=67108863&o;return this.negative=1,this._strip()},o.prototype._wordDiv=function(t,e){var r=(this.length,t.length),n=this.clone(),i=t,s=0|i.words[i.length-1];0!=(r=26-this._countBits(s))&&(i=i.ushln(r),n.iushln(r),s=0|i.words[i.length-1]);var a,u=n.length-i.length;if("mod"!==e){(a=new o(null)).length=u+1,a.words=new Array(a.length);for(var l=0;l<a.length;l++)a.words[l]=0}var c=n.clone()._ishlnsubmul(i,1,u);0===c.negative&&(n=c,a&&(a.words[u]=1));for(var f=u-1;f>=0;f--){var h=67108864*(0|n.words[i.length+f])+(0|n.words[i.length+f-1]);for(h=Math.min(h/s|0,67108863),n._ishlnsubmul(i,h,f);0!==n.negative;)h--,n.negative=0,n._ishlnsubmul(i,1,f),n.isZero()||(n.negative^=1);a&&(a.words[f]=h)}return a&&a._strip(),n._strip(),"div"!==e&&0!==r&&n.iushrn(r),{div:a||null,mod:n}},o.prototype.divmod=function(t,e,r){return n(!t.isZero()),this.isZero()?{div:new o(0),mod:new o(0)}:0!==this.negative&&0===t.negative?(a=this.neg().divmod(t,e),"mod"!==e&&(i=a.div.neg()),"div"!==e&&(s=a.mod.neg(),r&&0!==s.negative&&s.iadd(t)),{div:i,mod:s}):0===this.negative&&0!==t.negative?(a=this.divmod(t.neg(),e),"mod"!==e&&(i=a.div.neg()),{div:i,mod:a.mod}):0!=(this.negative&t.negative)?(a=this.neg().divmod(t.neg(),e),"div"!==e&&(s=a.mod.neg(),r&&0!==s.negative&&s.isub(t)),{div:a.div,mod:s}):t.length>this.length||this.cmp(t)<0?{div:new o(0),mod:this}:1===t.length?"div"===e?{div:this.divn(t.words[0]),mod:null}:"mod"===e?{div:null,mod:new o(this.modrn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new o(this.modrn(t.words[0]))}:this._wordDiv(t,e);var i,s,a},o.prototype.div=function(t){return this.divmod(t,"div",!1).div},o.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},o.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},o.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var r=0!==e.div.negative?e.mod.isub(t):e.mod,n=t.ushrn(1),i=t.andln(1),o=r.cmp(n);return o<0||1===i&&0===o?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},o.prototype.modrn=function(t){var e=t<0;e&&(t=-t),n(t<=67108863);for(var r=(1<<26)%t,i=0,o=this.length-1;o>=0;o--)i=(r*i+(0|this.words[o]))%t;return e?-i:i},o.prototype.modn=function(t){return this.modrn(t)},o.prototype.idivn=function(t){var e=t<0;e&&(t=-t),n(t<=67108863);for(var r=0,i=this.length-1;i>=0;i--){var o=(0|this.words[i])+67108864*r;this.words[i]=o/t|0,r=o%t}return this._strip(),e?this.ineg():this},o.prototype.divn=function(t){return this.clone().idivn(t)},o.prototype.egcd=function(t){n(0===t.negative),n(!t.isZero());var e=this,r=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i=new o(1),s=new o(0),a=new o(0),u=new o(1),l=0;e.isEven()&&r.isEven();)e.iushrn(1),r.iushrn(1),++l;for(var c=r.clone(),f=e.clone();!e.isZero();){for(var h=0,d=1;0==(e.words[0]&d)&&h<26;++h,d<<=1);if(h>0)for(e.iushrn(h);h-- >0;)(i.isOdd()||s.isOdd())&&(i.iadd(c),s.isub(f)),i.iushrn(1),s.iushrn(1);for(var p=0,m=1;0==(r.words[0]&m)&&p<26;++p,m<<=1);if(p>0)for(r.iushrn(p);p-- >0;)(a.isOdd()||u.isOdd())&&(a.iadd(c),u.isub(f)),a.iushrn(1),u.iushrn(1);e.cmp(r)>=0?(e.isub(r),i.isub(a),s.isub(u)):(r.isub(e),a.isub(i),u.isub(s))}return{a,b:u,gcd:r.iushln(l)}},o.prototype._invmp=function(t){n(0===t.negative),n(!t.isZero());var e=this,r=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i,s=new o(1),a=new o(0),u=r.clone();e.cmpn(1)>0&&r.cmpn(1)>0;){for(var l=0,c=1;0==(e.words[0]&c)&&l<26;++l,c<<=1);if(l>0)for(e.iushrn(l);l-- >0;)s.isOdd()&&s.iadd(u),s.iushrn(1);for(var f=0,h=1;0==(r.words[0]&h)&&f<26;++f,h<<=1);if(f>0)for(r.iushrn(f);f-- >0;)a.isOdd()&&a.iadd(u),a.iushrn(1);e.cmp(r)>=0?(e.isub(r),s.isub(a)):(r.isub(e),a.isub(s))}return(i=0===e.cmpn(1)?s:a).cmpn(0)<0&&i.iadd(t),i},o.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),r=t.clone();e.negative=0,r.negative=0;for(var n=0;e.isEven()&&r.isEven();n++)e.iushrn(1),r.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;r.isEven();)r.iushrn(1);var i=e.cmp(r);if(i<0){var o=e;e=r,r=o}else if(0===i||0===r.cmpn(1))break;e.isub(r)}return r.iushln(n)},o.prototype.invm=function(t){return this.egcd(t).a.umod(t)},o.prototype.isEven=function(){return 0==(1&this.words[0])},o.prototype.isOdd=function(){return 1==(1&this.words[0])},o.prototype.andln=function(t){return this.words[0]&t},o.prototype.bincn=function(t){n("number"==typeof t);var e=t%26,r=(t-e)/26,i=1<<e;if(this.length<=r)return this._expand(r+1),this.words[r]|=i,this;for(var o=i,s=r;0!==o&&s<this.length;s++){var a=0|this.words[s];o=(a+=o)>>>26,a&=67108863,this.words[s]=a}return 0!==o&&(this.words[s]=o,this.length++),this},o.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},o.prototype.cmpn=function(t){var e,r=t<0;if(0!==this.negative&&!r)return-1;if(0===this.negative&&r)return 1;if(this._strip(),this.length>1)e=1;else{r&&(t=-t),n(t<=67108863,"Number is too big");var i=0|this.words[0];e=i===t?0:i<t?-1:1}return 0!==this.negative?0|-e:e},o.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var e=this.ucmp(t);return 0!==this.negative?0|-e:e},o.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var e=0,r=this.length-1;r>=0;r--){var n=0|this.words[r],i=0|t.words[r];if(n!==i){n<i?e=-1:n>i&&(e=1);break}}return e},o.prototype.gtn=function(t){return 1===this.cmpn(t)},o.prototype.gt=function(t){return 1===this.cmp(t)},o.prototype.gten=function(t){return this.cmpn(t)>=0},o.prototype.gte=function(t){return this.cmp(t)>=0},o.prototype.ltn=function(t){return-1===this.cmpn(t)},o.prototype.lt=function(t){return-1===this.cmp(t)},o.prototype.lten=function(t){return this.cmpn(t)<=0},o.prototype.lte=function(t){return this.cmp(t)<=0},o.prototype.eqn=function(t){return 0===this.cmpn(t)},o.prototype.eq=function(t){return 0===this.cmp(t)},o.red=function(t){return new A(t)},o.prototype.toRed=function(t){return n(!this.red,"Already a number in reduction context"),n(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},o.prototype.fromRed=function(){return n(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},o.prototype._forceRed=function(t){return this.red=t,this},o.prototype.forceRed=function(t){return n(!this.red,"Already a number in reduction context"),this._forceRed(t)},o.prototype.redAdd=function(t){return n(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},o.prototype.redIAdd=function(t){return n(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},o.prototype.redSub=function(t){return n(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},o.prototype.redISub=function(t){return n(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},o.prototype.redShl=function(t){return n(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},o.prototype.redMul=function(t){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},o.prototype.redIMul=function(t){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},o.prototype.redSqr=function(){return n(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},o.prototype.redISqr=function(){return n(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},o.prototype.redSqrt=function(){return n(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},o.prototype.redInvm=function(){return n(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},o.prototype.redNeg=function(){return n(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},o.prototype.redPow=function(t){return n(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var w={k256:null,p224:null,p192:null,p25519:null};function E(t,e){this.name=t,this.p=new o(e,16),this.n=this.p.bitLength(),this.k=new o(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function k(){E.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function _(){E.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function x(){E.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function M(){E.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function A(t){if("string"==typeof t){var e=o._prime(t);this.m=e.p,this.prime=e}else n(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function N(t){A.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new o(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}E.prototype._tmp=function(){var t=new o(null);return t.words=new Array(Math.ceil(this.n/13)),t},E.prototype.ireduce=function(t){var e,r=t;do{this.split(r,this.tmp),e=(r=(r=this.imulK(r)).iadd(this.tmp)).bitLength()}while(e>this.n);var n=e<this.n?-1:r.ucmp(this.p);return 0===n?(r.words[0]=0,r.length=1):n>0?r.isub(this.p):void 0!==r.strip?r.strip():r._strip(),r},E.prototype.split=function(t,e){t.iushrn(this.n,0,e)},E.prototype.imulK=function(t){return t.imul(this.k)},i(k,E),k.prototype.split=function(t,e){for(var r=4194303,n=Math.min(t.length,9),i=0;i<n;i++)e.words[i]=t.words[i];if(e.length=n,t.length<=9)return t.words[0]=0,void(t.length=1);var o=t.words[9];for(e.words[e.length++]=o&r,i=10;i<t.length;i++){var s=0|t.words[i];t.words[i-10]=(s&r)<<4|o>>>22,o=s}o>>>=22,t.words[i-10]=o,0===o&&t.length>10?t.length-=10:t.length-=9},k.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,r=0;r<t.length;r++){var n=0|t.words[r];e+=977*n,t.words[r]=67108863&e,e=64*n+(e/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},i(_,E),i(x,E),i(M,E),M.prototype.imulK=function(t){for(var e=0,r=0;r<t.length;r++){var n=19*(0|t.words[r])+e,i=67108863&n;n>>>=26,t.words[r]=i,e=n}return 0!==e&&(t.words[t.length++]=e),t},o._prime=function(t){if(w[t])return w[t];var e;if("k256"===t)e=new k;else if("p224"===t)e=new _;else if("p192"===t)e=new x;else{if("p25519"!==t)throw new Error("Unknown prime "+t);e=new M}return w[t]=e,e},A.prototype._verify1=function(t){n(0===t.negative,"red works only with positives"),n(t.red,"red works only with red numbers")},A.prototype._verify2=function(t,e){n(0==(t.negative|e.negative),"red works only with positives"),n(t.red&&t.red===e.red,"red works only with red numbers")},A.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):(c(t,t.umod(this.m)._forceRed(this)),t)},A.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},A.prototype.add=function(t,e){this._verify2(t,e);var r=t.add(e);return r.cmp(this.m)>=0&&r.isub(this.m),r._forceRed(this)},A.prototype.iadd=function(t,e){this._verify2(t,e);var r=t.iadd(e);return r.cmp(this.m)>=0&&r.isub(this.m),r},A.prototype.sub=function(t,e){this._verify2(t,e);var r=t.sub(e);return r.cmpn(0)<0&&r.iadd(this.m),r._forceRed(this)},A.prototype.isub=function(t,e){this._verify2(t,e);var r=t.isub(e);return r.cmpn(0)<0&&r.iadd(this.m),r},A.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},A.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},A.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},A.prototype.isqr=function(t){return this.imul(t,t.clone())},A.prototype.sqr=function(t){return this.mul(t,t)},A.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(n(e%2==1),3===e){var r=this.m.add(new o(1)).iushrn(2);return this.pow(t,r)}for(var i=this.m.subn(1),s=0;!i.isZero()&&0===i.andln(1);)s++,i.iushrn(1);n(!i.isZero());var a=new o(1).toRed(this),u=a.redNeg(),l=this.m.subn(1).iushrn(1),c=this.m.bitLength();for(c=new o(2*c*c).toRed(this);0!==this.pow(c,l).cmp(u);)c.redIAdd(u);for(var f=this.pow(c,i),h=this.pow(t,i.addn(1).iushrn(1)),d=this.pow(t,i),p=s;0!==d.cmp(a);){for(var m=d,g=0;0!==m.cmp(a);g++)m=m.redSqr();n(g<p);var v=this.pow(f,new o(1).iushln(p-g-1));h=h.redMul(v),f=v.redSqr(),d=d.redMul(f),p=g}return h},A.prototype.invm=function(t){var e=t._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},A.prototype.pow=function(t,e){if(e.isZero())return new o(1).toRed(this);if(0===e.cmpn(1))return t.clone();var r=new Array(16);r[0]=new o(1).toRed(this),r[1]=t;for(var n=2;n<r.length;n++)r[n]=this.mul(r[n-1],t);var i=r[0],s=0,a=0,u=e.bitLength()%26;for(0===u&&(u=26),n=e.length-1;n>=0;n--){for(var l=e.words[n],c=u-1;c>=0;c--){var f=l>>c&1;i!==r[0]&&(i=this.sqr(i)),0!==f||0!==s?(s<<=1,s|=f,(4==++a||0===n&&0===c)&&(i=this.mul(i,r[s]),a=0,s=0)):a=0}u=26}return i},A.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},A.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},o.mont=function(t){return new N(t)},i(N,A),N.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},N.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},N.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var r=t.imul(e),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),o=i;return i.cmp(this.m)>=0?o=i.isub(this.m):i.cmpn(0)<0&&(o=i.iadd(this.m)),o._forceRed(this)},N.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new o(0)._forceRed(this);var r=t.mul(e),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),s=i;return i.cmp(this.m)>=0?s=i.isub(this.m):i.cmpn(0)<0&&(s=i.iadd(this.m)),s._forceRed(this)},N.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t=r.nmd(t),this)},184:(t,e)=>{var r;!function(){"use strict";var n={}.hasOwnProperty;function i(){for(var t=[],e=0;e<arguments.length;e++){var r=arguments[e];if(r){var o=typeof r;if("string"===o||"number"===o)t.push(r);else if(Array.isArray(r)){if(r.length){var s=i.apply(null,r);s&&t.push(s)}}else if("object"===o)if(r.toString===Object.prototype.toString)for(var a in r)n.call(r,a)&&r[a]&&t.push(a);else t.push(r.toString())}}return t.join(" ")}t.exports?(i.default=i,t.exports=i):void 0===(r=function(){return i}.apply(e,[]))||(t.exports=r)}()},715:(t,e,r)=>{var n=e;n.utils=r(436),n.common=r(772),n.sha=r(41),n.ripemd=r(949),n.hmac=r(326),n.sha1=n.sha.sha1,n.sha256=n.sha.sha256,n.sha224=n.sha.sha224,n.sha384=n.sha.sha384,n.sha512=n.sha.sha512,n.ripemd160=n.ripemd.ripemd160},772:(t,e,r)=>{"use strict";var n=r(436),i=r(746);function o(){this.pending=null,this.pendingTotal=0,this.blockSize=this.constructor.blockSize,this.outSize=this.constructor.outSize,this.hmacStrength=this.constructor.hmacStrength,this.padLength=this.constructor.padLength/8,this.endian="big",this._delta8=this.blockSize/8,this._delta32=this.blockSize/32}e.BlockHash=o,o.prototype.update=function(t,e){if(t=n.toArray(t,e),this.pending?this.pending=this.pending.concat(t):this.pending=t,this.pendingTotal+=t.length,this.pending.length>=this._delta8){var r=(t=this.pending).length%this._delta8;this.pending=t.slice(t.length-r,t.length),0===this.pending.length&&(this.pending=null),t=n.join32(t,0,t.length-r,this.endian);for(var i=0;i<t.length;i+=this._delta32)this._update(t,i,i+this._delta32)}return this},o.prototype.digest=function(t){return this.update(this._pad()),i(null===this.pending),this._digest(t)},o.prototype._pad=function(){var t=this.pendingTotal,e=this._delta8,r=e-(t+this.padLength)%e,n=new Array(r+this.padLength);n[0]=128;for(var i=1;i<r;i++)n[i]=0;if(t<<=3,"big"===this.endian){for(var o=8;o<this.padLength;o++)n[i++]=0;n[i++]=0,n[i++]=0,n[i++]=0,n[i++]=0,n[i++]=t>>>24&255,n[i++]=t>>>16&255,n[i++]=t>>>8&255,n[i++]=255&t}else for(n[i++]=255&t,n[i++]=t>>>8&255,n[i++]=t>>>16&255,n[i++]=t>>>24&255,n[i++]=0,n[i++]=0,n[i++]=0,n[i++]=0,o=8;o<this.padLength;o++)n[i++]=0;return n}},326:(t,e,r)=>{"use strict";var n=r(436),i=r(746);function o(t,e,r){if(!(this instanceof o))return new o(t,e,r);this.Hash=t,this.blockSize=t.blockSize/8,this.outSize=t.outSize/8,this.inner=null,this.outer=null,this._init(n.toArray(e,r))}t.exports=o,o.prototype._init=function(t){t.length>this.blockSize&&(t=(new this.Hash).update(t).digest()),i(t.length<=this.blockSize);for(var e=t.length;e<this.blockSize;e++)t.push(0);for(e=0;e<t.length;e++)t[e]^=54;for(this.inner=(new this.Hash).update(t),e=0;e<t.length;e++)t[e]^=106;this.outer=(new this.Hash).update(t)},o.prototype.update=function(t,e){return this.inner.update(t,e),this},o.prototype.digest=function(t){return this.outer.update(this.inner.digest()),this.outer.digest(t)}},949:(t,e,r)=>{"use strict";var n=r(436),i=r(772),o=n.rotl32,s=n.sum32,a=n.sum32_3,u=n.sum32_4,l=i.BlockHash;function c(){if(!(this instanceof c))return new c;l.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.endian="little"}function f(t,e,r,n){return t<=15?e^r^n:t<=31?e&r|~e&n:t<=47?(e|~r)^n:t<=63?e&n|r&~n:e^(r|~n)}function h(t){return t<=15?0:t<=31?1518500249:t<=47?1859775393:t<=63?2400959708:2840853838}function d(t){return t<=15?1352829926:t<=31?1548603684:t<=47?1836072691:t<=63?2053994217:0}n.inherits(c,l),e.ripemd160=c,c.blockSize=512,c.outSize=160,c.hmacStrength=192,c.padLength=64,c.prototype._update=function(t,e){for(var r=this.h[0],n=this.h[1],i=this.h[2],l=this.h[3],c=this.h[4],y=r,b=n,w=i,E=l,k=c,_=0;_<80;_++){var x=s(o(u(r,f(_,n,i,l),t[p[_]+e],h(_)),g[_]),c);r=c,c=l,l=o(i,10),i=n,n=x,x=s(o(u(y,f(79-_,b,w,E),t[m[_]+e],d(_)),v[_]),k),y=k,k=E,E=o(w,10),w=b,b=x}x=a(this.h[1],i,E),this.h[1]=a(this.h[2],l,k),this.h[2]=a(this.h[3],c,y),this.h[3]=a(this.h[4],r,b),this.h[4]=a(this.h[0],n,w),this.h[0]=x},c.prototype._digest=function(t){return"hex"===t?n.toHex32(this.h,"little"):n.split32(this.h,"little")};var p=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],m=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],g=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],v=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]},41:(t,e,r)=>{"use strict";e.sha1=r(761),e.sha224=r(799),e.sha256=r(344),e.sha384=r(978),e.sha512=r(900)},761:(t,e,r)=>{"use strict";var n=r(436),i=r(772),o=r(38),s=n.rotl32,a=n.sum32,u=n.sum32_5,l=o.ft_1,c=i.BlockHash,f=[1518500249,1859775393,2400959708,3395469782];function h(){if(!(this instanceof h))return new h;c.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.W=new Array(80)}n.inherits(h,c),t.exports=h,h.blockSize=512,h.outSize=160,h.hmacStrength=80,h.padLength=64,h.prototype._update=function(t,e){for(var r=this.W,n=0;n<16;n++)r[n]=t[e+n];for(;n<r.length;n++)r[n]=s(r[n-3]^r[n-8]^r[n-14]^r[n-16],1);var i=this.h[0],o=this.h[1],c=this.h[2],h=this.h[3],d=this.h[4];for(n=0;n<r.length;n++){var p=~~(n/20),m=u(s(i,5),l(p,o,c,h),d,r[n],f[p]);d=h,h=c,c=s(o,30),o=i,i=m}this.h[0]=a(this.h[0],i),this.h[1]=a(this.h[1],o),this.h[2]=a(this.h[2],c),this.h[3]=a(this.h[3],h),this.h[4]=a(this.h[4],d)},h.prototype._digest=function(t){return"hex"===t?n.toHex32(this.h,"big"):n.split32(this.h,"big")}},799:(t,e,r)=>{"use strict";var n=r(436),i=r(344);function o(){if(!(this instanceof o))return new o;i.call(this),this.h=[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428]}n.inherits(o,i),t.exports=o,o.blockSize=512,o.outSize=224,o.hmacStrength=192,o.padLength=64,o.prototype._digest=function(t){return"hex"===t?n.toHex32(this.h.slice(0,7),"big"):n.split32(this.h.slice(0,7),"big")}},344:(t,e,r)=>{"use strict";var n=r(436),i=r(772),o=r(38),s=r(746),a=n.sum32,u=n.sum32_4,l=n.sum32_5,c=o.ch32,f=o.maj32,h=o.s0_256,d=o.s1_256,p=o.g0_256,m=o.g1_256,g=i.BlockHash,v=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function y(){if(!(this instanceof y))return new y;g.call(this),this.h=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],this.k=v,this.W=new Array(64)}n.inherits(y,g),t.exports=y,y.blockSize=512,y.outSize=256,y.hmacStrength=192,y.padLength=64,y.prototype._update=function(t,e){for(var r=this.W,n=0;n<16;n++)r[n]=t[e+n];for(;n<r.length;n++)r[n]=u(m(r[n-2]),r[n-7],p(r[n-15]),r[n-16]);var i=this.h[0],o=this.h[1],g=this.h[2],v=this.h[3],y=this.h[4],b=this.h[5],w=this.h[6],E=this.h[7];for(s(this.k.length===r.length),n=0;n<r.length;n++){var k=l(E,d(y),c(y,b,w),this.k[n],r[n]),_=a(h(i),f(i,o,g));E=w,w=b,b=y,y=a(v,k),v=g,g=o,o=i,i=a(k,_)}this.h[0]=a(this.h[0],i),this.h[1]=a(this.h[1],o),this.h[2]=a(this.h[2],g),this.h[3]=a(this.h[3],v),this.h[4]=a(this.h[4],y),this.h[5]=a(this.h[5],b),this.h[6]=a(this.h[6],w),this.h[7]=a(this.h[7],E)},y.prototype._digest=function(t){return"hex"===t?n.toHex32(this.h,"big"):n.split32(this.h,"big")}},978:(t,e,r)=>{"use strict";var n=r(436),i=r(900);function o(){if(!(this instanceof o))return new o;i.call(this),this.h=[3418070365,3238371032,1654270250,914150663,2438529370,812702999,355462360,4144912697,1731405415,4290775857,2394180231,1750603025,3675008525,1694076839,1203062813,3204075428]}n.inherits(o,i),t.exports=o,o.blockSize=1024,o.outSize=384,o.hmacStrength=192,o.padLength=128,o.prototype._digest=function(t){return"hex"===t?n.toHex32(this.h.slice(0,12),"big"):n.split32(this.h.slice(0,12),"big")}},900:(t,e,r)=>{"use strict";var n=r(436),i=r(772),o=r(746),s=n.rotr64_hi,a=n.rotr64_lo,u=n.shr64_hi,l=n.shr64_lo,c=n.sum64,f=n.sum64_hi,h=n.sum64_lo,d=n.sum64_4_hi,p=n.sum64_4_lo,m=n.sum64_5_hi,g=n.sum64_5_lo,v=i.BlockHash,y=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function b(){if(!(this instanceof b))return new b;v.call(this),this.h=[1779033703,4089235720,3144134277,2227873595,1013904242,4271175723,2773480762,1595750129,1359893119,2917565137,2600822924,725511199,528734635,4215389547,1541459225,327033209],this.k=y,this.W=new Array(160)}function w(t,e,r,n,i){var o=t&r^~t&i;return o<0&&(o+=4294967296),o}function E(t,e,r,n,i,o){var s=e&n^~e&o;return s<0&&(s+=4294967296),s}function k(t,e,r,n,i){var o=t&r^t&i^r&i;return o<0&&(o+=4294967296),o}function _(t,e,r,n,i,o){var s=e&n^e&o^n&o;return s<0&&(s+=4294967296),s}function x(t,e){var r=s(t,e,28)^s(e,t,2)^s(e,t,7);return r<0&&(r+=4294967296),r}function M(t,e){var r=a(t,e,28)^a(e,t,2)^a(e,t,7);return r<0&&(r+=4294967296),r}function A(t,e){var r=a(t,e,14)^a(t,e,18)^a(e,t,9);return r<0&&(r+=4294967296),r}function N(t,e){var r=s(t,e,1)^s(t,e,8)^u(t,e,7);return r<0&&(r+=4294967296),r}function P(t,e){var r=a(t,e,1)^a(t,e,8)^l(t,e,7);return r<0&&(r+=4294967296),r}function S(t,e){var r=a(t,e,19)^a(e,t,29)^l(t,e,6);return r<0&&(r+=4294967296),r}n.inherits(b,v),t.exports=b,b.blockSize=1024,b.outSize=512,b.hmacStrength=192,b.padLength=128,b.prototype._prepareBlock=function(t,e){for(var r=this.W,n=0;n<32;n++)r[n]=t[e+n];for(;n<r.length;n+=2){var i=(g=r[n-4],v=r[n-3],y=void 0,(y=s(g,v,19)^s(v,g,29)^u(g,v,6))<0&&(y+=4294967296),y),o=S(r[n-4],r[n-3]),a=r[n-14],l=r[n-13],c=N(r[n-30],r[n-29]),f=P(r[n-30],r[n-29]),h=r[n-32],m=r[n-31];r[n]=d(i,o,a,l,c,f,h,m),r[n+1]=p(i,o,a,l,c,f,h,m)}var g,v,y},b.prototype._update=function(t,e){this._prepareBlock(t,e);var r,n,i,a=this.W,u=this.h[0],l=this.h[1],d=this.h[2],p=this.h[3],v=this.h[4],y=this.h[5],b=this.h[6],N=this.h[7],P=this.h[8],S=this.h[9],C=this.h[10],F=this.h[11],R=this.h[12],I=this.h[13],O=this.h[14],T=this.h[15];o(this.k.length===a.length);for(var L=0;L<a.length;L+=2){var B=O,j=T,U=(i=void 0,(i=s(r=P,n=S,14)^s(r,n,18)^s(n,r,9))<0&&(i+=4294967296),i),q=A(P,S),D=w(P,0,C,0,R),V=E(0,S,0,F,0,I),z=this.k[L],$=this.k[L+1],G=a[L],H=a[L+1],W=m(B,j,U,q,D,V,z,$,G,H),K=g(B,j,U,q,D,V,z,$,G,H);B=x(u,l),j=M(u,l),U=k(u,0,d,0,v),q=_(0,l,0,p,0,y);var J=f(B,j,U,q),X=h(B,j,U,q);O=R,T=I,R=C,I=F,C=P,F=S,P=f(b,N,W,K),S=h(N,N,W,K),b=v,N=y,v=d,y=p,d=u,p=l,u=f(W,K,J,X),l=h(W,K,J,X)}c(this.h,0,u,l),c(this.h,2,d,p),c(this.h,4,v,y),c(this.h,6,b,N),c(this.h,8,P,S),c(this.h,10,C,F),c(this.h,12,R,I),c(this.h,14,O,T)},b.prototype._digest=function(t){return"hex"===t?n.toHex32(this.h,"big"):n.split32(this.h,"big")}},38:(t,e,r)=>{"use strict";var n=r(436).rotr32;function i(t,e,r){return t&e^~t&r}function o(t,e,r){return t&e^t&r^e&r}function s(t,e,r){return t^e^r}e.ft_1=function(t,e,r,n){return 0===t?i(e,r,n):1===t||3===t?s(e,r,n):2===t?o(e,r,n):void 0},e.ch32=i,e.maj32=o,e.p32=s,e.s0_256=function(t){return n(t,2)^n(t,13)^n(t,22)},e.s1_256=function(t){return n(t,6)^n(t,11)^n(t,25)},e.g0_256=function(t){return n(t,7)^n(t,18)^t>>>3},e.g1_256=function(t){return n(t,17)^n(t,19)^t>>>10}},436:(t,e,r)=>{"use strict";var n=r(746),i=r(717);function o(t,e){return 55296==(64512&t.charCodeAt(e))&&!(e<0||e+1>=t.length)&&56320==(64512&t.charCodeAt(e+1))}function s(t){return(t>>>24|t>>>8&65280|t<<8&16711680|(255&t)<<24)>>>0}function a(t){return 1===t.length?"0"+t:t}function u(t){return 7===t.length?"0"+t:6===t.length?"00"+t:5===t.length?"000"+t:4===t.length?"0000"+t:3===t.length?"00000"+t:2===t.length?"000000"+t:1===t.length?"0000000"+t:t}e.inherits=i,e.toArray=function(t,e){if(Array.isArray(t))return t.slice();if(!t)return[];var r=[];if("string"==typeof t)if(e){if("hex"===e)for((t=t.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(t="0"+t),i=0;i<t.length;i+=2)r.push(parseInt(t[i]+t[i+1],16))}else for(var n=0,i=0;i<t.length;i++){var s=t.charCodeAt(i);s<128?r[n++]=s:s<2048?(r[n++]=s>>6|192,r[n++]=63&s|128):o(t,i)?(s=65536+((1023&s)<<10)+(1023&t.charCodeAt(++i)),r[n++]=s>>18|240,r[n++]=s>>12&63|128,r[n++]=s>>6&63|128,r[n++]=63&s|128):(r[n++]=s>>12|224,r[n++]=s>>6&63|128,r[n++]=63&s|128)}else for(i=0;i<t.length;i++)r[i]=0|t[i];return r},e.toHex=function(t){for(var e="",r=0;r<t.length;r++)e+=a(t[r].toString(16));return e},e.htonl=s,e.toHex32=function(t,e){for(var r="",n=0;n<t.length;n++){var i=t[n];"little"===e&&(i=s(i)),r+=u(i.toString(16))}return r},e.zero2=a,e.zero8=u,e.join32=function(t,e,r,i){var o=r-e;n(o%4==0);for(var s=new Array(o/4),a=0,u=e;a<s.length;a++,u+=4){var l;l="big"===i?t[u]<<24|t[u+1]<<16|t[u+2]<<8|t[u+3]:t[u+3]<<24|t[u+2]<<16|t[u+1]<<8|t[u],s[a]=l>>>0}return s},e.split32=function(t,e){for(var r=new Array(4*t.length),n=0,i=0;n<t.length;n++,i+=4){var o=t[n];"big"===e?(r[i]=o>>>24,r[i+1]=o>>>16&255,r[i+2]=o>>>8&255,r[i+3]=255&o):(r[i+3]=o>>>24,r[i+2]=o>>>16&255,r[i+1]=o>>>8&255,r[i]=255&o)}return r},e.rotr32=function(t,e){return t>>>e|t<<32-e},e.rotl32=function(t,e){return t<<e|t>>>32-e},e.sum32=function(t,e){return t+e>>>0},e.sum32_3=function(t,e,r){return t+e+r>>>0},e.sum32_4=function(t,e,r,n){return t+e+r+n>>>0},e.sum32_5=function(t,e,r,n,i){return t+e+r+n+i>>>0},e.sum64=function(t,e,r,n){var i=t[e],o=n+t[e+1]>>>0,s=(o<n?1:0)+r+i;t[e]=s>>>0,t[e+1]=o},e.sum64_hi=function(t,e,r,n){return(e+n>>>0<e?1:0)+t+r>>>0},e.sum64_lo=function(t,e,r,n){return e+n>>>0},e.sum64_4_hi=function(t,e,r,n,i,o,s,a){var u=0,l=e;return u+=(l=l+n>>>0)<e?1:0,u+=(l=l+o>>>0)<o?1:0,t+r+i+s+(u+=(l=l+a>>>0)<a?1:0)>>>0},e.sum64_4_lo=function(t,e,r,n,i,o,s,a){return e+n+o+a>>>0},e.sum64_5_hi=function(t,e,r,n,i,o,s,a,u,l){var c=0,f=e;return c+=(f=f+n>>>0)<e?1:0,c+=(f=f+o>>>0)<o?1:0,c+=(f=f+a>>>0)<a?1:0,t+r+i+s+u+(c+=(f=f+l>>>0)<l?1:0)>>>0},e.sum64_5_lo=function(t,e,r,n,i,o,s,a,u,l){return e+n+o+a+l>>>0},e.rotr64_hi=function(t,e,r){return(e<<32-r|t>>>r)>>>0},e.rotr64_lo=function(t,e,r){return(t<<32-r|e>>>r)>>>0},e.shr64_hi=function(t,e,r){return t>>>r},e.shr64_lo=function(t,e,r){return(t<<32-r|e>>>r)>>>0}},717:t=>{"function"==typeof Object.create?t.exports=function(t,e){e&&(t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(t,e){if(e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}}},94:(t,e,r)=>{var n;!function(){"use strict";var i="input is invalid type",o="object"==typeof window,s=o?window:{};s.JS_SHA3_NO_WINDOW&&(o=!1);var a=!o&&"object"==typeof self;!s.JS_SHA3_NO_NODE_JS&&"object"==typeof process&&process.versions&&process.versions.node?s=r.g:a&&(s=self);var u=!s.JS_SHA3_NO_COMMON_JS&&t.exports,l=r.amdO,c=!s.JS_SHA3_NO_ARRAY_BUFFER&&"undefined"!=typeof ArrayBuffer,f="0123456789abcdef".split(""),h=[4,1024,262144,67108864],d=[0,8,16,24],p=[1,0,32898,0,32906,2147483648,2147516416,2147483648,32907,0,2147483649,0,2147516545,2147483648,32777,2147483648,138,0,136,0,2147516425,0,2147483658,0,2147516555,0,139,2147483648,32905,2147483648,32771,2147483648,32770,2147483648,128,2147483648,32778,0,2147483658,2147483648,2147516545,2147483648,32896,2147483648,2147483649,0,2147516424,2147483648],m=[224,256,384,512],g=[128,256],v=["hex","buffer","arrayBuffer","array","digest"],y={128:168,256:136};!s.JS_SHA3_NO_NODE_JS&&Array.isArray||(Array.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)}),!c||!s.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW&&ArrayBuffer.isView||(ArrayBuffer.isView=function(t){return"object"==typeof t&&t.buffer&&t.buffer.constructor===ArrayBuffer});for(var b=function(t,e,r){return function(n){return new O(t,e,t).update(n)[r]()}},w=function(t,e,r){return function(n,i){return new O(t,e,i).update(n)[r]()}},E=function(t,e,r){return function(e,n,i,o){return A["cshake"+t].update(e,n,i,o)[r]()}},k=function(t,e,r){return function(e,n,i,o){return A["kmac"+t].update(e,n,i,o)[r]()}},_=function(t,e,r,n){for(var i=0;i<v.length;++i){var o=v[i];t[o]=e(r,n,o)}return t},x=function(t,e){var r=b(t,e,"hex");return r.create=function(){return new O(t,e,t)},r.update=function(t){return r.create().update(t)},_(r,b,t,e)},M=[{name:"keccak",padding:[1,256,65536,16777216],bits:m,createMethod:x},{name:"sha3",padding:[6,1536,393216,100663296],bits:m,createMethod:x},{name:"shake",padding:[31,7936,2031616,520093696],bits:g,createMethod:function(t,e){var r=w(t,e,"hex");return r.create=function(r){return new O(t,e,r)},r.update=function(t,e){return r.create(e).update(t)},_(r,w,t,e)}},{name:"cshake",padding:h,bits:g,createMethod:function(t,e){var r=y[t],n=E(t,0,"hex");return n.create=function(n,i,o){return i||o?new O(t,e,n).bytepad([i,o],r):A["shake"+t].create(n)},n.update=function(t,e,r,i){return n.create(e,r,i).update(t)},_(n,E,t,e)}},{name:"kmac",padding:h,bits:g,createMethod:function(t,e){var r=y[t],n=k(t,0,"hex");return n.create=function(n,i,o){return new T(t,e,i).bytepad(["KMAC",o],r).bytepad([n],r)},n.update=function(t,e,r,i){return n.create(t,r,i).update(e)},_(n,k,t,e)}}],A={},N=[],P=0;P<M.length;++P)for(var S=M[P],C=S.bits,F=0;F<C.length;++F){var R=S.name+"_"+C[F];if(N.push(R),A[R]=S.createMethod(C[F],S.padding),"sha3"!==S.name){var I=S.name+C[F];N.push(I),A[I]=A[R]}}function O(t,e,r){this.blocks=[],this.s=[],this.padding=e,this.outputBits=r,this.reset=!0,this.finalized=!1,this.block=0,this.start=0,this.blockCount=1600-(t<<1)>>5,this.byteCount=this.blockCount<<2,this.outputBlocks=r>>5,this.extraBytes=(31&r)>>3;for(var n=0;n<50;++n)this.s[n]=0}function T(t,e,r){O.call(this,t,e,r)}O.prototype.update=function(t){if(this.finalized)throw new Error("finalize already called");var e,r=typeof t;if("string"!==r){if("object"!==r)throw new Error(i);if(null===t)throw new Error(i);if(c&&t.constructor===ArrayBuffer)t=new Uint8Array(t);else if(!(Array.isArray(t)||c&&ArrayBuffer.isView(t)))throw new Error(i);e=!0}for(var n,o,s=this.blocks,a=this.byteCount,u=t.length,l=this.blockCount,f=0,h=this.s;f<u;){if(this.reset)for(this.reset=!1,s[0]=this.block,n=1;n<l+1;++n)s[n]=0;if(e)for(n=this.start;f<u&&n<a;++f)s[n>>2]|=t[f]<<d[3&n++];else for(n=this.start;f<u&&n<a;++f)(o=t.charCodeAt(f))<128?s[n>>2]|=o<<d[3&n++]:o<2048?(s[n>>2]|=(192|o>>6)<<d[3&n++],s[n>>2]|=(128|63&o)<<d[3&n++]):o<55296||o>=57344?(s[n>>2]|=(224|o>>12)<<d[3&n++],s[n>>2]|=(128|o>>6&63)<<d[3&n++],s[n>>2]|=(128|63&o)<<d[3&n++]):(o=65536+((1023&o)<<10|1023&t.charCodeAt(++f)),s[n>>2]|=(240|o>>18)<<d[3&n++],s[n>>2]|=(128|o>>12&63)<<d[3&n++],s[n>>2]|=(128|o>>6&63)<<d[3&n++],s[n>>2]|=(128|63&o)<<d[3&n++]);if(this.lastByteIndex=n,n>=a){for(this.start=n-a,this.block=s[l],n=0;n<l;++n)h[n]^=s[n];L(h),this.reset=!0}else this.start=n}return this},O.prototype.encode=function(t,e){var r=255&t,n=1,i=[r];for(r=255&(t>>=8);r>0;)i.unshift(r),r=255&(t>>=8),++n;return e?i.push(n):i.unshift(n),this.update(i),i.length},O.prototype.encodeString=function(t){var e,r=typeof t;if("string"!==r){if("object"!==r)throw new Error(i);if(null===t)throw new Error(i);if(c&&t.constructor===ArrayBuffer)t=new Uint8Array(t);else if(!(Array.isArray(t)||c&&ArrayBuffer.isView(t)))throw new Error(i);e=!0}var n=0,o=t.length;if(e)n=o;else for(var s=0;s<t.length;++s){var a=t.charCodeAt(s);a<128?n+=1:a<2048?n+=2:a<55296||a>=57344?n+=3:(a=65536+((1023&a)<<10|1023&t.charCodeAt(++s)),n+=4)}return n+=this.encode(8*n),this.update(t),n},O.prototype.bytepad=function(t,e){for(var r=this.encode(e),n=0;n<t.length;++n)r+=this.encodeString(t[n]);var i=e-r%e,o=[];return o.length=i,this.update(o),this},O.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var t=this.blocks,e=this.lastByteIndex,r=this.blockCount,n=this.s;if(t[e>>2]|=this.padding[3&e],this.lastByteIndex===this.byteCount)for(t[0]=t[r],e=1;e<r+1;++e)t[e]=0;for(t[r-1]|=2147483648,e=0;e<r;++e)n[e]^=t[e];L(n)}},O.prototype.toString=O.prototype.hex=function(){this.finalize();for(var t,e=this.blockCount,r=this.s,n=this.outputBlocks,i=this.extraBytes,o=0,s=0,a="";s<n;){for(o=0;o<e&&s<n;++o,++s)t=r[o],a+=f[t>>4&15]+f[15&t]+f[t>>12&15]+f[t>>8&15]+f[t>>20&15]+f[t>>16&15]+f[t>>28&15]+f[t>>24&15];s%e==0&&(L(r),o=0)}return i&&(t=r[o],a+=f[t>>4&15]+f[15&t],i>1&&(a+=f[t>>12&15]+f[t>>8&15]),i>2&&(a+=f[t>>20&15]+f[t>>16&15])),a},O.prototype.arrayBuffer=function(){this.finalize();var t,e=this.blockCount,r=this.s,n=this.outputBlocks,i=this.extraBytes,o=0,s=0,a=this.outputBits>>3;t=i?new ArrayBuffer(n+1<<2):new ArrayBuffer(a);for(var u=new Uint32Array(t);s<n;){for(o=0;o<e&&s<n;++o,++s)u[s]=r[o];s%e==0&&L(r)}return i&&(u[o]=r[o],t=t.slice(0,a)),t},O.prototype.buffer=O.prototype.arrayBuffer,O.prototype.digest=O.prototype.array=function(){this.finalize();for(var t,e,r=this.blockCount,n=this.s,i=this.outputBlocks,o=this.extraBytes,s=0,a=0,u=[];a<i;){for(s=0;s<r&&a<i;++s,++a)t=a<<2,e=n[s],u[t]=255&e,u[t+1]=e>>8&255,u[t+2]=e>>16&255,u[t+3]=e>>24&255;a%r==0&&L(n)}return o&&(t=a<<2,e=n[s],u[t]=255&e,o>1&&(u[t+1]=e>>8&255),o>2&&(u[t+2]=e>>16&255)),u},T.prototype=new O,T.prototype.finalize=function(){return this.encode(this.outputBits,!0),O.prototype.finalize.call(this)};var L=function(t){var e,r,n,i,o,s,a,u,l,c,f,h,d,m,g,v,y,b,w,E,k,_,x,M,A,N,P,S,C,F,R,I,O,T,L,B,j,U,q,D,V,z,$,G,H,W,K,J,X,Z,Y,Q,tt,et,rt,nt,it,ot,st,at,ut,lt,ct;for(n=0;n<48;n+=2)i=t[0]^t[10]^t[20]^t[30]^t[40],o=t[1]^t[11]^t[21]^t[31]^t[41],s=t[2]^t[12]^t[22]^t[32]^t[42],a=t[3]^t[13]^t[23]^t[33]^t[43],u=t[4]^t[14]^t[24]^t[34]^t[44],l=t[5]^t[15]^t[25]^t[35]^t[45],c=t[6]^t[16]^t[26]^t[36]^t[46],f=t[7]^t[17]^t[27]^t[37]^t[47],e=(h=t[8]^t[18]^t[28]^t[38]^t[48])^(s<<1|a>>>31),r=(d=t[9]^t[19]^t[29]^t[39]^t[49])^(a<<1|s>>>31),t[0]^=e,t[1]^=r,t[10]^=e,t[11]^=r,t[20]^=e,t[21]^=r,t[30]^=e,t[31]^=r,t[40]^=e,t[41]^=r,e=i^(u<<1|l>>>31),r=o^(l<<1|u>>>31),t[2]^=e,t[3]^=r,t[12]^=e,t[13]^=r,t[22]^=e,t[23]^=r,t[32]^=e,t[33]^=r,t[42]^=e,t[43]^=r,e=s^(c<<1|f>>>31),r=a^(f<<1|c>>>31),t[4]^=e,t[5]^=r,t[14]^=e,t[15]^=r,t[24]^=e,t[25]^=r,t[34]^=e,t[35]^=r,t[44]^=e,t[45]^=r,e=u^(h<<1|d>>>31),r=l^(d<<1|h>>>31),t[6]^=e,t[7]^=r,t[16]^=e,t[17]^=r,t[26]^=e,t[27]^=r,t[36]^=e,t[37]^=r,t[46]^=e,t[47]^=r,e=c^(i<<1|o>>>31),r=f^(o<<1|i>>>31),t[8]^=e,t[9]^=r,t[18]^=e,t[19]^=r,t[28]^=e,t[29]^=r,t[38]^=e,t[39]^=r,t[48]^=e,t[49]^=r,m=t[0],g=t[1],W=t[11]<<4|t[10]>>>28,K=t[10]<<4|t[11]>>>28,S=t[20]<<3|t[21]>>>29,C=t[21]<<3|t[20]>>>29,at=t[31]<<9|t[30]>>>23,ut=t[30]<<9|t[31]>>>23,z=t[40]<<18|t[41]>>>14,$=t[41]<<18|t[40]>>>14,T=t[2]<<1|t[3]>>>31,L=t[3]<<1|t[2]>>>31,v=t[13]<<12|t[12]>>>20,y=t[12]<<12|t[13]>>>20,J=t[22]<<10|t[23]>>>22,X=t[23]<<10|t[22]>>>22,F=t[33]<<13|t[32]>>>19,R=t[32]<<13|t[33]>>>19,lt=t[42]<<2|t[43]>>>30,ct=t[43]<<2|t[42]>>>30,et=t[5]<<30|t[4]>>>2,rt=t[4]<<30|t[5]>>>2,B=t[14]<<6|t[15]>>>26,j=t[15]<<6|t[14]>>>26,b=t[25]<<11|t[24]>>>21,w=t[24]<<11|t[25]>>>21,Z=t[34]<<15|t[35]>>>17,Y=t[35]<<15|t[34]>>>17,I=t[45]<<29|t[44]>>>3,O=t[44]<<29|t[45]>>>3,M=t[6]<<28|t[7]>>>4,A=t[7]<<28|t[6]>>>4,nt=t[17]<<23|t[16]>>>9,it=t[16]<<23|t[17]>>>9,U=t[26]<<25|t[27]>>>7,q=t[27]<<25|t[26]>>>7,E=t[36]<<21|t[37]>>>11,k=t[37]<<21|t[36]>>>11,Q=t[47]<<24|t[46]>>>8,tt=t[46]<<24|t[47]>>>8,G=t[8]<<27|t[9]>>>5,H=t[9]<<27|t[8]>>>5,N=t[18]<<20|t[19]>>>12,P=t[19]<<20|t[18]>>>12,ot=t[29]<<7|t[28]>>>25,st=t[28]<<7|t[29]>>>25,D=t[38]<<8|t[39]>>>24,V=t[39]<<8|t[38]>>>24,_=t[48]<<14|t[49]>>>18,x=t[49]<<14|t[48]>>>18,t[0]=m^~v&b,t[1]=g^~y&w,t[10]=M^~N&S,t[11]=A^~P&C,t[20]=T^~B&U,t[21]=L^~j&q,t[30]=G^~W&J,t[31]=H^~K&X,t[40]=et^~nt&ot,t[41]=rt^~it&st,t[2]=v^~b&E,t[3]=y^~w&k,t[12]=N^~S&F,t[13]=P^~C&R,t[22]=B^~U&D,t[23]=j^~q&V,t[32]=W^~J&Z,t[33]=K^~X&Y,t[42]=nt^~ot&at,t[43]=it^~st&ut,t[4]=b^~E&_,t[5]=w^~k&x,t[14]=S^~F&I,t[15]=C^~R&O,t[24]=U^~D&z,t[25]=q^~V&$,t[34]=J^~Z&Q,t[35]=X^~Y&tt,t[44]=ot^~at&lt,t[45]=st^~ut&ct,t[6]=E^~_&m,t[7]=k^~x&g,t[16]=F^~I&M,t[17]=R^~O&A,t[26]=D^~z&T,t[27]=V^~$&L,t[36]=Z^~Q&G,t[37]=Y^~tt&H,t[46]=at^~lt&et,t[47]=ut^~ct&rt,t[8]=_^~m&v,t[9]=x^~g&y,t[18]=I^~M&N,t[19]=O^~A&P,t[28]=z^~T&B,t[29]=$^~L&j,t[38]=Q^~G&W,t[39]=tt^~H&K,t[48]=lt^~et&nt,t[49]=ct^~rt&it,t[0]^=p[n],t[1]^=p[n+1]};if(u)t.exports=A;else{for(P=0;P<N.length;++P)s[N[P]]=A[N[P]];l&&(void 0===(n=function(){return A}.call(e,r,e,t))||(t.exports=n))}}()},746:t=>{function e(t,e){if(!t)throw new Error(e||"Assertion failed")}t.exports=e,e.equal=function(t,e,r){if(t!=e)throw new Error(r||"Assertion failed: "+t+" != "+e)}},921:(t,e)=>{"use strict";var r="function"==typeof Symbol&&Symbol.for,n=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,o=r?Symbol.for("react.fragment"):60107,s=r?Symbol.for("react.strict_mode"):60108,a=r?Symbol.for("react.profiler"):60114,u=r?Symbol.for("react.provider"):60109,l=r?Symbol.for("react.context"):60110,c=r?Symbol.for("react.async_mode"):60111,f=r?Symbol.for("react.concurrent_mode"):60111,h=r?Symbol.for("react.forward_ref"):60112,d=r?Symbol.for("react.suspense"):60113,p=(r&&Symbol.for("react.suspense_list"),r?Symbol.for("react.memo"):60115),m=r?Symbol.for("react.lazy"):60116;r&&Symbol.for("react.block"),r&&Symbol.for("react.fundamental"),r&&Symbol.for("react.responder"),r&&Symbol.for("react.scope");function g(t){if("object"==typeof t&&null!==t){var e=t.$$typeof;switch(e){case n:switch(t=t.type){case c:case f:case o:case a:case s:case d:return t;default:switch(t=t&&t.$$typeof){case l:case h:case m:case p:case u:return t;default:return e}}case i:return e}}}e.isFragment=function(t){return g(t)===o},e.isMemo=function(t){return g(t)===p}},864:(t,e,r)=>{"use strict";t.exports=r(921)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FDbEQsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FDbEQsR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsSUFHaEQvdUYsRUFBSSxDQUNOLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQ3JELEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQ3BELEdBQUksR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQ3JELEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ3BELEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEdBR25EZ3ZGLEVBQUssQ0FDUCxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxFQUNyRCxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxHQUNwRCxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxF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QUkseUJBQXlCLE1BQU1yMEUsRUFBRXdCLEVBQUVyZSxPQUFPa3hGLElBQUkscUJBQXFCLE1BQU03dUUsRUFBRWhFLEVBQUVyZSxPQUFPa3hGLElBQUksa0JBQWtCLE1BQ3BjNzlFLEdBRDRjZ0wsR0FDcGZyZSxPQUFPa3hGLElBQUksdUJBQStCN3lFLEVBQUVyZSxPQUFPa3hGLElBQUksY0FBYyxPQUFNcDBFLEVBQUV1QixFQUFFcmUsT0FBT2t4RixJQUFJLGNBQWMsTUFBUTd5RSxHQUFFcmUsT0FBT2t4RixJQUFJLGVBQXVCN3lFLEdBQUVyZSxPQUFPa3hGLElBQUkscUJBQTZCN3lFLEdBQUVyZSxPQUFPa3hGLElBQUksbUJBQTJCN3lFLEdBQUVyZSxPQUFPa3hGLElBQUksZUFDblAsU0FBU3J3RSxFQUFFekMsR0FBRyxHQUFHLGlCQUFrQkEsR0FBRyxPQUFPQSxFQUFFLENBQUMsSUFBSWlMLEVBQUVqTCxFQUFFNHZGLFNBQVMsT0FBTzNrRixHQUFHLEtBQUtoUixFQUFFLE9BQU8rRixFQUFFQSxFQUFFeGIsTUFBUSxLQUFLNGMsRUFBRSxLQUFLb08sRUFBRSxLQUFLemYsRUFBRSxLQUFLZ1IsRUFBRSxLQUFLNE8sRUFBRSxLQUFLMUwsRUFBRSxPQUFPakUsRUFBRSxRQUFRLE9BQU9BLEVBQUVBLEdBQUdBLEVBQUU0dkYsVUFBWSxLQUFLcnRGLEVBQUUsS0FBSzlELEVBQUUsS0FBS0MsRUFBRSxLQUFLekosRUFBRSxLQUFLa1osRUFBRSxPQUFPbk8sRUFBRSxRQUFRLE9BQU9pTCxHQUFHLEtBQUt5RSxFQUFFLE9BQU96RSxJQUMwSDdwQixFQUFRcWdFLFdBQVcsU0FBU3poRCxHQUFHLE9BQU95QyxFQUFFekMsS0FBS2pRLEdBQzdhM08sRUFBUXdtRCxPQUFPLFNBQVM1bkMsR0FBRyxPQUFPeUMsRUFBRXpDLEtBQUsvSywrQkNWdkM5VCxFQUFPQyxRQUFVLEVBQWpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvcmVnZW5lcmF0b3JSdW50aW1lLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZi5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2xvZ2dlci9saWIuZXNtL2luZGV4LmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9sb2dnZXIvbGliLmVzbS9fdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvcHJvcGVydGllcy9saWIuZXNtL2luZGV4LmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9wcm9wZXJ0aWVzL2xpYi5lc20vX3ZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3Byb3ZpZGVycy9saWIuZXNtL192ZXJzaW9uLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9hYnN0cmFjdC1zaWduZXIvbGliLmVzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWJzdHJhY3Qtc2lnbmVyL2xpYi5lc20vX3ZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2J5dGVzL2xpYi5lc20vX3ZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2J5dGVzL2xpYi5lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2JpZ251bWJlci9saWIuZXNtL2JpZ251bWJlci5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYmlnbnVtYmVyL2xpYi5lc20vX3ZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2tlY2NhazI1Ni9saWIuZXNtL2luZGV4LmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9ybHAvbGliLmVzbS9fdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvcmxwL2xpYi5lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2FkZHJlc3MvbGliLmVzbS9fdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWRkcmVzcy9saWIuZXNtL2luZGV4LmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9oYXNoL2xpYi5lc20vX3ZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3N0cmluZ3MvbGliLmVzbS91dGY4LmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9zdHJpbmdzL2xpYi5lc20vX3ZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2hhc2gvbGliLmVzbS9pZC5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvaGFzaC9saWIuZXNtL3R5cGVkLWRhdGEuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2NvbnN0YW50cy9saWIuZXNtL2JpZ251bWJlcnMuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3NpZ25pbmcta2V5L2xpYi5lc20vZWxsaXB0aWMuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3NpZ25pbmcta2V5L2xpYi5lc20vX3ZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3NpZ25pbmcta2V5L2xpYi5lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3RyYW5zYWN0aW9ucy9saWIuZXNtL192ZXJzaW9uLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC90cmFuc2FjdGlvbnMvbGliLmVzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYmFzZTY0L2xpYi5lc20vYmFzZTY0LmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC93ZWIvbGliLmVzbS9nZXR1cmwuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3dlYi9saWIuZXNtL2luZGV4LmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC93ZWIvbGliLmVzbS9fdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWJzdHJhY3QtcHJvdmlkZXIvbGliLmVzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWJzdHJhY3QtcHJvdmlkZXIvbGliLmVzbS9fdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYmFzZXgvbGliLmVzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3Qvc3RyaW5ncy9saWIuZXNtL2lkbmEuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2hhc2gvbGliLmVzbS9uYW1laGFzaC5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvbmV0d29ya3MvbGliLmVzbS9fdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvbmV0d29ya3MvbGliLmVzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3Qvc2hhMi9saWIuZXNtL3NoYTIuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3NoYTIvbGliLmVzbS9fdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvY29uc3RhbnRzL2xpYi5lc20vYWRkcmVzc2VzLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9wcm92aWRlcnMvbGliLmVzbS9mb3JtYXR0ZXIuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3Byb3ZpZGVycy9saWIuZXNtL2Jhc2UtcHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2NvbnN0YW50cy9saWIuZXNtL2hhc2hlcy5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvcHJvdmlkZXJzL2xpYi5lc20vanNvbi1ycGMtcHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3Byb3ZpZGVycy9saWIuZXNtL3dlYjMtcHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMi5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2suanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHMuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2dldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlU3VwZXIuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdC5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vcmVnZW5lcmF0b3JSdW50aW1lLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL1JlYWN0L3JlbmRlci5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRoSG9sZXMuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5TGlrZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9ub25JdGVyYWJsZVJlc3QuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheUxpbWl0LmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL0RvbS9jYW5Vc2VEb20uanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL3JjLW1vdGlvbi9lcy91dGlsL21vdGlvbi5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvcmMtbW90aW9uL2VzL2ludGVyZmFjZS5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy9ob29rcy91c2VTdGF0ZS5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy9yYWYuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL3JjLW1vdGlvbi9lcy9ob29rcy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9yYy1tb3Rpb24vZXMvaG9va3MvdXNlU3RlcFF1ZXVlLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9yYy1tb3Rpb24vZXMvaG9va3MvdXNlU3RhdHVzLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9yYy1tb3Rpb24vZXMvaG9va3MvdXNlRG9tTW90aW9uRXZlbnRzLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9yYy1tb3Rpb24vZXMvaG9va3MvdXNlTmV4dEZyYW1lLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9yYy1tb3Rpb24vZXMvRG9tV3JhcHBlci5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvcmMtbW90aW9uL2VzL0NTU01vdGlvbi5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy9Eb20vZmluZERPTU5vZGUuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL3JjLXV0aWwvZXMvcmVmLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9yYy1tb3Rpb24vZXMvdXRpbC9kaWZmLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9yYy1tb3Rpb24vZXMvQ1NTTW90aW9uTGlzdC5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvcmMtbm90aWZpY2F0aW9uL2VzL05vdGljZS5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheS5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRob3V0SG9sZXMuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL25vbkl0ZXJhYmxlU3ByZWFkLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9yYy1ub3RpZmljYXRpb24vZXMvdXNlTm90aWZpY2F0aW9uLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9yYy1ub3RpZmljYXRpb24vZXMvTm90aWZpY2F0aW9uLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9yYy1ub3RpZmljYXRpb24vZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zLXN2Zy9lcy9hc24vQ2xvc2VPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMvZXMvY29tcG9uZW50cy9Db250ZXh0LmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9AY3RybC90aW55Y29sb3IvZGlzdC9tb2R1bGUvdXRpbC5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGN0cmwvdGlueWNvbG9yL2Rpc3QvbW9kdWxlL2NvbnZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BjdHJsL3Rpbnljb2xvci9kaXN0L21vZHVsZS9jc3MtY29sb3ItbmFtZXMuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BjdHJsL3Rpbnljb2xvci9kaXN0L21vZHVsZS9mb3JtYXQtaW5wdXQuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2NvbG9ycy9kaXN0L2luZGV4LmVzbS5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy93YXJuaW5nLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL0RvbS9keW5hbWljQ1NTLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy91dGlscy5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMvZXMvY29tcG9uZW50cy9JY29uQmFzZS5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMvZXMvY29tcG9uZW50cy90d29Ub25lUHJpbWFyeUNvbG9yLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy9jb21wb25lbnRzL0FudGRJY29uLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9DbG9zZU91dGxpbmVkLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL0NoZWNrQ2lyY2xlT3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL0NoZWNrQ2lyY2xlT3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zLXN2Zy9lcy9hc24vQ2xvc2VDaXJjbGVPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMvZXMvaWNvbnMvQ2xvc2VDaXJjbGVPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9FeGNsYW1hdGlvbkNpcmNsZU91dGxpbmVkLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9FeGNsYW1hdGlvbkNpcmNsZU91dGxpbmVkLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL0luZm9DaXJjbGVPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMvZXMvaWNvbnMvSW5mb0NpcmNsZU91dGxpbmVkLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL2NvbmZpZy1wcm92aWRlci9jb250ZXh0LmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL0NoaWxkcmVuL3RvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL3JjLWZpZWxkLWZvcm0vZXMvRmllbGRDb250ZXh0LmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9yYy1maWVsZC1mb3JtL2VzL3V0aWxzL3R5cGVVdGlsLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9hc3luYy12YWxpZGF0b3IvZGlzdC13ZWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL3JjLWZpZWxkLWZvcm0vZXMvdXRpbHMvbWVzc2FnZXMuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL3JjLXV0aWwvZXMvdXRpbHMvZ2V0LmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL3V0aWxzL3NldC5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9BcnJheS5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvcmMtZmllbGQtZm9ybS9lcy91dGlscy9jbG9uZURlZXAuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL3JjLWZpZWxkLWZvcm0vZXMvdXRpbHMvdmFsdWVVdGlsLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9yYy1maWVsZC1mb3JtL2VzL3V0aWxzL3ZhbGlkYXRlVXRpbC5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvcmMtZmllbGQtZm9ybS9lcy9GaWVsZC5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvcmMtZmllbGQtZm9ybS9lcy9MaXN0Q29udGV4dC5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvcmMtZmllbGQtZm9ybS9lcy91dGlscy9OYW1lTWFwLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9yYy1maWVsZC1mb3JtL2VzL3VzZUZvcm0uanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL3JjLWZpZWxkLWZvcm0vZXMvdXRpbHMvYXN5bmNVdGlsLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9yYy1maWVsZC1mb3JtL2VzL0Zvcm1Db250ZXh0LmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9yYy1maWVsZC1mb3JtL2VzL0Zvcm0uanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL3JjLWZpZWxkLWZvcm0vZXMvdXNlV2F0Y2guanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL3JjLWZpZWxkLWZvcm0vZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL3JjLWZpZWxkLWZvcm0vZXMvTGlzdC5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvbWVtb2l6ZS1vbmUvZGlzdC9tZW1vaXplLW9uZS5lc20uanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvdGltZS1waWNrZXIvbG9jYWxlL2VuX1VTLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL2RhdGUtcGlja2VyL2xvY2FsZS9lbl9VUy5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvcmMtcGlja2VyL2VzL2xvY2FsZS9lbl9VUy5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9sb2NhbGUvZGVmYXVsdC5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvcmMtcGFnaW5hdGlvbi9lcy9sb2NhbGUvZW5fVVMuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvbW9kYWwvbG9jYWxlLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL2xvY2FsZS1wcm92aWRlci9jb250ZXh0LmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL2xvY2FsZS1wcm92aWRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9sb2NhbGUtcHJvdmlkZXIvZGVmYXVsdC5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9sb2NhbGUtcHJvdmlkZXIvTG9jYWxlUmVjZWl2ZXIuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zLXN2Zy9lcy9hc24vTG9hZGluZ091dGxpbmVkLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9Mb2FkaW5nT3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zLXN2Zy9lcy9hc24vRXhjbGFtYXRpb25DaXJjbGVGaWxsZWQuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL0V4Y2xhbWF0aW9uQ2lyY2xlRmlsbGVkLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL0Nsb3NlQ2lyY2xlRmlsbGVkLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9DbG9zZUNpcmNsZUZpbGxlZC5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9DaGVja0NpcmNsZUZpbGxlZC5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMvZXMvaWNvbnMvQ2hlY2tDaXJjbGVGaWxsZWQuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zLXN2Zy9lcy9hc24vSW5mb0NpcmNsZUZpbGxlZC5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMvZXMvaWNvbnMvSW5mb0NpcmNsZUZpbGxlZC5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9tZXNzYWdlL2luZGV4LmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL21lc3NhZ2UvaG9va3MvdXNlTWVzc2FnZS5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvQGN0cmwvdGlueWNvbG9yL2Rpc3QvbW9kdWxlL2luZGV4LmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL2NvbmZpZy1wcm92aWRlci9jc3NWYXJpYWJsZXMuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvY29uZmlnLXByb3ZpZGVyL0Rpc2FibGVkQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9jb25maWctcHJvdmlkZXIvU2l6ZUNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvY29uZmlnLXByb3ZpZGVyL2luZGV4LmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL2hvb2tzL3VzZU1lbW8uanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvbm90aWZpY2F0aW9uL2luZGV4LmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL25vdGlmaWNhdGlvbi9ob29rcy91c2VOb3RpZmljYXRpb24uanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL2JlY2gzMi9pbmRleC5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvYm4uanMvbGliL2JuLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9obWFjLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3JpcGVtZC5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhLzEuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhLzIyNC5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvMjU2LmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS8zODQuanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhLzUxMi5qcyIsIndlYnBhY2s6Ly9jb3NEZXNpZ24vLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvY29tbW9uLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3V0aWxzLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9qcy1zaGEzL3NyYy9zaGEzLmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9taW5pbWFsaXN0aWMtYXNzZXJ0L2luZGV4LmpzIiwid2VicGFjazovL2Nvc0Rlc2lnbi8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vY29zRGVzaWduLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfdHlwZW9mID0gcmVxdWlyZShcIi4vdHlwZW9mLmpzXCIpW1wiZGVmYXVsdFwiXTtcblxuZnVuY3Rpb24gX3JlZ2VuZXJhdG9yUnVudGltZSgpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIC8qISByZWdlbmVyYXRvci1ydW50aW1lIC0tIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLiAtLSBsaWNlbnNlIChNSVQpOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvYmxvYi9tYWluL0xJQ0VOU0UgKi9cblxuICBtb2R1bGUuZXhwb3J0cyA9IF9yZWdlbmVyYXRvclJ1bnRpbWUgPSBmdW5jdGlvbiBfcmVnZW5lcmF0b3JSdW50aW1lKCkge1xuICAgIHJldHVybiBleHBvcnRzO1xuICB9LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7XG4gIHZhciBleHBvcnRzID0ge30sXG4gICAgICBPcCA9IE9iamVjdC5wcm90b3R5cGUsXG4gICAgICBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eSxcbiAgICAgICRTeW1ib2wgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCA/IFN5bWJvbCA6IHt9LFxuICAgICAgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiLFxuICAgICAgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiLFxuICAgICAgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIGRlZmluZShvYmosIGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiAhMCxcbiAgICAgIGNvbmZpZ3VyYWJsZTogITAsXG4gICAgICB3cml0YWJsZTogITBcbiAgICB9KSwgb2JqW2tleV07XG4gIH1cblxuICB0cnkge1xuICAgIGRlZmluZSh7fSwgXCJcIik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGRlZmluZSA9IGZ1bmN0aW9uIGRlZmluZShvYmosIGtleSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3IsXG4gICAgICAgIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKSxcbiAgICAgICAgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcbiAgICByZXR1cm4gZ2VuZXJhdG9yLl9pbnZva2UgPSBmdW5jdGlvbiAoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgICAgdmFyIHN0YXRlID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChtZXRob2QsIGFyZykge1xuICAgICAgICBpZiAoXCJleGVjdXRpbmdcIiA9PT0gc3RhdGUpIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG5cbiAgICAgICAgaWYgKFwiY29tcGxldGVkXCIgPT09IHN0YXRlKSB7XG4gICAgICAgICAgaWYgKFwidGhyb3dcIiA9PT0gbWV0aG9kKSB0aHJvdyBhcmc7XG4gICAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29udGV4dC5tZXRob2QgPSBtZXRob2QsIGNvbnRleHQuYXJnID0gYXJnOzspIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuXG4gICAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoXCJuZXh0XCIgPT09IGNvbnRleHQubWV0aG9kKSBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7ZWxzZSBpZiAoXCJ0aHJvd1wiID09PSBjb250ZXh0Lm1ldGhvZCkge1xuICAgICAgICAgICAgaWYgKFwic3VzcGVuZGVkU3RhcnRcIiA9PT0gc3RhdGUpIHRocm93IHN0YXRlID0gXCJjb21wbGV0ZWRcIiwgY29udGV4dC5hcmc7XG4gICAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcbiAgICAgICAgICB9IGVsc2UgXCJyZXR1cm5cIiA9PT0gY29udGV4dC5tZXRob2QgJiYgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICAgIHN0YXRlID0gXCJleGVjdXRpbmdcIjtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoXCJub3JtYWxcIiA9PT0gcmVjb3JkLnR5cGUpIHtcbiAgICAgICAgICAgIGlmIChzdGF0ZSA9IGNvbnRleHQuZG9uZSA/IFwiY29tcGxldGVkXCIgOiBcInN1c3BlbmRlZFlpZWxkXCIsIHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBcInRocm93XCIgPT09IHJlY29yZC50eXBlICYmIChzdGF0ZSA9IFwiY29tcGxldGVkXCIsIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiLCBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmcpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0oaW5uZXJGbiwgc2VsZiwgY29udGV4dCksIGdlbmVyYXRvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBcIm5vcm1hbFwiLFxuICAgICAgICBhcmc6IGZuLmNhbGwob2JqLCBhcmcpXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJ0aHJvd1wiLFxuICAgICAgICBhcmc6IGVyclxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgZGVmaW5lKEl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mLFxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJiBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpICYmIChJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID0gR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgICBkZWZpbmUocHJvdG90eXBlLCBtZXRob2QsIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yLCBQcm9taXNlSW1wbCkge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcblxuICAgICAgaWYgKFwidGhyb3dcIiAhPT0gcmVjb3JkLnR5cGUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmcsXG4gICAgICAgICAgICB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgcmV0dXJuIHZhbHVlICYmIFwib2JqZWN0XCIgPT0gX3R5cGVvZih2YWx1ZSkgJiYgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSA/IFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KSA6IFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24gKHVud3JhcHBlZCkge1xuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZCwgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIHRoaXMuX2ludm9rZSA9IGZ1bmN0aW9uIChtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUltcGwoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPSBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZywgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcpIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG5cbiAgICBpZiAodW5kZWZpbmVkID09PSBtZXRob2QpIHtcbiAgICAgIGlmIChjb250ZXh0LmRlbGVnYXRlID0gbnVsbCwgXCJ0aHJvd1wiID09PSBjb250ZXh0Lm1ldGhvZCkge1xuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0gJiYgKGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIiwgY29udGV4dC5hcmcgPSB1bmRlZmluZWQsIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpLCBcInRocm93XCIgPT09IGNvbnRleHQubWV0aG9kKSkgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiLCBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuICAgIGlmIChcInRocm93XCIgPT09IHJlY29yZC50eXBlKSByZXR1cm4gY29udGV4dC5tZXRob2QgPSBcInRocm93XCIsIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZywgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGwsIENvbnRpbnVlU2VudGluZWw7XG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuICAgIHJldHVybiBpbmZvID8gaW5mby5kb25lID8gKGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlLCBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jLCBcInJldHVyblwiICE9PSBjb250ZXh0Lm1ldGhvZCAmJiAoY29udGV4dC5tZXRob2QgPSBcIm5leHRcIiwgY29udGV4dC5hcmcgPSB1bmRlZmluZWQpLCBjb250ZXh0LmRlbGVnYXRlID0gbnVsbCwgQ29udGludWVTZW50aW5lbCkgOiBpbmZvIDogKGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiLCBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKSwgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGwsIENvbnRpbnVlU2VudGluZWwpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7XG4gICAgICB0cnlMb2M6IGxvY3NbMF1cbiAgICB9O1xuICAgIDEgaW4gbG9jcyAmJiAoZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdKSwgMiBpbiBsb2NzICYmIChlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXSwgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdKSwgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIiwgZGVsZXRlIHJlY29yZC5hcmcsIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3tcbiAgICAgIHRyeUxvYzogXCJyb290XCJcbiAgICB9XSwgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpLCB0aGlzLnJlc2V0KCEwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICBpZiAoXCJmdW5jdGlvblwiID09IHR5cGVvZiBpdGVyYWJsZS5uZXh0KSByZXR1cm4gaXRlcmFibGU7XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLFxuICAgICAgICAgICAgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgZm9yICg7ICsraSA8IGl0ZXJhYmxlLmxlbmd0aDspIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHJldHVybiBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV0sIG5leHQuZG9uZSA9ICExLCBuZXh0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBuZXh0LnZhbHVlID0gdW5kZWZpbmVkLCBuZXh0LmRvbmUgPSAhMCwgbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgbmV4dDogZG9uZVJlc3VsdFxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgZG9uZTogITBcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBkZWZpbmUoR3AsIFwiY29uc3RydWN0b3JcIiwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpLCBkZWZpbmUoR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIFwiY29uc3RydWN0b3JcIiwgR2VuZXJhdG9yRnVuY3Rpb24pLCBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRlZmluZShHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yRnVuY3Rpb25cIiksIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uIChnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZ2VuRnVuICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gISFjdG9yICYmIChjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIgPT09IChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkpO1xuICB9LCBleHBvcnRzLm1hcmsgPSBmdW5jdGlvbiAoZ2VuRnVuKSB7XG4gICAgcmV0dXJuIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKSA6IChnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIGRlZmluZShnZW5GdW4sIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIpKSwgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApLCBnZW5GdW47XG4gIH0sIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbiAoYXJnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIF9fYXdhaXQ6IGFyZ1xuICAgIH07XG4gIH0sIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSksIGRlZmluZShBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSwgYXN5bmNJdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KSwgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvciwgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uIChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCwgUHJvbWlzZUltcGwpIHtcbiAgICB2b2lkIDAgPT09IFByb21pc2VJbXBsICYmIChQcm9taXNlSW1wbCA9IFByb21pc2UpO1xuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3Iod3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCksIFByb21pc2VJbXBsKTtcbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pID8gaXRlciA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgfSk7XG4gIH0sIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCksIGRlZmluZShHcCwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yXCIpLCBkZWZpbmUoR3AsIGl0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pLCBkZWZpbmUoR3AsIFwidG9TdHJpbmdcIiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9KSwgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG5cbiAgICByZXR1cm4ga2V5cy5yZXZlcnNlKCksIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICBmb3IgKDsga2V5cy5sZW5ndGg7KSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkgcmV0dXJuIG5leHQudmFsdWUgPSBrZXksIG5leHQuZG9uZSA9ICExLCBuZXh0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV4dC5kb25lID0gITAsIG5leHQ7XG4gICAgfTtcbiAgfSwgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXMsIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuICAgIHJlc2V0OiBmdW5jdGlvbiByZXNldChza2lwVGVtcFJlc2V0KSB7XG4gICAgICBpZiAodGhpcy5wcmV2ID0gMCwgdGhpcy5uZXh0ID0gMCwgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZCwgdGhpcy5kb25lID0gITEsIHRoaXMuZGVsZWdhdGUgPSBudWxsLCB0aGlzLm1ldGhvZCA9IFwibmV4dFwiLCB0aGlzLmFyZyA9IHVuZGVmaW5lZCwgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSksICFza2lwVGVtcFJlc2V0KSBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgXCJ0XCIgPT09IG5hbWUuY2hhckF0KDApICYmIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmICFpc05hTigrbmFtZS5zbGljZSgxKSkgJiYgKHRoaXNbbmFtZV0gPSB1bmRlZmluZWQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc3RvcDogZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgIHRoaXMuZG9uZSA9ICEwO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSB0aGlzLnRyeUVudHJpZXNbMF0uY29tcGxldGlvbjtcbiAgICAgIGlmIChcInRocm93XCIgPT09IHJvb3RSZWNvcmQudHlwZSkgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uIGRpc3BhdGNoRXhjZXB0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuXG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmV0dXJuIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiLCByZWNvcmQuYXJnID0gZXhjZXB0aW9uLCBjb250ZXh0Lm5leHQgPSBsb2MsIGNhdWdodCAmJiAoY29udGV4dC5tZXRob2QgPSBcIm5leHRcIiwgY29udGV4dC5hcmcgPSB1bmRlZmluZWQpLCAhIWNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV0sXG4gICAgICAgICAgICByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICBpZiAoXCJyb290XCIgPT09IGVudHJ5LnRyeUxvYykgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpLFxuICAgICAgICAgICAgICBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsICEwKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgITApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc0ZpbmFsbHkpIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uIGFicnVwdCh0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiYgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmaW5hbGx5RW50cnkgJiYgKFwiYnJlYWtcIiA9PT0gdHlwZSB8fCBcImNvbnRpbnVlXCIgPT09IHR5cGUpICYmIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYyAmJiAoZmluYWxseUVudHJ5ID0gbnVsbCk7XG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJldHVybiByZWNvcmQudHlwZSA9IHR5cGUsIHJlY29yZC5hcmcgPSBhcmcsIGZpbmFsbHlFbnRyeSA/ICh0aGlzLm1ldGhvZCA9IFwibmV4dFwiLCB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYywgQ29udGludWVTZW50aW5lbCkgOiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcbiAgICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKFwidGhyb3dcIiA9PT0gcmVjb3JkLnR5cGUpIHRocm93IHJlY29yZC5hcmc7XG4gICAgICByZXR1cm4gXCJicmVha1wiID09PSByZWNvcmQudHlwZSB8fCBcImNvbnRpbnVlXCIgPT09IHJlY29yZC50eXBlID8gdGhpcy5uZXh0ID0gcmVjb3JkLmFyZyA6IFwicmV0dXJuXCIgPT09IHJlY29yZC50eXBlID8gKHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZywgdGhpcy5tZXRob2QgPSBcInJldHVyblwiLCB0aGlzLm5leHQgPSBcImVuZFwiKSA6IFwibm9ybWFsXCIgPT09IHJlY29yZC50eXBlICYmIGFmdGVyTG9jICYmICh0aGlzLm5leHQgPSBhZnRlckxvYyksIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcbiAgICBmaW5pc2g6IGZ1bmN0aW9uIGZpbmlzaChmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHJldHVybiB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKSwgcmVzZXRUcnlFbnRyeShlbnRyeSksIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG4gICAgfSxcbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uIF9jYXRjaCh0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgICAgaWYgKFwidGhyb3dcIiA9PT0gcmVjb3JkLnR5cGUpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbiBkZWxlZ2F0ZVlpZWxkKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH0sIFwibmV4dFwiID09PSB0aGlzLm1ldGhvZCAmJiAodGhpcy5hcmcgPSB1bmRlZmluZWQpLCBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfSwgZXhwb3J0cztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfcmVnZW5lcmF0b3JSdW50aW1lLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiAobW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICB9IDogZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gIH0sIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cyksIF90eXBlb2Yob2JqKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiLy8gVE9ETyhCYWJlbCA4KTogUmVtb3ZlIHRoaXMgZmlsZS5cblxudmFyIHJ1bnRpbWUgPSByZXF1aXJlKFwiLi4vaGVscGVycy9yZWdlbmVyYXRvclJ1bnRpbWVcIikoKTtcbm1vZHVsZS5leHBvcnRzID0gcnVudGltZTtcblxuLy8gQ29waWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2Jsb2IvbWFpbi9wYWNrYWdlcy9ydW50aW1lL3J1bnRpbWUuanMjTDczNj1cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09IFwib2JqZWN0XCIpIHtcbiAgICBnbG9iYWxUaGlzLnJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG4gIH0gZWxzZSB7XG4gICAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbiAgfVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5sZXQgX3Blcm1hbmVudENlbnNvckVycm9ycyA9IGZhbHNlO1xubGV0IF9jZW5zb3JFcnJvcnMgPSBmYWxzZTtcbmNvbnN0IExvZ0xldmVscyA9IHsgZGVidWc6IDEsIFwiZGVmYXVsdFwiOiAyLCBpbmZvOiAyLCB3YXJuaW5nOiAzLCBlcnJvcjogNCwgb2ZmOiA1IH07XG5sZXQgX2xvZ0xldmVsID0gTG9nTGV2ZWxzW1wiZGVmYXVsdFwiXTtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xubGV0IF9nbG9iYWxMb2dnZXIgPSBudWxsO1xuZnVuY3Rpb24gX2NoZWNrTm9ybWFsaXplKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG1pc3NpbmcgPSBbXTtcbiAgICAgICAgLy8gTWFrZSBzdXJlIGFsbCBmb3JtcyBvZiBub3JtYWxpemF0aW9uIGFyZSBzdXBwb3J0ZWRcbiAgICAgICAgW1wiTkZEXCIsIFwiTkZDXCIsIFwiTkZLRFwiLCBcIk5GS0NcIl0uZm9yRWFjaCgoZm9ybSkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoXCJ0ZXN0XCIubm9ybWFsaXplKGZvcm0pICE9PSBcInRlc3RcIikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJiYWQgbm9ybWFsaXplXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBtaXNzaW5nLnB1c2goZm9ybSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAobWlzc2luZy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm1pc3NpbmcgXCIgKyBtaXNzaW5nLmpvaW4oXCIsIFwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFN0cmluZy5mcm9tQ2hhckNvZGUoMHhlOSkubm9ybWFsaXplKFwiTkZEXCIpICE9PSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4NjUsIDB4MDMwMSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImJyb2tlbiBpbXBsZW1lbnRhdGlvblwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yLm1lc3NhZ2U7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuY29uc3QgX25vcm1hbGl6ZUVycm9yID0gX2NoZWNrTm9ybWFsaXplKCk7XG5leHBvcnQgdmFyIExvZ0xldmVsO1xuKGZ1bmN0aW9uIChMb2dMZXZlbCkge1xuICAgIExvZ0xldmVsW1wiREVCVUdcIl0gPSBcIkRFQlVHXCI7XG4gICAgTG9nTGV2ZWxbXCJJTkZPXCJdID0gXCJJTkZPXCI7XG4gICAgTG9nTGV2ZWxbXCJXQVJOSU5HXCJdID0gXCJXQVJOSU5HXCI7XG4gICAgTG9nTGV2ZWxbXCJFUlJPUlwiXSA9IFwiRVJST1JcIjtcbiAgICBMb2dMZXZlbFtcIk9GRlwiXSA9IFwiT0ZGXCI7XG59KShMb2dMZXZlbCB8fCAoTG9nTGV2ZWwgPSB7fSkpO1xuZXhwb3J0IHZhciBFcnJvckNvZGU7XG4oZnVuY3Rpb24gKEVycm9yQ29kZSkge1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBHZW5lcmljIEVycm9yc1xuICAgIC8vIFVua25vd24gRXJyb3JcbiAgICBFcnJvckNvZGVbXCJVTktOT1dOX0VSUk9SXCJdID0gXCJVTktOT1dOX0VSUk9SXCI7XG4gICAgLy8gTm90IEltcGxlbWVudGVkXG4gICAgRXJyb3JDb2RlW1wiTk9UX0lNUExFTUVOVEVEXCJdID0gXCJOT1RfSU1QTEVNRU5URURcIjtcbiAgICAvLyBVbnN1cHBvcnRlZCBPcGVyYXRpb25cbiAgICAvLyAgIC0gb3BlcmF0aW9uXG4gICAgRXJyb3JDb2RlW1wiVU5TVVBQT1JURURfT1BFUkFUSU9OXCJdID0gXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIjtcbiAgICAvLyBOZXR3b3JrIEVycm9yIChpLmUuIEV0aGVyZXVtIE5ldHdvcmssIHN1Y2ggYXMgYW4gaW52YWxpZCBjaGFpbiBJRClcbiAgICAvLyAgIC0gZXZlbnQgKFwibm9OZXR3b3JrXCIgaXMgbm90IHJlLXRocm93biBpbiBwcm92aWRlci5yZWFkeTsgb3RoZXJ3aXNlIHRocm93bilcbiAgICBFcnJvckNvZGVbXCJORVRXT1JLX0VSUk9SXCJdID0gXCJORVRXT1JLX0VSUk9SXCI7XG4gICAgLy8gU29tZSBzb3J0IG9mIGJhZCByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXJcbiAgICBFcnJvckNvZGVbXCJTRVJWRVJfRVJST1JcIl0gPSBcIlNFUlZFUl9FUlJPUlwiO1xuICAgIC8vIFRpbWVvdXRcbiAgICBFcnJvckNvZGVbXCJUSU1FT1VUXCJdID0gXCJUSU1FT1VUXCI7XG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIE9wZXJhdGlvbmFsICBFcnJvcnNcbiAgICAvLyBCdWZmZXIgT3ZlcnJ1blxuICAgIEVycm9yQ29kZVtcIkJVRkZFUl9PVkVSUlVOXCJdID0gXCJCVUZGRVJfT1ZFUlJVTlwiO1xuICAgIC8vIE51bWVyaWMgRmF1bHRcbiAgICAvLyAgIC0gb3BlcmF0aW9uOiB0aGUgb3BlcmF0aW9uIGJlaW5nIGV4ZWN1dGVkXG4gICAgLy8gICAtIGZhdWx0OiB0aGUgcmVhc29uIHRoaXMgZmF1bHRlZFxuICAgIEVycm9yQ29kZVtcIk5VTUVSSUNfRkFVTFRcIl0gPSBcIk5VTUVSSUNfRkFVTFRcIjtcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gQXJndW1lbnQgRXJyb3JzXG4gICAgLy8gTWlzc2luZyBuZXcgb3BlcmF0b3IgdG8gYW4gb2JqZWN0XG4gICAgLy8gIC0gbmFtZTogVGhlIG5hbWUgb2YgdGhlIGNsYXNzXG4gICAgRXJyb3JDb2RlW1wiTUlTU0lOR19ORVdcIl0gPSBcIk1JU1NJTkdfTkVXXCI7XG4gICAgLy8gSW52YWxpZCBhcmd1bWVudCAoZS5nLiB2YWx1ZSBpcyBpbmNvbXBhdGlibGUgd2l0aCB0eXBlKSB0byBhIGZ1bmN0aW9uOlxuICAgIC8vICAgLSBhcmd1bWVudDogVGhlIGFyZ3VtZW50IG5hbWUgdGhhdCB3YXMgaW52YWxpZFxuICAgIC8vICAgLSB2YWx1ZTogVGhlIHZhbHVlIG9mIHRoZSBhcmd1bWVudFxuICAgIEVycm9yQ29kZVtcIklOVkFMSURfQVJHVU1FTlRcIl0gPSBcIklOVkFMSURfQVJHVU1FTlRcIjtcbiAgICAvLyBNaXNzaW5nIGFyZ3VtZW50IHRvIGEgZnVuY3Rpb246XG4gICAgLy8gICAtIGNvdW50OiBUaGUgbnVtYmVyIG9mIGFyZ3VtZW50cyByZWNlaXZlZFxuICAgIC8vICAgLSBleHBlY3RlZENvdW50OiBUaGUgbnVtYmVyIG9mIGFyZ3VtZW50cyBleHBlY3RlZFxuICAgIEVycm9yQ29kZVtcIk1JU1NJTkdfQVJHVU1FTlRcIl0gPSBcIk1JU1NJTkdfQVJHVU1FTlRcIjtcbiAgICAvLyBUb28gbWFueSBhcmd1bWVudHNcbiAgICAvLyAgIC0gY291bnQ6IFRoZSBudW1iZXIgb2YgYXJndW1lbnRzIHJlY2VpdmVkXG4gICAgLy8gICAtIGV4cGVjdGVkQ291bnQ6IFRoZSBudW1iZXIgb2YgYXJndW1lbnRzIGV4cGVjdGVkXG4gICAgRXJyb3JDb2RlW1wiVU5FWFBFQ1RFRF9BUkdVTUVOVFwiXSA9IFwiVU5FWFBFQ1RFRF9BUkdVTUVOVFwiO1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBCbG9ja2NoYWluIEVycm9yc1xuICAgIC8vIENhbGwgZXhjZXB0aW9uXG4gICAgLy8gIC0gdHJhbnNhY3Rpb246IHRoZSB0cmFuc2FjdGlvblxuICAgIC8vICAtIGFkZHJlc3M/OiB0aGUgY29udHJhY3QgYWRkcmVzc1xuICAgIC8vICAtIGFyZ3M/OiBUaGUgYXJndW1lbnRzIHBhc3NlZCBpbnRvIHRoZSBmdW5jdGlvblxuICAgIC8vICAtIG1ldGhvZD86IFRoZSBTb2xpZGl0eSBtZXRob2Qgc2lnbmF0dXJlXG4gICAgLy8gIC0gZXJyb3JTaWduYXR1cmU/OiBUaGUgRUlQODQ4IGVycm9yIHNpZ25hdHVyZVxuICAgIC8vICAtIGVycm9yQXJncz86IFRoZSBFSVA4NDggZXJyb3IgcGFyYW1ldGVyc1xuICAgIC8vICAtIHJlYXNvbjogVGhlIHJlYXNvbiAob25seSBmb3IgRUlQODQ4IFwiRXJyb3Ioc3RyaW5nKVwiKVxuICAgIEVycm9yQ29kZVtcIkNBTExfRVhDRVBUSU9OXCJdID0gXCJDQUxMX0VYQ0VQVElPTlwiO1xuICAgIC8vIEluc3VmZmljaWVudCBmdW5kcyAoPCB2YWx1ZSArIGdhc0xpbWl0ICogZ2FzUHJpY2UpXG4gICAgLy8gICAtIHRyYW5zYWN0aW9uOiB0aGUgdHJhbnNhY3Rpb24gYXR0ZW1wdGVkXG4gICAgRXJyb3JDb2RlW1wiSU5TVUZGSUNJRU5UX0ZVTkRTXCJdID0gXCJJTlNVRkZJQ0lFTlRfRlVORFNcIjtcbiAgICAvLyBOb25jZSBoYXMgYWxyZWFkeSBiZWVuIHVzZWRcbiAgICAvLyAgIC0gdHJhbnNhY3Rpb246IHRoZSB0cmFuc2FjdGlvbiBhdHRlbXB0ZWRcbiAgICBFcnJvckNvZGVbXCJOT05DRV9FWFBJUkVEXCJdID0gXCJOT05DRV9FWFBJUkVEXCI7XG4gICAgLy8gVGhlIHJlcGxhY2VtZW50IGZlZSBmb3IgdGhlIHRyYW5zYWN0aW9uIGlzIHRvbyBsb3dcbiAgICAvLyAgIC0gdHJhbnNhY3Rpb246IHRoZSB0cmFuc2FjdGlvbiBhdHRlbXB0ZWRcbiAgICBFcnJvckNvZGVbXCJSRVBMQUNFTUVOVF9VTkRFUlBSSUNFRFwiXSA9IFwiUkVQTEFDRU1FTlRfVU5ERVJQUklDRURcIjtcbiAgICAvLyBUaGUgZ2FzIGxpbWl0IGNvdWxkIG5vdCBiZSBlc3RpbWF0ZWRcbiAgICAvLyAgIC0gdHJhbnNhY3Rpb246IHRoZSB0cmFuc2FjdGlvbiBwYXNzZWQgdG8gZXN0aW1hdGVHYXNcbiAgICBFcnJvckNvZGVbXCJVTlBSRURJQ1RBQkxFX0dBU19MSU1JVFwiXSA9IFwiVU5QUkVESUNUQUJMRV9HQVNfTElNSVRcIjtcbiAgICAvLyBUaGUgdHJhbnNhY3Rpb24gd2FzIHJlcGxhY2VkIGJ5IG9uZSB3aXRoIGEgaGlnaGVyIGdhcyBwcmljZVxuICAgIC8vICAgLSByZWFzb246IFwiY2FuY2VsbGVkXCIsIFwicmVwbGFjZWRcIiBvciBcInJlcHJpY2VkXCJcbiAgICAvLyAgIC0gY2FuY2VsbGVkOiB0cnVlIGlmIHJlYXNvbiA9PSBcImNhbmNlbGxlZFwiIG9yIHJlYXNvbiA9PSBcInJlcGxhY2VkXCIpXG4gICAgLy8gICAtIGhhc2g6IG9yaWdpbmFsIHRyYW5zYWN0aW9uIGhhc2hcbiAgICAvLyAgIC0gcmVwbGFjZW1lbnQ6IHRoZSBmdWxsIFRyYW5zYWN0aW9uc1Jlc3BvbnNlIGZvciB0aGUgcmVwbGFjZW1lbnRcbiAgICAvLyAgIC0gcmVjZWlwdDogdGhlIHJlY2VpcHQgb2YgdGhlIHJlcGxhY2VtZW50XG4gICAgRXJyb3JDb2RlW1wiVFJBTlNBQ1RJT05fUkVQTEFDRURcIl0gPSBcIlRSQU5TQUNUSU9OX1JFUExBQ0VEXCI7XG59KShFcnJvckNvZGUgfHwgKEVycm9yQ29kZSA9IHt9KSk7XG47XG5jb25zdCBIRVggPSBcIjAxMjM0NTY3ODlhYmNkZWZcIjtcbmV4cG9ydCBjbGFzcyBMb2dnZXIge1xuICAgIGNvbnN0cnVjdG9yKHZlcnNpb24pIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidmVyc2lvblwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZlcnNpb24sXG4gICAgICAgICAgICB3cml0YWJsZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9sb2cobG9nTGV2ZWwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgbGV2ZWwgPSBsb2dMZXZlbC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoTG9nTGV2ZWxzW2xldmVsXSA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgbG9nIGxldmVsIG5hbWVcIiwgXCJsb2dMZXZlbFwiLCBsb2dMZXZlbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9sb2dMZXZlbCA+IExvZ0xldmVsc1tsZXZlbF0pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBhcmdzKTtcbiAgICB9XG4gICAgZGVidWcoLi4uYXJncykge1xuICAgICAgICB0aGlzLl9sb2coTG9nZ2VyLmxldmVscy5ERUJVRywgYXJncyk7XG4gICAgfVxuICAgIGluZm8oLi4uYXJncykge1xuICAgICAgICB0aGlzLl9sb2coTG9nZ2VyLmxldmVscy5JTkZPLCBhcmdzKTtcbiAgICB9XG4gICAgd2FybiguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX2xvZyhMb2dnZXIubGV2ZWxzLldBUk5JTkcsIGFyZ3MpO1xuICAgIH1cbiAgICBtYWtlRXJyb3IobWVzc2FnZSwgY29kZSwgcGFyYW1zKSB7XG4gICAgICAgIC8vIEVycm9ycyBhcmUgYmVpbmcgY2Vuc29yZWRcbiAgICAgICAgaWYgKF9jZW5zb3JFcnJvcnMpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1ha2VFcnJvcihcImNlbnNvcmVkIGVycm9yXCIsIGNvZGUsIHt9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNvZGUpIHtcbiAgICAgICAgICAgIGNvZGUgPSBMb2dnZXIuZXJyb3JzLlVOS05PV05fRVJST1I7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFwYXJhbXMpIHtcbiAgICAgICAgICAgIHBhcmFtcyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VEZXRhaWxzID0gW107XG4gICAgICAgIE9iamVjdC5rZXlzKHBhcmFtcykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBoZXggPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZXggKz0gSEVYW3ZhbHVlW2ldID4+IDRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGV4ICs9IEhFWFt2YWx1ZVtpXSAmIDB4MGZdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VEZXRhaWxzLnB1c2goa2V5ICsgXCI9VWludDhBcnJheSgweFwiICsgaGV4ICsgXCIpXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZURldGFpbHMucHVzaChrZXkgKyBcIj1cIiArIEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZURldGFpbHMucHVzaChrZXkgKyBcIj1cIiArIEpTT04uc3RyaW5naWZ5KHBhcmFtc1trZXldLnRvU3RyaW5nKCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIG1lc3NhZ2VEZXRhaWxzLnB1c2goYGNvZGU9JHtjb2RlfWApO1xuICAgICAgICBtZXNzYWdlRGV0YWlscy5wdXNoKGB2ZXJzaW9uPSR7dGhpcy52ZXJzaW9ufWApO1xuICAgICAgICBjb25zdCByZWFzb24gPSBtZXNzYWdlO1xuICAgICAgICBsZXQgdXJsID0gXCJcIjtcbiAgICAgICAgc3dpdGNoIChjb2RlKSB7XG4gICAgICAgICAgICBjYXNlIEVycm9yQ29kZS5OVU1FUklDX0ZBVUxUOiB7XG4gICAgICAgICAgICAgICAgdXJsID0gXCJOVU1FUklDX0ZBVUxUXCI7XG4gICAgICAgICAgICAgICAgY29uc3QgZmF1bHQgPSBtZXNzYWdlO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZmF1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm92ZXJmbG93XCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ1bmRlcmZsb3dcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImRpdmlzaW9uLWJ5LXplcm9cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCArPSBcIi1cIiArIGZhdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJuZWdhdGl2ZS1wb3dlclwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibmVnYXRpdmUtd2lkdGhcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCArPSBcIi11bnN1cHBvcnRlZFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ1bmJvdW5kLWJpdHdpc2UtcmVzdWx0XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmwgKz0gXCItdW5ib3VuZC1yZXN1bHRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgRXJyb3JDb2RlLkNBTExfRVhDRVBUSU9OOlxuICAgICAgICAgICAgY2FzZSBFcnJvckNvZGUuSU5TVUZGSUNJRU5UX0ZVTkRTOlxuICAgICAgICAgICAgY2FzZSBFcnJvckNvZGUuTUlTU0lOR19ORVc6XG4gICAgICAgICAgICBjYXNlIEVycm9yQ29kZS5OT05DRV9FWFBJUkVEOlxuICAgICAgICAgICAgY2FzZSBFcnJvckNvZGUuUkVQTEFDRU1FTlRfVU5ERVJQUklDRUQ6XG4gICAgICAgICAgICBjYXNlIEVycm9yQ29kZS5UUkFOU0FDVElPTl9SRVBMQUNFRDpcbiAgICAgICAgICAgIGNhc2UgRXJyb3JDb2RlLlVOUFJFRElDVEFCTEVfR0FTX0xJTUlUOlxuICAgICAgICAgICAgICAgIHVybCA9IGNvZGU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVybCkge1xuICAgICAgICAgICAgbWVzc2FnZSArPSBcIiBbIFNlZTogaHR0cHM6L1xcL2xpbmtzLmV0aGVycy5vcmcvdjUtZXJyb3JzLVwiICsgdXJsICsgXCIgXVwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlRGV0YWlscy5sZW5ndGgpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgKz0gXCIgKFwiICsgbWVzc2FnZURldGFpbHMuam9pbihcIiwgXCIpICsgXCIpXCI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQFRPRE86IEFueT8/XG4gICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgICBlcnJvci5yZWFzb24gPSByZWFzb247XG4gICAgICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICAgICAgICBPYmplY3Qua2V5cyhwYXJhbXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgZXJyb3Jba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgIH1cbiAgICB0aHJvd0Vycm9yKG1lc3NhZ2UsIGNvZGUsIHBhcmFtcykge1xuICAgICAgICB0aHJvdyB0aGlzLm1ha2VFcnJvcihtZXNzYWdlLCBjb2RlLCBwYXJhbXMpO1xuICAgIH1cbiAgICB0aHJvd0FyZ3VtZW50RXJyb3IobWVzc2FnZSwgbmFtZSwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGhyb3dFcnJvcihtZXNzYWdlLCBMb2dnZXIuZXJyb3JzLklOVkFMSURfQVJHVU1FTlQsIHtcbiAgICAgICAgICAgIGFyZ3VtZW50OiBuYW1lLFxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3NlcnQoY29uZGl0aW9uLCBtZXNzYWdlLCBjb2RlLCBwYXJhbXMpIHtcbiAgICAgICAgaWYgKCEhY29uZGl0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50aHJvd0Vycm9yKG1lc3NhZ2UsIGNvZGUsIHBhcmFtcyk7XG4gICAgfVxuICAgIGFzc2VydEFyZ3VtZW50KGNvbmRpdGlvbiwgbWVzc2FnZSwgbmFtZSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKCEhY29uZGl0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50aHJvd0FyZ3VtZW50RXJyb3IobWVzc2FnZSwgbmFtZSwgdmFsdWUpO1xuICAgIH1cbiAgICBjaGVja05vcm1hbGl6ZShtZXNzYWdlKSB7XG4gICAgICAgIGlmIChtZXNzYWdlID09IG51bGwpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBcInBsYXRmb3JtIG1pc3NpbmcgU3RyaW5nLnByb3RvdHlwZS5ub3JtYWxpemVcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX25vcm1hbGl6ZUVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLnRocm93RXJyb3IoXCJwbGF0Zm9ybSBtaXNzaW5nIFN0cmluZy5wcm90b3R5cGUubm9ybWFsaXplXCIsIExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLCB7XG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uOiBcIlN0cmluZy5wcm90b3R5cGUubm9ybWFsaXplXCIsIGZvcm06IF9ub3JtYWxpemVFcnJvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2hlY2tTYWZlVWludDUzKHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgKHZhbHVlKSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlID09IG51bGwpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBcInZhbHVlIG5vdCBzYWZlXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlIDwgMCB8fCB2YWx1ZSA+PSAweDFmZmZmZmZmZmZmZmZmKSB7XG4gICAgICAgICAgICB0aGlzLnRocm93RXJyb3IobWVzc2FnZSwgTG9nZ2VyLmVycm9ycy5OVU1FUklDX0ZBVUxULCB7XG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uOiBcImNoZWNrU2FmZUludGVnZXJcIixcbiAgICAgICAgICAgICAgICBmYXVsdDogXCJvdXQtb2Ytc2FmZS1yYW5nZVwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlICUgMSkge1xuICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKG1lc3NhZ2UsIExvZ2dlci5lcnJvcnMuTlVNRVJJQ19GQVVMVCwge1xuICAgICAgICAgICAgICAgIG9wZXJhdGlvbjogXCJjaGVja1NhZmVJbnRlZ2VyXCIsXG4gICAgICAgICAgICAgICAgZmF1bHQ6IFwibm9uLWludGVnZXJcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNoZWNrQXJndW1lbnRDb3VudChjb3VudCwgZXhwZWN0ZWRDb3VudCwgbWVzc2FnZSkge1xuICAgICAgICBpZiAobWVzc2FnZSkge1xuICAgICAgICAgICAgbWVzc2FnZSA9IFwiOiBcIiArIG1lc3NhZ2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBtZXNzYWdlID0gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY291bnQgPCBleHBlY3RlZENvdW50KSB7XG4gICAgICAgICAgICB0aGlzLnRocm93RXJyb3IoXCJtaXNzaW5nIGFyZ3VtZW50XCIgKyBtZXNzYWdlLCBMb2dnZXIuZXJyb3JzLk1JU1NJTkdfQVJHVU1FTlQsIHtcbiAgICAgICAgICAgICAgICBjb3VudDogY291bnQsXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWRDb3VudDogZXhwZWN0ZWRDb3VudFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvdW50ID4gZXhwZWN0ZWRDb3VudCkge1xuICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKFwidG9vIG1hbnkgYXJndW1lbnRzXCIgKyBtZXNzYWdlLCBMb2dnZXIuZXJyb3JzLlVORVhQRUNURURfQVJHVU1FTlQsIHtcbiAgICAgICAgICAgICAgICBjb3VudDogY291bnQsXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWRDb3VudDogZXhwZWN0ZWRDb3VudFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2hlY2tOZXcodGFyZ2V0LCBraW5kKSB7XG4gICAgICAgIGlmICh0YXJnZXQgPT09IE9iamVjdCB8fCB0YXJnZXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKFwibWlzc2luZyBuZXdcIiwgTG9nZ2VyLmVycm9ycy5NSVNTSU5HX05FVywgeyBuYW1lOiBraW5kLm5hbWUgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2hlY2tBYnN0cmFjdCh0YXJnZXQsIGtpbmQpIHtcbiAgICAgICAgaWYgKHRhcmdldCA9PT0ga2luZCkge1xuICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKFwiY2Fubm90IGluc3RhbnRpYXRlIGFic3RyYWN0IGNsYXNzIFwiICsgSlNPTi5zdHJpbmdpZnkoa2luZC5uYW1lKSArIFwiIGRpcmVjdGx5OyB1c2UgYSBzdWItY2xhc3NcIiwgTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHsgbmFtZTogdGFyZ2V0Lm5hbWUsIG9wZXJhdGlvbjogXCJuZXdcIiB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0YXJnZXQgPT09IE9iamVjdCB8fCB0YXJnZXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKFwibWlzc2luZyBuZXdcIiwgTG9nZ2VyLmVycm9ycy5NSVNTSU5HX05FVywgeyBuYW1lOiBraW5kLm5hbWUgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIGdsb2JhbExvZ2dlcigpIHtcbiAgICAgICAgaWYgKCFfZ2xvYmFsTG9nZ2VyKSB7XG4gICAgICAgICAgICBfZ2xvYmFsTG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX2dsb2JhbExvZ2dlcjtcbiAgICB9XG4gICAgc3RhdGljIHNldENlbnNvcnNoaXAoY2Vuc29yc2hpcCwgcGVybWFuZW50KSB7XG4gICAgICAgIGlmICghY2Vuc29yc2hpcCAmJiBwZXJtYW5lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuZ2xvYmFsTG9nZ2VyKCkudGhyb3dFcnJvcihcImNhbm5vdCBwZXJtYW5lbnRseSBkaXNhYmxlIGNlbnNvcnNoaXBcIiwgTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHtcbiAgICAgICAgICAgICAgICBvcGVyYXRpb246IFwic2V0Q2Vuc29yc2hpcFwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX3Blcm1hbmVudENlbnNvckVycm9ycykge1xuICAgICAgICAgICAgaWYgKCFjZW5zb3JzaGlwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5nbG9iYWxMb2dnZXIoKS50aHJvd0Vycm9yKFwiZXJyb3IgY2Vuc29yc2hpcCBwZXJtYW5lbnRcIiwgTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHtcbiAgICAgICAgICAgICAgICBvcGVyYXRpb246IFwic2V0Q2Vuc29yc2hpcFwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBfY2Vuc29yRXJyb3JzID0gISFjZW5zb3JzaGlwO1xuICAgICAgICBfcGVybWFuZW50Q2Vuc29yRXJyb3JzID0gISFwZXJtYW5lbnQ7XG4gICAgfVxuICAgIHN0YXRpYyBzZXRMb2dMZXZlbChsb2dMZXZlbCkge1xuICAgICAgICBjb25zdCBsZXZlbCA9IExvZ0xldmVsc1tsb2dMZXZlbC50b0xvd2VyQ2FzZSgpXTtcbiAgICAgICAgaWYgKGxldmVsID09IG51bGwpIHtcbiAgICAgICAgICAgIExvZ2dlci5nbG9iYWxMb2dnZXIoKS53YXJuKFwiaW52YWxpZCBsb2cgbGV2ZWwgLSBcIiArIGxvZ0xldmVsKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBfbG9nTGV2ZWwgPSBsZXZlbDtcbiAgICB9XG4gICAgc3RhdGljIGZyb20odmVyc2lvbikge1xuICAgICAgICByZXR1cm4gbmV3IExvZ2dlcih2ZXJzaW9uKTtcbiAgICB9XG59XG5Mb2dnZXIuZXJyb3JzID0gRXJyb3JDb2RlO1xuTG9nZ2VyLmxldmVscyA9IExvZ0xldmVsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSBcImxvZ2dlci81LjYuMFwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X3ZlcnNpb24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmVSZWFkT25seShvYmplY3QsIG5hbWUsIHZhbHVlKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwgbmFtZSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICB9KTtcbn1cbi8vIENyYXdsIHVwIHRoZSBjb25zdHJ1Y3RvciBjaGFpbiB0byBmaW5kIGEgc3RhdGljIG1ldGhvZFxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0YXRpYyhjdG9yLCBrZXkpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDMyOyBpKyspIHtcbiAgICAgICAgaWYgKGN0b3Jba2V5XSkge1xuICAgICAgICAgICAgcmV0dXJuIGN0b3Jba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWN0b3IucHJvdG90eXBlIHx8IHR5cGVvZiAoY3Rvci5wcm90b3R5cGUpICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjdG9yID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGN0b3IucHJvdG90eXBlKS5jb25zdHJ1Y3RvcjtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZVByb3BlcnRpZXMob2JqZWN0KSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgY29uc3QgcHJvbWlzZXMgPSBPYmplY3Qua2V5cyhvYmplY3QpLm1hcCgoa2V5KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IG9iamVjdFtrZXldO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbigodikgPT4gKHsga2V5OiBrZXksIHZhbHVlOiB2IH0pKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSB5aWVsZCBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgICAgIHJldHVybiByZXN1bHRzLnJlZHVjZSgoYWNjdW0sIHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgYWNjdW1bKHJlc3VsdC5rZXkpXSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiBhY2N1bTtcbiAgICAgICAgfSwge30pO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrUHJvcGVydGllcyhvYmplY3QsIHByb3BlcnRpZXMpIHtcbiAgICBpZiAoIW9iamVjdCB8fCB0eXBlb2YgKG9iamVjdCkgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgb2JqZWN0XCIsIFwib2JqZWN0XCIsIG9iamVjdCk7XG4gICAgfVxuICAgIE9iamVjdC5rZXlzKG9iamVjdCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGlmICghcHJvcGVydGllc1trZXldKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBvYmplY3Qga2V5IC0gXCIgKyBrZXksIFwidHJhbnNhY3Rpb246XCIgKyBrZXksIG9iamVjdCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzaGFsbG93Q29weShvYmplY3QpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSBvYmplY3Rba2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmNvbnN0IG9wYXF1ZSA9IHsgYmlnaW50OiB0cnVlLCBib29sZWFuOiB0cnVlLCBcImZ1bmN0aW9uXCI6IHRydWUsIG51bWJlcjogdHJ1ZSwgc3RyaW5nOiB0cnVlIH07XG5mdW5jdGlvbiBfaXNGcm96ZW4ob2JqZWN0KSB7XG4gICAgLy8gT3BhcXVlIG9iamVjdHMgYXJlIG5vdCBtdXRhYmxlLCBzbyBzYWZlIHRvIGNvcHkgYnkgYXNzaWdubWVudFxuICAgIGlmIChvYmplY3QgPT09IHVuZGVmaW5lZCB8fCBvYmplY3QgPT09IG51bGwgfHwgb3BhcXVlW3R5cGVvZiAob2JqZWN0KV0pIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KG9iamVjdCkgfHwgdHlwZW9mIChvYmplY3QpID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGlmICghT2JqZWN0LmlzRnJvemVuKG9iamVjdCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXlzW2ldXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIC8vIElmIGFjY2Vzc2luZyBhIHZhbHVlIHRyaWdnZXJzIGFuIGVycm9yLCBpdCBpcyBhIGdldHRlclxuICAgICAgICAgICAgICAgIC8vIGRlc2lnbmVkIHRvIGRvIHNvIChlLmcuIFJlc3VsdCkgYW5kIGlzIHRoZXJlZm9yZSBcImZyb3plblwiXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIV9pc0Zyb3plbih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKGBDYW5ub3QgZGVlcENvcHkgJHt0eXBlb2YgKG9iamVjdCl9YCwgXCJvYmplY3RcIiwgb2JqZWN0KTtcbn1cbi8vIFJldHVybnMgYSBuZXcgY29weSBvZiBvYmplY3QsIHN1Y2ggdGhhdCBubyBwcm9wZXJ0aWVzIG1heSBiZSByZXBsYWNlZC5cbi8vIE5ldyBwcm9wZXJ0aWVzIG1heSBiZSBhZGRlZCBvbmx5IHRvIG9iamVjdHMuXG5mdW5jdGlvbiBfZGVlcENvcHkob2JqZWN0KSB7XG4gICAgaWYgKF9pc0Zyb3plbihvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuICAgIC8vIEFycmF5cyBhcmUgbXV0YWJsZSwgc28gd2UgbmVlZCB0byBjcmVhdGUgYSBjb3B5XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZShvYmplY3QubWFwKChpdGVtKSA9PiBkZWVwQ29weShpdGVtKSkpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChvYmplY3QpID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gb2JqZWN0W2tleV07XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmaW5lUmVhZE9ubHkocmVzdWx0LCBrZXksIGRlZXBDb3B5KHZhbHVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoYENhbm5vdCBkZWVwQ29weSAke3R5cGVvZiAob2JqZWN0KX1gLCBcIm9iamVjdFwiLCBvYmplY3QpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRlZXBDb3B5KG9iamVjdCkge1xuICAgIHJldHVybiBfZGVlcENvcHkob2JqZWN0KTtcbn1cbmV4cG9ydCBjbGFzcyBEZXNjcmlwdGlvbiB7XG4gICAgY29uc3RydWN0b3IoaW5mbykge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBpbmZvKSB7XG4gICAgICAgICAgICB0aGlzW2tleV0gPSBkZWVwQ29weShpbmZvW2tleV0pO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSBcInByb3BlcnRpZXMvNS42LjBcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV92ZXJzaW9uLmpzLm1hcCIsImV4cG9ydCBjb25zdCB2ZXJzaW9uID0gXCJwcm92aWRlcnMvNS42LjhcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV92ZXJzaW9uLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5pbXBvcnQgeyBkZWZpbmVSZWFkT25seSwgcmVzb2x2ZVByb3BlcnRpZXMsIHNoYWxsb3dDb3B5IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3Byb3BlcnRpZXNcIjtcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcbmNvbnN0IGFsbG93ZWRUcmFuc2FjdGlvbktleXMgPSBbXG4gICAgXCJhY2Nlc3NMaXN0XCIsIFwiY2NpcFJlYWRFbmFibGVkXCIsIFwiY2hhaW5JZFwiLCBcImN1c3RvbURhdGFcIiwgXCJkYXRhXCIsIFwiZnJvbVwiLCBcImdhc0xpbWl0XCIsIFwiZ2FzUHJpY2VcIiwgXCJtYXhGZWVQZXJHYXNcIiwgXCJtYXhQcmlvcml0eUZlZVBlckdhc1wiLCBcIm5vbmNlXCIsIFwidG9cIiwgXCJ0eXBlXCIsIFwidmFsdWVcIlxuXTtcbmNvbnN0IGZvcndhcmRFcnJvcnMgPSBbXG4gICAgTG9nZ2VyLmVycm9ycy5JTlNVRkZJQ0lFTlRfRlVORFMsXG4gICAgTG9nZ2VyLmVycm9ycy5OT05DRV9FWFBJUkVELFxuICAgIExvZ2dlci5lcnJvcnMuUkVQTEFDRU1FTlRfVU5ERVJQUklDRUQsXG5dO1xuO1xuO1xuZXhwb3J0IGNsYXNzIFNpZ25lciB7XG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIFN1Yi1jbGFzc2VzIE1VU1QgY2FsbCBzdXBlclxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBsb2dnZXIuY2hlY2tBYnN0cmFjdChuZXcudGFyZ2V0LCBTaWduZXIpO1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcIl9pc1NpZ25lclwiLCB0cnVlKTtcbiAgICB9XG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIFN1Yi1jbGFzc2VzIE1BWSBvdmVycmlkZSB0aGVzZVxuICAgIGdldEJhbGFuY2UoYmxvY2tUYWcpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrUHJvdmlkZXIoXCJnZXRCYWxhbmNlXCIpO1xuICAgICAgICAgICAgcmV0dXJuIHlpZWxkIHRoaXMucHJvdmlkZXIuZ2V0QmFsYW5jZSh0aGlzLmdldEFkZHJlc3MoKSwgYmxvY2tUYWcpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0VHJhbnNhY3Rpb25Db3VudChibG9ja1RhZykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdGhpcy5fY2hlY2tQcm92aWRlcihcImdldFRyYW5zYWN0aW9uQ291bnRcIik7XG4gICAgICAgICAgICByZXR1cm4geWllbGQgdGhpcy5wcm92aWRlci5nZXRUcmFuc2FjdGlvbkNvdW50KHRoaXMuZ2V0QWRkcmVzcygpLCBibG9ja1RhZyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBQb3B1bGF0ZXMgXCJmcm9tXCIgaWYgdW5zcGVjaWZpZWQsIGFuZCBlc3RpbWF0ZXMgdGhlIGdhcyBmb3IgdGhlIHRyYW5zYWN0aW9uXG4gICAgZXN0aW1hdGVHYXModHJhbnNhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrUHJvdmlkZXIoXCJlc3RpbWF0ZUdhc1wiKTtcbiAgICAgICAgICAgIGNvbnN0IHR4ID0geWllbGQgcmVzb2x2ZVByb3BlcnRpZXModGhpcy5jaGVja1RyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKSk7XG4gICAgICAgICAgICByZXR1cm4geWllbGQgdGhpcy5wcm92aWRlci5lc3RpbWF0ZUdhcyh0eCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBQb3B1bGF0ZXMgXCJmcm9tXCIgaWYgdW5zcGVjaWZpZWQsIGFuZCBjYWxscyB3aXRoIHRoZSB0cmFuc2FjdGlvblxuICAgIGNhbGwodHJhbnNhY3Rpb24sIGJsb2NrVGFnKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0aGlzLl9jaGVja1Byb3ZpZGVyKFwiY2FsbFwiKTtcbiAgICAgICAgICAgIGNvbnN0IHR4ID0geWllbGQgcmVzb2x2ZVByb3BlcnRpZXModGhpcy5jaGVja1RyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKSk7XG4gICAgICAgICAgICByZXR1cm4geWllbGQgdGhpcy5wcm92aWRlci5jYWxsKHR4LCBibG9ja1RhZyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBQb3B1bGF0ZXMgYWxsIGZpZWxkcyBpbiBhIHRyYW5zYWN0aW9uLCBzaWducyBpdCBhbmQgc2VuZHMgaXQgdG8gdGhlIG5ldHdvcmtcbiAgICBzZW5kVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrUHJvdmlkZXIoXCJzZW5kVHJhbnNhY3Rpb25cIik7XG4gICAgICAgICAgICBjb25zdCB0eCA9IHlpZWxkIHRoaXMucG9wdWxhdGVUcmFuc2FjdGlvbih0cmFuc2FjdGlvbik7XG4gICAgICAgICAgICBjb25zdCBzaWduZWRUeCA9IHlpZWxkIHRoaXMuc2lnblRyYW5zYWN0aW9uKHR4KTtcbiAgICAgICAgICAgIHJldHVybiB5aWVsZCB0aGlzLnByb3ZpZGVyLnNlbmRUcmFuc2FjdGlvbihzaWduZWRUeCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXRDaGFpbklkKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdGhpcy5fY2hlY2tQcm92aWRlcihcImdldENoYWluSWRcIik7XG4gICAgICAgICAgICBjb25zdCBuZXR3b3JrID0geWllbGQgdGhpcy5wcm92aWRlci5nZXROZXR3b3JrKCk7XG4gICAgICAgICAgICByZXR1cm4gbmV0d29yay5jaGFpbklkO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0R2FzUHJpY2UoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0aGlzLl9jaGVja1Byb3ZpZGVyKFwiZ2V0R2FzUHJpY2VcIik7XG4gICAgICAgICAgICByZXR1cm4geWllbGQgdGhpcy5wcm92aWRlci5nZXRHYXNQcmljZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0RmVlRGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrUHJvdmlkZXIoXCJnZXRGZWVEYXRhXCIpO1xuICAgICAgICAgICAgcmV0dXJuIHlpZWxkIHRoaXMucHJvdmlkZXIuZ2V0RmVlRGF0YSgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmVzb2x2ZU5hbWUobmFtZSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdGhpcy5fY2hlY2tQcm92aWRlcihcInJlc29sdmVOYW1lXCIpO1xuICAgICAgICAgICAgcmV0dXJuIHlpZWxkIHRoaXMucHJvdmlkZXIucmVzb2x2ZU5hbWUobmFtZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBDaGVja3MgYSB0cmFuc2FjdGlvbiBkb2VzIG5vdCBjb250YWluIGludmFsaWQga2V5cyBhbmQgaWZcbiAgICAvLyBubyBcImZyb21cIiBpcyBwcm92aWRlZCwgcG9wdWxhdGVzIGl0LlxuICAgIC8vIC0gZG9lcyBOT1QgcmVxdWlyZSBhIHByb3ZpZGVyXG4gICAgLy8gLSBhZGRzIFwiZnJvbVwiIGlzIG5vdCBwcmVzZW50XG4gICAgLy8gLSByZXR1cm5zIGEgQ09QWSAoc2FmZSB0byBtdXRhdGUgdGhlIHJlc3VsdClcbiAgICAvLyBCeSBkZWZhdWx0IGNhbGxlZCBmcm9tOiAob3ZlcnJpZGluZyB0aGVzZSBwcmV2ZW50cyBpdClcbiAgICAvLyAgIC0gY2FsbFxuICAgIC8vICAgLSBlc3RpbWF0ZUdhc1xuICAgIC8vICAgLSBwb3B1bGF0ZVRyYW5zYWN0aW9uIChhbmQgdGhlcmVmb3Igc2VuZFRyYW5zYWN0aW9uKVxuICAgIGNoZWNrVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgIGlmIChhbGxvd2VkVHJhbnNhY3Rpb25LZXlzLmluZGV4T2Yoa2V5KSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCB0cmFuc2FjdGlvbiBrZXk6IFwiICsga2V5LCBcInRyYW5zYWN0aW9uXCIsIHRyYW5zYWN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0eCA9IHNoYWxsb3dDb3B5KHRyYW5zYWN0aW9uKTtcbiAgICAgICAgaWYgKHR4LmZyb20gPT0gbnVsbCkge1xuICAgICAgICAgICAgdHguZnJvbSA9IHRoaXMuZ2V0QWRkcmVzcygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIGFueSBwcm92aWRlZCBhZGRyZXNzIG1hdGNoZXMgdGhpcyBzaWduZXJcbiAgICAgICAgICAgIHR4LmZyb20gPSBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHR4LmZyb20pLFxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0QWRkcmVzcygpXG4gICAgICAgICAgICBdKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0WzBdLnRvTG93ZXJDYXNlKCkgIT09IHJlc3VsdFsxXS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJmcm9tIGFkZHJlc3MgbWlzbWF0Y2hcIiwgXCJ0cmFuc2FjdGlvblwiLCB0cmFuc2FjdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRbMF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHg7XG4gICAgfVxuICAgIC8vIFBvcHVsYXRlcyBBTEwga2V5cyBmb3IgYSB0cmFuc2FjdGlvbiBhbmQgY2hlY2tzIHRoYXQgXCJmcm9tXCIgbWF0Y2hlc1xuICAgIC8vIHRoaXMgU2lnbmVyLiBTaG91bGQgYmUgdXNlZCBieSBzZW5kVHJhbnNhY3Rpb24gYnV0IE5PVCBieSBzaWduVHJhbnNhY3Rpb24uXG4gICAgLy8gQnkgZGVmYXVsdCBjYWxsZWQgZnJvbTogKG92ZXJyaWRpbmcgdGhlc2UgcHJldmVudHMgaXQpXG4gICAgLy8gICAtIHNlbmRUcmFuc2FjdGlvblxuICAgIC8vXG4gICAgLy8gTm90ZXM6XG4gICAgLy8gIC0gV2UgYWxsb3cgZ2FzUHJpY2UgZm9yIEVJUC0xNTU5IGFzIGxvbmcgYXMgaXQgbWF0Y2hlcyBtYXhGZWVQZXJHYXNcbiAgICBwb3B1bGF0ZVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCB0eCA9IHlpZWxkIHJlc29sdmVQcm9wZXJ0aWVzKHRoaXMuY2hlY2tUcmFuc2FjdGlvbih0cmFuc2FjdGlvbikpO1xuICAgICAgICAgICAgaWYgKHR4LnRvICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0eC50byA9IFByb21pc2UucmVzb2x2ZSh0eC50bykudGhlbigodG8pID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRvID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFkZHJlc3MgPSB5aWVsZCB0aGlzLnJlc29sdmVOYW1lKHRvKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFkZHJlc3MgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInByb3ZpZGVkIEVOUyBuYW1lIHJlc29sdmVzIHRvIG51bGxcIiwgXCJ0eC50b1wiLCB0byk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFkZHJlc3M7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIC8vIFByZXZlbnQgdGhpcyBlcnJvciBmcm9tIGNhdXNpbmcgYW4gVW5oYW5kbGVkUHJvbWlzZUV4Y2VwdGlvblxuICAgICAgICAgICAgICAgIHR4LnRvLmNhdGNoKChlcnJvcikgPT4geyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIERvIG5vdCBhbGxvdyBtaXhpbmcgcHJlLWVpcC0xNTU5IGFuZCBlaXAtMTU1OSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICBjb25zdCBoYXNFaXAxNTU5ID0gKHR4Lm1heEZlZVBlckdhcyAhPSBudWxsIHx8IHR4Lm1heFByaW9yaXR5RmVlUGVyR2FzICE9IG51bGwpO1xuICAgICAgICAgICAgaWYgKHR4Lmdhc1ByaWNlICE9IG51bGwgJiYgKHR4LnR5cGUgPT09IDIgfHwgaGFzRWlwMTU1OSkpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiZWlwLTE1NTkgdHJhbnNhY3Rpb24gZG8gbm90IHN1cHBvcnQgZ2FzUHJpY2VcIiwgXCJ0cmFuc2FjdGlvblwiLCB0cmFuc2FjdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgodHgudHlwZSA9PT0gMCB8fCB0eC50eXBlID09PSAxKSAmJiBoYXNFaXAxNTU5KSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInByZS1laXAtMTU1OSB0cmFuc2FjdGlvbiBkbyBub3Qgc3VwcG9ydCBtYXhGZWVQZXJHYXMvbWF4UHJpb3JpdHlGZWVQZXJHYXNcIiwgXCJ0cmFuc2FjdGlvblwiLCB0cmFuc2FjdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHR4LnR5cGUgPT09IDIgfHwgdHgudHlwZSA9PSBudWxsKSAmJiAodHgubWF4RmVlUGVyR2FzICE9IG51bGwgJiYgdHgubWF4UHJpb3JpdHlGZWVQZXJHYXMgIT0gbnVsbCkpIHtcbiAgICAgICAgICAgICAgICAvLyBGdWxseS1mb3JtZWQgRUlQLTE1NTkgdHJhbnNhY3Rpb24gKHNraXAgZ2V0RmVlRGF0YSlcbiAgICAgICAgICAgICAgICB0eC50eXBlID0gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR4LnR5cGUgPT09IDAgfHwgdHgudHlwZSA9PT0gMSkge1xuICAgICAgICAgICAgICAgIC8vIEV4cGxpY2l0IExlZ2FjeSBvciBFSVAtMjkzMCB0cmFuc2FjdGlvblxuICAgICAgICAgICAgICAgIC8vIFBvcHVsYXRlIG1pc3NpbmcgZ2FzUHJpY2VcbiAgICAgICAgICAgICAgICBpZiAodHguZ2FzUHJpY2UgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0eC5nYXNQcmljZSA9IHRoaXMuZ2V0R2FzUHJpY2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGdldCBmZWUgZGF0YSB0byBkZXRlcm1pbmUgdGhpbmdzXG4gICAgICAgICAgICAgICAgY29uc3QgZmVlRGF0YSA9IHlpZWxkIHRoaXMuZ2V0RmVlRGF0YSgpO1xuICAgICAgICAgICAgICAgIGlmICh0eC50eXBlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBhdXRvLWRldGVjdCB0aGUgaW50ZW5kZWQgdHlwZSBvZiB0aGlzIHRyYW5zYWN0aW9uLi4uXG4gICAgICAgICAgICAgICAgICAgIGlmIChmZWVEYXRhLm1heEZlZVBlckdhcyAhPSBudWxsICYmIGZlZURhdGEubWF4UHJpb3JpdHlGZWVQZXJHYXMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIG5ldHdvcmsgc3VwcG9ydHMgRUlQLTE1NTkhXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBVcGdyYWRlIHRyYW5zYWN0aW9uIGZyb20gbnVsbCB0byBlaXAtMTU1OVxuICAgICAgICAgICAgICAgICAgICAgICAgdHgudHlwZSA9IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHguZ2FzUHJpY2UgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVzaW5nIGxlZ2FjeSBnYXNQcmljZSBwcm9wZXJ0eSBvbiBhbiBlaXAtMTU1OSBuZXR3b3JrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNvIHVzZSBnYXNQcmljZSBhcyBib3RoIGZlZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZ2FzUHJpY2UgPSB0eC5nYXNQcmljZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdHguZ2FzUHJpY2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHgubWF4RmVlUGVyR2FzID0gZ2FzUHJpY2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHgubWF4UHJpb3JpdHlGZWVQZXJHYXMgPSBnYXNQcmljZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFBvcHVsYXRlIG1pc3NpbmcgZmVlIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHgubWF4RmVlUGVyR2FzID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHgubWF4RmVlUGVyR2FzID0gZmVlRGF0YS5tYXhGZWVQZXJHYXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eC5tYXhQcmlvcml0eUZlZVBlckdhcyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR4Lm1heFByaW9yaXR5RmVlUGVyR2FzID0gZmVlRGF0YS5tYXhQcmlvcml0eUZlZVBlckdhcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZmVlRGF0YS5nYXNQcmljZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOZXR3b3JrIGRvZXNuJ3Qgc3VwcG9ydCBFSVAtMTU1OS4uLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gLi4uYnV0IHRoZXkgYXJlIHRyeWluZyB0byB1c2UgRUlQLTE1NTkgcHJvcGVydGllc1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc0VpcDE1NTkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcIm5ldHdvcmsgZG9lcyBub3Qgc3VwcG9ydCBFSVAtMTU1OVwiLCBMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRpb246IFwicG9wdWxhdGVUcmFuc2FjdGlvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBQb3B1bGF0ZSBtaXNzaW5nIGZlZSBkYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHguZ2FzUHJpY2UgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR4Lmdhc1ByaWNlID0gZmVlRGF0YS5nYXNQcmljZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEV4cGxpY2l0bHkgc2V0IHVudHlwZWQgdHJhbnNhY3Rpb24gdG8gbGVnYWN5XG4gICAgICAgICAgICAgICAgICAgICAgICB0eC50eXBlID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGdldEZlZURhdGEgaGFzIGZhaWxlZCB1cy5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiZmFpbGVkIHRvIGdldCBjb25zaXN0ZW50IGZlZSBkYXRhXCIsIExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlcmF0aW9uOiBcInNpZ25lci5nZXRGZWVEYXRhXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR4LnR5cGUgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRXhwbGljaXRseSB1c2luZyBFSVAtMTU1OVxuICAgICAgICAgICAgICAgICAgICAvLyBQb3B1bGF0ZSBtaXNzaW5nIGZlZSBkYXRhXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eC5tYXhGZWVQZXJHYXMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHgubWF4RmVlUGVyR2FzID0gZmVlRGF0YS5tYXhGZWVQZXJHYXM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHR4Lm1heFByaW9yaXR5RmVlUGVyR2FzID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR4Lm1heFByaW9yaXR5RmVlUGVyR2FzID0gZmVlRGF0YS5tYXhQcmlvcml0eUZlZVBlckdhcztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eC5ub25jZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdHgubm9uY2UgPSB0aGlzLmdldFRyYW5zYWN0aW9uQ291bnQoXCJwZW5kaW5nXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR4Lmdhc0xpbWl0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0eC5nYXNMaW1pdCA9IHRoaXMuZXN0aW1hdGVHYXModHgpLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZm9yd2FyZEVycm9ycy5pbmRleE9mKGVycm9yLmNvZGUpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2dnZXIudGhyb3dFcnJvcihcImNhbm5vdCBlc3RpbWF0ZSBnYXM7IHRyYW5zYWN0aW9uIG1heSBmYWlsIG9yIG1heSByZXF1aXJlIG1hbnVhbCBnYXMgbGltaXRcIiwgTG9nZ2VyLmVycm9ycy5VTlBSRURJQ1RBQkxFX0dBU19MSU1JVCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHg6IHR4XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR4LmNoYWluSWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHR4LmNoYWluSWQgPSB0aGlzLmdldENoYWluSWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHR4LmNoYWluSWQgPSBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZSh0eC5jaGFpbklkKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRDaGFpbklkKClcbiAgICAgICAgICAgICAgICBdKS50aGVuKChyZXN1bHRzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHRzWzFdICE9PSAwICYmIHJlc3VsdHNbMF0gIT09IHJlc3VsdHNbMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJjaGFpbklkIGFkZHJlc3MgbWlzbWF0Y2hcIiwgXCJ0cmFuc2FjdGlvblwiLCB0cmFuc2FjdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHNbMF07XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geWllbGQgcmVzb2x2ZVByb3BlcnRpZXModHgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIFN1Yi1jbGFzc2VzIFNIT1VMRCBsZWF2ZSB0aGVzZSBhbG9uZVxuICAgIF9jaGVja1Byb3ZpZGVyKG9wZXJhdGlvbikge1xuICAgICAgICBpZiAoIXRoaXMucHJvdmlkZXIpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwibWlzc2luZyBwcm92aWRlclwiLCBMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTiwge1xuICAgICAgICAgICAgICAgIG9wZXJhdGlvbjogKG9wZXJhdGlvbiB8fCBcIl9jaGVja1Byb3ZpZGVyXCIpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgaXNTaWduZXIodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9pc1NpZ25lcik7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFZvaWRTaWduZXIgZXh0ZW5kcyBTaWduZXIge1xuICAgIGNvbnN0cnVjdG9yKGFkZHJlc3MsIHByb3ZpZGVyKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiYWRkcmVzc1wiLCBhZGRyZXNzKTtcbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJwcm92aWRlclwiLCBwcm92aWRlciB8fCBudWxsKTtcbiAgICB9XG4gICAgZ2V0QWRkcmVzcygpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLmFkZHJlc3MpO1xuICAgIH1cbiAgICBfZmFpbChtZXNzYWdlLCBvcGVyYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IobWVzc2FnZSwgTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHsgb3BlcmF0aW9uOiBvcGVyYXRpb24gfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzaWduTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9mYWlsKFwiVm9pZFNpZ25lciBjYW5ub3Qgc2lnbiBtZXNzYWdlc1wiLCBcInNpZ25NZXNzYWdlXCIpO1xuICAgIH1cbiAgICBzaWduVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZhaWwoXCJWb2lkU2lnbmVyIGNhbm5vdCBzaWduIHRyYW5zYWN0aW9uc1wiLCBcInNpZ25UcmFuc2FjdGlvblwiKTtcbiAgICB9XG4gICAgX3NpZ25UeXBlZERhdGEoZG9tYWluLCB0eXBlcywgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZhaWwoXCJWb2lkU2lnbmVyIGNhbm5vdCBzaWduIHR5cGVkIGRhdGFcIiwgXCJzaWduVHlwZWREYXRhXCIpO1xuICAgIH1cbiAgICBjb25uZWN0KHByb3ZpZGVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgVm9pZFNpZ25lcih0aGlzLmFkZHJlc3MsIHByb3ZpZGVyKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJleHBvcnQgY29uc3QgdmVyc2lvbiA9IFwiYWJzdHJhY3Qtc2lnbmVyLzUuNi4yXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdmVyc2lvbi5qcy5tYXAiLCJleHBvcnQgY29uc3QgdmVyc2lvbiA9IFwiYnl0ZXMvNS42LjFcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV92ZXJzaW9uLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2xvZ2dlclwiO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuL192ZXJzaW9uXCI7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKHZlcnNpb24pO1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuZnVuY3Rpb24gaXNIZXhhYmxlKHZhbHVlKSB7XG4gICAgcmV0dXJuICEhKHZhbHVlLnRvSGV4U3RyaW5nKTtcbn1cbmZ1bmN0aW9uIGFkZFNsaWNlKGFycmF5KSB7XG4gICAgaWYgKGFycmF5LnNsaWNlKSB7XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG4gICAgYXJyYXkuc2xpY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICByZXR1cm4gYWRkU2xpY2UobmV3IFVpbnQ4QXJyYXkoQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFycmF5LCBhcmdzKSkpO1xuICAgIH07XG4gICAgcmV0dXJuIGFycmF5O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQnl0ZXNMaWtlKHZhbHVlKSB7XG4gICAgcmV0dXJuICgoaXNIZXhTdHJpbmcodmFsdWUpICYmICEodmFsdWUubGVuZ3RoICUgMikpIHx8IGlzQnl0ZXModmFsdWUpKTtcbn1cbmZ1bmN0aW9uIGlzSW50ZWdlcih2YWx1ZSkge1xuICAgIHJldHVybiAodHlwZW9mICh2YWx1ZSkgPT09IFwibnVtYmVyXCIgJiYgdmFsdWUgPT0gdmFsdWUgJiYgKHZhbHVlICUgMSkgPT09IDApO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQnl0ZXModmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gVWludDhBcnJheSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFpc0ludGVnZXIodmFsdWUubGVuZ3RoKSB8fCB2YWx1ZS5sZW5ndGggPCAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCB2ID0gdmFsdWVbaV07XG4gICAgICAgIGlmICghaXNJbnRlZ2VyKHYpIHx8IHYgPCAwIHx8IHYgPj0gMjU2KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5leHBvcnQgZnVuY3Rpb24gYXJyYXlpZnkodmFsdWUsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICBpZiAodHlwZW9mICh2YWx1ZSkgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgbG9nZ2VyLmNoZWNrU2FmZVVpbnQ1Myh2YWx1ZSwgXCJpbnZhbGlkIGFycmF5aWZ5IHZhbHVlXCIpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgd2hpbGUgKHZhbHVlKSB7XG4gICAgICAgICAgICByZXN1bHQudW5zaGlmdCh2YWx1ZSAmIDB4ZmYpO1xuICAgICAgICAgICAgdmFsdWUgPSBwYXJzZUludChTdHJpbmcodmFsdWUgLyAyNTYpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFkZFNsaWNlKG5ldyBVaW50OEFycmF5KHJlc3VsdCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5hbGxvd01pc3NpbmdQcmVmaXggJiYgdHlwZW9mICh2YWx1ZSkgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUuc3Vic3RyaW5nKDAsIDIpICE9PSBcIjB4XCIpIHtcbiAgICAgICAgdmFsdWUgPSBcIjB4XCIgKyB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKGlzSGV4YWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS50b0hleFN0cmluZygpO1xuICAgIH1cbiAgICBpZiAoaXNIZXhTdHJpbmcodmFsdWUpKSB7XG4gICAgICAgIGxldCBoZXggPSB2YWx1ZS5zdWJzdHJpbmcoMik7XG4gICAgICAgIGlmIChoZXgubGVuZ3RoICUgMikge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaGV4UGFkID09PSBcImxlZnRcIikge1xuICAgICAgICAgICAgICAgIGhleCA9IFwiMFwiICsgaGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAob3B0aW9ucy5oZXhQYWQgPT09IFwicmlnaHRcIikge1xuICAgICAgICAgICAgICAgIGhleCArPSBcIjBcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJoZXggZGF0YSBpcyBvZGQtbGVuZ3RoXCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhleC5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gocGFyc2VJbnQoaGV4LnN1YnN0cmluZyhpLCBpICsgMiksIDE2KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFkZFNsaWNlKG5ldyBVaW50OEFycmF5KHJlc3VsdCkpO1xuICAgIH1cbiAgICBpZiAoaXNCeXRlcyh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGFkZFNsaWNlKG5ldyBVaW50OEFycmF5KHZhbHVlKSk7XG4gICAgfVxuICAgIHJldHVybiBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBhcnJheWlmeSB2YWx1ZVwiLCBcInZhbHVlXCIsIHZhbHVlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb25jYXQoaXRlbXMpIHtcbiAgICBjb25zdCBvYmplY3RzID0gaXRlbXMubWFwKGl0ZW0gPT4gYXJyYXlpZnkoaXRlbSkpO1xuICAgIGNvbnN0IGxlbmd0aCA9IG9iamVjdHMucmVkdWNlKChhY2N1bSwgaXRlbSkgPT4gKGFjY3VtICsgaXRlbS5sZW5ndGgpLCAwKTtcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICAgIG9iamVjdHMucmVkdWNlKChvZmZzZXQsIG9iamVjdCkgPT4ge1xuICAgICAgICByZXN1bHQuc2V0KG9iamVjdCwgb2Zmc2V0KTtcbiAgICAgICAgcmV0dXJuIG9mZnNldCArIG9iamVjdC5sZW5ndGg7XG4gICAgfSwgMCk7XG4gICAgcmV0dXJuIGFkZFNsaWNlKHJlc3VsdCk7XG59XG5leHBvcnQgZnVuY3Rpb24gc3RyaXBaZXJvcyh2YWx1ZSkge1xuICAgIGxldCByZXN1bHQgPSBhcnJheWlmeSh2YWx1ZSk7XG4gICAgaWYgKHJlc3VsdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLy8gRmluZCB0aGUgZmlyc3Qgbm9uLXplcm8gZW50cnlcbiAgICBsZXQgc3RhcnQgPSAwO1xuICAgIHdoaWxlIChzdGFydCA8IHJlc3VsdC5sZW5ndGggJiYgcmVzdWx0W3N0YXJ0XSA9PT0gMCkge1xuICAgICAgICBzdGFydCsrO1xuICAgIH1cbiAgICAvLyBJZiB3ZSBzdGFydGVkIHdpdGggemVyb3MsIHN0cmlwIHRoZW1cbiAgICBpZiAoc3RhcnQpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnNsaWNlKHN0YXJ0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB6ZXJvUGFkKHZhbHVlLCBsZW5ndGgpIHtcbiAgICB2YWx1ZSA9IGFycmF5aWZ5KHZhbHVlKTtcbiAgICBpZiAodmFsdWUubGVuZ3RoID4gbGVuZ3RoKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJ2YWx1ZSBvdXQgb2YgcmFuZ2VcIiwgXCJ2YWx1ZVwiLCBhcmd1bWVudHNbMF0pO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICAgIHJlc3VsdC5zZXQodmFsdWUsIGxlbmd0aCAtIHZhbHVlLmxlbmd0aCk7XG4gICAgcmV0dXJuIGFkZFNsaWNlKHJlc3VsdCk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNIZXhTdHJpbmcodmFsdWUsIGxlbmd0aCkge1xuICAgIGlmICh0eXBlb2YgKHZhbHVlKSAhPT0gXCJzdHJpbmdcIiB8fCAhdmFsdWUubWF0Y2goL14weFswLTlBLUZhLWZdKiQvKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChsZW5ndGggJiYgdmFsdWUubGVuZ3RoICE9PSAyICsgMiAqIGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuY29uc3QgSGV4Q2hhcmFjdGVycyA9IFwiMDEyMzQ1Njc4OWFiY2RlZlwiO1xuZXhwb3J0IGZ1bmN0aW9uIGhleGxpZnkodmFsdWUsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICBpZiAodHlwZW9mICh2YWx1ZSkgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgbG9nZ2VyLmNoZWNrU2FmZVVpbnQ1Myh2YWx1ZSwgXCJpbnZhbGlkIGhleGxpZnkgdmFsdWVcIik7XG4gICAgICAgIGxldCBoZXggPSBcIlwiO1xuICAgICAgICB3aGlsZSAodmFsdWUpIHtcbiAgICAgICAgICAgIGhleCA9IEhleENoYXJhY3RlcnNbdmFsdWUgJiAweGZdICsgaGV4O1xuICAgICAgICAgICAgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlIC8gMTYpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoZXgubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGV4Lmxlbmd0aCAlIDIpIHtcbiAgICAgICAgICAgICAgICBoZXggPSBcIjBcIiArIGhleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBcIjB4XCIgKyBoZXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFwiMHgwMFwiO1xuICAgIH1cbiAgICBpZiAodHlwZW9mICh2YWx1ZSkgPT09IFwiYmlnaW50XCIpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygxNik7XG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggJSAyKSB7XG4gICAgICAgICAgICByZXR1cm4gKFwiMHgwXCIgKyB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFwiMHhcIiArIHZhbHVlO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5hbGxvd01pc3NpbmdQcmVmaXggJiYgdHlwZW9mICh2YWx1ZSkgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUuc3Vic3RyaW5nKDAsIDIpICE9PSBcIjB4XCIpIHtcbiAgICAgICAgdmFsdWUgPSBcIjB4XCIgKyB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKGlzSGV4YWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLnRvSGV4U3RyaW5nKCk7XG4gICAgfVxuICAgIGlmIChpc0hleFN0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCAlIDIpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmhleFBhZCA9PT0gXCJsZWZ0XCIpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IFwiMHgwXCIgKyB2YWx1ZS5zdWJzdHJpbmcoMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChvcHRpb25zLmhleFBhZCA9PT0gXCJyaWdodFwiKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgKz0gXCIwXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaGV4IGRhdGEgaXMgb2RkLWxlbmd0aFwiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICB9XG4gICAgaWYgKGlzQnl0ZXModmFsdWUpKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBcIjB4XCI7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCB2ID0gdmFsdWVbaV07XG4gICAgICAgICAgICByZXN1bHQgKz0gSGV4Q2hhcmFjdGVyc1sodiAmIDB4ZjApID4+IDRdICsgSGV4Q2hhcmFjdGVyc1t2ICYgMHgwZl07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGhleGxpZnkgdmFsdWVcIiwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG59XG4vKlxuZnVuY3Rpb24gdW5vZGRpZnkodmFsdWU6IEJ5dGVzTGlrZSB8IEhleGFibGUgfCBudW1iZXIpOiBCeXRlc0xpa2UgfCBIZXhhYmxlIHwgbnVtYmVyIHtcbiAgICBpZiAodHlwZW9mKHZhbHVlKSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZS5sZW5ndGggJSAyICYmIHZhbHVlLnN1YnN0cmluZygwLCAyKSA9PT0gXCIweFwiKSB7XG4gICAgICAgIHJldHVybiBcIjB4MFwiICsgdmFsdWUuc3Vic3RyaW5nKDIpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG4qL1xuZXhwb3J0IGZ1bmN0aW9uIGhleERhdGFMZW5ndGgoZGF0YSkge1xuICAgIGlmICh0eXBlb2YgKGRhdGEpICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGRhdGEgPSBoZXhsaWZ5KGRhdGEpO1xuICAgIH1cbiAgICBlbHNlIGlmICghaXNIZXhTdHJpbmcoZGF0YSkgfHwgKGRhdGEubGVuZ3RoICUgMikpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiAoZGF0YS5sZW5ndGggLSAyKSAvIDI7XG59XG5leHBvcnQgZnVuY3Rpb24gaGV4RGF0YVNsaWNlKGRhdGEsIG9mZnNldCwgZW5kT2Zmc2V0KSB7XG4gICAgaWYgKHR5cGVvZiAoZGF0YSkgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgZGF0YSA9IGhleGxpZnkoZGF0YSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCFpc0hleFN0cmluZyhkYXRhKSB8fCAoZGF0YS5sZW5ndGggJSAyKSkge1xuICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBoZXhEYXRhXCIsIFwidmFsdWVcIiwgZGF0YSk7XG4gICAgfVxuICAgIG9mZnNldCA9IDIgKyAyICogb2Zmc2V0O1xuICAgIGlmIChlbmRPZmZzZXQgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gXCIweFwiICsgZGF0YS5zdWJzdHJpbmcob2Zmc2V0LCAyICsgMiAqIGVuZE9mZnNldCk7XG4gICAgfVxuICAgIHJldHVybiBcIjB4XCIgKyBkYXRhLnN1YnN0cmluZyhvZmZzZXQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGhleENvbmNhdChpdGVtcykge1xuICAgIGxldCByZXN1bHQgPSBcIjB4XCI7XG4gICAgaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICByZXN1bHQgKz0gaGV4bGlmeShpdGVtKS5zdWJzdHJpbmcoMik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBoZXhWYWx1ZSh2YWx1ZSkge1xuICAgIGNvbnN0IHRyaW1tZWQgPSBoZXhTdHJpcFplcm9zKGhleGxpZnkodmFsdWUsIHsgaGV4UGFkOiBcImxlZnRcIiB9KSk7XG4gICAgaWYgKHRyaW1tZWQgPT09IFwiMHhcIikge1xuICAgICAgICByZXR1cm4gXCIweDBcIjtcbiAgICB9XG4gICAgcmV0dXJuIHRyaW1tZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gaGV4U3RyaXBaZXJvcyh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgKHZhbHVlKSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICB2YWx1ZSA9IGhleGxpZnkodmFsdWUpO1xuICAgIH1cbiAgICBpZiAoIWlzSGV4U3RyaW5nKHZhbHVlKSkge1xuICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBoZXggc3RyaW5nXCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgIH1cbiAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZygyKTtcbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICB3aGlsZSAob2Zmc2V0IDwgdmFsdWUubGVuZ3RoICYmIHZhbHVlW29mZnNldF0gPT09IFwiMFwiKSB7XG4gICAgICAgIG9mZnNldCsrO1xuICAgIH1cbiAgICByZXR1cm4gXCIweFwiICsgdmFsdWUuc3Vic3RyaW5nKG9mZnNldCk7XG59XG5leHBvcnQgZnVuY3Rpb24gaGV4WmVyb1BhZCh2YWx1ZSwgbGVuZ3RoKSB7XG4gICAgaWYgKHR5cGVvZiAodmFsdWUpICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHZhbHVlID0gaGV4bGlmeSh2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCFpc0hleFN0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgaGV4IHN0cmluZ1wiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlLmxlbmd0aCA+IDIgKiBsZW5ndGggKyAyKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJ2YWx1ZSBvdXQgb2YgcmFuZ2VcIiwgXCJ2YWx1ZVwiLCBhcmd1bWVudHNbMV0pO1xuICAgIH1cbiAgICB3aGlsZSAodmFsdWUubGVuZ3RoIDwgMiAqIGxlbmd0aCArIDIpIHtcbiAgICAgICAgdmFsdWUgPSBcIjB4MFwiICsgdmFsdWUuc3Vic3RyaW5nKDIpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5leHBvcnQgZnVuY3Rpb24gc3BsaXRTaWduYXR1cmUoc2lnbmF0dXJlKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgICByOiBcIjB4XCIsXG4gICAgICAgIHM6IFwiMHhcIixcbiAgICAgICAgX3ZzOiBcIjB4XCIsXG4gICAgICAgIHJlY292ZXJ5UGFyYW06IDAsXG4gICAgICAgIHY6IDAsXG4gICAgICAgIHlQYXJpdHlBbmRTOiBcIjB4XCIsXG4gICAgICAgIGNvbXBhY3Q6IFwiMHhcIlxuICAgIH07XG4gICAgaWYgKGlzQnl0ZXNMaWtlKHNpZ25hdHVyZSkpIHtcbiAgICAgICAgbGV0IGJ5dGVzID0gYXJyYXlpZnkoc2lnbmF0dXJlKTtcbiAgICAgICAgLy8gR2V0IHRoZSByLCBzIGFuZCB2XG4gICAgICAgIGlmIChieXRlcy5sZW5ndGggPT09IDY0KSB7XG4gICAgICAgICAgICAvLyBFSVAtMjA5ODsgcHVsbCB0aGUgdiBmcm9tIHRoZSB0b3AgYml0IG9mIHMgYW5kIGNsZWFyIGl0XG4gICAgICAgICAgICByZXN1bHQudiA9IDI3ICsgKGJ5dGVzWzMyXSA+PiA3KTtcbiAgICAgICAgICAgIGJ5dGVzWzMyXSAmPSAweDdmO1xuICAgICAgICAgICAgcmVzdWx0LnIgPSBoZXhsaWZ5KGJ5dGVzLnNsaWNlKDAsIDMyKSk7XG4gICAgICAgICAgICByZXN1bHQucyA9IGhleGxpZnkoYnl0ZXMuc2xpY2UoMzIsIDY0KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYnl0ZXMubGVuZ3RoID09PSA2NSkge1xuICAgICAgICAgICAgcmVzdWx0LnIgPSBoZXhsaWZ5KGJ5dGVzLnNsaWNlKDAsIDMyKSk7XG4gICAgICAgICAgICByZXN1bHQucyA9IGhleGxpZnkoYnl0ZXMuc2xpY2UoMzIsIDY0KSk7XG4gICAgICAgICAgICByZXN1bHQudiA9IGJ5dGVzWzY0XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHNpZ25hdHVyZSBzdHJpbmdcIiwgXCJzaWduYXR1cmVcIiwgc2lnbmF0dXJlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBbGxvdyBhIHJlY2lkIHRvIGJlIHVzZWQgYXMgdGhlIHZcbiAgICAgICAgaWYgKHJlc3VsdC52IDwgMjcpIHtcbiAgICAgICAgICAgIGlmIChyZXN1bHQudiA9PT0gMCB8fCByZXN1bHQudiA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC52ICs9IDI3O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInNpZ25hdHVyZSBpbnZhbGlkIHYgYnl0ZVwiLCBcInNpZ25hdHVyZVwiLCBzaWduYXR1cmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIENvbXB1dGUgcmVjb3ZlcnlQYXJhbSBmcm9tIHZcbiAgICAgICAgcmVzdWx0LnJlY292ZXJ5UGFyYW0gPSAxIC0gKHJlc3VsdC52ICUgMik7XG4gICAgICAgIC8vIENvbXB1dGUgX3ZzIGZyb20gcmVjb3ZlcnlQYXJhbSBhbmQgc1xuICAgICAgICBpZiAocmVzdWx0LnJlY292ZXJ5UGFyYW0pIHtcbiAgICAgICAgICAgIGJ5dGVzWzMyXSB8PSAweDgwO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC5fdnMgPSBoZXhsaWZ5KGJ5dGVzLnNsaWNlKDMyLCA2NCkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmVzdWx0LnIgPSBzaWduYXR1cmUucjtcbiAgICAgICAgcmVzdWx0LnMgPSBzaWduYXR1cmUucztcbiAgICAgICAgcmVzdWx0LnYgPSBzaWduYXR1cmUudjtcbiAgICAgICAgcmVzdWx0LnJlY292ZXJ5UGFyYW0gPSBzaWduYXR1cmUucmVjb3ZlcnlQYXJhbTtcbiAgICAgICAgcmVzdWx0Ll92cyA9IHNpZ25hdHVyZS5fdnM7XG4gICAgICAgIC8vIElmIHRoZSBfdnMgaXMgYXZhaWxhYmxlLCB1c2UgaXQgdG8gcG9wdWxhdGUgbWlzc2luZyBzLCB2IGFuZCByZWNvdmVyeVBhcmFtXG4gICAgICAgIC8vIGFuZCB2ZXJpZnkgbm9uLW1pc3NpbmcgcywgdiBhbmQgcmVjb3ZlcnlQYXJhbVxuICAgICAgICBpZiAocmVzdWx0Ll92cyAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCB2cyA9IHplcm9QYWQoYXJyYXlpZnkocmVzdWx0Ll92cyksIDMyKTtcbiAgICAgICAgICAgIHJlc3VsdC5fdnMgPSBoZXhsaWZ5KHZzKTtcbiAgICAgICAgICAgIC8vIFNldCBvciBjaGVjayB0aGUgcmVjaWRcbiAgICAgICAgICAgIGNvbnN0IHJlY292ZXJ5UGFyYW0gPSAoKHZzWzBdID49IDEyOCkgPyAxIDogMCk7XG4gICAgICAgICAgICBpZiAocmVzdWx0LnJlY292ZXJ5UGFyYW0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5yZWNvdmVyeVBhcmFtID0gcmVjb3ZlcnlQYXJhbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHJlc3VsdC5yZWNvdmVyeVBhcmFtICE9PSByZWNvdmVyeVBhcmFtKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInNpZ25hdHVyZSByZWNvdmVyeVBhcmFtIG1pc21hdGNoIF92c1wiLCBcInNpZ25hdHVyZVwiLCBzaWduYXR1cmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gU2V0IG9yIGNoZWNrIHRoZSBzXG4gICAgICAgICAgICB2c1swXSAmPSAweDdmO1xuICAgICAgICAgICAgY29uc3QgcyA9IGhleGxpZnkodnMpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdC5zID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucyA9IHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChyZXN1bHQucyAhPT0gcykge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJzaWduYXR1cmUgdiBtaXNtYXRjaCBfdnNcIiwgXCJzaWduYXR1cmVcIiwgc2lnbmF0dXJlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBVc2UgcmVjaWQgYW5kIHYgdG8gcG9wdWxhdGUgZWFjaCBvdGhlclxuICAgICAgICBpZiAocmVzdWx0LnJlY292ZXJ5UGFyYW0gPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHJlc3VsdC52ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwic2lnbmF0dXJlIG1pc3NpbmcgdiBhbmQgcmVjb3ZlcnlQYXJhbVwiLCBcInNpZ25hdHVyZVwiLCBzaWduYXR1cmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocmVzdWx0LnYgPT09IDAgfHwgcmVzdWx0LnYgPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucmVjb3ZlcnlQYXJhbSA9IHJlc3VsdC52O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnJlY292ZXJ5UGFyYW0gPSAxIC0gKHJlc3VsdC52ICUgMik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAocmVzdWx0LnYgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC52ID0gMjcgKyByZXN1bHQucmVjb3ZlcnlQYXJhbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlY0lkID0gKHJlc3VsdC52ID09PSAwIHx8IHJlc3VsdC52ID09PSAxKSA/IHJlc3VsdC52IDogKDEgLSAocmVzdWx0LnYgJSAyKSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5yZWNvdmVyeVBhcmFtICE9PSByZWNJZCkge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwic2lnbmF0dXJlIHJlY292ZXJ5UGFyYW0gbWlzbWF0Y2ggdlwiLCBcInNpZ25hdHVyZVwiLCBzaWduYXR1cmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0LnIgPT0gbnVsbCB8fCAhaXNIZXhTdHJpbmcocmVzdWx0LnIpKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwic2lnbmF0dXJlIG1pc3Npbmcgb3IgaW52YWxpZCByXCIsIFwic2lnbmF0dXJlXCIsIHNpZ25hdHVyZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQuciA9IGhleFplcm9QYWQocmVzdWx0LnIsIDMyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0LnMgPT0gbnVsbCB8fCAhaXNIZXhTdHJpbmcocmVzdWx0LnMpKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwic2lnbmF0dXJlIG1pc3Npbmcgb3IgaW52YWxpZCBzXCIsIFwic2lnbmF0dXJlXCIsIHNpZ25hdHVyZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQucyA9IGhleFplcm9QYWQocmVzdWx0LnMsIDMyKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2cyA9IGFycmF5aWZ5KHJlc3VsdC5zKTtcbiAgICAgICAgaWYgKHZzWzBdID49IDEyOCkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInNpZ25hdHVyZSBzIG91dCBvZiByYW5nZVwiLCBcInNpZ25hdHVyZVwiLCBzaWduYXR1cmUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHQucmVjb3ZlcnlQYXJhbSkge1xuICAgICAgICAgICAgdnNbMF0gfD0gMHg4MDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBfdnMgPSBoZXhsaWZ5KHZzKTtcbiAgICAgICAgaWYgKHJlc3VsdC5fdnMpIHtcbiAgICAgICAgICAgIGlmICghaXNIZXhTdHJpbmcocmVzdWx0Ll92cykpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwic2lnbmF0dXJlIGludmFsaWQgX3ZzXCIsIFwic2lnbmF0dXJlXCIsIHNpZ25hdHVyZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQuX3ZzID0gaGV4WmVyb1BhZChyZXN1bHQuX3ZzLCAzMik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2V0IG9yIGNoZWNrIHRoZSBfdnNcbiAgICAgICAgaWYgKHJlc3VsdC5fdnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzdWx0Ll92cyA9IF92cztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChyZXN1bHQuX3ZzICE9PSBfdnMpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJzaWduYXR1cmUgX3ZzIG1pc21hdGNoIHYgYW5kIHNcIiwgXCJzaWduYXR1cmVcIiwgc2lnbmF0dXJlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQueVBhcml0eUFuZFMgPSByZXN1bHQuX3ZzO1xuICAgIHJlc3VsdC5jb21wYWN0ID0gcmVzdWx0LnIgKyByZXN1bHQueVBhcml0eUFuZFMuc3Vic3RyaW5nKDIpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnQgZnVuY3Rpb24gam9pblNpZ25hdHVyZShzaWduYXR1cmUpIHtcbiAgICBzaWduYXR1cmUgPSBzcGxpdFNpZ25hdHVyZShzaWduYXR1cmUpO1xuICAgIHJldHVybiBoZXhsaWZ5KGNvbmNhdChbXG4gICAgICAgIHNpZ25hdHVyZS5yLFxuICAgICAgICBzaWduYXR1cmUucyxcbiAgICAgICAgKHNpZ25hdHVyZS5yZWNvdmVyeVBhcmFtID8gXCIweDFjXCIgOiBcIjB4MWJcIilcbiAgICBdKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogIEJpZ051bWJlclxuICpcbiAqICBBIHdyYXBwZXIgYXJvdW5kIHRoZSBCTi5qcyBvYmplY3QuIFdlIHVzZSB0aGUgQk4uanMgbGlicmFyeVxuICogIGJlY2F1c2UgaXQgaXMgdXNlZCBieSBlbGxpcHRpYywgc28gaXQgaXMgcmVxdWlyZWQgcmVnYXJkbGVzcy5cbiAqXG4gKi9cbmltcG9ydCBfQk4gZnJvbSBcImJuLmpzXCI7XG52YXIgQk4gPSBfQk4uQk47XG5pbXBvcnQgeyBoZXhsaWZ5LCBpc0J5dGVzLCBpc0hleFN0cmluZyB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9ieXRlc1wiO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2xvZ2dlclwiO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuL192ZXJzaW9uXCI7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKHZlcnNpb24pO1xuY29uc3QgX2NvbnN0cnVjdG9yR3VhcmQgPSB7fTtcbmNvbnN0IE1BWF9TQUZFID0gMHgxZmZmZmZmZmZmZmZmZjtcbmV4cG9ydCBmdW5jdGlvbiBpc0JpZ051bWJlcmlzaCh2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgIT0gbnVsbCkgJiYgKEJpZ051bWJlci5pc0JpZ051bWJlcih2YWx1ZSkgfHxcbiAgICAgICAgKHR5cGVvZiAodmFsdWUpID09PSBcIm51bWJlclwiICYmICh2YWx1ZSAlIDEpID09PSAwKSB8fFxuICAgICAgICAodHlwZW9mICh2YWx1ZSkgPT09IFwic3RyaW5nXCIgJiYgISF2YWx1ZS5tYXRjaCgvXi0/WzAtOV0rJC8pKSB8fFxuICAgICAgICBpc0hleFN0cmluZyh2YWx1ZSkgfHxcbiAgICAgICAgKHR5cGVvZiAodmFsdWUpID09PSBcImJpZ2ludFwiKSB8fFxuICAgICAgICBpc0J5dGVzKHZhbHVlKSk7XG59XG4vLyBPbmx5IHdhcm4gYWJvdXQgcGFzc2luZyAxMCBpbnRvIHJhZGl4IG9uY2VcbmxldCBfd2FybmVkVG9TdHJpbmdSYWRpeCA9IGZhbHNlO1xuZXhwb3J0IGNsYXNzIEJpZ051bWJlciB7XG4gICAgY29uc3RydWN0b3IoY29uc3RydWN0b3JHdWFyZCwgaGV4KSB7XG4gICAgICAgIGlmIChjb25zdHJ1Y3Rvckd1YXJkICE9PSBfY29uc3RydWN0b3JHdWFyZCkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJjYW5ub3QgY2FsbCBjb25zdHJ1Y3RvciBkaXJlY3RseTsgdXNlIEJpZ051bWJlci5mcm9tXCIsIExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLCB7XG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uOiBcIm5ldyAoQmlnTnVtYmVyKVwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9oZXggPSBoZXg7XG4gICAgICAgIHRoaXMuX2lzQmlnTnVtYmVyID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmZyZWV6ZSh0aGlzKTtcbiAgICB9XG4gICAgZnJvbVR3b3ModmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRvQmlnTnVtYmVyKHRvQk4odGhpcykuZnJvbVR3b3ModmFsdWUpKTtcbiAgICB9XG4gICAgdG9Ud29zKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0b0JpZ051bWJlcih0b0JOKHRoaXMpLnRvVHdvcyh2YWx1ZSkpO1xuICAgIH1cbiAgICBhYnMoKSB7XG4gICAgICAgIGlmICh0aGlzLl9oZXhbMF0gPT09IFwiLVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gQmlnTnVtYmVyLmZyb20odGhpcy5faGV4LnN1YnN0cmluZygxKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGFkZChvdGhlcikge1xuICAgICAgICByZXR1cm4gdG9CaWdOdW1iZXIodG9CTih0aGlzKS5hZGQodG9CTihvdGhlcikpKTtcbiAgICB9XG4gICAgc3ViKG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0b0JpZ051bWJlcih0b0JOKHRoaXMpLnN1Yih0b0JOKG90aGVyKSkpO1xuICAgIH1cbiAgICBkaXYob3RoZXIpIHtcbiAgICAgICAgY29uc3QgbyA9IEJpZ051bWJlci5mcm9tKG90aGVyKTtcbiAgICAgICAgaWYgKG8uaXNaZXJvKCkpIHtcbiAgICAgICAgICAgIHRocm93RmF1bHQoXCJkaXZpc2lvbi1ieS16ZXJvXCIsIFwiZGl2XCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b0JpZ051bWJlcih0b0JOKHRoaXMpLmRpdih0b0JOKG90aGVyKSkpO1xuICAgIH1cbiAgICBtdWwob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRvQmlnTnVtYmVyKHRvQk4odGhpcykubXVsKHRvQk4ob3RoZXIpKSk7XG4gICAgfVxuICAgIG1vZChvdGhlcikge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRvQk4ob3RoZXIpO1xuICAgICAgICBpZiAodmFsdWUuaXNOZWcoKSkge1xuICAgICAgICAgICAgdGhyb3dGYXVsdChcImRpdmlzaW9uLWJ5LXplcm9cIiwgXCJtb2RcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvQmlnTnVtYmVyKHRvQk4odGhpcykudW1vZCh2YWx1ZSkpO1xuICAgIH1cbiAgICBwb3cob3RoZXIpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0b0JOKG90aGVyKTtcbiAgICAgICAgaWYgKHZhbHVlLmlzTmVnKCkpIHtcbiAgICAgICAgICAgIHRocm93RmF1bHQoXCJuZWdhdGl2ZS1wb3dlclwiLCBcInBvd1wiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9CaWdOdW1iZXIodG9CTih0aGlzKS5wb3codmFsdWUpKTtcbiAgICB9XG4gICAgYW5kKG90aGVyKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdG9CTihvdGhlcik7XG4gICAgICAgIGlmICh0aGlzLmlzTmVnYXRpdmUoKSB8fCB2YWx1ZS5pc05lZygpKSB7XG4gICAgICAgICAgICB0aHJvd0ZhdWx0KFwidW5ib3VuZC1iaXR3aXNlLXJlc3VsdFwiLCBcImFuZFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9CaWdOdW1iZXIodG9CTih0aGlzKS5hbmQodmFsdWUpKTtcbiAgICB9XG4gICAgb3Iob3RoZXIpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0b0JOKG90aGVyKTtcbiAgICAgICAgaWYgKHRoaXMuaXNOZWdhdGl2ZSgpIHx8IHZhbHVlLmlzTmVnKCkpIHtcbiAgICAgICAgICAgIHRocm93RmF1bHQoXCJ1bmJvdW5kLWJpdHdpc2UtcmVzdWx0XCIsIFwib3JcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvQmlnTnVtYmVyKHRvQk4odGhpcykub3IodmFsdWUpKTtcbiAgICB9XG4gICAgeG9yKG90aGVyKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdG9CTihvdGhlcik7XG4gICAgICAgIGlmICh0aGlzLmlzTmVnYXRpdmUoKSB8fCB2YWx1ZS5pc05lZygpKSB7XG4gICAgICAgICAgICB0aHJvd0ZhdWx0KFwidW5ib3VuZC1iaXR3aXNlLXJlc3VsdFwiLCBcInhvclwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9CaWdOdW1iZXIodG9CTih0aGlzKS54b3IodmFsdWUpKTtcbiAgICB9XG4gICAgbWFzayh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5pc05lZ2F0aXZlKCkgfHwgdmFsdWUgPCAwKSB7XG4gICAgICAgICAgICB0aHJvd0ZhdWx0KFwibmVnYXRpdmUtd2lkdGhcIiwgXCJtYXNrXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b0JpZ051bWJlcih0b0JOKHRoaXMpLm1hc2tuKHZhbHVlKSk7XG4gICAgfVxuICAgIHNobCh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5pc05lZ2F0aXZlKCkgfHwgdmFsdWUgPCAwKSB7XG4gICAgICAgICAgICB0aHJvd0ZhdWx0KFwibmVnYXRpdmUtd2lkdGhcIiwgXCJzaGxcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvQmlnTnVtYmVyKHRvQk4odGhpcykuc2hsbih2YWx1ZSkpO1xuICAgIH1cbiAgICBzaHIodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNOZWdhdGl2ZSgpIHx8IHZhbHVlIDwgMCkge1xuICAgICAgICAgICAgdGhyb3dGYXVsdChcIm5lZ2F0aXZlLXdpZHRoXCIsIFwic2hyXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b0JpZ051bWJlcih0b0JOKHRoaXMpLnNocm4odmFsdWUpKTtcbiAgICB9XG4gICAgZXEob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRvQk4odGhpcykuZXEodG9CTihvdGhlcikpO1xuICAgIH1cbiAgICBsdChvdGhlcikge1xuICAgICAgICByZXR1cm4gdG9CTih0aGlzKS5sdCh0b0JOKG90aGVyKSk7XG4gICAgfVxuICAgIGx0ZShvdGhlcikge1xuICAgICAgICByZXR1cm4gdG9CTih0aGlzKS5sdGUodG9CTihvdGhlcikpO1xuICAgIH1cbiAgICBndChvdGhlcikge1xuICAgICAgICByZXR1cm4gdG9CTih0aGlzKS5ndCh0b0JOKG90aGVyKSk7XG4gICAgfVxuICAgIGd0ZShvdGhlcikge1xuICAgICAgICByZXR1cm4gdG9CTih0aGlzKS5ndGUodG9CTihvdGhlcikpO1xuICAgIH1cbiAgICBpc05lZ2F0aXZlKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuX2hleFswXSA9PT0gXCItXCIpO1xuICAgIH1cbiAgICBpc1plcm8oKSB7XG4gICAgICAgIHJldHVybiB0b0JOKHRoaXMpLmlzWmVybygpO1xuICAgIH1cbiAgICB0b051bWJlcigpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0b0JOKHRoaXMpLnRvTnVtYmVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvd0ZhdWx0KFwib3ZlcmZsb3dcIiwgXCJ0b051bWJlclwiLCB0aGlzLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB0b0JpZ0ludCgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBCaWdJbnQodGhpcy50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkgeyB9XG4gICAgICAgIHJldHVybiBsb2dnZXIudGhyb3dFcnJvcihcInRoaXMgcGxhdGZvcm0gZG9lcyBub3Qgc3VwcG9ydCBCaWdJbnRcIiwgTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHtcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLnRvU3RyaW5nKClcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICAvLyBMb3RzIG9mIHBlb3BsZSBleHBlY3QgdGhpcywgd2hpY2ggd2UgZG8gbm90IHN1cHBvcnQsIHNvIGNoZWNrIChTZWU6ICM4ODkpXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50c1swXSA9PT0gMTApIHtcbiAgICAgICAgICAgICAgICBpZiAoIV93YXJuZWRUb1N0cmluZ1JhZGl4KSB7XG4gICAgICAgICAgICAgICAgICAgIF93YXJuZWRUb1N0cmluZ1JhZGl4ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLndhcm4oXCJCaWdOdW1iZXIudG9TdHJpbmcgZG9lcyBub3QgYWNjZXB0IGFueSBwYXJhbWV0ZXJzOyBiYXNlLTEwIGlzIGFzc3VtZWRcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYXJndW1lbnRzWzBdID09PSAxNikge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiQmlnTnVtYmVyLnRvU3RyaW5nIGRvZXMgbm90IGFjY2VwdCBhbnkgcGFyYW1ldGVyczsgdXNlIGJpZ051bWJlci50b0hleFN0cmluZygpXCIsIExvZ2dlci5lcnJvcnMuVU5FWFBFQ1RFRF9BUkdVTUVOVCwge30pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJCaWdOdW1iZXIudG9TdHJpbmcgZG9lcyBub3QgYWNjZXB0IHBhcmFtZXRlcnNcIiwgTG9nZ2VyLmVycm9ycy5VTkVYUEVDVEVEX0FSR1VNRU5ULCB7fSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvQk4odGhpcykudG9TdHJpbmcoMTApO1xuICAgIH1cbiAgICB0b0hleFN0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hleDtcbiAgICB9XG4gICAgdG9KU09OKGtleSkge1xuICAgICAgICByZXR1cm4geyB0eXBlOiBcIkJpZ051bWJlclwiLCBoZXg6IHRoaXMudG9IZXhTdHJpbmcoKSB9O1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbSh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBCaWdOdW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mICh2YWx1ZSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5tYXRjaCgvXi0/MHhbMC05YS1mXSskL2kpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBCaWdOdW1iZXIoX2NvbnN0cnVjdG9yR3VhcmQsIHRvSGV4KHZhbHVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmFsdWUubWF0Y2goL14tP1swLTldKyQvKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQmlnTnVtYmVyKF9jb25zdHJ1Y3Rvckd1YXJkLCB0b0hleChuZXcgQk4odmFsdWUpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgQmlnTnVtYmVyIHN0cmluZ1wiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mICh2YWx1ZSkgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAlIDEpIHtcbiAgICAgICAgICAgICAgICB0aHJvd0ZhdWx0KFwidW5kZXJmbG93XCIsIFwiQmlnTnVtYmVyLmZyb21cIiwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZhbHVlID49IE1BWF9TQUZFIHx8IHZhbHVlIDw9IC1NQVhfU0FGRSkge1xuICAgICAgICAgICAgICAgIHRocm93RmF1bHQoXCJvdmVyZmxvd1wiLCBcIkJpZ051bWJlci5mcm9tXCIsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBCaWdOdW1iZXIuZnJvbShTdHJpbmcodmFsdWUpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhbnlWYWx1ZSA9IHZhbHVlO1xuICAgICAgICBpZiAodHlwZW9mIChhbnlWYWx1ZSkgPT09IFwiYmlnaW50XCIpIHtcbiAgICAgICAgICAgIHJldHVybiBCaWdOdW1iZXIuZnJvbShhbnlWYWx1ZS50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNCeXRlcyhhbnlWYWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBCaWdOdW1iZXIuZnJvbShoZXhsaWZ5KGFueVZhbHVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFueVZhbHVlKSB7XG4gICAgICAgICAgICAvLyBIZXhhYmxlIGludGVyZmFjZSAodGFrZXMgcHJpb3JpdHkpXG4gICAgICAgICAgICBpZiAoYW55VmFsdWUudG9IZXhTdHJpbmcpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBoZXggPSBhbnlWYWx1ZS50b0hleFN0cmluZygpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKGhleCkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEJpZ051bWJlci5mcm9tKGhleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gRm9yIG5vdywgaGFuZGxlIGxlZ2FjeSBKU09OLWlmaWVkIHZhbHVlcyAoZ29lcyBhd2F5IGluIHY2KVxuICAgICAgICAgICAgICAgIGxldCBoZXggPSBhbnlWYWx1ZS5faGV4O1xuICAgICAgICAgICAgICAgIC8vIE5ldy1mb3JtIEpTT05cbiAgICAgICAgICAgICAgICBpZiAoaGV4ID09IG51bGwgJiYgYW55VmFsdWUudHlwZSA9PT0gXCJCaWdOdW1iZXJcIikge1xuICAgICAgICAgICAgICAgICAgICBoZXggPSBhbnlWYWx1ZS5oZXg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKGhleCkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzSGV4U3RyaW5nKGhleCkgfHwgKGhleFswXSA9PT0gXCItXCIgJiYgaXNIZXhTdHJpbmcoaGV4LnN1YnN0cmluZygxKSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQmlnTnVtYmVyLmZyb20oaGV4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgQmlnTnVtYmVyIHZhbHVlXCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgIH1cbiAgICBzdGF0aWMgaXNCaWdOdW1iZXIodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9pc0JpZ051bWJlcik7XG4gICAgfVxufVxuLy8gTm9ybWFsaXplIHRoZSBoZXggc3RyaW5nXG5mdW5jdGlvbiB0b0hleCh2YWx1ZSkge1xuICAgIC8vIEZvciBCTiwgY2FsbCBvbiB0aGUgaGV4IHN0cmluZ1xuICAgIGlmICh0eXBlb2YgKHZhbHVlKSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gdG9IZXgodmFsdWUudG9TdHJpbmcoMTYpKTtcbiAgICB9XG4gICAgLy8gSWYgbmVnYXRpdmUsIHByZXBlbmQgdGhlIG5lZ2F0aXZlIHNpZ24gdG8gdGhlIG5vcm1hbGl6ZWQgcG9zaXRpdmUgdmFsdWVcbiAgICBpZiAodmFsdWVbMF0gPT09IFwiLVwiKSB7XG4gICAgICAgIC8vIFN0cmlwIG9mZiB0aGUgbmVnYXRpdmUgc2lnblxuICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZygxKTtcbiAgICAgICAgLy8gQ2Fubm90IGhhdmUgbXVsdGlwbGUgbmVnYXRpdmUgc2lnbnMgKGUuZy4gXCItLTB4MDRcIilcbiAgICAgICAgaWYgKHZhbHVlWzBdID09PSBcIi1cIikge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgaGV4XCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENhbGwgdG9IZXggb24gdGhlIHBvc2l0aXZlIGNvbXBvbmVudFxuICAgICAgICB2YWx1ZSA9IHRvSGV4KHZhbHVlKTtcbiAgICAgICAgLy8gRG8gbm90IGFsbG93IFwiLTB4MDBcIlxuICAgICAgICBpZiAodmFsdWUgPT09IFwiMHgwMFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTmVnYXRlIHRoZSB2YWx1ZVxuICAgICAgICByZXR1cm4gXCItXCIgKyB2YWx1ZTtcbiAgICB9XG4gICAgLy8gQWRkIGEgXCIweFwiIHByZWZpeCBpZiBtaXNzaW5nXG4gICAgaWYgKHZhbHVlLnN1YnN0cmluZygwLCAyKSAhPT0gXCIweFwiKSB7XG4gICAgICAgIHZhbHVlID0gXCIweFwiICsgdmFsdWU7XG4gICAgfVxuICAgIC8vIE5vcm1hbGl6ZSB6ZXJvXG4gICAgaWYgKHZhbHVlID09PSBcIjB4XCIpIHtcbiAgICAgICAgcmV0dXJuIFwiMHgwMFwiO1xuICAgIH1cbiAgICAvLyBNYWtlIHRoZSBzdHJpbmcgZXZlbiBsZW5ndGhcbiAgICBpZiAodmFsdWUubGVuZ3RoICUgMikge1xuICAgICAgICB2YWx1ZSA9IFwiMHgwXCIgKyB2YWx1ZS5zdWJzdHJpbmcoMik7XG4gICAgfVxuICAgIC8vIFRyaW0gdG8gc21hbGxlc3QgZXZlbi1sZW5ndGggc3RyaW5nXG4gICAgd2hpbGUgKHZhbHVlLmxlbmd0aCA+IDQgJiYgdmFsdWUuc3Vic3RyaW5nKDAsIDQpID09PSBcIjB4MDBcIikge1xuICAgICAgICB2YWx1ZSA9IFwiMHhcIiArIHZhbHVlLnN1YnN0cmluZyg0KTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gdG9CaWdOdW1iZXIodmFsdWUpIHtcbiAgICByZXR1cm4gQmlnTnVtYmVyLmZyb20odG9IZXgodmFsdWUpKTtcbn1cbmZ1bmN0aW9uIHRvQk4odmFsdWUpIHtcbiAgICBjb25zdCBoZXggPSBCaWdOdW1iZXIuZnJvbSh2YWx1ZSkudG9IZXhTdHJpbmcoKTtcbiAgICBpZiAoaGV4WzBdID09PSBcIi1cIikge1xuICAgICAgICByZXR1cm4gKG5ldyBCTihcIi1cIiArIGhleC5zdWJzdHJpbmcoMyksIDE2KSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQk4oaGV4LnN1YnN0cmluZygyKSwgMTYpO1xufVxuZnVuY3Rpb24gdGhyb3dGYXVsdChmYXVsdCwgb3BlcmF0aW9uLCB2YWx1ZSkge1xuICAgIGNvbnN0IHBhcmFtcyA9IHsgZmF1bHQ6IGZhdWx0LCBvcGVyYXRpb246IG9wZXJhdGlvbiB9O1xuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHBhcmFtcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gbG9nZ2VyLnRocm93RXJyb3IoZmF1bHQsIExvZ2dlci5lcnJvcnMuTlVNRVJJQ19GQVVMVCwgcGFyYW1zKTtcbn1cbi8vIHZhbHVlIHNob3VsZCBoYXZlIG5vIHByZWZpeFxuZXhwb3J0IGZ1bmN0aW9uIF9iYXNlMzZUbzE2KHZhbHVlKSB7XG4gICAgcmV0dXJuIChuZXcgQk4odmFsdWUsIDM2KSkudG9TdHJpbmcoMTYpO1xufVxuLy8gdmFsdWUgc2hvdWxkIGhhdmUgbm8gcHJlZml4XG5leHBvcnQgZnVuY3Rpb24gX2Jhc2UxNlRvMzYodmFsdWUpIHtcbiAgICByZXR1cm4gKG5ldyBCTih2YWx1ZSwgMTYpKS50b1N0cmluZygzNik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iaWdudW1iZXIuanMubWFwIiwiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSBcImJpZ251bWJlci81LjYuMlwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X3ZlcnNpb24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQgc2hhMyBmcm9tIFwianMtc2hhM1wiO1xuaW1wb3J0IHsgYXJyYXlpZnkgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcbmV4cG9ydCBmdW5jdGlvbiBrZWNjYWsyNTYoZGF0YSkge1xuICAgIHJldHVybiAnMHgnICsgc2hhMy5rZWNjYWtfMjU2KGFycmF5aWZ5KGRhdGEpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImV4cG9ydCBjb25zdCB2ZXJzaW9uID0gXCJybHAvNS42LjFcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV92ZXJzaW9uLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuLy9TZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS93aWtpL3dpa2kvUkxQXG5pbXBvcnQgeyBhcnJheWlmeSwgaGV4bGlmeSwgaXNCeXRlc0xpa2UgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcbmZ1bmN0aW9uIGFycmF5aWZ5SW50ZWdlcih2YWx1ZSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIHdoaWxlICh2YWx1ZSkge1xuICAgICAgICByZXN1bHQudW5zaGlmdCh2YWx1ZSAmIDB4ZmYpO1xuICAgICAgICB2YWx1ZSA+Pj0gODtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHVuYXJyYXlpZnlJbnRlZ2VyKGRhdGEsIG9mZnNldCwgbGVuZ3RoKSB7XG4gICAgbGV0IHJlc3VsdCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQgPSAocmVzdWx0ICogMjU2KSArIGRhdGFbb2Zmc2V0ICsgaV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBfZW5jb2RlKG9iamVjdCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG9iamVjdCkpIHtcbiAgICAgICAgbGV0IHBheWxvYWQgPSBbXTtcbiAgICAgICAgb2JqZWN0LmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgICBwYXlsb2FkID0gcGF5bG9hZC5jb25jYXQoX2VuY29kZShjaGlsZCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHBheWxvYWQubGVuZ3RoIDw9IDU1KSB7XG4gICAgICAgICAgICBwYXlsb2FkLnVuc2hpZnQoMHhjMCArIHBheWxvYWQubGVuZ3RoKTtcbiAgICAgICAgICAgIHJldHVybiBwYXlsb2FkO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5aWZ5SW50ZWdlcihwYXlsb2FkLmxlbmd0aCk7XG4gICAgICAgIGxlbmd0aC51bnNoaWZ0KDB4ZjcgKyBsZW5ndGgubGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIGxlbmd0aC5jb25jYXQocGF5bG9hZCk7XG4gICAgfVxuICAgIGlmICghaXNCeXRlc0xpa2Uob2JqZWN0KSkge1xuICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiUkxQIG9iamVjdCBtdXN0IGJlIEJ5dGVzTGlrZVwiLCBcIm9iamVjdFwiLCBvYmplY3QpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJyYXlpZnkob2JqZWN0KSk7XG4gICAgaWYgKGRhdGEubGVuZ3RoID09PSAxICYmIGRhdGFbMF0gPD0gMHg3Zikge1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZGF0YS5sZW5ndGggPD0gNTUpIHtcbiAgICAgICAgZGF0YS51bnNoaWZ0KDB4ODAgKyBkYXRhLmxlbmd0aCk7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBjb25zdCBsZW5ndGggPSBhcnJheWlmeUludGVnZXIoZGF0YS5sZW5ndGgpO1xuICAgIGxlbmd0aC51bnNoaWZ0KDB4YjcgKyBsZW5ndGgubGVuZ3RoKTtcbiAgICByZXR1cm4gbGVuZ3RoLmNvbmNhdChkYXRhKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGUob2JqZWN0KSB7XG4gICAgcmV0dXJuIGhleGxpZnkoX2VuY29kZShvYmplY3QpKTtcbn1cbmZ1bmN0aW9uIF9kZWNvZGVDaGlsZHJlbihkYXRhLCBvZmZzZXQsIGNoaWxkT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICB3aGlsZSAoY2hpbGRPZmZzZXQgPCBvZmZzZXQgKyAxICsgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGRlY29kZWQgPSBfZGVjb2RlKGRhdGEsIGNoaWxkT2Zmc2V0KTtcbiAgICAgICAgcmVzdWx0LnB1c2goZGVjb2RlZC5yZXN1bHQpO1xuICAgICAgICBjaGlsZE9mZnNldCArPSBkZWNvZGVkLmNvbnN1bWVkO1xuICAgICAgICBpZiAoY2hpbGRPZmZzZXQgPiBvZmZzZXQgKyAxICsgbGVuZ3RoKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcImNoaWxkIGRhdGEgdG9vIHNob3J0XCIsIExvZ2dlci5lcnJvcnMuQlVGRkVSX09WRVJSVU4sIHt9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geyBjb25zdW1lZDogKDEgKyBsZW5ndGgpLCByZXN1bHQ6IHJlc3VsdCB9O1xufVxuLy8gcmV0dXJucyB7IGNvbnN1bWVkOiBudW1iZXIsIHJlc3VsdDogT2JqZWN0IH1cbmZ1bmN0aW9uIF9kZWNvZGUoZGF0YSwgb2Zmc2V0KSB7XG4gICAgaWYgKGRhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiZGF0YSB0b28gc2hvcnRcIiwgTG9nZ2VyLmVycm9ycy5CVUZGRVJfT1ZFUlJVTiwge30pO1xuICAgIH1cbiAgICAvLyBBcnJheSB3aXRoIGV4dHJhIGxlbmd0aCBwcmVmaXhcbiAgICBpZiAoZGF0YVtvZmZzZXRdID49IDB4ZjgpIHtcbiAgICAgICAgY29uc3QgbGVuZ3RoTGVuZ3RoID0gZGF0YVtvZmZzZXRdIC0gMHhmNztcbiAgICAgICAgaWYgKG9mZnNldCArIDEgKyBsZW5ndGhMZW5ndGggPiBkYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJkYXRhIHNob3J0IHNlZ21lbnQgdG9vIHNob3J0XCIsIExvZ2dlci5lcnJvcnMuQlVGRkVSX09WRVJSVU4sIHt9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsZW5ndGggPSB1bmFycmF5aWZ5SW50ZWdlcihkYXRhLCBvZmZzZXQgKyAxLCBsZW5ndGhMZW5ndGgpO1xuICAgICAgICBpZiAob2Zmc2V0ICsgMSArIGxlbmd0aExlbmd0aCArIGxlbmd0aCA+IGRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcImRhdGEgbG9uZyBzZWdtZW50IHRvbyBzaG9ydFwiLCBMb2dnZXIuZXJyb3JzLkJVRkZFUl9PVkVSUlVOLCB7fSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9kZWNvZGVDaGlsZHJlbihkYXRhLCBvZmZzZXQsIG9mZnNldCArIDEgKyBsZW5ndGhMZW5ndGgsIGxlbmd0aExlbmd0aCArIGxlbmd0aCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGRhdGFbb2Zmc2V0XSA+PSAweGMwKSB7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IGRhdGFbb2Zmc2V0XSAtIDB4YzA7XG4gICAgICAgIGlmIChvZmZzZXQgKyAxICsgbGVuZ3RoID4gZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiZGF0YSBhcnJheSB0b28gc2hvcnRcIiwgTG9nZ2VyLmVycm9ycy5CVUZGRVJfT1ZFUlJVTiwge30pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfZGVjb2RlQ2hpbGRyZW4oZGF0YSwgb2Zmc2V0LCBvZmZzZXQgKyAxLCBsZW5ndGgpO1xuICAgIH1cbiAgICBlbHNlIGlmIChkYXRhW29mZnNldF0gPj0gMHhiOCkge1xuICAgICAgICBjb25zdCBsZW5ndGhMZW5ndGggPSBkYXRhW29mZnNldF0gLSAweGI3O1xuICAgICAgICBpZiAob2Zmc2V0ICsgMSArIGxlbmd0aExlbmd0aCA+IGRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcImRhdGEgYXJyYXkgdG9vIHNob3J0XCIsIExvZ2dlci5lcnJvcnMuQlVGRkVSX09WRVJSVU4sIHt9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsZW5ndGggPSB1bmFycmF5aWZ5SW50ZWdlcihkYXRhLCBvZmZzZXQgKyAxLCBsZW5ndGhMZW5ndGgpO1xuICAgICAgICBpZiAob2Zmc2V0ICsgMSArIGxlbmd0aExlbmd0aCArIGxlbmd0aCA+IGRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcImRhdGEgYXJyYXkgdG9vIHNob3J0XCIsIExvZ2dlci5lcnJvcnMuQlVGRkVSX09WRVJSVU4sIHt9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSBoZXhsaWZ5KGRhdGEuc2xpY2Uob2Zmc2V0ICsgMSArIGxlbmd0aExlbmd0aCwgb2Zmc2V0ICsgMSArIGxlbmd0aExlbmd0aCArIGxlbmd0aCkpO1xuICAgICAgICByZXR1cm4geyBjb25zdW1lZDogKDEgKyBsZW5ndGhMZW5ndGggKyBsZW5ndGgpLCByZXN1bHQ6IHJlc3VsdCB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChkYXRhW29mZnNldF0gPj0gMHg4MCkge1xuICAgICAgICBjb25zdCBsZW5ndGggPSBkYXRhW29mZnNldF0gLSAweDgwO1xuICAgICAgICBpZiAob2Zmc2V0ICsgMSArIGxlbmd0aCA+IGRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcImRhdGEgdG9vIHNob3J0XCIsIExvZ2dlci5lcnJvcnMuQlVGRkVSX09WRVJSVU4sIHt9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSBoZXhsaWZ5KGRhdGEuc2xpY2Uob2Zmc2V0ICsgMSwgb2Zmc2V0ICsgMSArIGxlbmd0aCkpO1xuICAgICAgICByZXR1cm4geyBjb25zdW1lZDogKDEgKyBsZW5ndGgpLCByZXN1bHQ6IHJlc3VsdCB9O1xuICAgIH1cbiAgICByZXR1cm4geyBjb25zdW1lZDogMSwgcmVzdWx0OiBoZXhsaWZ5KGRhdGFbb2Zmc2V0XSkgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGUoZGF0YSkge1xuICAgIGNvbnN0IGJ5dGVzID0gYXJyYXlpZnkoZGF0YSk7XG4gICAgY29uc3QgZGVjb2RlZCA9IF9kZWNvZGUoYnl0ZXMsIDApO1xuICAgIGlmIChkZWNvZGVkLmNvbnN1bWVkICE9PSBieXRlcy5sZW5ndGgpIHtcbiAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgcmxwIGRhdGFcIiwgXCJkYXRhXCIsIGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGVjb2RlZC5yZXN1bHQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJleHBvcnQgY29uc3QgdmVyc2lvbiA9IFwiYWRkcmVzcy81LjYuMVwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X3ZlcnNpb24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQgeyBhcnJheWlmeSwgY29uY2F0LCBoZXhEYXRhTGVuZ3RoLCBoZXhEYXRhU2xpY2UsIGlzSGV4U3RyaW5nLCBzdHJpcFplcm9zIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2J5dGVzXCI7XG5pbXBvcnQgeyBCaWdOdW1iZXIsIF9iYXNlMTZUbzM2LCBfYmFzZTM2VG8xNiB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9iaWdudW1iZXJcIjtcbmltcG9ydCB7IGtlY2NhazI1NiB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9rZWNjYWsyNTZcIjtcbmltcG9ydCB7IGVuY29kZSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9ybHBcIjtcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcbmZ1bmN0aW9uIGdldENoZWNrc3VtQWRkcmVzcyhhZGRyZXNzKSB7XG4gICAgaWYgKCFpc0hleFN0cmluZyhhZGRyZXNzLCAyMCkpIHtcbiAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgYWRkcmVzc1wiLCBcImFkZHJlc3NcIiwgYWRkcmVzcyk7XG4gICAgfVxuICAgIGFkZHJlc3MgPSBhZGRyZXNzLnRvTG93ZXJDYXNlKCk7XG4gICAgY29uc3QgY2hhcnMgPSBhZGRyZXNzLnN1YnN0cmluZygyKS5zcGxpdChcIlwiKTtcbiAgICBjb25zdCBleHBhbmRlZCA9IG5ldyBVaW50OEFycmF5KDQwKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQwOyBpKyspIHtcbiAgICAgICAgZXhwYW5kZWRbaV0gPSBjaGFyc1tpXS5jaGFyQ29kZUF0KDApO1xuICAgIH1cbiAgICBjb25zdCBoYXNoZWQgPSBhcnJheWlmeShrZWNjYWsyNTYoZXhwYW5kZWQpKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQwOyBpICs9IDIpIHtcbiAgICAgICAgaWYgKChoYXNoZWRbaSA+PiAxXSA+PiA0KSA+PSA4KSB7XG4gICAgICAgICAgICBjaGFyc1tpXSA9IGNoYXJzW2ldLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChoYXNoZWRbaSA+PiAxXSAmIDB4MGYpID49IDgpIHtcbiAgICAgICAgICAgIGNoYXJzW2kgKyAxXSA9IGNoYXJzW2kgKyAxXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBcIjB4XCIgKyBjaGFycy5qb2luKFwiXCIpO1xufVxuLy8gU2hpbXMgZm9yIGVudmlyb25tZW50cyB0aGF0IGFyZSBtaXNzaW5nIHNvbWUgcmVxdWlyZWQgY29uc3RhbnRzIGFuZCBmdW5jdGlvbnNcbmNvbnN0IE1BWF9TQUZFX0lOVEVHRVIgPSAweDFmZmZmZmZmZmZmZmZmO1xuZnVuY3Rpb24gbG9nMTAoeCkge1xuICAgIGlmIChNYXRoLmxvZzEwKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmxvZzEwKHgpO1xuICAgIH1cbiAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMTA7XG59XG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0ludGVybmF0aW9uYWxfQmFua19BY2NvdW50X051bWJlclxuLy8gQ3JlYXRlIGxvb2t1cCB0YWJsZVxuY29uc3QgaWJhbkxvb2t1cCA9IHt9O1xuZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gICAgaWJhbkxvb2t1cFtTdHJpbmcoaSldID0gU3RyaW5nKGkpO1xufVxuZm9yIChsZXQgaSA9IDA7IGkgPCAyNjsgaSsrKSB7XG4gICAgaWJhbkxvb2t1cFtTdHJpbmcuZnJvbUNoYXJDb2RlKDY1ICsgaSldID0gU3RyaW5nKDEwICsgaSk7XG59XG4vLyBIb3cgbWFueSBkZWNpbWFsIGRpZ2l0cyBjYW4gd2UgcHJvY2Vzcz8gKGZvciA2NC1iaXQgZmxvYXQsIHRoaXMgaXMgMTUpXG5jb25zdCBzYWZlRGlnaXRzID0gTWF0aC5mbG9vcihsb2cxMChNQVhfU0FGRV9JTlRFR0VSKSk7XG5mdW5jdGlvbiBpYmFuQ2hlY2tzdW0oYWRkcmVzcykge1xuICAgIGFkZHJlc3MgPSBhZGRyZXNzLnRvVXBwZXJDYXNlKCk7XG4gICAgYWRkcmVzcyA9IGFkZHJlc3Muc3Vic3RyaW5nKDQpICsgYWRkcmVzcy5zdWJzdHJpbmcoMCwgMikgKyBcIjAwXCI7XG4gICAgbGV0IGV4cGFuZGVkID0gYWRkcmVzcy5zcGxpdChcIlwiKS5tYXAoKGMpID0+IHsgcmV0dXJuIGliYW5Mb29rdXBbY107IH0pLmpvaW4oXCJcIik7XG4gICAgLy8gSmF2YXNjcmlwdCBjYW4gaGFuZGxlIGludGVnZXJzIHNhZmVseSB1cCB0byAxNSAoZGVjaW1hbCkgZGlnaXRzXG4gICAgd2hpbGUgKGV4cGFuZGVkLmxlbmd0aCA+PSBzYWZlRGlnaXRzKSB7XG4gICAgICAgIGxldCBibG9jayA9IGV4cGFuZGVkLnN1YnN0cmluZygwLCBzYWZlRGlnaXRzKTtcbiAgICAgICAgZXhwYW5kZWQgPSBwYXJzZUludChibG9jaywgMTApICUgOTcgKyBleHBhbmRlZC5zdWJzdHJpbmcoYmxvY2subGVuZ3RoKTtcbiAgICB9XG4gICAgbGV0IGNoZWNrc3VtID0gU3RyaW5nKDk4IC0gKHBhcnNlSW50KGV4cGFuZGVkLCAxMCkgJSA5NykpO1xuICAgIHdoaWxlIChjaGVja3N1bS5sZW5ndGggPCAyKSB7XG4gICAgICAgIGNoZWNrc3VtID0gXCIwXCIgKyBjaGVja3N1bTtcbiAgICB9XG4gICAgcmV0dXJuIGNoZWNrc3VtO1xufVxuO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEFkZHJlc3MoYWRkcmVzcykge1xuICAgIGxldCByZXN1bHQgPSBudWxsO1xuICAgIGlmICh0eXBlb2YgKGFkZHJlc3MpICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGFkZHJlc3NcIiwgXCJhZGRyZXNzXCIsIGFkZHJlc3MpO1xuICAgIH1cbiAgICBpZiAoYWRkcmVzcy5tYXRjaCgvXigweCk/WzAtOWEtZkEtRl17NDB9JC8pKSB7XG4gICAgICAgIC8vIE1pc3NpbmcgdGhlIDB4IHByZWZpeFxuICAgICAgICBpZiAoYWRkcmVzcy5zdWJzdHJpbmcoMCwgMikgIT09IFwiMHhcIikge1xuICAgICAgICAgICAgYWRkcmVzcyA9IFwiMHhcIiArIGFkZHJlc3M7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gZ2V0Q2hlY2tzdW1BZGRyZXNzKGFkZHJlc3MpO1xuICAgICAgICAvLyBJdCBpcyBhIGNoZWNrc3VtbWVkIGFkZHJlc3Mgd2l0aCBhIGJhZCBjaGVja3N1bVxuICAgICAgICBpZiAoYWRkcmVzcy5tYXRjaCgvKFtBLUZdLipbYS1mXSl8KFthLWZdLipbQS1GXSkvKSAmJiByZXN1bHQgIT09IGFkZHJlc3MpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJiYWQgYWRkcmVzcyBjaGVja3N1bVwiLCBcImFkZHJlc3NcIiwgYWRkcmVzcyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTWF5YmUgSUNBUD8gKHdlIG9ubHkgc3VwcG9ydCBkaXJlY3QgbW9kZSlcbiAgICB9XG4gICAgZWxzZSBpZiAoYWRkcmVzcy5tYXRjaCgvXlhFWzAtOV17Mn1bMC05QS1aYS16XXszMCwzMX0kLykpIHtcbiAgICAgICAgLy8gSXQgaXMgYW4gSUNBUCBhZGRyZXNzIHdpdGggYSBiYWQgY2hlY2tzdW1cbiAgICAgICAgaWYgKGFkZHJlc3Muc3Vic3RyaW5nKDIsIDQpICE9PSBpYmFuQ2hlY2tzdW0oYWRkcmVzcykpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJiYWQgaWNhcCBjaGVja3N1bVwiLCBcImFkZHJlc3NcIiwgYWRkcmVzcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gX2Jhc2UzNlRvMTYoYWRkcmVzcy5zdWJzdHJpbmcoNCkpO1xuICAgICAgICB3aGlsZSAocmVzdWx0Lmxlbmd0aCA8IDQwKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBcIjBcIiArIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSBnZXRDaGVja3N1bUFkZHJlc3MoXCIweFwiICsgcmVzdWx0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGFkZHJlc3NcIiwgXCJhZGRyZXNzXCIsIGFkZHJlc3MpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQWRkcmVzcyhhZGRyZXNzKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgZ2V0QWRkcmVzcyhhZGRyZXNzKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEljYXBBZGRyZXNzKGFkZHJlc3MpIHtcbiAgICBsZXQgYmFzZTM2ID0gX2Jhc2UxNlRvMzYoZ2V0QWRkcmVzcyhhZGRyZXNzKS5zdWJzdHJpbmcoMikpLnRvVXBwZXJDYXNlKCk7XG4gICAgd2hpbGUgKGJhc2UzNi5sZW5ndGggPCAzMCkge1xuICAgICAgICBiYXNlMzYgPSBcIjBcIiArIGJhc2UzNjtcbiAgICB9XG4gICAgcmV0dXJuIFwiWEVcIiArIGliYW5DaGVja3N1bShcIlhFMDBcIiArIGJhc2UzNikgKyBiYXNlMzY7XG59XG4vLyBodHRwOi8vZXRoZXJldW0uc3RhY2tleGNoYW5nZS5jb20vcXVlc3Rpb25zLzc2MC9ob3ctaXMtdGhlLWFkZHJlc3Mtb2YtYW4tZXRoZXJldW0tY29udHJhY3QtY29tcHV0ZWRcbmV4cG9ydCBmdW5jdGlvbiBnZXRDb250cmFjdEFkZHJlc3ModHJhbnNhY3Rpb24pIHtcbiAgICBsZXQgZnJvbSA9IG51bGw7XG4gICAgdHJ5IHtcbiAgICAgICAgZnJvbSA9IGdldEFkZHJlc3ModHJhbnNhY3Rpb24uZnJvbSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwibWlzc2luZyBmcm9tIGFkZHJlc3NcIiwgXCJ0cmFuc2FjdGlvblwiLCB0cmFuc2FjdGlvbik7XG4gICAgfVxuICAgIGNvbnN0IG5vbmNlID0gc3RyaXBaZXJvcyhhcnJheWlmeShCaWdOdW1iZXIuZnJvbSh0cmFuc2FjdGlvbi5ub25jZSkudG9IZXhTdHJpbmcoKSkpO1xuICAgIHJldHVybiBnZXRBZGRyZXNzKGhleERhdGFTbGljZShrZWNjYWsyNTYoZW5jb2RlKFtmcm9tLCBub25jZV0pKSwgMTIpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRDcmVhdGUyQWRkcmVzcyhmcm9tLCBzYWx0LCBpbml0Q29kZUhhc2gpIHtcbiAgICBpZiAoaGV4RGF0YUxlbmd0aChzYWx0KSAhPT0gMzIpIHtcbiAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInNhbHQgbXVzdCBiZSAzMiBieXRlc1wiLCBcInNhbHRcIiwgc2FsdCk7XG4gICAgfVxuICAgIGlmIChoZXhEYXRhTGVuZ3RoKGluaXRDb2RlSGFzaCkgIT09IDMyKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbml0Q29kZUhhc2ggbXVzdCBiZSAzMiBieXRlc1wiLCBcImluaXRDb2RlSGFzaFwiLCBpbml0Q29kZUhhc2gpO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0QWRkcmVzcyhoZXhEYXRhU2xpY2Uoa2VjY2FrMjU2KGNvbmNhdChbXCIweGZmXCIsIGdldEFkZHJlc3MoZnJvbSksIHNhbHQsIGluaXRDb2RlSGFzaF0pKSwgMTIpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImV4cG9ydCBjb25zdCB2ZXJzaW9uID0gXCJoYXNoLzUuNi4xXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdmVyc2lvbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7IGFycmF5aWZ5IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2J5dGVzXCI7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbG9nZ2VyXCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4vX3ZlcnNpb25cIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIodmVyc2lvbik7XG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5leHBvcnQgdmFyIFVuaWNvZGVOb3JtYWxpemF0aW9uRm9ybTtcbihmdW5jdGlvbiAoVW5pY29kZU5vcm1hbGl6YXRpb25Gb3JtKSB7XG4gICAgVW5pY29kZU5vcm1hbGl6YXRpb25Gb3JtW1wiY3VycmVudFwiXSA9IFwiXCI7XG4gICAgVW5pY29kZU5vcm1hbGl6YXRpb25Gb3JtW1wiTkZDXCJdID0gXCJORkNcIjtcbiAgICBVbmljb2RlTm9ybWFsaXphdGlvbkZvcm1bXCJORkRcIl0gPSBcIk5GRFwiO1xuICAgIFVuaWNvZGVOb3JtYWxpemF0aW9uRm9ybVtcIk5GS0NcIl0gPSBcIk5GS0NcIjtcbiAgICBVbmljb2RlTm9ybWFsaXphdGlvbkZvcm1bXCJORktEXCJdID0gXCJORktEXCI7XG59KShVbmljb2RlTm9ybWFsaXphdGlvbkZvcm0gfHwgKFVuaWNvZGVOb3JtYWxpemF0aW9uRm9ybSA9IHt9KSk7XG47XG5leHBvcnQgdmFyIFV0ZjhFcnJvclJlYXNvbjtcbihmdW5jdGlvbiAoVXRmOEVycm9yUmVhc29uKSB7XG4gICAgLy8gQSBjb250aW51YXRpb24gYnl0ZSB3YXMgcHJlc2VudCB3aGVyZSB0aGVyZSB3YXMgbm90aGluZyB0byBjb250aW51ZVxuICAgIC8vIC0gb2Zmc2V0ID0gdGhlIGluZGV4IHRoZSBjb2RlcG9pbnQgYmVnYW4gaW5cbiAgICBVdGY4RXJyb3JSZWFzb25bXCJVTkVYUEVDVEVEX0NPTlRJTlVFXCJdID0gXCJ1bmV4cGVjdGVkIGNvbnRpbnVhdGlvbiBieXRlXCI7XG4gICAgLy8gQW4gaW52YWxpZCAobm9uLWNvbnRpbnVhdGlvbikgYnl0ZSB0byBzdGFydCBhIFVURi04IGNvZGVwb2ludCB3YXMgZm91bmRcbiAgICAvLyAtIG9mZnNldCA9IHRoZSBpbmRleCB0aGUgY29kZXBvaW50IGJlZ2FuIGluXG4gICAgVXRmOEVycm9yUmVhc29uW1wiQkFEX1BSRUZJWFwiXSA9IFwiYmFkIGNvZGVwb2ludCBwcmVmaXhcIjtcbiAgICAvLyBUaGUgc3RyaW5nIGlzIHRvbyBzaG9ydCB0byBwcm9jZXNzIHRoZSBleHBlY3RlZCBjb2RlcG9pbnRcbiAgICAvLyAtIG9mZnNldCA9IHRoZSBpbmRleCB0aGUgY29kZXBvaW50IGJlZ2FuIGluXG4gICAgVXRmOEVycm9yUmVhc29uW1wiT1ZFUlJVTlwiXSA9IFwic3RyaW5nIG92ZXJydW5cIjtcbiAgICAvLyBBIG1pc3NpbmcgY29udGludWF0aW9uIGJ5dGUgd2FzIGV4cGVjdGVkIGJ1dCBub3QgZm91bmRcbiAgICAvLyAtIG9mZnNldCA9IHRoZSBpbmRleCB0aGUgY29udGludWF0aW9uIGJ5dGUgd2FzIGV4cGVjdGVkIGF0XG4gICAgVXRmOEVycm9yUmVhc29uW1wiTUlTU0lOR19DT05USU5VRVwiXSA9IFwibWlzc2luZyBjb250aW51YXRpb24gYnl0ZVwiO1xuICAgIC8vIFRoZSBjb21wdXRlZCBjb2RlIHBvaW50IGlzIG91dHNpZGUgdGhlIHJhbmdlIGZvciBVVEYtOFxuICAgIC8vIC0gb2Zmc2V0ICAgICAgID0gc3RhcnQgb2YgdGhpcyBjb2RlcG9pbnRcbiAgICAvLyAtIGJhZENvZGVwb2ludCA9IHRoZSBjb21wdXRlZCBjb2RlcG9pbnQ7IG91dHNpZGUgdGhlIFVURi04IHJhbmdlXG4gICAgVXRmOEVycm9yUmVhc29uW1wiT1VUX09GX1JBTkdFXCJdID0gXCJvdXQgb2YgVVRGLTggcmFuZ2VcIjtcbiAgICAvLyBVVEYtOCBzdHJpbmdzIG1heSBub3QgY29udGFpbiBVVEYtMTYgc3Vycm9nYXRlIHBhaXJzXG4gICAgLy8gLSBvZmZzZXQgICAgICAgPSBzdGFydCBvZiB0aGlzIGNvZGVwb2ludFxuICAgIC8vIC0gYmFkQ29kZXBvaW50ID0gdGhlIGNvbXB1dGVkIGNvZGVwb2ludDsgaW5zaWRlIHRoZSBVVEYtMTYgc3Vycm9nYXRlIHJhbmdlXG4gICAgVXRmOEVycm9yUmVhc29uW1wiVVRGMTZfU1VSUk9HQVRFXCJdID0gXCJVVEYtMTYgc3Vycm9nYXRlXCI7XG4gICAgLy8gVGhlIHN0cmluZyBpcyBhbiBvdmVybG9uZyByZXByZXNlbnRhdGlvblxuICAgIC8vIC0gb2Zmc2V0ICAgICAgID0gc3RhcnQgb2YgdGhpcyBjb2RlcG9pbnRcbiAgICAvLyAtIGJhZENvZGVwb2ludCA9IHRoZSBjb21wdXRlZCBjb2RlcG9pbnQ7IGFscmVhZHkgYm91bmRzIGNoZWNrZWRcbiAgICBVdGY4RXJyb3JSZWFzb25bXCJPVkVSTE9OR1wiXSA9IFwib3ZlcmxvbmcgcmVwcmVzZW50YXRpb25cIjtcbn0pKFV0ZjhFcnJvclJlYXNvbiB8fCAoVXRmOEVycm9yUmVhc29uID0ge30pKTtcbjtcbmZ1bmN0aW9uIGVycm9yRnVuYyhyZWFzb24sIG9mZnNldCwgYnl0ZXMsIG91dHB1dCwgYmFkQ29kZXBvaW50KSB7XG4gICAgcmV0dXJuIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoYGludmFsaWQgY29kZXBvaW50IGF0IG9mZnNldCAke29mZnNldH07ICR7cmVhc29ufWAsIFwiYnl0ZXNcIiwgYnl0ZXMpO1xufVxuZnVuY3Rpb24gaWdub3JlRnVuYyhyZWFzb24sIG9mZnNldCwgYnl0ZXMsIG91dHB1dCwgYmFkQ29kZXBvaW50KSB7XG4gICAgLy8gSWYgdGhlcmUgaXMgYW4gaW52YWxpZCBwcmVmaXggKGluY2x1ZGluZyBzdHJheSBjb250aW51YXRpb24pLCBza2lwIGFueSBhZGRpdGlvbmFsIGNvbnRpbnVhdGlvbiBieXRlc1xuICAgIGlmIChyZWFzb24gPT09IFV0ZjhFcnJvclJlYXNvbi5CQURfUFJFRklYIHx8IHJlYXNvbiA9PT0gVXRmOEVycm9yUmVhc29uLlVORVhQRUNURURfQ09OVElOVUUpIHtcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICBmb3IgKGxldCBvID0gb2Zmc2V0ICsgMTsgbyA8IGJ5dGVzLmxlbmd0aDsgbysrKSB7XG4gICAgICAgICAgICBpZiAoYnl0ZXNbb10gPj4gNiAhPT0gMHgwMikge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgICAvLyBUaGlzIGJ5dGUgcnVucyB1cyBwYXN0IHRoZSBlbmQgb2YgdGhlIHN0cmluZywgc28ganVzdCBqdW1wIHRvIHRoZSBlbmRcbiAgICAvLyAoYnV0IHRoZSBmaXJzdCBieXRlIHdhcyByZWFkIGFscmVhZHkgcmVhZCBhbmQgdGhlcmVmb3JlIHNraXBwZWQpXG4gICAgaWYgKHJlYXNvbiA9PT0gVXRmOEVycm9yUmVhc29uLk9WRVJSVU4pIHtcbiAgICAgICAgcmV0dXJuIGJ5dGVzLmxlbmd0aCAtIG9mZnNldCAtIDE7XG4gICAgfVxuICAgIC8vIE5vdGhpbmcgdG8gc2tpcFxuICAgIHJldHVybiAwO1xufVxuZnVuY3Rpb24gcmVwbGFjZUZ1bmMocmVhc29uLCBvZmZzZXQsIGJ5dGVzLCBvdXRwdXQsIGJhZENvZGVwb2ludCkge1xuICAgIC8vIE92ZXJsb25nIHJlcHJlc2VudGF0aW9ucyBhcmUgb3RoZXJ3aXNlIFwidmFsaWRcIiBjb2RlIHBvaW50czsganVzdCBub24tZGVpc3Rpbmd0aXNoZWRcbiAgICBpZiAocmVhc29uID09PSBVdGY4RXJyb3JSZWFzb24uT1ZFUkxPTkcpIHtcbiAgICAgICAgb3V0cHV0LnB1c2goYmFkQ29kZXBvaW50KTtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIC8vIFB1dCB0aGUgcmVwbGFjZW1lbnQgY2hhcmFjdGVyIGludG8gdGhlIG91dHB1dFxuICAgIG91dHB1dC5wdXNoKDB4ZmZmZCk7XG4gICAgLy8gT3RoZXJ3aXNlLCBwcm9jZXNzIGFzIGlmIGlnbm9yaW5nIGVycm9yc1xuICAgIHJldHVybiBpZ25vcmVGdW5jKHJlYXNvbiwgb2Zmc2V0LCBieXRlcywgb3V0cHV0LCBiYWRDb2RlcG9pbnQpO1xufVxuLy8gQ29tbW9uIGVycm9yIGhhbmRpbmcgc3RyYXRlZ2llc1xuZXhwb3J0IGNvbnN0IFV0ZjhFcnJvckZ1bmNzID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgZXJyb3I6IGVycm9yRnVuYyxcbiAgICBpZ25vcmU6IGlnbm9yZUZ1bmMsXG4gICAgcmVwbGFjZTogcmVwbGFjZUZ1bmNcbn0pO1xuLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMzM1NjQ5My9kZWNvZGUtdXRmLTgtd2l0aC1qYXZhc2NyaXB0IzEzNjkxNDk5XG5mdW5jdGlvbiBnZXRVdGY4Q29kZVBvaW50cyhieXRlcywgb25FcnJvcikge1xuICAgIGlmIChvbkVycm9yID09IG51bGwpIHtcbiAgICAgICAgb25FcnJvciA9IFV0ZjhFcnJvckZ1bmNzLmVycm9yO1xuICAgIH1cbiAgICBieXRlcyA9IGFycmF5aWZ5KGJ5dGVzKTtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBsZXQgaSA9IDA7XG4gICAgLy8gSW52YWxpZCBieXRlcyBhcmUgaWdub3JlZFxuICAgIHdoaWxlIChpIDwgYnl0ZXMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGMgPSBieXRlc1tpKytdO1xuICAgICAgICAvLyAweHh4IHh4eHhcbiAgICAgICAgaWYgKGMgPj4gNyA9PT0gMCkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goYyk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBNdWx0aWJ5dGU7IGhvdyBtYW55IGJ5dGVzIGxlZnQgZm9yIHRoaXMgY2hhcmFjdGVyP1xuICAgICAgICBsZXQgZXh0cmFMZW5ndGggPSBudWxsO1xuICAgICAgICBsZXQgb3ZlcmxvbmdNYXNrID0gbnVsbDtcbiAgICAgICAgLy8gMTEweCB4eHh4IDEweHggeHh4eFxuICAgICAgICBpZiAoKGMgJiAweGUwKSA9PT0gMHhjMCkge1xuICAgICAgICAgICAgZXh0cmFMZW5ndGggPSAxO1xuICAgICAgICAgICAgb3ZlcmxvbmdNYXNrID0gMHg3ZjtcbiAgICAgICAgICAgIC8vIDExMTAgeHh4eCAxMHh4IHh4eHggMTB4eCB4eHh4XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKGMgJiAweGYwKSA9PT0gMHhlMCkge1xuICAgICAgICAgICAgZXh0cmFMZW5ndGggPSAyO1xuICAgICAgICAgICAgb3ZlcmxvbmdNYXNrID0gMHg3ZmY7XG4gICAgICAgICAgICAvLyAxMTExIDB4eHggMTB4eCB4eHh4IDEweHggeHh4eCAxMHh4IHh4eHhcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgoYyAmIDB4ZjgpID09PSAweGYwKSB7XG4gICAgICAgICAgICBleHRyYUxlbmd0aCA9IDM7XG4gICAgICAgICAgICBvdmVybG9uZ01hc2sgPSAweGZmZmY7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoKGMgJiAweGMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgICAgIGkgKz0gb25FcnJvcihVdGY4RXJyb3JSZWFzb24uVU5FWFBFQ1RFRF9DT05USU5VRSwgaSAtIDEsIGJ5dGVzLCByZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaSArPSBvbkVycm9yKFV0ZjhFcnJvclJlYXNvbi5CQURfUFJFRklYLCBpIC0gMSwgYnl0ZXMsIHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBEbyB3ZSBoYXZlIGVub3VnaCBieXRlcyBpbiBvdXIgZGF0YT9cbiAgICAgICAgaWYgKGkgLSAxICsgZXh0cmFMZW5ndGggPj0gYnl0ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBpICs9IG9uRXJyb3IoVXRmOEVycm9yUmVhc29uLk9WRVJSVU4sIGkgLSAxLCBieXRlcywgcmVzdWx0KTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlbW92ZSB0aGUgbGVuZ3RoIHByZWZpeCBmcm9tIHRoZSBjaGFyXG4gICAgICAgIGxldCByZXMgPSBjICYgKCgxIDw8ICg4IC0gZXh0cmFMZW5ndGggLSAxKSkgLSAxKTtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBleHRyYUxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBsZXQgbmV4dENoYXIgPSBieXRlc1tpXTtcbiAgICAgICAgICAgIC8vIEludmFsaWQgY29udGludWF0aW9uIGJ5dGVcbiAgICAgICAgICAgIGlmICgobmV4dENoYXIgJiAweGMwKSAhPSAweDgwKSB7XG4gICAgICAgICAgICAgICAgaSArPSBvbkVycm9yKFV0ZjhFcnJvclJlYXNvbi5NSVNTSU5HX0NPTlRJTlVFLCBpLCBieXRlcywgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICByZXMgPSBudWxsO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgO1xuICAgICAgICAgICAgcmVzID0gKHJlcyA8PCA2KSB8IChuZXh0Q2hhciAmIDB4M2YpO1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNlZSBhYm92ZSBsb29wIGZvciBpbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlXG4gICAgICAgIGlmIChyZXMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIE1heGltdW0gY29kZSBwb2ludFxuICAgICAgICBpZiAocmVzID4gMHgxMGZmZmYpIHtcbiAgICAgICAgICAgIGkgKz0gb25FcnJvcihVdGY4RXJyb3JSZWFzb24uT1VUX09GX1JBTkdFLCBpIC0gMSAtIGV4dHJhTGVuZ3RoLCBieXRlcywgcmVzdWx0LCByZXMpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVzZXJ2ZWQgZm9yIFVURi0xNiBzdXJyb2dhdGUgaGFsdmVzXG4gICAgICAgIGlmIChyZXMgPj0gMHhkODAwICYmIHJlcyA8PSAweGRmZmYpIHtcbiAgICAgICAgICAgIGkgKz0gb25FcnJvcihVdGY4RXJyb3JSZWFzb24uVVRGMTZfU1VSUk9HQVRFLCBpIC0gMSAtIGV4dHJhTGVuZ3RoLCBieXRlcywgcmVzdWx0LCByZXMpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2hlY2sgZm9yIG92ZXJsb25nIHNlcXVlbmNlcyAobW9yZSBieXRlcyB0aGFuIG5lZWRlZClcbiAgICAgICAgaWYgKHJlcyA8PSBvdmVybG9uZ01hc2spIHtcbiAgICAgICAgICAgIGkgKz0gb25FcnJvcihVdGY4RXJyb3JSZWFzb24uT1ZFUkxPTkcsIGkgLSAxIC0gZXh0cmFMZW5ndGgsIGJ5dGVzLCByZXN1bHQsIHJlcyk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQucHVzaChyZXMpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xODcyOTQwNS9ob3ctdG8tY29udmVydC11dGY4LXN0cmluZy10by1ieXRlLWFycmF5XG5leHBvcnQgZnVuY3Rpb24gdG9VdGY4Qnl0ZXMoc3RyLCBmb3JtID0gVW5pY29kZU5vcm1hbGl6YXRpb25Gb3JtLmN1cnJlbnQpIHtcbiAgICBpZiAoZm9ybSAhPSBVbmljb2RlTm9ybWFsaXphdGlvbkZvcm0uY3VycmVudCkge1xuICAgICAgICBsb2dnZXIuY2hlY2tOb3JtYWxpemUoKTtcbiAgICAgICAgc3RyID0gc3RyLm5vcm1hbGl6ZShmb3JtKTtcbiAgICB9XG4gICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGMgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgaWYgKGMgPCAweDgwKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChjKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjIDwgMHg4MDApIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKChjID4+IDYpIHwgMHhjMCk7XG4gICAgICAgICAgICByZXN1bHQucHVzaCgoYyAmIDB4M2YpIHwgMHg4MCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKGMgJiAweGZjMDApID09IDB4ZDgwMCkge1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgY29uc3QgYzIgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgICAgIGlmIChpID49IHN0ci5sZW5ndGggfHwgKGMyICYgMHhmYzAwKSAhPT0gMHhkYzAwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCB1dGYtOCBzdHJpbmdcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTdXJyb2dhdGUgUGFpclxuICAgICAgICAgICAgY29uc3QgcGFpciA9IDB4MTAwMDAgKyAoKGMgJiAweDAzZmYpIDw8IDEwKSArIChjMiAmIDB4MDNmZik7XG4gICAgICAgICAgICByZXN1bHQucHVzaCgocGFpciA+PiAxOCkgfCAweGYwKTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKCgocGFpciA+PiAxMikgJiAweDNmKSB8IDB4ODApO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goKChwYWlyID4+IDYpICYgMHgzZikgfCAweDgwKTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKChwYWlyICYgMHgzZikgfCAweDgwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKChjID4+IDEyKSB8IDB4ZTApO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goKChjID4+IDYpICYgMHgzZikgfCAweDgwKTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKChjICYgMHgzZikgfCAweDgwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlpZnkocmVzdWx0KTtcbn1cbjtcbmZ1bmN0aW9uIGVzY2FwZUNoYXIodmFsdWUpIHtcbiAgICBjb25zdCBoZXggPSAoXCIwMDAwXCIgKyB2YWx1ZS50b1N0cmluZygxNikpO1xuICAgIHJldHVybiBcIlxcXFx1XCIgKyBoZXguc3Vic3RyaW5nKGhleC5sZW5ndGggLSA0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBfdG9Fc2NhcGVkVXRmOFN0cmluZyhieXRlcywgb25FcnJvcikge1xuICAgIHJldHVybiAnXCInICsgZ2V0VXRmOENvZGVQb2ludHMoYnl0ZXMsIG9uRXJyb3IpLm1hcCgoY29kZVBvaW50KSA9PiB7XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPCAyNTYpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoY29kZVBvaW50KSB7XG4gICAgICAgICAgICAgICAgY2FzZSA4OiByZXR1cm4gXCJcXFxcYlwiO1xuICAgICAgICAgICAgICAgIGNhc2UgOTogcmV0dXJuIFwiXFxcXHRcIjtcbiAgICAgICAgICAgICAgICBjYXNlIDEwOiByZXR1cm4gXCJcXFxcblwiO1xuICAgICAgICAgICAgICAgIGNhc2UgMTM6IHJldHVybiBcIlxcXFxyXCI7XG4gICAgICAgICAgICAgICAgY2FzZSAzNDogcmV0dXJuIFwiXFxcXFxcXCJcIjtcbiAgICAgICAgICAgICAgICBjYXNlIDkyOiByZXR1cm4gXCJcXFxcXFxcXFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvZGVQb2ludCA+PSAzMiAmJiBjb2RlUG9pbnQgPCAxMjcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlUG9pbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPD0gMHhmZmZmKSB7XG4gICAgICAgICAgICByZXR1cm4gZXNjYXBlQ2hhcihjb2RlUG9pbnQpO1xuICAgICAgICB9XG4gICAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwO1xuICAgICAgICByZXR1cm4gZXNjYXBlQ2hhcigoKGNvZGVQb2ludCA+PiAxMCkgJiAweDNmZikgKyAweGQ4MDApICsgZXNjYXBlQ2hhcigoY29kZVBvaW50ICYgMHgzZmYpICsgMHhkYzAwKTtcbiAgICB9KS5qb2luKFwiXCIpICsgJ1wiJztcbn1cbmV4cG9ydCBmdW5jdGlvbiBfdG9VdGY4U3RyaW5nKGNvZGVQb2ludHMpIHtcbiAgICByZXR1cm4gY29kZVBvaW50cy5tYXAoKGNvZGVQb2ludCkgPT4ge1xuICAgICAgICBpZiAoY29kZVBvaW50IDw9IDB4ZmZmZikge1xuICAgICAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZVBvaW50KTtcbiAgICAgICAgfVxuICAgICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMDtcbiAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoKCgoY29kZVBvaW50ID4+IDEwKSAmIDB4M2ZmKSArIDB4ZDgwMCksICgoY29kZVBvaW50ICYgMHgzZmYpICsgMHhkYzAwKSk7XG4gICAgfSkuam9pbihcIlwiKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0b1V0ZjhTdHJpbmcoYnl0ZXMsIG9uRXJyb3IpIHtcbiAgICByZXR1cm4gX3RvVXRmOFN0cmluZyhnZXRVdGY4Q29kZVBvaW50cyhieXRlcywgb25FcnJvcikpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRvVXRmOENvZGVQb2ludHMoc3RyLCBmb3JtID0gVW5pY29kZU5vcm1hbGl6YXRpb25Gb3JtLmN1cnJlbnQpIHtcbiAgICByZXR1cm4gZ2V0VXRmOENvZGVQb2ludHModG9VdGY4Qnl0ZXMoc3RyLCBmb3JtKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGY4LmpzLm1hcCIsImV4cG9ydCBjb25zdCB2ZXJzaW9uID0gXCJzdHJpbmdzLzUuNi4xXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdmVyc2lvbi5qcy5tYXAiLCJpbXBvcnQgeyBrZWNjYWsyNTYgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3Qva2VjY2FrMjU2XCI7XG5pbXBvcnQgeyB0b1V0ZjhCeXRlcyB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9zdHJpbmdzXCI7XG5leHBvcnQgZnVuY3Rpb24gaWQodGV4dCkge1xuICAgIHJldHVybiBrZWNjYWsyNTYodG9VdGY4Qnl0ZXModGV4dCkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWQuanMubWFwIiwidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5pbXBvcnQgeyBnZXRBZGRyZXNzIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2FkZHJlc3NcIjtcbmltcG9ydCB7IEJpZ051bWJlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9iaWdudW1iZXJcIjtcbmltcG9ydCB7IGFycmF5aWZ5LCBoZXhDb25jYXQsIGhleGxpZnksIGhleFplcm9QYWQsIGlzSGV4U3RyaW5nIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2J5dGVzXCI7XG5pbXBvcnQgeyBrZWNjYWsyNTYgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3Qva2VjY2FrMjU2XCI7XG5pbXBvcnQgeyBkZWVwQ29weSwgZGVmaW5lUmVhZE9ubHksIHNoYWxsb3dDb3B5IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3Byb3BlcnRpZXNcIjtcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcbmltcG9ydCB7IGlkIH0gZnJvbSBcIi4vaWRcIjtcbmNvbnN0IHBhZGRpbmcgPSBuZXcgVWludDhBcnJheSgzMik7XG5wYWRkaW5nLmZpbGwoMCk7XG5jb25zdCBOZWdhdGl2ZU9uZSA9IEJpZ051bWJlci5mcm9tKC0xKTtcbmNvbnN0IFplcm8gPSBCaWdOdW1iZXIuZnJvbSgwKTtcbmNvbnN0IE9uZSA9IEJpZ051bWJlci5mcm9tKDEpO1xuY29uc3QgTWF4VWludDI1NiA9IEJpZ051bWJlci5mcm9tKFwiMHhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmXCIpO1xuZnVuY3Rpb24gaGV4UGFkUmlnaHQodmFsdWUpIHtcbiAgICBjb25zdCBieXRlcyA9IGFycmF5aWZ5KHZhbHVlKTtcbiAgICBjb25zdCBwYWRPZmZzZXQgPSBieXRlcy5sZW5ndGggJSAzMjtcbiAgICBpZiAocGFkT2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiBoZXhDb25jYXQoW2J5dGVzLCBwYWRkaW5nLnNsaWNlKHBhZE9mZnNldCldKTtcbiAgICB9XG4gICAgcmV0dXJuIGhleGxpZnkoYnl0ZXMpO1xufVxuY29uc3QgaGV4VHJ1ZSA9IGhleFplcm9QYWQoT25lLnRvSGV4U3RyaW5nKCksIDMyKTtcbmNvbnN0IGhleEZhbHNlID0gaGV4WmVyb1BhZChaZXJvLnRvSGV4U3RyaW5nKCksIDMyKTtcbmNvbnN0IGRvbWFpbkZpZWxkVHlwZXMgPSB7XG4gICAgbmFtZTogXCJzdHJpbmdcIixcbiAgICB2ZXJzaW9uOiBcInN0cmluZ1wiLFxuICAgIGNoYWluSWQ6IFwidWludDI1NlwiLFxuICAgIHZlcmlmeWluZ0NvbnRyYWN0OiBcImFkZHJlc3NcIixcbiAgICBzYWx0OiBcImJ5dGVzMzJcIlxufTtcbmNvbnN0IGRvbWFpbkZpZWxkTmFtZXMgPSBbXG4gICAgXCJuYW1lXCIsIFwidmVyc2lvblwiLCBcImNoYWluSWRcIiwgXCJ2ZXJpZnlpbmdDb250cmFjdFwiLCBcInNhbHRcIlxuXTtcbmZ1bmN0aW9uIGNoZWNrU3RyaW5nKGtleSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiAodmFsdWUpICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKGBpbnZhbGlkIGRvbWFpbiB2YWx1ZSBmb3IgJHtKU09OLnN0cmluZ2lmeShrZXkpfWAsIGBkb21haW4uJHtrZXl9YCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xufVxuY29uc3QgZG9tYWluQ2hlY2tzID0ge1xuICAgIG5hbWU6IGNoZWNrU3RyaW5nKFwibmFtZVwiKSxcbiAgICB2ZXJzaW9uOiBjaGVja1N0cmluZyhcInZlcnNpb25cIiksXG4gICAgY2hhaW5JZDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gQmlnTnVtYmVyLmZyb20odmFsdWUpLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoYGludmFsaWQgZG9tYWluIHZhbHVlIGZvciBcImNoYWluSWRcImAsIFwiZG9tYWluLmNoYWluSWRcIiwgdmFsdWUpO1xuICAgIH0sXG4gICAgdmVyaWZ5aW5nQ29udHJhY3Q6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGdldEFkZHJlc3ModmFsdWUpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoYGludmFsaWQgZG9tYWluIHZhbHVlIFwidmVyaWZ5aW5nQ29udHJhY3RcImAsIFwiZG9tYWluLnZlcmlmeWluZ0NvbnRyYWN0XCIsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNhbHQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgYnl0ZXMgPSBhcnJheWlmeSh2YWx1ZSk7XG4gICAgICAgICAgICBpZiAoYnl0ZXMubGVuZ3RoICE9PSAzMikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImJhZCBsZW5ndGhcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaGV4bGlmeShieXRlcyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoYGludmFsaWQgZG9tYWluIHZhbHVlIFwic2FsdFwiYCwgXCJkb21haW4uc2FsdFwiLCB2YWx1ZSk7XG4gICAgfVxufTtcbmZ1bmN0aW9uIGdldEJhc2VFbmNvZGVyKHR5cGUpIHtcbiAgICAvLyBpbnRYWCBhbmQgdWludFhYXG4gICAge1xuICAgICAgICBjb25zdCBtYXRjaCA9IHR5cGUubWF0Y2goL14odT8paW50KFxcZCopJC8pO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIGNvbnN0IHNpZ25lZCA9IChtYXRjaFsxXSA9PT0gXCJcIik7XG4gICAgICAgICAgICBjb25zdCB3aWR0aCA9IHBhcnNlSW50KG1hdGNoWzJdIHx8IFwiMjU2XCIpO1xuICAgICAgICAgICAgaWYgKHdpZHRoICUgOCAhPT0gMCB8fCB3aWR0aCA+IDI1NiB8fCAobWF0Y2hbMl0gJiYgbWF0Y2hbMl0gIT09IFN0cmluZyh3aWR0aCkpKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgbnVtZXJpYyB3aWR0aFwiLCBcInR5cGVcIiwgdHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBib3VuZHNVcHBlciA9IE1heFVpbnQyNTYubWFzayhzaWduZWQgPyAod2lkdGggLSAxKSA6IHdpZHRoKTtcbiAgICAgICAgICAgIGNvbnN0IGJvdW5kc0xvd2VyID0gc2lnbmVkID8gYm91bmRzVXBwZXIuYWRkKE9uZSkubXVsKE5lZ2F0aXZlT25lKSA6IFplcm87XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdiA9IEJpZ051bWJlci5mcm9tKHZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAodi5sdChib3VuZHNMb3dlcikgfHwgdi5ndChib3VuZHNVcHBlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihgdmFsdWUgb3V0LW9mLWJvdW5kcyBmb3IgJHt0eXBlfWAsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaGV4WmVyb1BhZCh2LnRvVHdvcygyNTYpLnRvSGV4U3RyaW5nKCksIDMyKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gYnl0ZXNYWFxuICAgIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSB0eXBlLm1hdGNoKC9eYnl0ZXMoXFxkKykkLyk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBwYXJzZUludChtYXRjaFsxXSk7XG4gICAgICAgICAgICBpZiAod2lkdGggPT09IDAgfHwgd2lkdGggPiAzMiB8fCBtYXRjaFsxXSAhPT0gU3RyaW5nKHdpZHRoKSkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGJ5dGVzIHdpZHRoXCIsIFwidHlwZVwiLCB0eXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBieXRlcyA9IGFycmF5aWZ5KHZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAoYnl0ZXMubGVuZ3RoICE9PSB3aWR0aCkge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKGBpbnZhbGlkIGxlbmd0aCBmb3IgJHt0eXBlfWAsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaGV4UGFkUmlnaHQodmFsdWUpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBcImFkZHJlc3NcIjogcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGhleFplcm9QYWQoZ2V0QWRkcmVzcyh2YWx1ZSksIDMyKTtcbiAgICAgICAgfTtcbiAgICAgICAgY2FzZSBcImJvb2xcIjogcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuICgoIXZhbHVlKSA/IGhleEZhbHNlIDogaGV4VHJ1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIGNhc2UgXCJieXRlc1wiOiByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4ga2VjY2FrMjU2KHZhbHVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgY2FzZSBcInN0cmluZ1wiOiByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gaWQodmFsdWUpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGVuY29kZVR5cGUobmFtZSwgZmllbGRzKSB7XG4gICAgcmV0dXJuIGAke25hbWV9KCR7ZmllbGRzLm1hcCgoeyBuYW1lLCB0eXBlIH0pID0+ICh0eXBlICsgXCIgXCIgKyBuYW1lKSkuam9pbihcIixcIil9KWA7XG59XG5leHBvcnQgY2xhc3MgVHlwZWREYXRhRW5jb2RlciB7XG4gICAgY29uc3RydWN0b3IodHlwZXMpIHtcbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJ0eXBlc1wiLCBPYmplY3QuZnJlZXplKGRlZXBDb3B5KHR5cGVzKSkpO1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcIl9lbmNvZGVyQ2FjaGVcIiwge30pO1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcIl90eXBlc1wiLCB7fSk7XG4gICAgICAgIC8vIExpbmsgc3RydWN0IHR5cGVzIHRvIHRoZWlyIGRpcmVjdCBjaGlsZCBzdHJ1Y3RzXG4gICAgICAgIGNvbnN0IGxpbmtzID0ge307XG4gICAgICAgIC8vIExpbmsgc3RydWN0cyB0byBzdHJ1Y3RzIHdoaWNoIGNvbnRhaW4gdGhlbSBhcyBhIGNoaWxkXG4gICAgICAgIGNvbnN0IHBhcmVudHMgPSB7fTtcbiAgICAgICAgLy8gTGluayBhbGwgc3VidHlwZXMgd2l0aGluIGEgZ2l2ZW4gc3RydWN0XG4gICAgICAgIGNvbnN0IHN1YnR5cGVzID0ge307XG4gICAgICAgIE9iamVjdC5rZXlzKHR5cGVzKS5mb3JFYWNoKCh0eXBlKSA9PiB7XG4gICAgICAgICAgICBsaW5rc1t0eXBlXSA9IHt9O1xuICAgICAgICAgICAgcGFyZW50c1t0eXBlXSA9IFtdO1xuICAgICAgICAgICAgc3VidHlwZXNbdHlwZV0gPSB7fTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiB0eXBlcykge1xuICAgICAgICAgICAgY29uc3QgdW5pcXVlTmFtZXMgPSB7fTtcbiAgICAgICAgICAgIHR5cGVzW25hbWVdLmZvckVhY2goKGZpZWxkKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgZWFjaCBmaWVsZCBoYXMgYSB1bmlxdWUgbmFtZVxuICAgICAgICAgICAgICAgIGlmICh1bmlxdWVOYW1lc1tmaWVsZC5uYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKGBkdXBsaWNhdGUgdmFyaWFibGUgbmFtZSAke0pTT04uc3RyaW5naWZ5KGZpZWxkLm5hbWUpfSBpbiAke0pTT04uc3RyaW5naWZ5KG5hbWUpfWAsIFwidHlwZXNcIiwgdHlwZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB1bmlxdWVOYW1lc1tmaWVsZC5uYW1lXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBiYXNlIHR5cGUgKGRyb3AgYW55IGFycmF5IHNwZWNpZmllcnMpXG4gICAgICAgICAgICAgICAgY29uc3QgYmFzZVR5cGUgPSBmaWVsZC50eXBlLm1hdGNoKC9eKFteXFx4NWJdKikoXFx4NWJ8JCkvKVsxXTtcbiAgICAgICAgICAgICAgICBpZiAoYmFzZVR5cGUgPT09IG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihgY2lyY3VsYXIgdHlwZSByZWZlcmVuY2UgdG8gJHtKU09OLnN0cmluZ2lmeShiYXNlVHlwZSl9YCwgXCJ0eXBlc1wiLCB0eXBlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIElzIHRoaXMgYSBiYXNlIGVuY29kaW5nIHR5cGU/XG4gICAgICAgICAgICAgICAgY29uc3QgZW5jb2RlciA9IGdldEJhc2VFbmNvZGVyKGJhc2VUeXBlKTtcbiAgICAgICAgICAgICAgICBpZiAoZW5jb2Rlcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghcGFyZW50c1tiYXNlVHlwZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihgdW5rbm93biB0eXBlICR7SlNPTi5zdHJpbmdpZnkoYmFzZVR5cGUpfWAsIFwidHlwZXNcIiwgdHlwZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBBZGQgbGlua2FnZVxuICAgICAgICAgICAgICAgIHBhcmVudHNbYmFzZVR5cGVdLnB1c2gobmFtZSk7XG4gICAgICAgICAgICAgICAgbGlua3NbbmFtZV1bYmFzZVR5cGVdID0gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIERlZHVjZSB0aGUgcHJpbWFyeSB0eXBlXG4gICAgICAgIGNvbnN0IHByaW1hcnlUeXBlcyA9IE9iamVjdC5rZXlzKHBhcmVudHMpLmZpbHRlcigobikgPT4gKHBhcmVudHNbbl0ubGVuZ3RoID09PSAwKSk7XG4gICAgICAgIGlmIChwcmltYXJ5VHlwZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwibWlzc2luZyBwcmltYXJ5IHR5cGVcIiwgXCJ0eXBlc1wiLCB0eXBlcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocHJpbWFyeVR5cGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoYGFtYmlndW91cyBwcmltYXJ5IHR5cGVzIG9yIHVudXNlZCB0eXBlczogJHtwcmltYXJ5VHlwZXMubWFwKCh0KSA9PiAoSlNPTi5zdHJpbmdpZnkodCkpKS5qb2luKFwiLCBcIil9YCwgXCJ0eXBlc1wiLCB0eXBlcyk7XG4gICAgICAgIH1cbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJwcmltYXJ5VHlwZVwiLCBwcmltYXJ5VHlwZXNbMF0pO1xuICAgICAgICAvLyBDaGVjayBmb3IgY2lyY3VsYXIgdHlwZSByZWZlcmVuY2VzXG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrQ2lyY3VsYXIodHlwZSwgZm91bmQpIHtcbiAgICAgICAgICAgIGlmIChmb3VuZFt0eXBlXSkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoYGNpcmN1bGFyIHR5cGUgcmVmZXJlbmNlIHRvICR7SlNPTi5zdHJpbmdpZnkodHlwZSl9YCwgXCJ0eXBlc1wiLCB0eXBlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3VuZFt0eXBlXSA9IHRydWU7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhsaW5rc1t0eXBlXSkuZm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXBhcmVudHNbY2hpbGRdKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gUmVjdXJzaXZlbHkgY2hlY2sgY2hpbGRyZW5cbiAgICAgICAgICAgICAgICBjaGVja0NpcmN1bGFyKGNoaWxkLCBmb3VuZCk7XG4gICAgICAgICAgICAgICAgLy8gTWFyayBhbGwgYW5jZXN0b3JzIGFzIGhhdmluZyB0aGlzIGRlY2VuZGFudFxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKGZvdW5kKS5mb3JFYWNoKChzdWJ0eXBlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnR5cGVzW3N1YnR5cGVdW2NoaWxkXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRlbGV0ZSBmb3VuZFt0eXBlXTtcbiAgICAgICAgfVxuICAgICAgICBjaGVja0NpcmN1bGFyKHRoaXMucHJpbWFyeVR5cGUsIHt9KTtcbiAgICAgICAgLy8gQ29tcHV0ZSBlYWNoIGZ1bGx5IGRlc2NyaWJlIHR5cGVcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIHN1YnR5cGVzKSB7XG4gICAgICAgICAgICBjb25zdCBzdCA9IE9iamVjdC5rZXlzKHN1YnR5cGVzW25hbWVdKTtcbiAgICAgICAgICAgIHN0LnNvcnQoKTtcbiAgICAgICAgICAgIHRoaXMuX3R5cGVzW25hbWVdID0gZW5jb2RlVHlwZShuYW1lLCB0eXBlc1tuYW1lXSkgKyBzdC5tYXAoKHQpID0+IGVuY29kZVR5cGUodCwgdHlwZXNbdF0pKS5qb2luKFwiXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldEVuY29kZXIodHlwZSkge1xuICAgICAgICBsZXQgZW5jb2RlciA9IHRoaXMuX2VuY29kZXJDYWNoZVt0eXBlXTtcbiAgICAgICAgaWYgKCFlbmNvZGVyKSB7XG4gICAgICAgICAgICBlbmNvZGVyID0gdGhpcy5fZW5jb2RlckNhY2hlW3R5cGVdID0gdGhpcy5fZ2V0RW5jb2Rlcih0eXBlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW5jb2RlcjtcbiAgICB9XG4gICAgX2dldEVuY29kZXIodHlwZSkge1xuICAgICAgICAvLyBCYXNpYyBlbmNvZGVyIHR5cGUgKGFkZHJlc3MsIGJvb2wsIHVpbnQyNTYsIGV0YylcbiAgICAgICAge1xuICAgICAgICAgICAgY29uc3QgZW5jb2RlciA9IGdldEJhc2VFbmNvZGVyKHR5cGUpO1xuICAgICAgICAgICAgaWYgKGVuY29kZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZW5jb2RlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBBcnJheVxuICAgICAgICBjb25zdCBtYXRjaCA9IHR5cGUubWF0Y2goL14oLiopKFxceDViKFxcZCopXFx4NWQpJC8pO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIGNvbnN0IHN1YnR5cGUgPSBtYXRjaFsxXTtcbiAgICAgICAgICAgIGNvbnN0IHN1YkVuY29kZXIgPSB0aGlzLmdldEVuY29kZXIoc3VidHlwZSk7XG4gICAgICAgICAgICBjb25zdCBsZW5ndGggPSBwYXJzZUludChtYXRjaFszXSk7XG4gICAgICAgICAgICByZXR1cm4gKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGxlbmd0aCA+PSAwICYmIHZhbHVlLmxlbmd0aCAhPT0gbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJhcnJheSBsZW5ndGggbWlzbWF0Y2g7IGV4cGVjdGVkIGxlbmd0aCAkeyBhcnJheUxlbmd0aCB9XCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gdmFsdWUubWFwKHN1YkVuY29kZXIpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl90eXBlc1tzdWJ0eXBlXSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQubWFwKGtlY2NhazI1Nik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBrZWNjYWsyNTYoaGV4Q29uY2F0KHJlc3VsdCkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTdHJ1Y3RcbiAgICAgICAgY29uc3QgZmllbGRzID0gdGhpcy50eXBlc1t0eXBlXTtcbiAgICAgICAgaWYgKGZpZWxkcykge1xuICAgICAgICAgICAgY29uc3QgZW5jb2RlZFR5cGUgPSBpZCh0aGlzLl90eXBlc1t0eXBlXSk7XG4gICAgICAgICAgICByZXR1cm4gKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWVzID0gZmllbGRzLm1hcCgoeyBuYW1lLCB0eXBlIH0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5nZXRFbmNvZGVyKHR5cGUpKHZhbHVlW25hbWVdKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3R5cGVzW3R5cGVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ga2VjY2FrMjU2KHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB2YWx1ZXMudW5zaGlmdChlbmNvZGVkVHlwZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhleENvbmNhdCh2YWx1ZXMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihgdW5rbm93biB0eXBlOiAke3R5cGV9YCwgXCJ0eXBlXCIsIHR5cGUpO1xuICAgIH1cbiAgICBlbmNvZGVUeXBlKG5hbWUpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fdHlwZXNbbmFtZV07XG4gICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKGB1bmtub3duIHR5cGU6ICR7SlNPTi5zdHJpbmdpZnkobmFtZSl9YCwgXCJuYW1lXCIsIG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGVuY29kZURhdGEodHlwZSwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RW5jb2Rlcih0eXBlKSh2YWx1ZSk7XG4gICAgfVxuICAgIGhhc2hTdHJ1Y3QobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGtlY2NhazI1Nih0aGlzLmVuY29kZURhdGEobmFtZSwgdmFsdWUpKTtcbiAgICB9XG4gICAgZW5jb2RlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVuY29kZURhdGEodGhpcy5wcmltYXJ5VHlwZSwgdmFsdWUpO1xuICAgIH1cbiAgICBoYXNoKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhc2hTdHJ1Y3QodGhpcy5wcmltYXJ5VHlwZSwgdmFsdWUpO1xuICAgIH1cbiAgICBfdmlzaXQodHlwZSwgdmFsdWUsIGNhbGxiYWNrKSB7XG4gICAgICAgIC8vIEJhc2ljIGVuY29kZXIgdHlwZSAoYWRkcmVzcywgYm9vbCwgdWludDI1NiwgZXRjKVxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBlbmNvZGVyID0gZ2V0QmFzZUVuY29kZXIodHlwZSk7XG4gICAgICAgICAgICBpZiAoZW5jb2Rlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayh0eXBlLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gQXJyYXlcbiAgICAgICAgY29uc3QgbWF0Y2ggPSB0eXBlLm1hdGNoKC9eKC4qKShcXHg1YihcXGQqKVxceDVkKSQvKTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBjb25zdCBzdWJ0eXBlID0gbWF0Y2hbMV07XG4gICAgICAgICAgICBjb25zdCBsZW5ndGggPSBwYXJzZUludChtYXRjaFszXSk7XG4gICAgICAgICAgICBpZiAobGVuZ3RoID49IDAgJiYgdmFsdWUubGVuZ3RoICE9PSBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiYXJyYXkgbGVuZ3RoIG1pc21hdGNoOyBleHBlY3RlZCBsZW5ndGggJHsgYXJyYXlMZW5ndGggfVwiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5tYXAoKHYpID0+IHRoaXMuX3Zpc2l0KHN1YnR5cGUsIHYsIGNhbGxiYWNrKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU3RydWN0XG4gICAgICAgIGNvbnN0IGZpZWxkcyA9IHRoaXMudHlwZXNbdHlwZV07XG4gICAgICAgIGlmIChmaWVsZHMpIHtcbiAgICAgICAgICAgIHJldHVybiBmaWVsZHMucmVkdWNlKChhY2N1bSwgeyBuYW1lLCB0eXBlIH0pID0+IHtcbiAgICAgICAgICAgICAgICBhY2N1bVtuYW1lXSA9IHRoaXMuX3Zpc2l0KHR5cGUsIHZhbHVlW25hbWVdLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjY3VtO1xuICAgICAgICAgICAgfSwge30pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKGB1bmtub3duIHR5cGU6ICR7dHlwZX1gLCBcInR5cGVcIiwgdHlwZSk7XG4gICAgfVxuICAgIHZpc2l0KHZhbHVlLCBjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmlzaXQodGhpcy5wcmltYXJ5VHlwZSwgdmFsdWUsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb20odHlwZXMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUeXBlZERhdGFFbmNvZGVyKHR5cGVzKTtcbiAgICB9XG4gICAgc3RhdGljIGdldFByaW1hcnlUeXBlKHR5cGVzKSB7XG4gICAgICAgIHJldHVybiBUeXBlZERhdGFFbmNvZGVyLmZyb20odHlwZXMpLnByaW1hcnlUeXBlO1xuICAgIH1cbiAgICBzdGF0aWMgaGFzaFN0cnVjdChuYW1lLCB0eXBlcywgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFR5cGVkRGF0YUVuY29kZXIuZnJvbSh0eXBlcykuaGFzaFN0cnVjdChuYW1lLCB2YWx1ZSk7XG4gICAgfVxuICAgIHN0YXRpYyBoYXNoRG9tYWluKGRvbWFpbikge1xuICAgICAgICBjb25zdCBkb21haW5GaWVsZHMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIGRvbWFpbikge1xuICAgICAgICAgICAgY29uc3QgdHlwZSA9IGRvbWFpbkZpZWxkVHlwZXNbbmFtZV07XG4gICAgICAgICAgICBpZiAoIXR5cGUpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKGBpbnZhbGlkIHR5cGVkLWRhdGEgZG9tYWluIGtleTogJHtKU09OLnN0cmluZ2lmeShuYW1lKX1gLCBcImRvbWFpblwiLCBkb21haW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZG9tYWluRmllbGRzLnB1c2goeyBuYW1lLCB0eXBlIH0pO1xuICAgICAgICB9XG4gICAgICAgIGRvbWFpbkZpZWxkcy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZG9tYWluRmllbGROYW1lcy5pbmRleE9mKGEubmFtZSkgLSBkb21haW5GaWVsZE5hbWVzLmluZGV4T2YoYi5uYW1lKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBUeXBlZERhdGFFbmNvZGVyLmhhc2hTdHJ1Y3QoXCJFSVA3MTJEb21haW5cIiwgeyBFSVA3MTJEb21haW46IGRvbWFpbkZpZWxkcyB9LCBkb21haW4pO1xuICAgIH1cbiAgICBzdGF0aWMgZW5jb2RlKGRvbWFpbiwgdHlwZXMsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBoZXhDb25jYXQoW1xuICAgICAgICAgICAgXCIweDE5MDFcIixcbiAgICAgICAgICAgIFR5cGVkRGF0YUVuY29kZXIuaGFzaERvbWFpbihkb21haW4pLFxuICAgICAgICAgICAgVHlwZWREYXRhRW5jb2Rlci5mcm9tKHR5cGVzKS5oYXNoKHZhbHVlKVxuICAgICAgICBdKTtcbiAgICB9XG4gICAgc3RhdGljIGhhc2goZG9tYWluLCB0eXBlcywgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGtlY2NhazI1NihUeXBlZERhdGFFbmNvZGVyLmVuY29kZShkb21haW4sIHR5cGVzLCB2YWx1ZSkpO1xuICAgIH1cbiAgICAvLyBSZXBsYWNlcyBhbGwgYWRkcmVzcyB0eXBlcyB3aXRoIEVOUyBuYW1lcyB3aXRoIHRoZWlyIGxvb2tlZCB1cCBhZGRyZXNzXG4gICAgc3RhdGljIHJlc29sdmVOYW1lcyhkb21haW4sIHR5cGVzLCB2YWx1ZSwgcmVzb2x2ZU5hbWUpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIC8vIE1ha2UgYSBjb3B5IHRvIGlzb2xhdGUgaXQgZnJvbSB0aGUgb2JqZWN0IHBhc3NlZCBpblxuICAgICAgICAgICAgZG9tYWluID0gc2hhbGxvd0NvcHkoZG9tYWluKTtcbiAgICAgICAgICAgIC8vIExvb2sgdXAgYWxsIEVOUyBuYW1lc1xuICAgICAgICAgICAgY29uc3QgZW5zQ2FjaGUgPSB7fTtcbiAgICAgICAgICAgIC8vIERvIHdlIG5lZWQgdG8gbG9vayB1cCB0aGUgZG9tYWluJ3MgdmVyaWZ5aW5nQ29udHJhY3Q/XG4gICAgICAgICAgICBpZiAoZG9tYWluLnZlcmlmeWluZ0NvbnRyYWN0ICYmICFpc0hleFN0cmluZyhkb21haW4udmVyaWZ5aW5nQ29udHJhY3QsIDIwKSkge1xuICAgICAgICAgICAgICAgIGVuc0NhY2hlW2RvbWFpbi52ZXJpZnlpbmdDb250cmFjdF0gPSBcIjB4XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBXZSBhcmUgZ29pbmcgdG8gdXNlIHRoZSBlbmNvZGVyIHRvIHZpc2l0IGFsbCB0aGUgYmFzZSB2YWx1ZXNcbiAgICAgICAgICAgIGNvbnN0IGVuY29kZXIgPSBUeXBlZERhdGFFbmNvZGVyLmZyb20odHlwZXMpO1xuICAgICAgICAgICAgLy8gR2V0IGEgbGlzdCBvZiBhbGwgdGhlIGFkZHJlc3Nlc1xuICAgICAgICAgICAgZW5jb2Rlci52aXNpdCh2YWx1ZSwgKHR5cGUsIHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09IFwiYWRkcmVzc1wiICYmICFpc0hleFN0cmluZyh2YWx1ZSwgMjApKSB7XG4gICAgICAgICAgICAgICAgICAgIGVuc0NhY2hlW3ZhbHVlXSA9IFwiMHhcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBMb29rdXAgZWFjaCBuYW1lXG4gICAgICAgICAgICBmb3IgKGNvbnN0IG5hbWUgaW4gZW5zQ2FjaGUpIHtcbiAgICAgICAgICAgICAgICBlbnNDYWNoZVtuYW1lXSA9IHlpZWxkIHJlc29sdmVOYW1lKG5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUmVwbGFjZSB0aGUgZG9tYWluIHZlcmlmeWluZ0NvbnRyYWN0IGlmIG5lZWRlZFxuICAgICAgICAgICAgaWYgKGRvbWFpbi52ZXJpZnlpbmdDb250cmFjdCAmJiBlbnNDYWNoZVtkb21haW4udmVyaWZ5aW5nQ29udHJhY3RdKSB7XG4gICAgICAgICAgICAgICAgZG9tYWluLnZlcmlmeWluZ0NvbnRyYWN0ID0gZW5zQ2FjaGVbZG9tYWluLnZlcmlmeWluZ0NvbnRyYWN0XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFJlcGxhY2UgYWxsIEVOUyBuYW1lcyB3aXRoIHRoZWlyIGFkZHJlc3NcbiAgICAgICAgICAgIHZhbHVlID0gZW5jb2Rlci52aXNpdCh2YWx1ZSwgKHR5cGUsIHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09IFwiYWRkcmVzc1wiICYmIGVuc0NhY2hlW3ZhbHVlXSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW5zQ2FjaGVbdmFsdWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB7IGRvbWFpbiwgdmFsdWUgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0YXRpYyBnZXRQYXlsb2FkKGRvbWFpbiwgdHlwZXMsIHZhbHVlKSB7XG4gICAgICAgIC8vIFZhbGlkYXRlIHRoZSBkb21haW4gZmllbGRzXG4gICAgICAgIFR5cGVkRGF0YUVuY29kZXIuaGFzaERvbWFpbihkb21haW4pO1xuICAgICAgICAvLyBEZXJpdmUgdGhlIEVJUDcxMkRvbWFpbiBTdHJ1Y3QgcmVmZXJlbmNlIHR5cGVcbiAgICAgICAgY29uc3QgZG9tYWluVmFsdWVzID0ge307XG4gICAgICAgIGNvbnN0IGRvbWFpblR5cGVzID0gW107XG4gICAgICAgIGRvbWFpbkZpZWxkTmFtZXMuZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBkb21haW5bbmFtZV07XG4gICAgICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRvbWFpblZhbHVlc1tuYW1lXSA9IGRvbWFpbkNoZWNrc1tuYW1lXSh2YWx1ZSk7XG4gICAgICAgICAgICBkb21haW5UeXBlcy5wdXNoKHsgbmFtZSwgdHlwZTogZG9tYWluRmllbGRUeXBlc1tuYW1lXSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGVuY29kZXIgPSBUeXBlZERhdGFFbmNvZGVyLmZyb20odHlwZXMpO1xuICAgICAgICBjb25zdCB0eXBlc1dpdGhEb21haW4gPSBzaGFsbG93Q29weSh0eXBlcyk7XG4gICAgICAgIGlmICh0eXBlc1dpdGhEb21haW4uRUlQNzEyRG9tYWluKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwidHlwZXMgbXVzdCBub3QgY29udGFpbiBFSVA3MTJEb21haW4gdHlwZVwiLCBcInR5cGVzLkVJUDcxMkRvbWFpblwiLCB0eXBlcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0eXBlc1dpdGhEb21haW4uRUlQNzEyRG9tYWluID0gZG9tYWluVHlwZXM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVmFsaWRhdGUgdGhlIGRhdGEgc3RydWN0dXJlcyBhbmQgdHlwZXNcbiAgICAgICAgZW5jb2Rlci5lbmNvZGUodmFsdWUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZXM6IHR5cGVzV2l0aERvbWFpbixcbiAgICAgICAgICAgIGRvbWFpbjogZG9tYWluVmFsdWVzLFxuICAgICAgICAgICAgcHJpbWFyeVR5cGU6IGVuY29kZXIucHJpbWFyeVR5cGUsXG4gICAgICAgICAgICBtZXNzYWdlOiBlbmNvZGVyLnZpc2l0KHZhbHVlLCAodHlwZSwgdmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBieXRlc1xuICAgICAgICAgICAgICAgIGlmICh0eXBlLm1hdGNoKC9eYnl0ZXMoXFxkKikvKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGV4bGlmeShhcnJheWlmeSh2YWx1ZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyB1aW50IG9yIGludFxuICAgICAgICAgICAgICAgIGlmICh0eXBlLm1hdGNoKC9edT9pbnQvKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQmlnTnVtYmVyLmZyb20odmFsdWUpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYWRkcmVzc1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJib29sXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gISF2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAodmFsdWUpICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihgaW52YWxpZCBzdHJpbmdgLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJ1bnN1cHBvcnRlZCB0eXBlXCIsIFwidHlwZVwiLCB0eXBlKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH07XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZWQtZGF0YS5qcy5tYXAiLCJpbXBvcnQgeyBCaWdOdW1iZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYmlnbnVtYmVyXCI7XG5jb25zdCBOZWdhdGl2ZU9uZSA9ICggLyojX19QVVJFX18qL0JpZ051bWJlci5mcm9tKC0xKSk7XG5jb25zdCBaZXJvID0gKCAvKiNfX1BVUkVfXyovQmlnTnVtYmVyLmZyb20oMCkpO1xuY29uc3QgT25lID0gKCAvKiNfX1BVUkVfXyovQmlnTnVtYmVyLmZyb20oMSkpO1xuY29uc3QgVHdvID0gKCAvKiNfX1BVUkVfXyovQmlnTnVtYmVyLmZyb20oMikpO1xuY29uc3QgV2VpUGVyRXRoZXIgPSAoIC8qI19fUFVSRV9fKi9CaWdOdW1iZXIuZnJvbShcIjEwMDAwMDAwMDAwMDAwMDAwMDBcIikpO1xuY29uc3QgTWF4VWludDI1NiA9ICggLyojX19QVVJFX18qL0JpZ051bWJlci5mcm9tKFwiMHhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmXCIpKTtcbmNvbnN0IE1pbkludDI1NiA9ICggLyojX19QVVJFX18qL0JpZ051bWJlci5mcm9tKFwiLTB4ODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiKSk7XG5jb25zdCBNYXhJbnQyNTYgPSAoIC8qI19fUFVSRV9fKi9CaWdOdW1iZXIuZnJvbShcIjB4N2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlwiKSk7XG5leHBvcnQgeyBOZWdhdGl2ZU9uZSwgWmVybywgT25lLCBUd28sIFdlaVBlckV0aGVyLCBNYXhVaW50MjU2LCBNaW5JbnQyNTYsIE1heEludDI1NiwgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJpZ251bWJlcnMuanMubWFwIiwiaW1wb3J0IEJOIGZyb20gJ2JuLmpzJztcbmltcG9ydCBoYXNoIGZyb20gJ2hhc2guanMnO1xuXG52YXIgY29tbW9uanNHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB7fTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEV4cG9ydEZyb21DanMgKHgpIHtcblx0cmV0dXJuIHggJiYgeC5fX2VzTW9kdWxlICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh4LCAnZGVmYXVsdCcpID8geFsnZGVmYXVsdCddIDogeDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tbW9uanNNb2R1bGUoZm4sIGJhc2VkaXIsIG1vZHVsZSkge1xuXHRyZXR1cm4gbW9kdWxlID0ge1xuXHRcdHBhdGg6IGJhc2VkaXIsXG5cdFx0ZXhwb3J0czoge30sXG5cdFx0cmVxdWlyZTogZnVuY3Rpb24gKHBhdGgsIGJhc2UpIHtcblx0XHRcdHJldHVybiBjb21tb25qc1JlcXVpcmUocGF0aCwgKGJhc2UgPT09IHVuZGVmaW5lZCB8fCBiYXNlID09PSBudWxsKSA/IG1vZHVsZS5wYXRoIDogYmFzZSk7XG5cdFx0fVxuXHR9LCBmbihtb2R1bGUsIG1vZHVsZS5leHBvcnRzKSwgbW9kdWxlLmV4cG9ydHM7XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRFeHBvcnRGcm9tTmFtZXNwYWNlSWZQcmVzZW50IChuKSB7XG5cdHJldHVybiBuICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLCAnZGVmYXVsdCcpID8gblsnZGVmYXVsdCddIDogbjtcbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEV4cG9ydEZyb21OYW1lc3BhY2VJZk5vdE5hbWVkIChuKSB7XG5cdHJldHVybiBuICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLCAnZGVmYXVsdCcpICYmIE9iamVjdC5rZXlzKG4pLmxlbmd0aCA9PT0gMSA/IG5bJ2RlZmF1bHQnXSA6IG47XG59XG5cbmZ1bmN0aW9uIGdldEF1Z21lbnRlZE5hbWVzcGFjZShuKSB7XG5cdGlmIChuLl9fZXNNb2R1bGUpIHJldHVybiBuO1xuXHR2YXIgYSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ19fZXNNb2R1bGUnLCB7dmFsdWU6IHRydWV9KTtcblx0T2JqZWN0LmtleXMobikuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuXHRcdHZhciBkID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihuLCBrKTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoYSwgaywgZC5nZXQgPyBkIDoge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRyZXR1cm4gbltrXTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG5cdHJldHVybiBhO1xufVxuXG5mdW5jdGlvbiBjb21tb25qc1JlcXVpcmUgKCkge1xuXHR0aHJvdyBuZXcgRXJyb3IoJ0R5bmFtaWMgcmVxdWlyZXMgYXJlIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkIGJ5IEByb2xsdXAvcGx1Z2luLWNvbW1vbmpzJyk7XG59XG5cbnZhciBtaW5pbWFsaXN0aWNBc3NlcnQgPSBhc3NlcnQ7XG5cbmZ1bmN0aW9uIGFzc2VydCh2YWwsIG1zZykge1xuICBpZiAoIXZhbClcbiAgICB0aHJvdyBuZXcgRXJyb3IobXNnIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7XG59XG5cbmFzc2VydC5lcXVhbCA9IGZ1bmN0aW9uIGFzc2VydEVxdWFsKGwsIHIsIG1zZykge1xuICBpZiAobCAhPSByKVxuICAgIHRocm93IG5ldyBFcnJvcihtc2cgfHwgKCdBc3NlcnRpb24gZmFpbGVkOiAnICsgbCArICcgIT0gJyArIHIpKTtcbn07XG5cbnZhciB1dGlsc18xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSBleHBvcnRzO1xuXG5mdW5jdGlvbiB0b0FycmF5KG1zZywgZW5jKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KG1zZykpXG4gICAgcmV0dXJuIG1zZy5zbGljZSgpO1xuICBpZiAoIW1zZylcbiAgICByZXR1cm4gW107XG4gIHZhciByZXMgPSBbXTtcbiAgaWYgKHR5cGVvZiBtc2cgIT09ICdzdHJpbmcnKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspXG4gICAgICByZXNbaV0gPSBtc2dbaV0gfCAwO1xuICAgIHJldHVybiByZXM7XG4gIH1cbiAgaWYgKGVuYyA9PT0gJ2hleCcpIHtcbiAgICBtc2cgPSBtc2cucmVwbGFjZSgvW15hLXowLTldKy9pZywgJycpO1xuICAgIGlmIChtc2cubGVuZ3RoICUgMiAhPT0gMClcbiAgICAgIG1zZyA9ICcwJyArIG1zZztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkgKz0gMilcbiAgICAgIHJlcy5wdXNoKHBhcnNlSW50KG1zZ1tpXSArIG1zZ1tpICsgMV0sIDE2KSk7XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjID0gbXNnLmNoYXJDb2RlQXQoaSk7XG4gICAgICB2YXIgaGkgPSBjID4+IDg7XG4gICAgICB2YXIgbG8gPSBjICYgMHhmZjtcbiAgICAgIGlmIChoaSlcbiAgICAgICAgcmVzLnB1c2goaGksIGxvKTtcbiAgICAgIGVsc2VcbiAgICAgICAgcmVzLnB1c2gobG8pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzO1xufVxudXRpbHMudG9BcnJheSA9IHRvQXJyYXk7XG5cbmZ1bmN0aW9uIHplcm8yKHdvcmQpIHtcbiAgaWYgKHdvcmQubGVuZ3RoID09PSAxKVxuICAgIHJldHVybiAnMCcgKyB3b3JkO1xuICBlbHNlXG4gICAgcmV0dXJuIHdvcmQ7XG59XG51dGlscy56ZXJvMiA9IHplcm8yO1xuXG5mdW5jdGlvbiB0b0hleChtc2cpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKylcbiAgICByZXMgKz0gemVybzIobXNnW2ldLnRvU3RyaW5nKDE2KSk7XG4gIHJldHVybiByZXM7XG59XG51dGlscy50b0hleCA9IHRvSGV4O1xuXG51dGlscy5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoYXJyLCBlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHRvSGV4KGFycik7XG4gIGVsc2VcbiAgICByZXR1cm4gYXJyO1xufTtcbn0pO1xuXG52YXIgdXRpbHNfMSQxID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSBleHBvcnRzO1xuXG5cblxuXG51dGlscy5hc3NlcnQgPSBtaW5pbWFsaXN0aWNBc3NlcnQ7XG51dGlscy50b0FycmF5ID0gdXRpbHNfMS50b0FycmF5O1xudXRpbHMuemVybzIgPSB1dGlsc18xLnplcm8yO1xudXRpbHMudG9IZXggPSB1dGlsc18xLnRvSGV4O1xudXRpbHMuZW5jb2RlID0gdXRpbHNfMS5lbmNvZGU7XG5cbi8vIFJlcHJlc2VudCBudW0gaW4gYSB3LU5BRiBmb3JtXG5mdW5jdGlvbiBnZXROQUYobnVtLCB3LCBiaXRzKSB7XG4gIHZhciBuYWYgPSBuZXcgQXJyYXkoTWF0aC5tYXgobnVtLmJpdExlbmd0aCgpLCBiaXRzKSArIDEpO1xuICBuYWYuZmlsbCgwKTtcblxuICB2YXIgd3MgPSAxIDw8ICh3ICsgMSk7XG4gIHZhciBrID0gbnVtLmNsb25lKCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuYWYubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgejtcbiAgICB2YXIgbW9kID0gay5hbmRsbih3cyAtIDEpO1xuICAgIGlmIChrLmlzT2RkKCkpIHtcbiAgICAgIGlmIChtb2QgPiAod3MgPj4gMSkgLSAxKVxuICAgICAgICB6ID0gKHdzID4+IDEpIC0gbW9kO1xuICAgICAgZWxzZVxuICAgICAgICB6ID0gbW9kO1xuICAgICAgay5pc3Vibih6KTtcbiAgICB9IGVsc2Uge1xuICAgICAgeiA9IDA7XG4gICAgfVxuXG4gICAgbmFmW2ldID0gejtcbiAgICBrLml1c2hybigxKTtcbiAgfVxuXG4gIHJldHVybiBuYWY7XG59XG51dGlscy5nZXROQUYgPSBnZXROQUY7XG5cbi8vIFJlcHJlc2VudCBrMSwgazIgaW4gYSBKb2ludCBTcGFyc2UgRm9ybVxuZnVuY3Rpb24gZ2V0SlNGKGsxLCBrMikge1xuICB2YXIganNmID0gW1xuICAgIFtdLFxuICAgIFtdLFxuICBdO1xuXG4gIGsxID0gazEuY2xvbmUoKTtcbiAgazIgPSBrMi5jbG9uZSgpO1xuICB2YXIgZDEgPSAwO1xuICB2YXIgZDIgPSAwO1xuICB2YXIgbTg7XG4gIHdoaWxlIChrMS5jbXBuKC1kMSkgPiAwIHx8IGsyLmNtcG4oLWQyKSA+IDApIHtcbiAgICAvLyBGaXJzdCBwaGFzZVxuICAgIHZhciBtMTQgPSAoazEuYW5kbG4oMykgKyBkMSkgJiAzO1xuICAgIHZhciBtMjQgPSAoazIuYW5kbG4oMykgKyBkMikgJiAzO1xuICAgIGlmIChtMTQgPT09IDMpXG4gICAgICBtMTQgPSAtMTtcbiAgICBpZiAobTI0ID09PSAzKVxuICAgICAgbTI0ID0gLTE7XG4gICAgdmFyIHUxO1xuICAgIGlmICgobTE0ICYgMSkgPT09IDApIHtcbiAgICAgIHUxID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgbTggPSAoazEuYW5kbG4oNykgKyBkMSkgJiA3O1xuICAgICAgaWYgKChtOCA9PT0gMyB8fCBtOCA9PT0gNSkgJiYgbTI0ID09PSAyKVxuICAgICAgICB1MSA9IC1tMTQ7XG4gICAgICBlbHNlXG4gICAgICAgIHUxID0gbTE0O1xuICAgIH1cbiAgICBqc2ZbMF0ucHVzaCh1MSk7XG5cbiAgICB2YXIgdTI7XG4gICAgaWYgKChtMjQgJiAxKSA9PT0gMCkge1xuICAgICAgdTIgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBtOCA9IChrMi5hbmRsbig3KSArIGQyKSAmIDc7XG4gICAgICBpZiAoKG04ID09PSAzIHx8IG04ID09PSA1KSAmJiBtMTQgPT09IDIpXG4gICAgICAgIHUyID0gLW0yNDtcbiAgICAgIGVsc2VcbiAgICAgICAgdTIgPSBtMjQ7XG4gICAgfVxuICAgIGpzZlsxXS5wdXNoKHUyKTtcblxuICAgIC8vIFNlY29uZCBwaGFzZVxuICAgIGlmICgyICogZDEgPT09IHUxICsgMSlcbiAgICAgIGQxID0gMSAtIGQxO1xuICAgIGlmICgyICogZDIgPT09IHUyICsgMSlcbiAgICAgIGQyID0gMSAtIGQyO1xuICAgIGsxLml1c2hybigxKTtcbiAgICBrMi5pdXNocm4oMSk7XG4gIH1cblxuICByZXR1cm4ganNmO1xufVxudXRpbHMuZ2V0SlNGID0gZ2V0SlNGO1xuXG5mdW5jdGlvbiBjYWNoZWRQcm9wZXJ0eShvYmosIG5hbWUsIGNvbXB1dGVyKSB7XG4gIHZhciBrZXkgPSAnXycgKyBuYW1lO1xuICBvYmoucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24gY2FjaGVkUHJvcGVydHkoKSB7XG4gICAgcmV0dXJuIHRoaXNba2V5XSAhPT0gdW5kZWZpbmVkID8gdGhpc1trZXldIDpcbiAgICAgIHRoaXNba2V5XSA9IGNvbXB1dGVyLmNhbGwodGhpcyk7XG4gIH07XG59XG51dGlscy5jYWNoZWRQcm9wZXJ0eSA9IGNhY2hlZFByb3BlcnR5O1xuXG5mdW5jdGlvbiBwYXJzZUJ5dGVzKGJ5dGVzKSB7XG4gIHJldHVybiB0eXBlb2YgYnl0ZXMgPT09ICdzdHJpbmcnID8gdXRpbHMudG9BcnJheShieXRlcywgJ2hleCcpIDpcbiAgICBieXRlcztcbn1cbnV0aWxzLnBhcnNlQnl0ZXMgPSBwYXJzZUJ5dGVzO1xuXG5mdW5jdGlvbiBpbnRGcm9tTEUoYnl0ZXMpIHtcbiAgcmV0dXJuIG5ldyBCTihieXRlcywgJ2hleCcsICdsZScpO1xufVxudXRpbHMuaW50RnJvbUxFID0gaW50RnJvbUxFO1xufSk7XG5cbid1c2Ugc3RyaWN0JztcblxuXG5cbnZhciBnZXROQUYgPSB1dGlsc18xJDEuZ2V0TkFGO1xudmFyIGdldEpTRiA9IHV0aWxzXzEkMS5nZXRKU0Y7XG52YXIgYXNzZXJ0JDEgPSB1dGlsc18xJDEuYXNzZXJ0O1xuXG5mdW5jdGlvbiBCYXNlQ3VydmUodHlwZSwgY29uZikge1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLnAgPSBuZXcgQk4oY29uZi5wLCAxNik7XG5cbiAgLy8gVXNlIE1vbnRnb21lcnksIHdoZW4gdGhlcmUgaXMgbm8gZmFzdCByZWR1Y3Rpb24gZm9yIHRoZSBwcmltZVxuICB0aGlzLnJlZCA9IGNvbmYucHJpbWUgPyBCTi5yZWQoY29uZi5wcmltZSkgOiBCTi5tb250KHRoaXMucCk7XG5cbiAgLy8gVXNlZnVsIGZvciBtYW55IGN1cnZlc1xuICB0aGlzLnplcm8gPSBuZXcgQk4oMCkudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLm9uZSA9IG5ldyBCTigxKS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMudHdvID0gbmV3IEJOKDIpLnRvUmVkKHRoaXMucmVkKTtcblxuICAvLyBDdXJ2ZSBjb25maWd1cmF0aW9uLCBvcHRpb25hbFxuICB0aGlzLm4gPSBjb25mLm4gJiYgbmV3IEJOKGNvbmYubiwgMTYpO1xuICB0aGlzLmcgPSBjb25mLmcgJiYgdGhpcy5wb2ludEZyb21KU09OKGNvbmYuZywgY29uZi5nUmVkKTtcblxuICAvLyBUZW1wb3JhcnkgYXJyYXlzXG4gIHRoaXMuX3duYWZUMSA9IG5ldyBBcnJheSg0KTtcbiAgdGhpcy5fd25hZlQyID0gbmV3IEFycmF5KDQpO1xuICB0aGlzLl93bmFmVDMgPSBuZXcgQXJyYXkoNCk7XG4gIHRoaXMuX3duYWZUNCA9IG5ldyBBcnJheSg0KTtcblxuICB0aGlzLl9iaXRMZW5ndGggPSB0aGlzLm4gPyB0aGlzLm4uYml0TGVuZ3RoKCkgOiAwO1xuXG4gIC8vIEdlbmVyYWxpemVkIEdyZWcgTWF4d2VsbCdzIHRyaWNrXG4gIHZhciBhZGp1c3RDb3VudCA9IHRoaXMubiAmJiB0aGlzLnAuZGl2KHRoaXMubik7XG4gIGlmICghYWRqdXN0Q291bnQgfHwgYWRqdXN0Q291bnQuY21wbigxMDApID4gMCkge1xuICAgIHRoaXMucmVkTiA9IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fbWF4d2VsbFRyaWNrID0gdHJ1ZTtcbiAgICB0aGlzLnJlZE4gPSB0aGlzLm4udG9SZWQodGhpcy5yZWQpO1xuICB9XG59XG52YXIgYmFzZSA9IEJhc2VDdXJ2ZTtcblxuQmFzZUN1cnZlLnByb3RvdHlwZS5wb2ludCA9IGZ1bmN0aW9uIHBvaW50KCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xufTtcblxuQmFzZUN1cnZlLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xufTtcblxuQmFzZUN1cnZlLnByb3RvdHlwZS5fZml4ZWROYWZNdWwgPSBmdW5jdGlvbiBfZml4ZWROYWZNdWwocCwgaykge1xuICBhc3NlcnQkMShwLnByZWNvbXB1dGVkKTtcbiAgdmFyIGRvdWJsZXMgPSBwLl9nZXREb3VibGVzKCk7XG5cbiAgdmFyIG5hZiA9IGdldE5BRihrLCAxLCB0aGlzLl9iaXRMZW5ndGgpO1xuICB2YXIgSSA9ICgxIDw8IChkb3VibGVzLnN0ZXAgKyAxKSkgLSAoZG91Ymxlcy5zdGVwICUgMiA9PT0gMCA/IDIgOiAxKTtcbiAgSSAvPSAzO1xuXG4gIC8vIFRyYW5zbGF0ZSBpbnRvIG1vcmUgd2luZG93ZWQgZm9ybVxuICB2YXIgcmVwciA9IFtdO1xuICB2YXIgajtcbiAgdmFyIG5hZlc7XG4gIGZvciAoaiA9IDA7IGogPCBuYWYubGVuZ3RoOyBqICs9IGRvdWJsZXMuc3RlcCkge1xuICAgIG5hZlcgPSAwO1xuICAgIGZvciAodmFyIGwgPSBqICsgZG91Ymxlcy5zdGVwIC0gMTsgbCA+PSBqOyBsLS0pXG4gICAgICBuYWZXID0gKG5hZlcgPDwgMSkgKyBuYWZbbF07XG4gICAgcmVwci5wdXNoKG5hZlcpO1xuICB9XG5cbiAgdmFyIGEgPSB0aGlzLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgdmFyIGIgPSB0aGlzLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgZm9yICh2YXIgaSA9IEk7IGkgPiAwOyBpLS0pIHtcbiAgICBmb3IgKGogPSAwOyBqIDwgcmVwci5sZW5ndGg7IGorKykge1xuICAgICAgbmFmVyA9IHJlcHJbal07XG4gICAgICBpZiAobmFmVyA9PT0gaSlcbiAgICAgICAgYiA9IGIubWl4ZWRBZGQoZG91Ymxlcy5wb2ludHNbal0pO1xuICAgICAgZWxzZSBpZiAobmFmVyA9PT0gLWkpXG4gICAgICAgIGIgPSBiLm1peGVkQWRkKGRvdWJsZXMucG9pbnRzW2pdLm5lZygpKTtcbiAgICB9XG4gICAgYSA9IGEuYWRkKGIpO1xuICB9XG4gIHJldHVybiBhLnRvUCgpO1xufTtcblxuQmFzZUN1cnZlLnByb3RvdHlwZS5fd25hZk11bCA9IGZ1bmN0aW9uIF93bmFmTXVsKHAsIGspIHtcbiAgdmFyIHcgPSA0O1xuXG4gIC8vIFByZWNvbXB1dGUgd2luZG93XG4gIHZhciBuYWZQb2ludHMgPSBwLl9nZXROQUZQb2ludHModyk7XG4gIHcgPSBuYWZQb2ludHMud25kO1xuICB2YXIgd25kID0gbmFmUG9pbnRzLnBvaW50cztcblxuICAvLyBHZXQgTkFGIGZvcm1cbiAgdmFyIG5hZiA9IGdldE5BRihrLCB3LCB0aGlzLl9iaXRMZW5ndGgpO1xuXG4gIC8vIEFkZCBgdGhpc2AqKE4rMSkgZm9yIGV2ZXJ5IHctTkFGIGluZGV4XG4gIHZhciBhY2MgPSB0aGlzLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgZm9yICh2YXIgaSA9IG5hZi5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIC8vIENvdW50IHplcm9lc1xuICAgIGZvciAodmFyIGwgPSAwOyBpID49IDAgJiYgbmFmW2ldID09PSAwOyBpLS0pXG4gICAgICBsKys7XG4gICAgaWYgKGkgPj0gMClcbiAgICAgIGwrKztcbiAgICBhY2MgPSBhY2MuZGJscChsKTtcblxuICAgIGlmIChpIDwgMClcbiAgICAgIGJyZWFrO1xuICAgIHZhciB6ID0gbmFmW2ldO1xuICAgIGFzc2VydCQxKHogIT09IDApO1xuICAgIGlmIChwLnR5cGUgPT09ICdhZmZpbmUnKSB7XG4gICAgICAvLyBKICstIFBcbiAgICAgIGlmICh6ID4gMClcbiAgICAgICAgYWNjID0gYWNjLm1peGVkQWRkKHduZFsoeiAtIDEpID4+IDFdKTtcbiAgICAgIGVsc2VcbiAgICAgICAgYWNjID0gYWNjLm1peGVkQWRkKHduZFsoLXogLSAxKSA+PiAxXS5uZWcoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEogKy0gSlxuICAgICAgaWYgKHogPiAwKVxuICAgICAgICBhY2MgPSBhY2MuYWRkKHduZFsoeiAtIDEpID4+IDFdKTtcbiAgICAgIGVsc2VcbiAgICAgICAgYWNjID0gYWNjLmFkZCh3bmRbKC16IC0gMSkgPj4gMV0ubmVnKCkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcC50eXBlID09PSAnYWZmaW5lJyA/IGFjYy50b1AoKSA6IGFjYztcbn07XG5cbkJhc2VDdXJ2ZS5wcm90b3R5cGUuX3duYWZNdWxBZGQgPSBmdW5jdGlvbiBfd25hZk11bEFkZChkZWZXLFxuICBwb2ludHMsXG4gIGNvZWZmcyxcbiAgbGVuLFxuICBqYWNvYmlhblJlc3VsdCkge1xuICB2YXIgd25kV2lkdGggPSB0aGlzLl93bmFmVDE7XG4gIHZhciB3bmQgPSB0aGlzLl93bmFmVDI7XG4gIHZhciBuYWYgPSB0aGlzLl93bmFmVDM7XG5cbiAgLy8gRmlsbCBhbGwgYXJyYXlzXG4gIHZhciBtYXggPSAwO1xuICB2YXIgaTtcbiAgdmFyIGo7XG4gIHZhciBwO1xuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBwID0gcG9pbnRzW2ldO1xuICAgIHZhciBuYWZQb2ludHMgPSBwLl9nZXROQUZQb2ludHMoZGVmVyk7XG4gICAgd25kV2lkdGhbaV0gPSBuYWZQb2ludHMud25kO1xuICAgIHduZFtpXSA9IG5hZlBvaW50cy5wb2ludHM7XG4gIH1cblxuICAvLyBDb21iIHNtYWxsIHdpbmRvdyBOQUZzXG4gIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMTsgaSAtPSAyKSB7XG4gICAgdmFyIGEgPSBpIC0gMTtcbiAgICB2YXIgYiA9IGk7XG4gICAgaWYgKHduZFdpZHRoW2FdICE9PSAxIHx8IHduZFdpZHRoW2JdICE9PSAxKSB7XG4gICAgICBuYWZbYV0gPSBnZXROQUYoY29lZmZzW2FdLCB3bmRXaWR0aFthXSwgdGhpcy5fYml0TGVuZ3RoKTtcbiAgICAgIG5hZltiXSA9IGdldE5BRihjb2VmZnNbYl0sIHduZFdpZHRoW2JdLCB0aGlzLl9iaXRMZW5ndGgpO1xuICAgICAgbWF4ID0gTWF0aC5tYXgobmFmW2FdLmxlbmd0aCwgbWF4KTtcbiAgICAgIG1heCA9IE1hdGgubWF4KG5hZltiXS5sZW5ndGgsIG1heCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIgY29tYiA9IFtcbiAgICAgIHBvaW50c1thXSwgLyogMSAqL1xuICAgICAgbnVsbCwgLyogMyAqL1xuICAgICAgbnVsbCwgLyogNSAqL1xuICAgICAgcG9pbnRzW2JdLCAvKiA3ICovXG4gICAgXTtcblxuICAgIC8vIFRyeSB0byBhdm9pZCBQcm9qZWN0aXZlIHBvaW50cywgaWYgcG9zc2libGVcbiAgICBpZiAocG9pbnRzW2FdLnkuY21wKHBvaW50c1tiXS55KSA9PT0gMCkge1xuICAgICAgY29tYlsxXSA9IHBvaW50c1thXS5hZGQocG9pbnRzW2JdKTtcbiAgICAgIGNvbWJbMl0gPSBwb2ludHNbYV0udG9KKCkubWl4ZWRBZGQocG9pbnRzW2JdLm5lZygpKTtcbiAgICB9IGVsc2UgaWYgKHBvaW50c1thXS55LmNtcChwb2ludHNbYl0ueS5yZWROZWcoKSkgPT09IDApIHtcbiAgICAgIGNvbWJbMV0gPSBwb2ludHNbYV0udG9KKCkubWl4ZWRBZGQocG9pbnRzW2JdKTtcbiAgICAgIGNvbWJbMl0gPSBwb2ludHNbYV0uYWRkKHBvaW50c1tiXS5uZWcoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbWJbMV0gPSBwb2ludHNbYV0udG9KKCkubWl4ZWRBZGQocG9pbnRzW2JdKTtcbiAgICAgIGNvbWJbMl0gPSBwb2ludHNbYV0udG9KKCkubWl4ZWRBZGQocG9pbnRzW2JdLm5lZygpKTtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXggPSBbXG4gICAgICAtMywgLyogLTEgLTEgKi9cbiAgICAgIC0xLCAvKiAtMSAwICovXG4gICAgICAtNSwgLyogLTEgMSAqL1xuICAgICAgLTcsIC8qIDAgLTEgKi9cbiAgICAgIDAsIC8qIDAgMCAqL1xuICAgICAgNywgLyogMCAxICovXG4gICAgICA1LCAvKiAxIC0xICovXG4gICAgICAxLCAvKiAxIDAgKi9cbiAgICAgIDMsICAvKiAxIDEgKi9cbiAgICBdO1xuXG4gICAgdmFyIGpzZiA9IGdldEpTRihjb2VmZnNbYV0sIGNvZWZmc1tiXSk7XG4gICAgbWF4ID0gTWF0aC5tYXgoanNmWzBdLmxlbmd0aCwgbWF4KTtcbiAgICBuYWZbYV0gPSBuZXcgQXJyYXkobWF4KTtcbiAgICBuYWZbYl0gPSBuZXcgQXJyYXkobWF4KTtcbiAgICBmb3IgKGogPSAwOyBqIDwgbWF4OyBqKyspIHtcbiAgICAgIHZhciBqYSA9IGpzZlswXVtqXSB8IDA7XG4gICAgICB2YXIgamIgPSBqc2ZbMV1bal0gfCAwO1xuXG4gICAgICBuYWZbYV1bal0gPSBpbmRleFsoamEgKyAxKSAqIDMgKyAoamIgKyAxKV07XG4gICAgICBuYWZbYl1bal0gPSAwO1xuICAgICAgd25kW2FdID0gY29tYjtcbiAgICB9XG4gIH1cblxuICB2YXIgYWNjID0gdGhpcy5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gIHZhciB0bXAgPSB0aGlzLl93bmFmVDQ7XG4gIGZvciAoaSA9IG1heDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgayA9IDA7XG5cbiAgICB3aGlsZSAoaSA+PSAwKSB7XG4gICAgICB2YXIgemVybyA9IHRydWU7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgdG1wW2pdID0gbmFmW2pdW2ldIHwgMDtcbiAgICAgICAgaWYgKHRtcFtqXSAhPT0gMClcbiAgICAgICAgICB6ZXJvID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoIXplcm8pXG4gICAgICAgIGJyZWFrO1xuICAgICAgaysrO1xuICAgICAgaS0tO1xuICAgIH1cbiAgICBpZiAoaSA+PSAwKVxuICAgICAgaysrO1xuICAgIGFjYyA9IGFjYy5kYmxwKGspO1xuICAgIGlmIChpIDwgMClcbiAgICAgIGJyZWFrO1xuXG4gICAgZm9yIChqID0gMDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICB2YXIgeiA9IHRtcFtqXTtcbiAgICAgIHA7XG4gICAgICBpZiAoeiA9PT0gMClcbiAgICAgICAgY29udGludWU7XG4gICAgICBlbHNlIGlmICh6ID4gMClcbiAgICAgICAgcCA9IHduZFtqXVsoeiAtIDEpID4+IDFdO1xuICAgICAgZWxzZSBpZiAoeiA8IDApXG4gICAgICAgIHAgPSB3bmRbal1bKC16IC0gMSkgPj4gMV0ubmVnKCk7XG5cbiAgICAgIGlmIChwLnR5cGUgPT09ICdhZmZpbmUnKVxuICAgICAgICBhY2MgPSBhY2MubWl4ZWRBZGQocCk7XG4gICAgICBlbHNlXG4gICAgICAgIGFjYyA9IGFjYy5hZGQocCk7XG4gICAgfVxuICB9XG4gIC8vIFplcm9pZnkgcmVmZXJlbmNlc1xuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspXG4gICAgd25kW2ldID0gbnVsbDtcblxuICBpZiAoamFjb2JpYW5SZXN1bHQpXG4gICAgcmV0dXJuIGFjYztcbiAgZWxzZVxuICAgIHJldHVybiBhY2MudG9QKCk7XG59O1xuXG5mdW5jdGlvbiBCYXNlUG9pbnQoY3VydmUsIHR5cGUpIHtcbiAgdGhpcy5jdXJ2ZSA9IGN1cnZlO1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLnByZWNvbXB1dGVkID0gbnVsbDtcbn1cbkJhc2VDdXJ2ZS5CYXNlUG9pbnQgPSBCYXNlUG9pbnQ7XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcSgvKm90aGVyKi8pIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZSgpIHtcbiAgcmV0dXJuIHRoaXMuY3VydmUudmFsaWRhdGUodGhpcyk7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLmRlY29kZVBvaW50ID0gZnVuY3Rpb24gZGVjb2RlUG9pbnQoYnl0ZXMsIGVuYykge1xuICBieXRlcyA9IHV0aWxzXzEkMS50b0FycmF5KGJ5dGVzLCBlbmMpO1xuXG4gIHZhciBsZW4gPSB0aGlzLnAuYnl0ZUxlbmd0aCgpO1xuXG4gIC8vIHVuY29tcHJlc3NlZCwgaHlicmlkLW9kZCwgaHlicmlkLWV2ZW5cbiAgaWYgKChieXRlc1swXSA9PT0gMHgwNCB8fCBieXRlc1swXSA9PT0gMHgwNiB8fCBieXRlc1swXSA9PT0gMHgwNykgJiZcbiAgICAgIGJ5dGVzLmxlbmd0aCAtIDEgPT09IDIgKiBsZW4pIHtcbiAgICBpZiAoYnl0ZXNbMF0gPT09IDB4MDYpXG4gICAgICBhc3NlcnQkMShieXRlc1tieXRlcy5sZW5ndGggLSAxXSAlIDIgPT09IDApO1xuICAgIGVsc2UgaWYgKGJ5dGVzWzBdID09PSAweDA3KVxuICAgICAgYXNzZXJ0JDEoYnl0ZXNbYnl0ZXMubGVuZ3RoIC0gMV0gJSAyID09PSAxKTtcblxuICAgIHZhciByZXMgPSAgdGhpcy5wb2ludChieXRlcy5zbGljZSgxLCAxICsgbGVuKSxcbiAgICAgIGJ5dGVzLnNsaWNlKDEgKyBsZW4sIDEgKyAyICogbGVuKSk7XG5cbiAgICByZXR1cm4gcmVzO1xuICB9IGVsc2UgaWYgKChieXRlc1swXSA9PT0gMHgwMiB8fCBieXRlc1swXSA9PT0gMHgwMykgJiZcbiAgICAgICAgICAgICAgYnl0ZXMubGVuZ3RoIC0gMSA9PT0gbGVuKSB7XG4gICAgcmV0dXJuIHRoaXMucG9pbnRGcm9tWChieXRlcy5zbGljZSgxLCAxICsgbGVuKSwgYnl0ZXNbMF0gPT09IDB4MDMpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcignVW5rbm93biBwb2ludCBmb3JtYXQnKTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuZW5jb2RlQ29tcHJlc3NlZCA9IGZ1bmN0aW9uIGVuY29kZUNvbXByZXNzZWQoZW5jKSB7XG4gIHJldHVybiB0aGlzLmVuY29kZShlbmMsIHRydWUpO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5fZW5jb2RlID0gZnVuY3Rpb24gX2VuY29kZShjb21wYWN0KSB7XG4gIHZhciBsZW4gPSB0aGlzLmN1cnZlLnAuYnl0ZUxlbmd0aCgpO1xuICB2YXIgeCA9IHRoaXMuZ2V0WCgpLnRvQXJyYXkoJ2JlJywgbGVuKTtcblxuICBpZiAoY29tcGFjdClcbiAgICByZXR1cm4gWyB0aGlzLmdldFkoKS5pc0V2ZW4oKSA/IDB4MDIgOiAweDAzIF0uY29uY2F0KHgpO1xuXG4gIHJldHVybiBbIDB4MDQgXS5jb25jYXQoeCwgdGhpcy5nZXRZKCkudG9BcnJheSgnYmUnLCBsZW4pKTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKGVuYywgY29tcGFjdCkge1xuICByZXR1cm4gdXRpbHNfMSQxLmVuY29kZSh0aGlzLl9lbmNvZGUoY29tcGFjdCksIGVuYyk7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLnByZWNvbXB1dGUgPSBmdW5jdGlvbiBwcmVjb21wdXRlKHBvd2VyKSB7XG4gIGlmICh0aGlzLnByZWNvbXB1dGVkKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIHZhciBwcmVjb21wdXRlZCA9IHtcbiAgICBkb3VibGVzOiBudWxsLFxuICAgIG5hZjogbnVsbCxcbiAgICBiZXRhOiBudWxsLFxuICB9O1xuICBwcmVjb21wdXRlZC5uYWYgPSB0aGlzLl9nZXROQUZQb2ludHMoOCk7XG4gIHByZWNvbXB1dGVkLmRvdWJsZXMgPSB0aGlzLl9nZXREb3VibGVzKDQsIHBvd2VyKTtcbiAgcHJlY29tcHV0ZWQuYmV0YSA9IHRoaXMuX2dldEJldGEoKTtcbiAgdGhpcy5wcmVjb21wdXRlZCA9IHByZWNvbXB1dGVkO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5faGFzRG91YmxlcyA9IGZ1bmN0aW9uIF9oYXNEb3VibGVzKGspIHtcbiAgaWYgKCF0aGlzLnByZWNvbXB1dGVkKVxuICAgIHJldHVybiBmYWxzZTtcblxuICB2YXIgZG91YmxlcyA9IHRoaXMucHJlY29tcHV0ZWQuZG91YmxlcztcbiAgaWYgKCFkb3VibGVzKVxuICAgIHJldHVybiBmYWxzZTtcblxuICByZXR1cm4gZG91Ymxlcy5wb2ludHMubGVuZ3RoID49IE1hdGguY2VpbCgoay5iaXRMZW5ndGgoKSArIDEpIC8gZG91Ymxlcy5zdGVwKTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuX2dldERvdWJsZXMgPSBmdW5jdGlvbiBfZ2V0RG91YmxlcyhzdGVwLCBwb3dlcikge1xuICBpZiAodGhpcy5wcmVjb21wdXRlZCAmJiB0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXMpXG4gICAgcmV0dXJuIHRoaXMucHJlY29tcHV0ZWQuZG91YmxlcztcblxuICB2YXIgZG91YmxlcyA9IFsgdGhpcyBdO1xuICB2YXIgYWNjID0gdGhpcztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb3dlcjsgaSArPSBzdGVwKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBzdGVwOyBqKyspXG4gICAgICBhY2MgPSBhY2MuZGJsKCk7XG4gICAgZG91Ymxlcy5wdXNoKGFjYyk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBzdGVwOiBzdGVwLFxuICAgIHBvaW50czogZG91YmxlcyxcbiAgfTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuX2dldE5BRlBvaW50cyA9IGZ1bmN0aW9uIF9nZXROQUZQb2ludHMod25kKSB7XG4gIGlmICh0aGlzLnByZWNvbXB1dGVkICYmIHRoaXMucHJlY29tcHV0ZWQubmFmKVxuICAgIHJldHVybiB0aGlzLnByZWNvbXB1dGVkLm5hZjtcblxuICB2YXIgcmVzID0gWyB0aGlzIF07XG4gIHZhciBtYXggPSAoMSA8PCB3bmQpIC0gMTtcbiAgdmFyIGRibCA9IG1heCA9PT0gMSA/IG51bGwgOiB0aGlzLmRibCgpO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IG1heDsgaSsrKVxuICAgIHJlc1tpXSA9IHJlc1tpIC0gMV0uYWRkKGRibCk7XG4gIHJldHVybiB7XG4gICAgd25kOiB3bmQsXG4gICAgcG9pbnRzOiByZXMsXG4gIH07XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLl9nZXRCZXRhID0gZnVuY3Rpb24gX2dldEJldGEoKSB7XG4gIHJldHVybiBudWxsO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5kYmxwID0gZnVuY3Rpb24gZGJscChrKSB7XG4gIHZhciByID0gdGhpcztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrOyBpKyspXG4gICAgciA9IHIuZGJsKCk7XG4gIHJldHVybiByO1xufTtcblxudmFyIGluaGVyaXRzX2Jyb3dzZXIgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG5pZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBpZiAoc3VwZXJDdG9yKSB7XG4gICAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvcjtcbiAgICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3I7XG4gICAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGU7XG4gICAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpO1xuICAgICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yO1xuICAgIH1cbiAgfTtcbn1cbn0pO1xuXG4ndXNlIHN0cmljdCc7XG5cblxuXG5cblxuXG52YXIgYXNzZXJ0JDIgPSB1dGlsc18xJDEuYXNzZXJ0O1xuXG5mdW5jdGlvbiBTaG9ydEN1cnZlKGNvbmYpIHtcbiAgYmFzZS5jYWxsKHRoaXMsICdzaG9ydCcsIGNvbmYpO1xuXG4gIHRoaXMuYSA9IG5ldyBCTihjb25mLmEsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuYiA9IG5ldyBCTihjb25mLmIsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMudGludiA9IHRoaXMudHdvLnJlZEludm0oKTtcblxuICB0aGlzLnplcm9BID0gdGhpcy5hLmZyb21SZWQoKS5jbXBuKDApID09PSAwO1xuICB0aGlzLnRocmVlQSA9IHRoaXMuYS5mcm9tUmVkKCkuc3ViKHRoaXMucCkuY21wbigtMykgPT09IDA7XG5cbiAgLy8gSWYgdGhlIGN1cnZlIGlzIGVuZG9tb3JwaGljLCBwcmVjYWxjdWxhdGUgYmV0YSBhbmQgbGFtYmRhXG4gIHRoaXMuZW5kbyA9IHRoaXMuX2dldEVuZG9tb3JwaGlzbShjb25mKTtcbiAgdGhpcy5fZW5kb1duYWZUMSA9IG5ldyBBcnJheSg0KTtcbiAgdGhpcy5fZW5kb1duYWZUMiA9IG5ldyBBcnJheSg0KTtcbn1cbmluaGVyaXRzX2Jyb3dzZXIoU2hvcnRDdXJ2ZSwgYmFzZSk7XG52YXIgc2hvcnRfMSA9IFNob3J0Q3VydmU7XG5cblNob3J0Q3VydmUucHJvdG90eXBlLl9nZXRFbmRvbW9ycGhpc20gPSBmdW5jdGlvbiBfZ2V0RW5kb21vcnBoaXNtKGNvbmYpIHtcbiAgLy8gTm8gZWZmaWNpZW50IGVuZG9tb3JwaGlzbVxuICBpZiAoIXRoaXMuemVyb0EgfHwgIXRoaXMuZyB8fCAhdGhpcy5uIHx8IHRoaXMucC5tb2RuKDMpICE9PSAxKVxuICAgIHJldHVybjtcblxuICAvLyBDb21wdXRlIGJldGEgYW5kIGxhbWJkYSwgdGhhdCBsYW1iZGEgKiBQID0gKGJldGEgKiBQeDsgUHkpXG4gIHZhciBiZXRhO1xuICB2YXIgbGFtYmRhO1xuICBpZiAoY29uZi5iZXRhKSB7XG4gICAgYmV0YSA9IG5ldyBCTihjb25mLmJldGEsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJldGFzID0gdGhpcy5fZ2V0RW5kb1Jvb3RzKHRoaXMucCk7XG4gICAgLy8gQ2hvb3NlIHRoZSBzbWFsbGVzdCBiZXRhXG4gICAgYmV0YSA9IGJldGFzWzBdLmNtcChiZXRhc1sxXSkgPCAwID8gYmV0YXNbMF0gOiBiZXRhc1sxXTtcbiAgICBiZXRhID0gYmV0YS50b1JlZCh0aGlzLnJlZCk7XG4gIH1cbiAgaWYgKGNvbmYubGFtYmRhKSB7XG4gICAgbGFtYmRhID0gbmV3IEJOKGNvbmYubGFtYmRhLCAxNik7XG4gIH0gZWxzZSB7XG4gICAgLy8gQ2hvb3NlIHRoZSBsYW1iZGEgdGhhdCBpcyBtYXRjaGluZyBzZWxlY3RlZCBiZXRhXG4gICAgdmFyIGxhbWJkYXMgPSB0aGlzLl9nZXRFbmRvUm9vdHModGhpcy5uKTtcbiAgICBpZiAodGhpcy5nLm11bChsYW1iZGFzWzBdKS54LmNtcCh0aGlzLmcueC5yZWRNdWwoYmV0YSkpID09PSAwKSB7XG4gICAgICBsYW1iZGEgPSBsYW1iZGFzWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICBsYW1iZGEgPSBsYW1iZGFzWzFdO1xuICAgICAgYXNzZXJ0JDIodGhpcy5nLm11bChsYW1iZGEpLnguY21wKHRoaXMuZy54LnJlZE11bChiZXRhKSkgPT09IDApO1xuICAgIH1cbiAgfVxuXG4gIC8vIEdldCBiYXNpcyB2ZWN0b3JzLCB1c2VkIGZvciBiYWxhbmNlZCBsZW5ndGgtdHdvIHJlcHJlc2VudGF0aW9uXG4gIHZhciBiYXNpcztcbiAgaWYgKGNvbmYuYmFzaXMpIHtcbiAgICBiYXNpcyA9IGNvbmYuYmFzaXMubWFwKGZ1bmN0aW9uKHZlYykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYTogbmV3IEJOKHZlYy5hLCAxNiksXG4gICAgICAgIGI6IG5ldyBCTih2ZWMuYiwgMTYpLFxuICAgICAgfTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBiYXNpcyA9IHRoaXMuX2dldEVuZG9CYXNpcyhsYW1iZGEpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBiZXRhOiBiZXRhLFxuICAgIGxhbWJkYTogbGFtYmRhLFxuICAgIGJhc2lzOiBiYXNpcyxcbiAgfTtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLl9nZXRFbmRvUm9vdHMgPSBmdW5jdGlvbiBfZ2V0RW5kb1Jvb3RzKG51bSkge1xuICAvLyBGaW5kIHJvb3RzIG9mIGZvciB4XjIgKyB4ICsgMSBpbiBGXG4gIC8vIFJvb3QgPSAoLTEgKy0gU3FydCgtMykpIC8gMlxuICAvL1xuICB2YXIgcmVkID0gbnVtID09PSB0aGlzLnAgPyB0aGlzLnJlZCA6IEJOLm1vbnQobnVtKTtcbiAgdmFyIHRpbnYgPSBuZXcgQk4oMikudG9SZWQocmVkKS5yZWRJbnZtKCk7XG4gIHZhciBudGludiA9IHRpbnYucmVkTmVnKCk7XG5cbiAgdmFyIHMgPSBuZXcgQk4oMykudG9SZWQocmVkKS5yZWROZWcoKS5yZWRTcXJ0KCkucmVkTXVsKHRpbnYpO1xuXG4gIHZhciBsMSA9IG50aW52LnJlZEFkZChzKS5mcm9tUmVkKCk7XG4gIHZhciBsMiA9IG50aW52LnJlZFN1YihzKS5mcm9tUmVkKCk7XG4gIHJldHVybiBbIGwxLCBsMiBdO1xufTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUuX2dldEVuZG9CYXNpcyA9IGZ1bmN0aW9uIF9nZXRFbmRvQmFzaXMobGFtYmRhKSB7XG4gIC8vIGFwcnhTcXJ0ID49IHNxcnQodGhpcy5uKVxuICB2YXIgYXByeFNxcnQgPSB0aGlzLm4udXNocm4oTWF0aC5mbG9vcih0aGlzLm4uYml0TGVuZ3RoKCkgLyAyKSk7XG5cbiAgLy8gMy43NFxuICAvLyBSdW4gRUdDRCwgdW50aWwgcihMICsgMSkgPCBhcHJ4U3FydFxuICB2YXIgdSA9IGxhbWJkYTtcbiAgdmFyIHYgPSB0aGlzLm4uY2xvbmUoKTtcbiAgdmFyIHgxID0gbmV3IEJOKDEpO1xuICB2YXIgeTEgPSBuZXcgQk4oMCk7XG4gIHZhciB4MiA9IG5ldyBCTigwKTtcbiAgdmFyIHkyID0gbmV3IEJOKDEpO1xuXG4gIC8vIE5PVEU6IGFsbCB2ZWN0b3JzIGFyZSByb290cyBvZjogYSArIGIgKiBsYW1iZGEgPSAwIChtb2QgbilcbiAgdmFyIGEwO1xuICB2YXIgYjA7XG4gIC8vIEZpcnN0IHZlY3RvclxuICB2YXIgYTE7XG4gIHZhciBiMTtcbiAgLy8gU2Vjb25kIHZlY3RvclxuICB2YXIgYTI7XG4gIHZhciBiMjtcblxuICB2YXIgcHJldlI7XG4gIHZhciBpID0gMDtcbiAgdmFyIHI7XG4gIHZhciB4O1xuICB3aGlsZSAodS5jbXBuKDApICE9PSAwKSB7XG4gICAgdmFyIHEgPSB2LmRpdih1KTtcbiAgICByID0gdi5zdWIocS5tdWwodSkpO1xuICAgIHggPSB4Mi5zdWIocS5tdWwoeDEpKTtcbiAgICB2YXIgeSA9IHkyLnN1YihxLm11bCh5MSkpO1xuXG4gICAgaWYgKCFhMSAmJiByLmNtcChhcHJ4U3FydCkgPCAwKSB7XG4gICAgICBhMCA9IHByZXZSLm5lZygpO1xuICAgICAgYjAgPSB4MTtcbiAgICAgIGExID0gci5uZWcoKTtcbiAgICAgIGIxID0geDtcbiAgICB9IGVsc2UgaWYgKGExICYmICsraSA9PT0gMikge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHByZXZSID0gcjtcblxuICAgIHYgPSB1O1xuICAgIHUgPSByO1xuICAgIHgyID0geDE7XG4gICAgeDEgPSB4O1xuICAgIHkyID0geTE7XG4gICAgeTEgPSB5O1xuICB9XG4gIGEyID0gci5uZWcoKTtcbiAgYjIgPSB4O1xuXG4gIHZhciBsZW4xID0gYTEuc3FyKCkuYWRkKGIxLnNxcigpKTtcbiAgdmFyIGxlbjIgPSBhMi5zcXIoKS5hZGQoYjIuc3FyKCkpO1xuICBpZiAobGVuMi5jbXAobGVuMSkgPj0gMCkge1xuICAgIGEyID0gYTA7XG4gICAgYjIgPSBiMDtcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBzaWduc1xuICBpZiAoYTEubmVnYXRpdmUpIHtcbiAgICBhMSA9IGExLm5lZygpO1xuICAgIGIxID0gYjEubmVnKCk7XG4gIH1cbiAgaWYgKGEyLm5lZ2F0aXZlKSB7XG4gICAgYTIgPSBhMi5uZWcoKTtcbiAgICBiMiA9IGIyLm5lZygpO1xuICB9XG5cbiAgcmV0dXJuIFtcbiAgICB7IGE6IGExLCBiOiBiMSB9LFxuICAgIHsgYTogYTIsIGI6IGIyIH0sXG4gIF07XG59O1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5fZW5kb1NwbGl0ID0gZnVuY3Rpb24gX2VuZG9TcGxpdChrKSB7XG4gIHZhciBiYXNpcyA9IHRoaXMuZW5kby5iYXNpcztcbiAgdmFyIHYxID0gYmFzaXNbMF07XG4gIHZhciB2MiA9IGJhc2lzWzFdO1xuXG4gIHZhciBjMSA9IHYyLmIubXVsKGspLmRpdlJvdW5kKHRoaXMubik7XG4gIHZhciBjMiA9IHYxLmIubmVnKCkubXVsKGspLmRpdlJvdW5kKHRoaXMubik7XG5cbiAgdmFyIHAxID0gYzEubXVsKHYxLmEpO1xuICB2YXIgcDIgPSBjMi5tdWwodjIuYSk7XG4gIHZhciBxMSA9IGMxLm11bCh2MS5iKTtcbiAgdmFyIHEyID0gYzIubXVsKHYyLmIpO1xuXG4gIC8vIENhbGN1bGF0ZSBhbnN3ZXJcbiAgdmFyIGsxID0gay5zdWIocDEpLnN1YihwMik7XG4gIHZhciBrMiA9IHExLmFkZChxMikubmVnKCk7XG4gIHJldHVybiB7IGsxOiBrMSwgazI6IGsyIH07XG59O1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5wb2ludEZyb21YID0gZnVuY3Rpb24gcG9pbnRGcm9tWCh4LCBvZGQpIHtcbiAgeCA9IG5ldyBCTih4LCAxNik7XG4gIGlmICgheC5yZWQpXG4gICAgeCA9IHgudG9SZWQodGhpcy5yZWQpO1xuXG4gIHZhciB5MiA9IHgucmVkU3FyKCkucmVkTXVsKHgpLnJlZElBZGQoeC5yZWRNdWwodGhpcy5hKSkucmVkSUFkZCh0aGlzLmIpO1xuICB2YXIgeSA9IHkyLnJlZFNxcnQoKTtcbiAgaWYgKHkucmVkU3FyKCkucmVkU3ViKHkyKS5jbXAodGhpcy56ZXJvKSAhPT0gMClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcG9pbnQnKTtcblxuICAvLyBYWFggSXMgdGhlcmUgYW55IHdheSB0byB0ZWxsIGlmIHRoZSBudW1iZXIgaXMgb2RkIHdpdGhvdXQgY29udmVydGluZyBpdFxuICAvLyB0byBub24tcmVkIGZvcm0/XG4gIHZhciBpc09kZCA9IHkuZnJvbVJlZCgpLmlzT2RkKCk7XG4gIGlmIChvZGQgJiYgIWlzT2RkIHx8ICFvZGQgJiYgaXNPZGQpXG4gICAgeSA9IHkucmVkTmVnKCk7XG5cbiAgcmV0dXJuIHRoaXMucG9pbnQoeCwgeSk7XG59O1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKHBvaW50KSB7XG4gIGlmIChwb2ludC5pbmYpXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgdmFyIHggPSBwb2ludC54O1xuICB2YXIgeSA9IHBvaW50Lnk7XG5cbiAgdmFyIGF4ID0gdGhpcy5hLnJlZE11bCh4KTtcbiAgdmFyIHJocyA9IHgucmVkU3FyKCkucmVkTXVsKHgpLnJlZElBZGQoYXgpLnJlZElBZGQodGhpcy5iKTtcbiAgcmV0dXJuIHkucmVkU3FyKCkucmVkSVN1YihyaHMpLmNtcG4oMCkgPT09IDA7XG59O1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5fZW5kb1duYWZNdWxBZGQgPVxuICAgIGZ1bmN0aW9uIF9lbmRvV25hZk11bEFkZChwb2ludHMsIGNvZWZmcywgamFjb2JpYW5SZXN1bHQpIHtcbiAgICAgIHZhciBucG9pbnRzID0gdGhpcy5fZW5kb1duYWZUMTtcbiAgICAgIHZhciBuY29lZmZzID0gdGhpcy5fZW5kb1duYWZUMjtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBzcGxpdCA9IHRoaXMuX2VuZG9TcGxpdChjb2VmZnNbaV0pO1xuICAgICAgICB2YXIgcCA9IHBvaW50c1tpXTtcbiAgICAgICAgdmFyIGJldGEgPSBwLl9nZXRCZXRhKCk7XG5cbiAgICAgICAgaWYgKHNwbGl0LmsxLm5lZ2F0aXZlKSB7XG4gICAgICAgICAgc3BsaXQuazEuaW5lZygpO1xuICAgICAgICAgIHAgPSBwLm5lZyh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3BsaXQuazIubmVnYXRpdmUpIHtcbiAgICAgICAgICBzcGxpdC5rMi5pbmVnKCk7XG4gICAgICAgICAgYmV0YSA9IGJldGEubmVnKHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgbnBvaW50c1tpICogMl0gPSBwO1xuICAgICAgICBucG9pbnRzW2kgKiAyICsgMV0gPSBiZXRhO1xuICAgICAgICBuY29lZmZzW2kgKiAyXSA9IHNwbGl0LmsxO1xuICAgICAgICBuY29lZmZzW2kgKiAyICsgMV0gPSBzcGxpdC5rMjtcbiAgICAgIH1cbiAgICAgIHZhciByZXMgPSB0aGlzLl93bmFmTXVsQWRkKDEsIG5wb2ludHMsIG5jb2VmZnMsIGkgKiAyLCBqYWNvYmlhblJlc3VsdCk7XG5cbiAgICAgIC8vIENsZWFuLXVwIHJlZmVyZW5jZXMgdG8gcG9pbnRzIGFuZCBjb2VmZmljaWVudHNcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaSAqIDI7IGorKykge1xuICAgICAgICBucG9pbnRzW2pdID0gbnVsbDtcbiAgICAgICAgbmNvZWZmc1tqXSA9IG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH07XG5cbmZ1bmN0aW9uIFBvaW50KGN1cnZlLCB4LCB5LCBpc1JlZCkge1xuICBiYXNlLkJhc2VQb2ludC5jYWxsKHRoaXMsIGN1cnZlLCAnYWZmaW5lJyk7XG4gIGlmICh4ID09PSBudWxsICYmIHkgPT09IG51bGwpIHtcbiAgICB0aGlzLnggPSBudWxsO1xuICAgIHRoaXMueSA9IG51bGw7XG4gICAgdGhpcy5pbmYgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHRoaXMueCA9IG5ldyBCTih4LCAxNik7XG4gICAgdGhpcy55ID0gbmV3IEJOKHksIDE2KTtcbiAgICAvLyBGb3JjZSByZWRnb21lcnkgcmVwcmVzZW50YXRpb24gd2hlbiBsb2FkaW5nIGZyb20gSlNPTlxuICAgIGlmIChpc1JlZCkge1xuICAgICAgdGhpcy54LmZvcmNlUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICAgIHRoaXMueS5mb3JjZVJlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgfVxuICAgIGlmICghdGhpcy54LnJlZClcbiAgICAgIHRoaXMueCA9IHRoaXMueC50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgaWYgKCF0aGlzLnkucmVkKVxuICAgICAgdGhpcy55ID0gdGhpcy55LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICB0aGlzLmluZiA9IGZhbHNlO1xuICB9XG59XG5pbmhlcml0c19icm93c2VyKFBvaW50LCBiYXNlLkJhc2VQb2ludCk7XG5cblNob3J0Q3VydmUucHJvdG90eXBlLnBvaW50ID0gZnVuY3Rpb24gcG9pbnQoeCwgeSwgaXNSZWQpIHtcbiAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLCB4LCB5LCBpc1JlZCk7XG59O1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5wb2ludEZyb21KU09OID0gZnVuY3Rpb24gcG9pbnRGcm9tSlNPTihvYmosIHJlZCkge1xuICByZXR1cm4gUG9pbnQuZnJvbUpTT04odGhpcywgb2JqLCByZWQpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLl9nZXRCZXRhID0gZnVuY3Rpb24gX2dldEJldGEoKSB7XG4gIGlmICghdGhpcy5jdXJ2ZS5lbmRvKVxuICAgIHJldHVybjtcblxuICB2YXIgcHJlID0gdGhpcy5wcmVjb21wdXRlZDtcbiAgaWYgKHByZSAmJiBwcmUuYmV0YSlcbiAgICByZXR1cm4gcHJlLmJldGE7XG5cbiAgdmFyIGJldGEgPSB0aGlzLmN1cnZlLnBvaW50KHRoaXMueC5yZWRNdWwodGhpcy5jdXJ2ZS5lbmRvLmJldGEpLCB0aGlzLnkpO1xuICBpZiAocHJlKSB7XG4gICAgdmFyIGN1cnZlID0gdGhpcy5jdXJ2ZTtcbiAgICB2YXIgZW5kb011bCA9IGZ1bmN0aW9uKHApIHtcbiAgICAgIHJldHVybiBjdXJ2ZS5wb2ludChwLngucmVkTXVsKGN1cnZlLmVuZG8uYmV0YSksIHAueSk7XG4gICAgfTtcbiAgICBwcmUuYmV0YSA9IGJldGE7XG4gICAgYmV0YS5wcmVjb21wdXRlZCA9IHtcbiAgICAgIGJldGE6IG51bGwsXG4gICAgICBuYWY6IHByZS5uYWYgJiYge1xuICAgICAgICB3bmQ6IHByZS5uYWYud25kLFxuICAgICAgICBwb2ludHM6IHByZS5uYWYucG9pbnRzLm1hcChlbmRvTXVsKSxcbiAgICAgIH0sXG4gICAgICBkb3VibGVzOiBwcmUuZG91YmxlcyAmJiB7XG4gICAgICAgIHN0ZXA6IHByZS5kb3VibGVzLnN0ZXAsXG4gICAgICAgIHBvaW50czogcHJlLmRvdWJsZXMucG9pbnRzLm1hcChlbmRvTXVsKSxcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuICByZXR1cm4gYmV0YTtcbn07XG5cblBvaW50LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gIGlmICghdGhpcy5wcmVjb21wdXRlZClcbiAgICByZXR1cm4gWyB0aGlzLngsIHRoaXMueSBdO1xuXG4gIHJldHVybiBbIHRoaXMueCwgdGhpcy55LCB0aGlzLnByZWNvbXB1dGVkICYmIHtcbiAgICBkb3VibGVzOiB0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXMgJiYge1xuICAgICAgc3RlcDogdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzLnN0ZXAsXG4gICAgICBwb2ludHM6IHRoaXMucHJlY29tcHV0ZWQuZG91Ymxlcy5wb2ludHMuc2xpY2UoMSksXG4gICAgfSxcbiAgICBuYWY6IHRoaXMucHJlY29tcHV0ZWQubmFmICYmIHtcbiAgICAgIHduZDogdGhpcy5wcmVjb21wdXRlZC5uYWYud25kLFxuICAgICAgcG9pbnRzOiB0aGlzLnByZWNvbXB1dGVkLm5hZi5wb2ludHMuc2xpY2UoMSksXG4gICAgfSxcbiAgfSBdO1xufTtcblxuUG9pbnQuZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTihjdXJ2ZSwgb2JqLCByZWQpIHtcbiAgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKVxuICAgIG9iaiA9IEpTT04ucGFyc2Uob2JqKTtcbiAgdmFyIHJlcyA9IGN1cnZlLnBvaW50KG9ialswXSwgb2JqWzFdLCByZWQpO1xuICBpZiAoIW9ialsyXSlcbiAgICByZXR1cm4gcmVzO1xuXG4gIGZ1bmN0aW9uIG9iajJwb2ludChvYmopIHtcbiAgICByZXR1cm4gY3VydmUucG9pbnQob2JqWzBdLCBvYmpbMV0sIHJlZCk7XG4gIH1cblxuICB2YXIgcHJlID0gb2JqWzJdO1xuICByZXMucHJlY29tcHV0ZWQgPSB7XG4gICAgYmV0YTogbnVsbCxcbiAgICBkb3VibGVzOiBwcmUuZG91YmxlcyAmJiB7XG4gICAgICBzdGVwOiBwcmUuZG91Ymxlcy5zdGVwLFxuICAgICAgcG9pbnRzOiBbIHJlcyBdLmNvbmNhdChwcmUuZG91Ymxlcy5wb2ludHMubWFwKG9iajJwb2ludCkpLFxuICAgIH0sXG4gICAgbmFmOiBwcmUubmFmICYmIHtcbiAgICAgIHduZDogcHJlLm5hZi53bmQsXG4gICAgICBwb2ludHM6IFsgcmVzIF0uY29uY2F0KHByZS5uYWYucG9pbnRzLm1hcChvYmoycG9pbnQpKSxcbiAgICB9LFxuICB9O1xuICByZXR1cm4gcmVzO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuICc8RUMgUG9pbnQgSW5maW5pdHk+JztcbiAgcmV0dXJuICc8RUMgUG9pbnQgeDogJyArIHRoaXMueC5mcm9tUmVkKCkudG9TdHJpbmcoMTYsIDIpICtcbiAgICAgICcgeTogJyArIHRoaXMueS5mcm9tUmVkKCkudG9TdHJpbmcoMTYsIDIpICsgJz4nO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmlzSW5maW5pdHkgPSBmdW5jdGlvbiBpc0luZmluaXR5KCkge1xuICByZXR1cm4gdGhpcy5pbmY7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKHApIHtcbiAgLy8gTyArIFAgPSBQXG4gIGlmICh0aGlzLmluZilcbiAgICByZXR1cm4gcDtcblxuICAvLyBQICsgTyA9IFBcbiAgaWYgKHAuaW5mKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIFAgKyBQID0gMlBcbiAgaWYgKHRoaXMuZXEocCkpXG4gICAgcmV0dXJuIHRoaXMuZGJsKCk7XG5cbiAgLy8gUCArICgtUCkgPSBPXG4gIGlmICh0aGlzLm5lZygpLmVxKHApKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG51bGwsIG51bGwpO1xuXG4gIC8vIFAgKyBRID0gT1xuICBpZiAodGhpcy54LmNtcChwLngpID09PSAwKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG51bGwsIG51bGwpO1xuXG4gIHZhciBjID0gdGhpcy55LnJlZFN1YihwLnkpO1xuICBpZiAoYy5jbXBuKDApICE9PSAwKVxuICAgIGMgPSBjLnJlZE11bCh0aGlzLngucmVkU3ViKHAueCkucmVkSW52bSgpKTtcbiAgdmFyIG54ID0gYy5yZWRTcXIoKS5yZWRJU3ViKHRoaXMueCkucmVkSVN1YihwLngpO1xuICB2YXIgbnkgPSBjLnJlZE11bCh0aGlzLngucmVkU3ViKG54KSkucmVkSVN1Yih0aGlzLnkpO1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnkpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmRibCA9IGZ1bmN0aW9uIGRibCgpIHtcbiAgaWYgKHRoaXMuaW5mKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIDJQID0gT1xuICB2YXIgeXMxID0gdGhpcy55LnJlZEFkZCh0aGlzLnkpO1xuICBpZiAoeXMxLmNtcG4oMCkgPT09IDApXG4gICAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobnVsbCwgbnVsbCk7XG5cbiAgdmFyIGEgPSB0aGlzLmN1cnZlLmE7XG5cbiAgdmFyIHgyID0gdGhpcy54LnJlZFNxcigpO1xuICB2YXIgZHlpbnYgPSB5czEucmVkSW52bSgpO1xuICB2YXIgYyA9IHgyLnJlZEFkZCh4MikucmVkSUFkZCh4MikucmVkSUFkZChhKS5yZWRNdWwoZHlpbnYpO1xuXG4gIHZhciBueCA9IGMucmVkU3FyKCkucmVkSVN1Yih0aGlzLngucmVkQWRkKHRoaXMueCkpO1xuICB2YXIgbnkgPSBjLnJlZE11bCh0aGlzLngucmVkU3ViKG54KSkucmVkSVN1Yih0aGlzLnkpO1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnkpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmdldFggPSBmdW5jdGlvbiBnZXRYKCkge1xuICByZXR1cm4gdGhpcy54LmZyb21SZWQoKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5nZXRZID0gZnVuY3Rpb24gZ2V0WSgpIHtcbiAgcmV0dXJuIHRoaXMueS5mcm9tUmVkKCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsKGspIHtcbiAgayA9IG5ldyBCTihrLCAxNik7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcztcbiAgZWxzZSBpZiAodGhpcy5faGFzRG91YmxlcyhrKSlcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fZml4ZWROYWZNdWwodGhpcywgayk7XG4gIGVsc2UgaWYgKHRoaXMuY3VydmUuZW5kbylcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fZW5kb1duYWZNdWxBZGQoWyB0aGlzIF0sIFsgayBdKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsKHRoaXMsIGspO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm11bEFkZCA9IGZ1bmN0aW9uIG11bEFkZChrMSwgcDIsIGsyKSB7XG4gIHZhciBwb2ludHMgPSBbIHRoaXMsIHAyIF07XG4gIHZhciBjb2VmZnMgPSBbIGsxLCBrMiBdO1xuICBpZiAodGhpcy5jdXJ2ZS5lbmRvKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl9lbmRvV25hZk11bEFkZChwb2ludHMsIGNvZWZmcyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bEFkZCgxLCBwb2ludHMsIGNvZWZmcywgMik7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuam11bEFkZCA9IGZ1bmN0aW9uIGptdWxBZGQoazEsIHAyLCBrMikge1xuICB2YXIgcG9pbnRzID0gWyB0aGlzLCBwMiBdO1xuICB2YXIgY29lZmZzID0gWyBrMSwgazIgXTtcbiAgaWYgKHRoaXMuY3VydmUuZW5kbylcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fZW5kb1duYWZNdWxBZGQocG9pbnRzLCBjb2VmZnMsIHRydWUpO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWxBZGQoMSwgcG9pbnRzLCBjb2VmZnMsIDIsIHRydWUpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEocCkge1xuICByZXR1cm4gdGhpcyA9PT0gcCB8fFxuICAgICAgICAgdGhpcy5pbmYgPT09IHAuaW5mICYmXG4gICAgICAgICAgICAgKHRoaXMuaW5mIHx8IHRoaXMueC5jbXAocC54KSA9PT0gMCAmJiB0aGlzLnkuY21wKHAueSkgPT09IDApO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyhfcHJlY29tcHV0ZSkge1xuICBpZiAodGhpcy5pbmYpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgdmFyIHJlcyA9IHRoaXMuY3VydmUucG9pbnQodGhpcy54LCB0aGlzLnkucmVkTmVnKCkpO1xuICBpZiAoX3ByZWNvbXB1dGUgJiYgdGhpcy5wcmVjb21wdXRlZCkge1xuICAgIHZhciBwcmUgPSB0aGlzLnByZWNvbXB1dGVkO1xuICAgIHZhciBuZWdhdGUgPSBmdW5jdGlvbihwKSB7XG4gICAgICByZXR1cm4gcC5uZWcoKTtcbiAgICB9O1xuICAgIHJlcy5wcmVjb21wdXRlZCA9IHtcbiAgICAgIG5hZjogcHJlLm5hZiAmJiB7XG4gICAgICAgIHduZDogcHJlLm5hZi53bmQsXG4gICAgICAgIHBvaW50czogcHJlLm5hZi5wb2ludHMubWFwKG5lZ2F0ZSksXG4gICAgICB9LFxuICAgICAgZG91YmxlczogcHJlLmRvdWJsZXMgJiYge1xuICAgICAgICBzdGVwOiBwcmUuZG91Ymxlcy5zdGVwLFxuICAgICAgICBwb2ludHM6IHByZS5kb3VibGVzLnBvaW50cy5tYXAobmVnYXRlKSxcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuICByZXR1cm4gcmVzO1xufTtcblxuUG9pbnQucHJvdG90eXBlLnRvSiA9IGZ1bmN0aW9uIHRvSigpIHtcbiAgaWYgKHRoaXMuaW5mKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcblxuICB2YXIgcmVzID0gdGhpcy5jdXJ2ZS5qcG9pbnQodGhpcy54LCB0aGlzLnksIHRoaXMuY3VydmUub25lKTtcbiAgcmV0dXJuIHJlcztcbn07XG5cbmZ1bmN0aW9uIEpQb2ludChjdXJ2ZSwgeCwgeSwgeikge1xuICBiYXNlLkJhc2VQb2ludC5jYWxsKHRoaXMsIGN1cnZlLCAnamFjb2JpYW4nKTtcbiAgaWYgKHggPT09IG51bGwgJiYgeSA9PT0gbnVsbCAmJiB6ID09PSBudWxsKSB7XG4gICAgdGhpcy54ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy55ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy56ID0gbmV3IEJOKDApO1xuICB9IGVsc2Uge1xuICAgIHRoaXMueCA9IG5ldyBCTih4LCAxNik7XG4gICAgdGhpcy55ID0gbmV3IEJOKHksIDE2KTtcbiAgICB0aGlzLnogPSBuZXcgQk4oeiwgMTYpO1xuICB9XG4gIGlmICghdGhpcy54LnJlZClcbiAgICB0aGlzLnggPSB0aGlzLngudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICBpZiAoIXRoaXMueS5yZWQpXG4gICAgdGhpcy55ID0gdGhpcy55LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgaWYgKCF0aGlzLnoucmVkKVxuICAgIHRoaXMueiA9IHRoaXMuei50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG5cbiAgdGhpcy56T25lID0gdGhpcy56ID09PSB0aGlzLmN1cnZlLm9uZTtcbn1cbmluaGVyaXRzX2Jyb3dzZXIoSlBvaW50LCBiYXNlLkJhc2VQb2ludCk7XG5cblNob3J0Q3VydmUucHJvdG90eXBlLmpwb2ludCA9IGZ1bmN0aW9uIGpwb2ludCh4LCB5LCB6KSB7XG4gIHJldHVybiBuZXcgSlBvaW50KHRoaXMsIHgsIHksIHopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS50b1AgPSBmdW5jdGlvbiB0b1AoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChudWxsLCBudWxsKTtcblxuICB2YXIgemludiA9IHRoaXMuei5yZWRJbnZtKCk7XG4gIHZhciB6aW52MiA9IHppbnYucmVkU3FyKCk7XG4gIHZhciBheCA9IHRoaXMueC5yZWRNdWwoemludjIpO1xuICB2YXIgYXkgPSB0aGlzLnkucmVkTXVsKHppbnYyKS5yZWRNdWwoemludik7XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQoYXgsIGF5KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnKCkge1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQodGhpcy54LCB0aGlzLnkucmVkTmVnKCksIHRoaXMueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZChwKSB7XG4gIC8vIE8gKyBQID0gUFxuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHA7XG5cbiAgLy8gUCArIE8gPSBQXG4gIGlmIChwLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyAxMk0gKyA0UyArIDdBXG4gIHZhciBwejIgPSBwLnoucmVkU3FyKCk7XG4gIHZhciB6MiA9IHRoaXMuei5yZWRTcXIoKTtcbiAgdmFyIHUxID0gdGhpcy54LnJlZE11bChwejIpO1xuICB2YXIgdTIgPSBwLngucmVkTXVsKHoyKTtcbiAgdmFyIHMxID0gdGhpcy55LnJlZE11bChwejIucmVkTXVsKHAueikpO1xuICB2YXIgczIgPSBwLnkucmVkTXVsKHoyLnJlZE11bCh0aGlzLnopKTtcblxuICB2YXIgaCA9IHUxLnJlZFN1Yih1Mik7XG4gIHZhciByID0gczEucmVkU3ViKHMyKTtcbiAgaWYgKGguY21wbigwKSA9PT0gMCkge1xuICAgIGlmIChyLmNtcG4oMCkgIT09IDApXG4gICAgICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIHRoaXMuZGJsKCk7XG4gIH1cblxuICB2YXIgaDIgPSBoLnJlZFNxcigpO1xuICB2YXIgaDMgPSBoMi5yZWRNdWwoaCk7XG4gIHZhciB2ID0gdTEucmVkTXVsKGgyKTtcblxuICB2YXIgbnggPSByLnJlZFNxcigpLnJlZElBZGQoaDMpLnJlZElTdWIodikucmVkSVN1Yih2KTtcbiAgdmFyIG55ID0gci5yZWRNdWwodi5yZWRJU3ViKG54KSkucmVkSVN1YihzMS5yZWRNdWwoaDMpKTtcbiAgdmFyIG56ID0gdGhpcy56LnJlZE11bChwLnopLnJlZE11bChoKTtcblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLm1peGVkQWRkID0gZnVuY3Rpb24gbWl4ZWRBZGQocCkge1xuICAvLyBPICsgUCA9IFBcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiBwLnRvSigpO1xuXG4gIC8vIFAgKyBPID0gUFxuICBpZiAocC5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gOE0gKyAzUyArIDdBXG4gIHZhciB6MiA9IHRoaXMuei5yZWRTcXIoKTtcbiAgdmFyIHUxID0gdGhpcy54O1xuICB2YXIgdTIgPSBwLngucmVkTXVsKHoyKTtcbiAgdmFyIHMxID0gdGhpcy55O1xuICB2YXIgczIgPSBwLnkucmVkTXVsKHoyKS5yZWRNdWwodGhpcy56KTtcblxuICB2YXIgaCA9IHUxLnJlZFN1Yih1Mik7XG4gIHZhciByID0gczEucmVkU3ViKHMyKTtcbiAgaWYgKGguY21wbigwKSA9PT0gMCkge1xuICAgIGlmIChyLmNtcG4oMCkgIT09IDApXG4gICAgICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIHRoaXMuZGJsKCk7XG4gIH1cblxuICB2YXIgaDIgPSBoLnJlZFNxcigpO1xuICB2YXIgaDMgPSBoMi5yZWRNdWwoaCk7XG4gIHZhciB2ID0gdTEucmVkTXVsKGgyKTtcblxuICB2YXIgbnggPSByLnJlZFNxcigpLnJlZElBZGQoaDMpLnJlZElTdWIodikucmVkSVN1Yih2KTtcbiAgdmFyIG55ID0gci5yZWRNdWwodi5yZWRJU3ViKG54KSkucmVkSVN1YihzMS5yZWRNdWwoaDMpKTtcbiAgdmFyIG56ID0gdGhpcy56LnJlZE11bChoKTtcblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmRibHAgPSBmdW5jdGlvbiBkYmxwKHBvdykge1xuICBpZiAocG93ID09PSAwKVxuICAgIHJldHVybiB0aGlzO1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG4gIGlmICghcG93KVxuICAgIHJldHVybiB0aGlzLmRibCgpO1xuXG4gIHZhciBpO1xuICBpZiAodGhpcy5jdXJ2ZS56ZXJvQSB8fCB0aGlzLmN1cnZlLnRocmVlQSkge1xuICAgIHZhciByID0gdGhpcztcbiAgICBmb3IgKGkgPSAwOyBpIDwgcG93OyBpKyspXG4gICAgICByID0gci5kYmwoKTtcbiAgICByZXR1cm4gcjtcbiAgfVxuXG4gIC8vIDFNICsgMlMgKyAxQSArIE4gKiAoNFMgKyA1TSArIDhBKVxuICAvLyBOID0gMSA9PiA2TSArIDZTICsgOUFcbiAgdmFyIGEgPSB0aGlzLmN1cnZlLmE7XG4gIHZhciB0aW52ID0gdGhpcy5jdXJ2ZS50aW52O1xuXG4gIHZhciBqeCA9IHRoaXMueDtcbiAgdmFyIGp5ID0gdGhpcy55O1xuICB2YXIganogPSB0aGlzLno7XG4gIHZhciBqejQgPSBqei5yZWRTcXIoKS5yZWRTcXIoKTtcblxuICAvLyBSZXVzZSByZXN1bHRzXG4gIHZhciBqeWQgPSBqeS5yZWRBZGQoankpO1xuICBmb3IgKGkgPSAwOyBpIDwgcG93OyBpKyspIHtcbiAgICB2YXIgangyID0gangucmVkU3FyKCk7XG4gICAgdmFyIGp5ZDIgPSBqeWQucmVkU3FyKCk7XG4gICAgdmFyIGp5ZDQgPSBqeWQyLnJlZFNxcigpO1xuICAgIHZhciBjID0gangyLnJlZEFkZChqeDIpLnJlZElBZGQoangyKS5yZWRJQWRkKGEucmVkTXVsKGp6NCkpO1xuXG4gICAgdmFyIHQxID0gangucmVkTXVsKGp5ZDIpO1xuICAgIHZhciBueCA9IGMucmVkU3FyKCkucmVkSVN1Yih0MS5yZWRBZGQodDEpKTtcbiAgICB2YXIgdDIgPSB0MS5yZWRJU3ViKG54KTtcbiAgICB2YXIgZG55ID0gYy5yZWRNdWwodDIpO1xuICAgIGRueSA9IGRueS5yZWRJQWRkKGRueSkucmVkSVN1YihqeWQ0KTtcbiAgICB2YXIgbnogPSBqeWQucmVkTXVsKGp6KTtcbiAgICBpZiAoaSArIDEgPCBwb3cpXG4gICAgICBqejQgPSBqejQucmVkTXVsKGp5ZDQpO1xuXG4gICAganggPSBueDtcbiAgICBqeiA9IG56O1xuICAgIGp5ZCA9IGRueTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChqeCwganlkLnJlZE11bCh0aW52KSwganopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5kYmwgPSBmdW5jdGlvbiBkYmwoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcztcblxuICBpZiAodGhpcy5jdXJ2ZS56ZXJvQSlcbiAgICByZXR1cm4gdGhpcy5femVyb0RibCgpO1xuICBlbHNlIGlmICh0aGlzLmN1cnZlLnRocmVlQSlcbiAgICByZXR1cm4gdGhpcy5fdGhyZWVEYmwoKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLl9kYmwoKTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuX3plcm9EYmwgPSBmdW5jdGlvbiBfemVyb0RibCgpIHtcbiAgdmFyIG54O1xuICB2YXIgbnk7XG4gIHZhciBuejtcbiAgLy8gWiA9IDFcbiAgaWYgKHRoaXMuek9uZSkge1xuICAgIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by1zaG9ydHctamFjb2JpYW4tMC5odG1sXG4gICAgLy8gICAgICNkb3VibGluZy1tZGJsLTIwMDctYmxcbiAgICAvLyAxTSArIDVTICsgMTRBXG5cbiAgICAvLyBYWCA9IFgxXjJcbiAgICB2YXIgeHggPSB0aGlzLngucmVkU3FyKCk7XG4gICAgLy8gWVkgPSBZMV4yXG4gICAgdmFyIHl5ID0gdGhpcy55LnJlZFNxcigpO1xuICAgIC8vIFlZWVkgPSBZWV4yXG4gICAgdmFyIHl5eXkgPSB5eS5yZWRTcXIoKTtcbiAgICAvLyBTID0gMiAqICgoWDEgKyBZWSleMiAtIFhYIC0gWVlZWSlcbiAgICB2YXIgcyA9IHRoaXMueC5yZWRBZGQoeXkpLnJlZFNxcigpLnJlZElTdWIoeHgpLnJlZElTdWIoeXl5eSk7XG4gICAgcyA9IHMucmVkSUFkZChzKTtcbiAgICAvLyBNID0gMyAqIFhYICsgYTsgYSA9IDBcbiAgICB2YXIgbSA9IHh4LnJlZEFkZCh4eCkucmVkSUFkZCh4eCk7XG4gICAgLy8gVCA9IE0gXiAyIC0gMipTXG4gICAgdmFyIHQgPSBtLnJlZFNxcigpLnJlZElTdWIocykucmVkSVN1YihzKTtcblxuICAgIC8vIDggKiBZWVlZXG4gICAgdmFyIHl5eXk4ID0geXl5eS5yZWRJQWRkKHl5eXkpO1xuICAgIHl5eXk4ID0geXl5eTgucmVkSUFkZCh5eXl5OCk7XG4gICAgeXl5eTggPSB5eXl5OC5yZWRJQWRkKHl5eXk4KTtcblxuICAgIC8vIFgzID0gVFxuICAgIG54ID0gdDtcbiAgICAvLyBZMyA9IE0gKiAoUyAtIFQpIC0gOCAqIFlZWVlcbiAgICBueSA9IG0ucmVkTXVsKHMucmVkSVN1Yih0KSkucmVkSVN1Yih5eXl5OCk7XG4gICAgLy8gWjMgPSAyKlkxXG4gICAgbnogPSB0aGlzLnkucmVkQWRkKHRoaXMueSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXNob3J0dy1qYWNvYmlhbi0wLmh0bWxcbiAgICAvLyAgICAgI2RvdWJsaW5nLWRibC0yMDA5LWxcbiAgICAvLyAyTSArIDVTICsgMTNBXG5cbiAgICAvLyBBID0gWDFeMlxuICAgIHZhciBhID0gdGhpcy54LnJlZFNxcigpO1xuICAgIC8vIEIgPSBZMV4yXG4gICAgdmFyIGIgPSB0aGlzLnkucmVkU3FyKCk7XG4gICAgLy8gQyA9IEJeMlxuICAgIHZhciBjID0gYi5yZWRTcXIoKTtcbiAgICAvLyBEID0gMiAqICgoWDEgKyBCKV4yIC0gQSAtIEMpXG4gICAgdmFyIGQgPSB0aGlzLngucmVkQWRkKGIpLnJlZFNxcigpLnJlZElTdWIoYSkucmVkSVN1YihjKTtcbiAgICBkID0gZC5yZWRJQWRkKGQpO1xuICAgIC8vIEUgPSAzICogQVxuICAgIHZhciBlID0gYS5yZWRBZGQoYSkucmVkSUFkZChhKTtcbiAgICAvLyBGID0gRV4yXG4gICAgdmFyIGYgPSBlLnJlZFNxcigpO1xuXG4gICAgLy8gOCAqIENcbiAgICB2YXIgYzggPSBjLnJlZElBZGQoYyk7XG4gICAgYzggPSBjOC5yZWRJQWRkKGM4KTtcbiAgICBjOCA9IGM4LnJlZElBZGQoYzgpO1xuXG4gICAgLy8gWDMgPSBGIC0gMiAqIERcbiAgICBueCA9IGYucmVkSVN1YihkKS5yZWRJU3ViKGQpO1xuICAgIC8vIFkzID0gRSAqIChEIC0gWDMpIC0gOCAqIENcbiAgICBueSA9IGUucmVkTXVsKGQucmVkSVN1YihueCkpLnJlZElTdWIoYzgpO1xuICAgIC8vIFozID0gMiAqIFkxICogWjFcbiAgICBueiA9IHRoaXMueS5yZWRNdWwodGhpcy56KTtcbiAgICBueiA9IG56LnJlZElBZGQobnopO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LCBueSwgbnopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5fdGhyZWVEYmwgPSBmdW5jdGlvbiBfdGhyZWVEYmwoKSB7XG4gIHZhciBueDtcbiAgdmFyIG55O1xuICB2YXIgbno7XG4gIC8vIFogPSAxXG4gIGlmICh0aGlzLnpPbmUpIHtcbiAgICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tc2hvcnR3LWphY29iaWFuLTMuaHRtbFxuICAgIC8vICAgICAjZG91YmxpbmctbWRibC0yMDA3LWJsXG4gICAgLy8gMU0gKyA1UyArIDE1QVxuXG4gICAgLy8gWFggPSBYMV4yXG4gICAgdmFyIHh4ID0gdGhpcy54LnJlZFNxcigpO1xuICAgIC8vIFlZID0gWTFeMlxuICAgIHZhciB5eSA9IHRoaXMueS5yZWRTcXIoKTtcbiAgICAvLyBZWVlZID0gWVleMlxuICAgIHZhciB5eXl5ID0geXkucmVkU3FyKCk7XG4gICAgLy8gUyA9IDIgKiAoKFgxICsgWVkpXjIgLSBYWCAtIFlZWVkpXG4gICAgdmFyIHMgPSB0aGlzLngucmVkQWRkKHl5KS5yZWRTcXIoKS5yZWRJU3ViKHh4KS5yZWRJU3ViKHl5eXkpO1xuICAgIHMgPSBzLnJlZElBZGQocyk7XG4gICAgLy8gTSA9IDMgKiBYWCArIGFcbiAgICB2YXIgbSA9IHh4LnJlZEFkZCh4eCkucmVkSUFkZCh4eCkucmVkSUFkZCh0aGlzLmN1cnZlLmEpO1xuICAgIC8vIFQgPSBNXjIgLSAyICogU1xuICAgIHZhciB0ID0gbS5yZWRTcXIoKS5yZWRJU3ViKHMpLnJlZElTdWIocyk7XG4gICAgLy8gWDMgPSBUXG4gICAgbnggPSB0O1xuICAgIC8vIFkzID0gTSAqIChTIC0gVCkgLSA4ICogWVlZWVxuICAgIHZhciB5eXl5OCA9IHl5eXkucmVkSUFkZCh5eXl5KTtcbiAgICB5eXl5OCA9IHl5eXk4LnJlZElBZGQoeXl5eTgpO1xuICAgIHl5eXk4ID0geXl5eTgucmVkSUFkZCh5eXl5OCk7XG4gICAgbnkgPSBtLnJlZE11bChzLnJlZElTdWIodCkpLnJlZElTdWIoeXl5eTgpO1xuICAgIC8vIFozID0gMiAqIFkxXG4gICAgbnogPSB0aGlzLnkucmVkQWRkKHRoaXMueSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXNob3J0dy1qYWNvYmlhbi0zLmh0bWwjZG91YmxpbmctZGJsLTIwMDEtYlxuICAgIC8vIDNNICsgNVNcblxuICAgIC8vIGRlbHRhID0gWjFeMlxuICAgIHZhciBkZWx0YSA9IHRoaXMuei5yZWRTcXIoKTtcbiAgICAvLyBnYW1tYSA9IFkxXjJcbiAgICB2YXIgZ2FtbWEgPSB0aGlzLnkucmVkU3FyKCk7XG4gICAgLy8gYmV0YSA9IFgxICogZ2FtbWFcbiAgICB2YXIgYmV0YSA9IHRoaXMueC5yZWRNdWwoZ2FtbWEpO1xuICAgIC8vIGFscGhhID0gMyAqIChYMSAtIGRlbHRhKSAqIChYMSArIGRlbHRhKVxuICAgIHZhciBhbHBoYSA9IHRoaXMueC5yZWRTdWIoZGVsdGEpLnJlZE11bCh0aGlzLngucmVkQWRkKGRlbHRhKSk7XG4gICAgYWxwaGEgPSBhbHBoYS5yZWRBZGQoYWxwaGEpLnJlZElBZGQoYWxwaGEpO1xuICAgIC8vIFgzID0gYWxwaGFeMiAtIDggKiBiZXRhXG4gICAgdmFyIGJldGE0ID0gYmV0YS5yZWRJQWRkKGJldGEpO1xuICAgIGJldGE0ID0gYmV0YTQucmVkSUFkZChiZXRhNCk7XG4gICAgdmFyIGJldGE4ID0gYmV0YTQucmVkQWRkKGJldGE0KTtcbiAgICBueCA9IGFscGhhLnJlZFNxcigpLnJlZElTdWIoYmV0YTgpO1xuICAgIC8vIFozID0gKFkxICsgWjEpXjIgLSBnYW1tYSAtIGRlbHRhXG4gICAgbnogPSB0aGlzLnkucmVkQWRkKHRoaXMueikucmVkU3FyKCkucmVkSVN1YihnYW1tYSkucmVkSVN1YihkZWx0YSk7XG4gICAgLy8gWTMgPSBhbHBoYSAqICg0ICogYmV0YSAtIFgzKSAtIDggKiBnYW1tYV4yXG4gICAgdmFyIGdnYW1tYTggPSBnYW1tYS5yZWRTcXIoKTtcbiAgICBnZ2FtbWE4ID0gZ2dhbW1hOC5yZWRJQWRkKGdnYW1tYTgpO1xuICAgIGdnYW1tYTggPSBnZ2FtbWE4LnJlZElBZGQoZ2dhbW1hOCk7XG4gICAgZ2dhbW1hOCA9IGdnYW1tYTgucmVkSUFkZChnZ2FtbWE4KTtcbiAgICBueSA9IGFscGhhLnJlZE11bChiZXRhNC5yZWRJU3ViKG54KSkucmVkSVN1YihnZ2FtbWE4KTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChueCwgbnksIG56KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuX2RibCA9IGZ1bmN0aW9uIF9kYmwoKSB7XG4gIHZhciBhID0gdGhpcy5jdXJ2ZS5hO1xuXG4gIC8vIDRNICsgNlMgKyAxMEFcbiAgdmFyIGp4ID0gdGhpcy54O1xuICB2YXIgankgPSB0aGlzLnk7XG4gIHZhciBqeiA9IHRoaXMuejtcbiAgdmFyIGp6NCA9IGp6LnJlZFNxcigpLnJlZFNxcigpO1xuXG4gIHZhciBqeDIgPSBqeC5yZWRTcXIoKTtcbiAgdmFyIGp5MiA9IGp5LnJlZFNxcigpO1xuXG4gIHZhciBjID0gangyLnJlZEFkZChqeDIpLnJlZElBZGQoangyKS5yZWRJQWRkKGEucmVkTXVsKGp6NCkpO1xuXG4gIHZhciBqeGQ0ID0gangucmVkQWRkKGp4KTtcbiAganhkNCA9IGp4ZDQucmVkSUFkZChqeGQ0KTtcbiAgdmFyIHQxID0ganhkNC5yZWRNdWwoankyKTtcbiAgdmFyIG54ID0gYy5yZWRTcXIoKS5yZWRJU3ViKHQxLnJlZEFkZCh0MSkpO1xuICB2YXIgdDIgPSB0MS5yZWRJU3ViKG54KTtcblxuICB2YXIganlkOCA9IGp5Mi5yZWRTcXIoKTtcbiAganlkOCA9IGp5ZDgucmVkSUFkZChqeWQ4KTtcbiAganlkOCA9IGp5ZDgucmVkSUFkZChqeWQ4KTtcbiAganlkOCA9IGp5ZDgucmVkSUFkZChqeWQ4KTtcbiAgdmFyIG55ID0gYy5yZWRNdWwodDIpLnJlZElTdWIoanlkOCk7XG4gIHZhciBueiA9IGp5LnJlZEFkZChqeSkucmVkTXVsKGp6KTtcblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLnRycGwgPSBmdW5jdGlvbiB0cnBsKCkge1xuICBpZiAoIXRoaXMuY3VydmUuemVyb0EpXG4gICAgcmV0dXJuIHRoaXMuZGJsKCkuYWRkKHRoaXMpO1xuXG4gIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by1zaG9ydHctamFjb2JpYW4tMC5odG1sI3RyaXBsaW5nLXRwbC0yMDA3LWJsXG4gIC8vIDVNICsgMTBTICsgLi4uXG5cbiAgLy8gWFggPSBYMV4yXG4gIHZhciB4eCA9IHRoaXMueC5yZWRTcXIoKTtcbiAgLy8gWVkgPSBZMV4yXG4gIHZhciB5eSA9IHRoaXMueS5yZWRTcXIoKTtcbiAgLy8gWlogPSBaMV4yXG4gIHZhciB6eiA9IHRoaXMuei5yZWRTcXIoKTtcbiAgLy8gWVlZWSA9IFlZXjJcbiAgdmFyIHl5eXkgPSB5eS5yZWRTcXIoKTtcbiAgLy8gTSA9IDMgKiBYWCArIGEgKiBaWjI7IGEgPSAwXG4gIHZhciBtID0geHgucmVkQWRkKHh4KS5yZWRJQWRkKHh4KTtcbiAgLy8gTU0gPSBNXjJcbiAgdmFyIG1tID0gbS5yZWRTcXIoKTtcbiAgLy8gRSA9IDYgKiAoKFgxICsgWVkpXjIgLSBYWCAtIFlZWVkpIC0gTU1cbiAgdmFyIGUgPSB0aGlzLngucmVkQWRkKHl5KS5yZWRTcXIoKS5yZWRJU3ViKHh4KS5yZWRJU3ViKHl5eXkpO1xuICBlID0gZS5yZWRJQWRkKGUpO1xuICBlID0gZS5yZWRBZGQoZSkucmVkSUFkZChlKTtcbiAgZSA9IGUucmVkSVN1YihtbSk7XG4gIC8vIEVFID0gRV4yXG4gIHZhciBlZSA9IGUucmVkU3FyKCk7XG4gIC8vIFQgPSAxNipZWVlZXG4gIHZhciB0ID0geXl5eS5yZWRJQWRkKHl5eXkpO1xuICB0ID0gdC5yZWRJQWRkKHQpO1xuICB0ID0gdC5yZWRJQWRkKHQpO1xuICB0ID0gdC5yZWRJQWRkKHQpO1xuICAvLyBVID0gKE0gKyBFKV4yIC0gTU0gLSBFRSAtIFRcbiAgdmFyIHUgPSBtLnJlZElBZGQoZSkucmVkU3FyKCkucmVkSVN1YihtbSkucmVkSVN1YihlZSkucmVkSVN1Yih0KTtcbiAgLy8gWDMgPSA0ICogKFgxICogRUUgLSA0ICogWVkgKiBVKVxuICB2YXIgeXl1NCA9IHl5LnJlZE11bCh1KTtcbiAgeXl1NCA9IHl5dTQucmVkSUFkZCh5eXU0KTtcbiAgeXl1NCA9IHl5dTQucmVkSUFkZCh5eXU0KTtcbiAgdmFyIG54ID0gdGhpcy54LnJlZE11bChlZSkucmVkSVN1Yih5eXU0KTtcbiAgbnggPSBueC5yZWRJQWRkKG54KTtcbiAgbnggPSBueC5yZWRJQWRkKG54KTtcbiAgLy8gWTMgPSA4ICogWTEgKiAoVSAqIChUIC0gVSkgLSBFICogRUUpXG4gIHZhciBueSA9IHRoaXMueS5yZWRNdWwodS5yZWRNdWwodC5yZWRJU3ViKHUpKS5yZWRJU3ViKGUucmVkTXVsKGVlKSkpO1xuICBueSA9IG55LnJlZElBZGQobnkpO1xuICBueSA9IG55LnJlZElBZGQobnkpO1xuICBueSA9IG55LnJlZElBZGQobnkpO1xuICAvLyBaMyA9IChaMSArIEUpXjIgLSBaWiAtIEVFXG4gIHZhciBueiA9IHRoaXMuei5yZWRBZGQoZSkucmVkU3FyKCkucmVkSVN1Yih6eikucmVkSVN1YihlZSk7XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LCBueSwgbnopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwoaywga2Jhc2UpIHtcbiAgayA9IG5ldyBCTihrLCBrYmFzZSk7XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWwodGhpcywgayk7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEocCkge1xuICBpZiAocC50eXBlID09PSAnYWZmaW5lJylcbiAgICByZXR1cm4gdGhpcy5lcShwLnRvSigpKTtcblxuICBpZiAodGhpcyA9PT0gcClcbiAgICByZXR1cm4gdHJ1ZTtcblxuICAvLyB4MSAqIHoyXjIgPT0geDIgKiB6MV4yXG4gIHZhciB6MiA9IHRoaXMuei5yZWRTcXIoKTtcbiAgdmFyIHB6MiA9IHAuei5yZWRTcXIoKTtcbiAgaWYgKHRoaXMueC5yZWRNdWwocHoyKS5yZWRJU3ViKHAueC5yZWRNdWwoejIpKS5jbXBuKDApICE9PSAwKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyB5MSAqIHoyXjMgPT0geTIgKiB6MV4zXG4gIHZhciB6MyA9IHoyLnJlZE11bCh0aGlzLnopO1xuICB2YXIgcHozID0gcHoyLnJlZE11bChwLnopO1xuICByZXR1cm4gdGhpcy55LnJlZE11bChwejMpLnJlZElTdWIocC55LnJlZE11bCh6MykpLmNtcG4oMCkgPT09IDA7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmVxWFRvUCA9IGZ1bmN0aW9uIGVxWFRvUCh4KSB7XG4gIHZhciB6cyA9IHRoaXMuei5yZWRTcXIoKTtcbiAgdmFyIHJ4ID0geC50b1JlZCh0aGlzLmN1cnZlLnJlZCkucmVkTXVsKHpzKTtcbiAgaWYgKHRoaXMueC5jbXAocngpID09PSAwKVxuICAgIHJldHVybiB0cnVlO1xuXG4gIHZhciB4YyA9IHguY2xvbmUoKTtcbiAgdmFyIHQgPSB0aGlzLmN1cnZlLnJlZE4ucmVkTXVsKHpzKTtcbiAgZm9yICg7Oykge1xuICAgIHhjLmlhZGQodGhpcy5jdXJ2ZS5uKTtcbiAgICBpZiAoeGMuY21wKHRoaXMuY3VydmUucCkgPj0gMClcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIHJ4LnJlZElBZGQodCk7XG4gICAgaWYgKHRoaXMueC5jbXAocngpID09PSAwKVxuICAgICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5cbkpQb2ludC5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gJzxFQyBKUG9pbnQgSW5maW5pdHk+JztcbiAgcmV0dXJuICc8RUMgSlBvaW50IHg6ICcgKyB0aGlzLngudG9TdHJpbmcoMTYsIDIpICtcbiAgICAgICcgeTogJyArIHRoaXMueS50b1N0cmluZygxNiwgMikgK1xuICAgICAgJyB6OiAnICsgdGhpcy56LnRvU3RyaW5nKDE2LCAyKSArICc+Jztcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuaXNJbmZpbml0eSA9IGZ1bmN0aW9uIGlzSW5maW5pdHkoKSB7XG4gIC8vIFhYWCBUaGlzIGNvZGUgYXNzdW1lcyB0aGF0IHplcm8gaXMgYWx3YXlzIHplcm8gaW4gcmVkXG4gIHJldHVybiB0aGlzLnouY21wbigwKSA9PT0gMDtcbn07XG5cbnZhciBjdXJ2ZV8xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3VydmUgPSBleHBvcnRzO1xuXG5jdXJ2ZS5iYXNlID0gYmFzZTtcbmN1cnZlLnNob3J0ID0gc2hvcnRfMTtcbmN1cnZlLm1vbnQgPSAvKlJpY01vbzpldGhlcnM6cmVxdWlyZSguL21vbnQpKi8obnVsbCk7XG5jdXJ2ZS5lZHdhcmRzID0gLypSaWNNb286ZXRoZXJzOnJlcXVpcmUoLi9lZHdhcmRzKSovKG51bGwpO1xufSk7XG5cbnZhciBjdXJ2ZXNfMSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbid1c2Ugc3RyaWN0JztcblxudmFyIGN1cnZlcyA9IGV4cG9ydHM7XG5cblxuXG5cblxudmFyIGFzc2VydCA9IHV0aWxzXzEkMS5hc3NlcnQ7XG5cbmZ1bmN0aW9uIFByZXNldEN1cnZlKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMudHlwZSA9PT0gJ3Nob3J0JylcbiAgICB0aGlzLmN1cnZlID0gbmV3IGN1cnZlXzEuc2hvcnQob3B0aW9ucyk7XG4gIGVsc2UgaWYgKG9wdGlvbnMudHlwZSA9PT0gJ2Vkd2FyZHMnKVxuICAgIHRoaXMuY3VydmUgPSBuZXcgY3VydmVfMS5lZHdhcmRzKG9wdGlvbnMpO1xuICBlbHNlXG4gICAgdGhpcy5jdXJ2ZSA9IG5ldyBjdXJ2ZV8xLm1vbnQob3B0aW9ucyk7XG4gIHRoaXMuZyA9IHRoaXMuY3VydmUuZztcbiAgdGhpcy5uID0gdGhpcy5jdXJ2ZS5uO1xuICB0aGlzLmhhc2ggPSBvcHRpb25zLmhhc2g7XG5cbiAgYXNzZXJ0KHRoaXMuZy52YWxpZGF0ZSgpLCAnSW52YWxpZCBjdXJ2ZScpO1xuICBhc3NlcnQodGhpcy5nLm11bCh0aGlzLm4pLmlzSW5maW5pdHkoKSwgJ0ludmFsaWQgY3VydmUsIEcqTiAhPSBPJyk7XG59XG5jdXJ2ZXMuUHJlc2V0Q3VydmUgPSBQcmVzZXRDdXJ2ZTtcblxuZnVuY3Rpb24gZGVmaW5lQ3VydmUobmFtZSwgb3B0aW9ucykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3VydmVzLCBuYW1lLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjdXJ2ZSA9IG5ldyBQcmVzZXRDdXJ2ZShvcHRpb25zKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdXJ2ZXMsIG5hbWUsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogY3VydmUsXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBjdXJ2ZTtcbiAgICB9LFxuICB9KTtcbn1cblxuZGVmaW5lQ3VydmUoJ3AxOTInLCB7XG4gIHR5cGU6ICdzaG9ydCcsXG4gIHByaW1lOiAncDE5MicsXG4gIHA6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiBmZmZmZmZmZicsXG4gIGE6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiBmZmZmZmZmYycsXG4gIGI6ICc2NDIxMDUxOSBlNTljODBlNyAwZmE3ZTlhYiA3MjI0MzA0OSBmZWI4ZGVlYyBjMTQ2YjliMScsXG4gIG46ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiA5OWRlZjgzNiAxNDZiYzliMSBiNGQyMjgzMScsXG4gIGhhc2g6IGhhc2guc2hhMjU2LFxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICcxODhkYTgwZSBiMDMwOTBmNiA3Y2JmMjBlYiA0M2ExODgwMCBmNGZmMGFmZCA4MmZmMTAxMicsXG4gICAgJzA3MTkyYjk1IGZmYzhkYTc4IDYzMTAxMWVkIDZiMjRjZGQ1IDczZjk3N2ExIDFlNzk0ODExJyxcbiAgXSxcbn0pO1xuXG5kZWZpbmVDdXJ2ZSgncDIyNCcsIHtcbiAgdHlwZTogJ3Nob3J0JyxcbiAgcHJpbWU6ICdwMjI0JyxcbiAgcDogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAxJyxcbiAgYTogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlJyxcbiAgYjogJ2I0MDUwYTg1IDBjMDRiM2FiIGY1NDEzMjU2IDUwNDRiMGI3IGQ3YmZkOGJhIDI3MGIzOTQzIDIzNTVmZmI0JyxcbiAgbjogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmYxNmEyIGUwYjhmMDNlIDEzZGQyOTQ1IDVjNWMyYTNkJyxcbiAgaGFzaDogaGFzaC5zaGEyNTYsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJ2I3MGUwY2JkIDZiYjRiZjdmIDMyMTM5MGI5IDRhMDNjMWQzIDU2YzIxMTIyIDM0MzI4MGQ2IDExNWMxZDIxJyxcbiAgICAnYmQzNzYzODggYjVmNzIzZmIgNGMyMmRmZTYgY2Q0Mzc1YTAgNWEwNzQ3NjQgNDRkNTgxOTkgODUwMDdlMzQnLFxuICBdLFxufSk7XG5cbmRlZmluZUN1cnZlKCdwMjU2Jywge1xuICB0eXBlOiAnc2hvcnQnLFxuICBwcmltZTogbnVsbCxcbiAgcDogJ2ZmZmZmZmZmIDAwMDAwMDAxIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAwIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmJyxcbiAgYTogJ2ZmZmZmZmZmIDAwMDAwMDAxIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAwIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZjJyxcbiAgYjogJzVhYzYzNWQ4IGFhM2E5M2U3IGIzZWJiZDU1IDc2OTg4NmJjIDY1MWQwNmIwIGNjNTNiMGY2IDNiY2UzYzNlIDI3ZDI2MDRiJyxcbiAgbjogJ2ZmZmZmZmZmIDAwMDAwMDAwIGZmZmZmZmZmIGZmZmZmZmZmIGJjZTZmYWFkIGE3MTc5ZTg0IGYzYjljYWMyIGZjNjMyNTUxJyxcbiAgaGFzaDogaGFzaC5zaGEyNTYsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJzZiMTdkMWYyIGUxMmM0MjQ3IGY4YmNlNmU1IDYzYTQ0MGYyIDc3MDM3ZDgxIDJkZWIzM2EwIGY0YTEzOTQ1IGQ4OThjMjk2JyxcbiAgICAnNGZlMzQyZTIgZmUxYTdmOWIgOGVlN2ViNGEgN2MwZjllMTYgMmJjZTMzNTcgNmIzMTVlY2UgY2JiNjQwNjggMzdiZjUxZjUnLFxuICBdLFxufSk7XG5cbmRlZmluZUN1cnZlKCdwMzg0Jywge1xuICB0eXBlOiAnc2hvcnQnLFxuICBwcmltZTogbnVsbCxcbiAgcDogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgK1xuICAgICAnZmZmZmZmZmUgZmZmZmZmZmYgMDAwMDAwMDAgMDAwMDAwMDAgZmZmZmZmZmYnLFxuICBhOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgJyArXG4gICAgICdmZmZmZmZmZSBmZmZmZmZmZiAwMDAwMDAwMCAwMDAwMDAwMCBmZmZmZmZmYycsXG4gIGI6ICdiMzMxMmZhNyBlMjNlZTdlNCA5ODhlMDU2YiBlM2Y4MmQxOSAxODFkOWM2ZSBmZTgxNDExMiAwMzE0MDg4ZiAnICtcbiAgICAgJzUwMTM4NzVhIGM2NTYzOThkIDhhMmVkMTlkIDJhODVjOGVkIGQzZWMyYWVmJyxcbiAgbjogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGM3NjM0ZDgxICcgK1xuICAgICAnZjQzNzJkZGYgNTgxYTBkYjIgNDhiMGE3N2EgZWNlYzE5NmEgY2NjNTI5NzMnLFxuICBoYXNoOiBoYXNoLnNoYTM4NCxcbiAgZ1JlZDogZmFsc2UsXG4gIGc6IFtcbiAgICAnYWE4N2NhMjIgYmU4YjA1MzcgOGViMWM3MWUgZjMyMGFkNzQgNmUxZDNiNjIgOGJhNzliOTggNTlmNzQxZTAgODI1NDJhMzggJyArXG4gICAgJzU1MDJmMjVkIGJmNTUyOTZjIDNhNTQ1ZTM4IDcyNzYwYWI3JyxcbiAgICAnMzYxN2RlNGEgOTYyNjJjNmYgNWQ5ZTk4YmYgOTI5MmRjMjkgZjhmNDFkYmQgMjg5YTE0N2MgZTlkYTMxMTMgYjVmMGI4YzAgJyArXG4gICAgJzBhNjBiMWNlIDFkN2U4MTlkIDdhNDMxZDdjIDkwZWEwZTVmJyxcbiAgXSxcbn0pO1xuXG5kZWZpbmVDdXJ2ZSgncDUyMScsIHtcbiAgdHlwZTogJ3Nob3J0JyxcbiAgcHJpbWU6IG51bGwsXG4gIHA6ICcwMDAwMDFmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgK1xuICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYnLFxuICBhOiAnMDAwMDAxZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgJyArXG4gICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZjJyxcbiAgYjogJzAwMDAwMDUxIDk1M2ViOTYxIDhlMWM5YTFmIDkyOWEyMWEwIGI2ODU0MGVlIGEyZGE3MjViICcgK1xuICAgICAnOTliMzE1ZjMgYjhiNDg5OTEgOGVmMTA5ZTEgNTYxOTM5NTEgZWM3ZTkzN2IgMTY1MmMwYmQgJyArXG4gICAgICczYmIxYmYwNyAzNTczZGY4OCAzZDJjMzRmMSBlZjQ1MWZkNCA2YjUwM2YwMCcsXG4gIG46ICcwMDAwMDFmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZhIDUxODY4NzgzIGJmMmY5NjZiIDdmY2MwMTQ4ICcgK1xuICAgICAnZjcwOWE1ZDAgM2JiNWM5YjggODk5YzQ3YWUgYmI2ZmI3MWUgOTEzODY0MDknLFxuICBoYXNoOiBoYXNoLnNoYTUxMixcbiAgZ1JlZDogZmFsc2UsXG4gIGc6IFtcbiAgICAnMDAwMDAwYzYgODU4ZTA2YjcgMDQwNGU5Y2QgOWUzZWNiNjYgMjM5NWI0NDIgOWM2NDgxMzkgJyArXG4gICAgJzA1M2ZiNTIxIGY4MjhhZjYwIDZiNGQzZGJhIGExNGI1ZTc3IGVmZTc1OTI4IGZlMWRjMTI3ICcgK1xuICAgICdhMmZmYThkZSAzMzQ4YjNjMSA4NTZhNDI5YiBmOTdlN2UzMSBjMmU1YmQ2NicsXG4gICAgJzAwMDAwMTE4IDM5Mjk2YTc4IDlhM2JjMDA0IDVjOGE1ZmI0IDJjN2QxYmQ5IDk4ZjU0NDQ5ICcgK1xuICAgICc1NzliNDQ2OCAxN2FmYmQxNyAyNzNlNjYyYyA5N2VlNzI5OSA1ZWY0MjY0MCBjNTUwYjkwMSAnICtcbiAgICAnM2ZhZDA3NjEgMzUzYzcwODYgYTI3MmMyNDAgODhiZTk0NzYgOWZkMTY2NTAnLFxuICBdLFxufSk7XG5cbmRlZmluZUN1cnZlKCdjdXJ2ZTI1NTE5Jywge1xuICB0eXBlOiAnbW9udCcsXG4gIHByaW1lOiAncDI1NTE5JyxcbiAgcDogJzdmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZWQnLFxuICBhOiAnNzZkMDYnLFxuICBiOiAnMScsXG4gIG46ICcxMDAwMDAwMDAwMDAwMDAwIDAwMDAwMDAwMDAwMDAwMDAgMTRkZWY5ZGVhMmY3OWNkNiA1ODEyNjMxYTVjZjVkM2VkJyxcbiAgaGFzaDogaGFzaC5zaGEyNTYsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJzknLFxuICBdLFxufSk7XG5cbmRlZmluZUN1cnZlKCdlZDI1NTE5Jywge1xuICB0eXBlOiAnZWR3YXJkcycsXG4gIHByaW1lOiAncDI1NTE5JyxcbiAgcDogJzdmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZWQnLFxuICBhOiAnLTEnLFxuICBjOiAnMScsXG4gIC8vIC0xMjE2NjUgKiAoMTIxNjY2XigtMSkpIChtb2QgUClcbiAgZDogJzUyMDM2Y2VlMmI2ZmZlNzMgOGNjNzQwNzk3Nzc5ZTg5OCAwMDcwMGE0ZDQxNDFkOGFiIDc1ZWI0ZGNhMTM1OTc4YTMnLFxuICBuOiAnMTAwMDAwMDAwMDAwMDAwMCAwMDAwMDAwMDAwMDAwMDAwIDE0ZGVmOWRlYTJmNzljZDYgNTgxMjYzMWE1Y2Y1ZDNlZCcsXG4gIGhhc2g6IGhhc2guc2hhMjU2LFxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICcyMTY5MzZkM2NkNmU1M2ZlYzBhNGUyMzFmZGQ2ZGM1YzY5MmNjNzYwOTUyNWE3YjJjOTU2MmQ2MDhmMjVkNTFhJyxcblxuICAgIC8vIDQvNVxuICAgICc2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjU4JyxcbiAgXSxcbn0pO1xuXG52YXIgcHJlO1xudHJ5IHtcbiAgcHJlID0gLypSaWNNb286ZXRoZXJzOnJlcXVpcmUoLi9wcmVjb21wdXRlZC9zZWNwMjU2azEpKi8obnVsbCkuY3Jhc2goKTtcbn0gY2F0Y2ggKGUpIHtcbiAgcHJlID0gdW5kZWZpbmVkO1xufVxuXG5kZWZpbmVDdXJ2ZSgnc2VjcDI1NmsxJywge1xuICB0eXBlOiAnc2hvcnQnLFxuICBwcmltZTogJ2syNTYnLFxuICBwOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZjMmYnLFxuICBhOiAnMCcsXG4gIGI6ICc3JyxcbiAgbjogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGJhYWVkY2U2IGFmNDhhMDNiIGJmZDI1ZThjIGQwMzY0MTQxJyxcbiAgaDogJzEnLFxuICBoYXNoOiBoYXNoLnNoYTI1NixcblxuICAvLyBQcmVjb21wdXRlZCBlbmRvbW9ycGhpc21cbiAgYmV0YTogJzdhZTk2YTJiNjU3YzA3MTA2ZTY0NDc5ZWFjMzQzNGU5OWNmMDQ5NzUxMmY1ODk5NWMxMzk2YzI4NzE5NTAxZWUnLFxuICBsYW1iZGE6ICc1MzYzYWQ0Y2MwNWMzMGUwYTUyNjFjMDI4ODEyNjQ1YTEyMmUyMmVhMjA4MTY2NzhkZjAyOTY3YzFiMjNiZDcyJyxcbiAgYmFzaXM6IFtcbiAgICB7XG4gICAgICBhOiAnMzA4NmQyMjFhN2Q0NmJjZGU4NmM5MGU0OTI4NGViMTUnLFxuICAgICAgYjogJy1lNDQzN2VkNjAxMGU4ODI4NmY1NDdmYTkwYWJmZTRjMycsXG4gICAgfSxcbiAgICB7XG4gICAgICBhOiAnMTE0Y2E1MGY3YThlMmYzZjY1N2MxMTA4ZDlkNDRjZmQ4JyxcbiAgICAgIGI6ICczMDg2ZDIyMWE3ZDQ2YmNkZTg2YzkwZTQ5Mjg0ZWIxNScsXG4gICAgfSxcbiAgXSxcblxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICc3OWJlNjY3ZWY5ZGNiYmFjNTVhMDYyOTVjZTg3MGIwNzAyOWJmY2RiMmRjZTI4ZDk1OWYyODE1YjE2ZjgxNzk4JyxcbiAgICAnNDgzYWRhNzcyNmEzYzQ2NTVkYTRmYmZjMGUxMTA4YThmZDE3YjQ0OGE2ODU1NDE5OWM0N2QwOGZmYjEwZDRiOCcsXG4gICAgcHJlLFxuICBdLFxufSk7XG59KTtcblxuJ3VzZSBzdHJpY3QnO1xuXG5cblxuXG5cbmZ1bmN0aW9uIEhtYWNEUkJHKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEhtYWNEUkJHKSlcbiAgICByZXR1cm4gbmV3IEhtYWNEUkJHKG9wdGlvbnMpO1xuICB0aGlzLmhhc2ggPSBvcHRpb25zLmhhc2g7XG4gIHRoaXMucHJlZFJlc2lzdCA9ICEhb3B0aW9ucy5wcmVkUmVzaXN0O1xuXG4gIHRoaXMub3V0TGVuID0gdGhpcy5oYXNoLm91dFNpemU7XG4gIHRoaXMubWluRW50cm9weSA9IG9wdGlvbnMubWluRW50cm9weSB8fCB0aGlzLmhhc2guaG1hY1N0cmVuZ3RoO1xuXG4gIHRoaXMuX3Jlc2VlZCA9IG51bGw7XG4gIHRoaXMucmVzZWVkSW50ZXJ2YWwgPSBudWxsO1xuICB0aGlzLksgPSBudWxsO1xuICB0aGlzLlYgPSBudWxsO1xuXG4gIHZhciBlbnRyb3B5ID0gdXRpbHNfMS50b0FycmF5KG9wdGlvbnMuZW50cm9weSwgb3B0aW9ucy5lbnRyb3B5RW5jIHx8ICdoZXgnKTtcbiAgdmFyIG5vbmNlID0gdXRpbHNfMS50b0FycmF5KG9wdGlvbnMubm9uY2UsIG9wdGlvbnMubm9uY2VFbmMgfHwgJ2hleCcpO1xuICB2YXIgcGVycyA9IHV0aWxzXzEudG9BcnJheShvcHRpb25zLnBlcnMsIG9wdGlvbnMucGVyc0VuYyB8fCAnaGV4Jyk7XG4gIG1pbmltYWxpc3RpY0Fzc2VydChlbnRyb3B5Lmxlbmd0aCA+PSAodGhpcy5taW5FbnRyb3B5IC8gOCksXG4gICAgICAgICAnTm90IGVub3VnaCBlbnRyb3B5LiBNaW5pbXVtIGlzOiAnICsgdGhpcy5taW5FbnRyb3B5ICsgJyBiaXRzJyk7XG4gIHRoaXMuX2luaXQoZW50cm9weSwgbm9uY2UsIHBlcnMpO1xufVxudmFyIGhtYWNEcmJnID0gSG1hY0RSQkc7XG5cbkhtYWNEUkJHLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQoZW50cm9weSwgbm9uY2UsIHBlcnMpIHtcbiAgdmFyIHNlZWQgPSBlbnRyb3B5LmNvbmNhdChub25jZSkuY29uY2F0KHBlcnMpO1xuXG4gIHRoaXMuSyA9IG5ldyBBcnJheSh0aGlzLm91dExlbiAvIDgpO1xuICB0aGlzLlYgPSBuZXcgQXJyYXkodGhpcy5vdXRMZW4gLyA4KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLlYubGVuZ3RoOyBpKyspIHtcbiAgICB0aGlzLktbaV0gPSAweDAwO1xuICAgIHRoaXMuVltpXSA9IDB4MDE7XG4gIH1cblxuICB0aGlzLl91cGRhdGUoc2VlZCk7XG4gIHRoaXMuX3Jlc2VlZCA9IDE7XG4gIHRoaXMucmVzZWVkSW50ZXJ2YWwgPSAweDEwMDAwMDAwMDAwMDA7ICAvLyAyXjQ4XG59O1xuXG5IbWFjRFJCRy5wcm90b3R5cGUuX2htYWMgPSBmdW5jdGlvbiBobWFjKCkge1xuICByZXR1cm4gbmV3IGhhc2guaG1hYyh0aGlzLmhhc2gsIHRoaXMuSyk7XG59O1xuXG5IbWFjRFJCRy5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShzZWVkKSB7XG4gIHZhciBrbWFjID0gdGhpcy5faG1hYygpXG4gICAgICAgICAgICAgICAgIC51cGRhdGUodGhpcy5WKVxuICAgICAgICAgICAgICAgICAudXBkYXRlKFsgMHgwMCBdKTtcbiAgaWYgKHNlZWQpXG4gICAga21hYyA9IGttYWMudXBkYXRlKHNlZWQpO1xuICB0aGlzLksgPSBrbWFjLmRpZ2VzdCgpO1xuICB0aGlzLlYgPSB0aGlzLl9obWFjKCkudXBkYXRlKHRoaXMuVikuZGlnZXN0KCk7XG4gIGlmICghc2VlZClcbiAgICByZXR1cm47XG5cbiAgdGhpcy5LID0gdGhpcy5faG1hYygpXG4gICAgICAgICAgICAgICAudXBkYXRlKHRoaXMuVilcbiAgICAgICAgICAgICAgIC51cGRhdGUoWyAweDAxIF0pXG4gICAgICAgICAgICAgICAudXBkYXRlKHNlZWQpXG4gICAgICAgICAgICAgICAuZGlnZXN0KCk7XG4gIHRoaXMuViA9IHRoaXMuX2htYWMoKS51cGRhdGUodGhpcy5WKS5kaWdlc3QoKTtcbn07XG5cbkhtYWNEUkJHLnByb3RvdHlwZS5yZXNlZWQgPSBmdW5jdGlvbiByZXNlZWQoZW50cm9weSwgZW50cm9weUVuYywgYWRkLCBhZGRFbmMpIHtcbiAgLy8gT3B0aW9uYWwgZW50cm9weSBlbmNcbiAgaWYgKHR5cGVvZiBlbnRyb3B5RW5jICE9PSAnc3RyaW5nJykge1xuICAgIGFkZEVuYyA9IGFkZDtcbiAgICBhZGQgPSBlbnRyb3B5RW5jO1xuICAgIGVudHJvcHlFbmMgPSBudWxsO1xuICB9XG5cbiAgZW50cm9weSA9IHV0aWxzXzEudG9BcnJheShlbnRyb3B5LCBlbnRyb3B5RW5jKTtcbiAgYWRkID0gdXRpbHNfMS50b0FycmF5KGFkZCwgYWRkRW5jKTtcblxuICBtaW5pbWFsaXN0aWNBc3NlcnQoZW50cm9weS5sZW5ndGggPj0gKHRoaXMubWluRW50cm9weSAvIDgpLFxuICAgICAgICAgJ05vdCBlbm91Z2ggZW50cm9weS4gTWluaW11bSBpczogJyArIHRoaXMubWluRW50cm9weSArICcgYml0cycpO1xuXG4gIHRoaXMuX3VwZGF0ZShlbnRyb3B5LmNvbmNhdChhZGQgfHwgW10pKTtcbiAgdGhpcy5fcmVzZWVkID0gMTtcbn07XG5cbkhtYWNEUkJHLnByb3RvdHlwZS5nZW5lcmF0ZSA9IGZ1bmN0aW9uIGdlbmVyYXRlKGxlbiwgZW5jLCBhZGQsIGFkZEVuYykge1xuICBpZiAodGhpcy5fcmVzZWVkID4gdGhpcy5yZXNlZWRJbnRlcnZhbClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Jlc2VlZCBpcyByZXF1aXJlZCcpO1xuXG4gIC8vIE9wdGlvbmFsIGVuY29kaW5nXG4gIGlmICh0eXBlb2YgZW5jICE9PSAnc3RyaW5nJykge1xuICAgIGFkZEVuYyA9IGFkZDtcbiAgICBhZGQgPSBlbmM7XG4gICAgZW5jID0gbnVsbDtcbiAgfVxuXG4gIC8vIE9wdGlvbmFsIGFkZGl0aW9uYWwgZGF0YVxuICBpZiAoYWRkKSB7XG4gICAgYWRkID0gdXRpbHNfMS50b0FycmF5KGFkZCwgYWRkRW5jIHx8ICdoZXgnKTtcbiAgICB0aGlzLl91cGRhdGUoYWRkKTtcbiAgfVxuXG4gIHZhciB0ZW1wID0gW107XG4gIHdoaWxlICh0ZW1wLmxlbmd0aCA8IGxlbikge1xuICAgIHRoaXMuViA9IHRoaXMuX2htYWMoKS51cGRhdGUodGhpcy5WKS5kaWdlc3QoKTtcbiAgICB0ZW1wID0gdGVtcC5jb25jYXQodGhpcy5WKTtcbiAgfVxuXG4gIHZhciByZXMgPSB0ZW1wLnNsaWNlKDAsIGxlbik7XG4gIHRoaXMuX3VwZGF0ZShhZGQpO1xuICB0aGlzLl9yZXNlZWQrKztcbiAgcmV0dXJuIHV0aWxzXzEuZW5jb2RlKHJlcywgZW5jKTtcbn07XG5cbid1c2Ugc3RyaWN0JztcblxuXG5cbnZhciBhc3NlcnQkMyA9IHV0aWxzXzEkMS5hc3NlcnQ7XG5cbmZ1bmN0aW9uIEtleVBhaXIoZWMsIG9wdGlvbnMpIHtcbiAgdGhpcy5lYyA9IGVjO1xuICB0aGlzLnByaXYgPSBudWxsO1xuICB0aGlzLnB1YiA9IG51bGw7XG5cbiAgLy8gS2V5UGFpcihlYywgeyBwcml2OiAuLi4sIHB1YjogLi4uIH0pXG4gIGlmIChvcHRpb25zLnByaXYpXG4gICAgdGhpcy5faW1wb3J0UHJpdmF0ZShvcHRpb25zLnByaXYsIG9wdGlvbnMucHJpdkVuYyk7XG4gIGlmIChvcHRpb25zLnB1YilcbiAgICB0aGlzLl9pbXBvcnRQdWJsaWMob3B0aW9ucy5wdWIsIG9wdGlvbnMucHViRW5jKTtcbn1cbnZhciBrZXkgPSBLZXlQYWlyO1xuXG5LZXlQYWlyLmZyb21QdWJsaWMgPSBmdW5jdGlvbiBmcm9tUHVibGljKGVjLCBwdWIsIGVuYykge1xuICBpZiAocHViIGluc3RhbmNlb2YgS2V5UGFpcilcbiAgICByZXR1cm4gcHViO1xuXG4gIHJldHVybiBuZXcgS2V5UGFpcihlYywge1xuICAgIHB1YjogcHViLFxuICAgIHB1YkVuYzogZW5jLFxuICB9KTtcbn07XG5cbktleVBhaXIuZnJvbVByaXZhdGUgPSBmdW5jdGlvbiBmcm9tUHJpdmF0ZShlYywgcHJpdiwgZW5jKSB7XG4gIGlmIChwcml2IGluc3RhbmNlb2YgS2V5UGFpcilcbiAgICByZXR1cm4gcHJpdjtcblxuICByZXR1cm4gbmV3IEtleVBhaXIoZWMsIHtcbiAgICBwcml2OiBwcml2LFxuICAgIHByaXZFbmM6IGVuYyxcbiAgfSk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKCkge1xuICB2YXIgcHViID0gdGhpcy5nZXRQdWJsaWMoKTtcblxuICBpZiAocHViLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4geyByZXN1bHQ6IGZhbHNlLCByZWFzb246ICdJbnZhbGlkIHB1YmxpYyBrZXknIH07XG4gIGlmICghcHViLnZhbGlkYXRlKCkpXG4gICAgcmV0dXJuIHsgcmVzdWx0OiBmYWxzZSwgcmVhc29uOiAnUHVibGljIGtleSBpcyBub3QgYSBwb2ludCcgfTtcbiAgaWYgKCFwdWIubXVsKHRoaXMuZWMuY3VydmUubikuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB7IHJlc3VsdDogZmFsc2UsIHJlYXNvbjogJ1B1YmxpYyBrZXkgKiBOICE9IE8nIH07XG5cbiAgcmV0dXJuIHsgcmVzdWx0OiB0cnVlLCByZWFzb246IG51bGwgfTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLmdldFB1YmxpYyA9IGZ1bmN0aW9uIGdldFB1YmxpYyhjb21wYWN0LCBlbmMpIHtcbiAgLy8gY29tcGFjdCBpcyBvcHRpb25hbCBhcmd1bWVudFxuICBpZiAodHlwZW9mIGNvbXBhY3QgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jID0gY29tcGFjdDtcbiAgICBjb21wYWN0ID0gbnVsbDtcbiAgfVxuXG4gIGlmICghdGhpcy5wdWIpXG4gICAgdGhpcy5wdWIgPSB0aGlzLmVjLmcubXVsKHRoaXMucHJpdik7XG5cbiAgaWYgKCFlbmMpXG4gICAgcmV0dXJuIHRoaXMucHViO1xuXG4gIHJldHVybiB0aGlzLnB1Yi5lbmNvZGUoZW5jLCBjb21wYWN0KTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLmdldFByaXZhdGUgPSBmdW5jdGlvbiBnZXRQcml2YXRlKGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdGhpcy5wcml2LnRvU3RyaW5nKDE2LCAyKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLnByaXY7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5faW1wb3J0UHJpdmF0ZSA9IGZ1bmN0aW9uIF9pbXBvcnRQcml2YXRlKGtleSwgZW5jKSB7XG4gIHRoaXMucHJpdiA9IG5ldyBCTihrZXksIGVuYyB8fCAxNik7XG5cbiAgLy8gRW5zdXJlIHRoYXQgdGhlIHByaXYgd29uJ3QgYmUgYmlnZ2VyIHRoYW4gbiwgb3RoZXJ3aXNlIHdlIG1heSBmYWlsXG4gIC8vIGluIGZpeGVkIG11bHRpcGxpY2F0aW9uIG1ldGhvZFxuICB0aGlzLnByaXYgPSB0aGlzLnByaXYudW1vZCh0aGlzLmVjLmN1cnZlLm4pO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuX2ltcG9ydFB1YmxpYyA9IGZ1bmN0aW9uIF9pbXBvcnRQdWJsaWMoa2V5LCBlbmMpIHtcbiAgaWYgKGtleS54IHx8IGtleS55KSB7XG4gICAgLy8gTW9udGdvbWVyeSBwb2ludHMgb25seSBoYXZlIGFuIGB4YCBjb29yZGluYXRlLlxuICAgIC8vIFdlaWVyc3RyYXNzL0Vkd2FyZHMgcG9pbnRzIG9uIHRoZSBvdGhlciBoYW5kIGhhdmUgYm90aCBgeGAgYW5kXG4gICAgLy8gYHlgIGNvb3JkaW5hdGVzLlxuICAgIGlmICh0aGlzLmVjLmN1cnZlLnR5cGUgPT09ICdtb250Jykge1xuICAgICAgYXNzZXJ0JDMoa2V5LngsICdOZWVkIHggY29vcmRpbmF0ZScpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5lYy5jdXJ2ZS50eXBlID09PSAnc2hvcnQnIHx8XG4gICAgICAgICAgICAgICB0aGlzLmVjLmN1cnZlLnR5cGUgPT09ICdlZHdhcmRzJykge1xuICAgICAgYXNzZXJ0JDMoa2V5LnggJiYga2V5LnksICdOZWVkIGJvdGggeCBhbmQgeSBjb29yZGluYXRlJyk7XG4gICAgfVxuICAgIHRoaXMucHViID0gdGhpcy5lYy5jdXJ2ZS5wb2ludChrZXkueCwga2V5LnkpO1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLnB1YiA9IHRoaXMuZWMuY3VydmUuZGVjb2RlUG9pbnQoa2V5LCBlbmMpO1xufTtcblxuLy8gRUNESFxuS2V5UGFpci5wcm90b3R5cGUuZGVyaXZlID0gZnVuY3Rpb24gZGVyaXZlKHB1Yikge1xuICBpZighcHViLnZhbGlkYXRlKCkpIHtcbiAgICBhc3NlcnQkMyhwdWIudmFsaWRhdGUoKSwgJ3B1YmxpYyBwb2ludCBub3QgdmFsaWRhdGVkJyk7XG4gIH1cbiAgcmV0dXJuIHB1Yi5tdWwodGhpcy5wcml2KS5nZXRYKCk7XG59O1xuXG4vLyBFQ0RTQVxuS2V5UGFpci5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uIHNpZ24obXNnLCBlbmMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRoaXMuZWMuc2lnbihtc2csIHRoaXMsIGVuYywgb3B0aW9ucyk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobXNnLCBzaWduYXR1cmUpIHtcbiAgcmV0dXJuIHRoaXMuZWMudmVyaWZ5KG1zZywgc2lnbmF0dXJlLCB0aGlzKTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICByZXR1cm4gJzxLZXkgcHJpdjogJyArICh0aGlzLnByaXYgJiYgdGhpcy5wcml2LnRvU3RyaW5nKDE2LCAyKSkgK1xuICAgICAgICAgJyBwdWI6ICcgKyAodGhpcy5wdWIgJiYgdGhpcy5wdWIuaW5zcGVjdCgpKSArICcgPic7XG59O1xuXG4ndXNlIHN0cmljdCc7XG5cblxuXG5cbnZhciBhc3NlcnQkNCA9IHV0aWxzXzEkMS5hc3NlcnQ7XG5cbmZ1bmN0aW9uIFNpZ25hdHVyZShvcHRpb25zLCBlbmMpIHtcbiAgaWYgKG9wdGlvbnMgaW5zdGFuY2VvZiBTaWduYXR1cmUpXG4gICAgcmV0dXJuIG9wdGlvbnM7XG5cbiAgaWYgKHRoaXMuX2ltcG9ydERFUihvcHRpb25zLCBlbmMpKVxuICAgIHJldHVybjtcblxuICBhc3NlcnQkNChvcHRpb25zLnIgJiYgb3B0aW9ucy5zLCAnU2lnbmF0dXJlIHdpdGhvdXQgciBvciBzJyk7XG4gIHRoaXMuciA9IG5ldyBCTihvcHRpb25zLnIsIDE2KTtcbiAgdGhpcy5zID0gbmV3IEJOKG9wdGlvbnMucywgMTYpO1xuICBpZiAob3B0aW9ucy5yZWNvdmVyeVBhcmFtID09PSB1bmRlZmluZWQpXG4gICAgdGhpcy5yZWNvdmVyeVBhcmFtID0gbnVsbDtcbiAgZWxzZVxuICAgIHRoaXMucmVjb3ZlcnlQYXJhbSA9IG9wdGlvbnMucmVjb3ZlcnlQYXJhbTtcbn1cbnZhciBzaWduYXR1cmUgPSBTaWduYXR1cmU7XG5cbmZ1bmN0aW9uIFBvc2l0aW9uKCkge1xuICB0aGlzLnBsYWNlID0gMDtcbn1cblxuZnVuY3Rpb24gZ2V0TGVuZ3RoKGJ1ZiwgcCkge1xuICB2YXIgaW5pdGlhbCA9IGJ1ZltwLnBsYWNlKytdO1xuICBpZiAoIShpbml0aWFsICYgMHg4MCkpIHtcbiAgICByZXR1cm4gaW5pdGlhbDtcbiAgfVxuICB2YXIgb2N0ZXRMZW4gPSBpbml0aWFsICYgMHhmO1xuXG4gIC8vIEluZGVmaW5pdGUgbGVuZ3RoIG9yIG92ZXJmbG93XG4gIGlmIChvY3RldExlbiA9PT0gMCB8fCBvY3RldExlbiA+IDQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgdmFsID0gMDtcbiAgZm9yICh2YXIgaSA9IDAsIG9mZiA9IHAucGxhY2U7IGkgPCBvY3RldExlbjsgaSsrLCBvZmYrKykge1xuICAgIHZhbCA8PD0gODtcbiAgICB2YWwgfD0gYnVmW29mZl07XG4gICAgdmFsID4+Pj0gMDtcbiAgfVxuXG4gIC8vIExlYWRpbmcgemVyb2VzXG4gIGlmICh2YWwgPD0gMHg3Zikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHAucGxhY2UgPSBvZmY7XG4gIHJldHVybiB2YWw7XG59XG5cbmZ1bmN0aW9uIHJtUGFkZGluZyhidWYpIHtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aCAtIDE7XG4gIHdoaWxlICghYnVmW2ldICYmICEoYnVmW2kgKyAxXSAmIDB4ODApICYmIGkgPCBsZW4pIHtcbiAgICBpKys7XG4gIH1cbiAgaWYgKGkgPT09IDApIHtcbiAgICByZXR1cm4gYnVmO1xuICB9XG4gIHJldHVybiBidWYuc2xpY2UoaSk7XG59XG5cblNpZ25hdHVyZS5wcm90b3R5cGUuX2ltcG9ydERFUiA9IGZ1bmN0aW9uIF9pbXBvcnRERVIoZGF0YSwgZW5jKSB7XG4gIGRhdGEgPSB1dGlsc18xJDEudG9BcnJheShkYXRhLCBlbmMpO1xuICB2YXIgcCA9IG5ldyBQb3NpdGlvbigpO1xuICBpZiAoZGF0YVtwLnBsYWNlKytdICE9PSAweDMwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsZW4gPSBnZXRMZW5ndGgoZGF0YSwgcCk7XG4gIGlmIChsZW4gPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICgobGVuICsgcC5wbGFjZSkgIT09IGRhdGEubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChkYXRhW3AucGxhY2UrK10gIT09IDB4MDIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHJsZW4gPSBnZXRMZW5ndGgoZGF0YSwgcCk7XG4gIGlmIChybGVuID09PSBmYWxzZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgciA9IGRhdGEuc2xpY2UocC5wbGFjZSwgcmxlbiArIHAucGxhY2UpO1xuICBwLnBsYWNlICs9IHJsZW47XG4gIGlmIChkYXRhW3AucGxhY2UrK10gIT09IDB4MDIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHNsZW4gPSBnZXRMZW5ndGgoZGF0YSwgcCk7XG4gIGlmIChzbGVuID09PSBmYWxzZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoZGF0YS5sZW5ndGggIT09IHNsZW4gKyBwLnBsYWNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBzID0gZGF0YS5zbGljZShwLnBsYWNlLCBzbGVuICsgcC5wbGFjZSk7XG4gIGlmIChyWzBdID09PSAwKSB7XG4gICAgaWYgKHJbMV0gJiAweDgwKSB7XG4gICAgICByID0gci5zbGljZSgxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTGVhZGluZyB6ZXJvZXNcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgaWYgKHNbMF0gPT09IDApIHtcbiAgICBpZiAoc1sxXSAmIDB4ODApIHtcbiAgICAgIHMgPSBzLnNsaWNlKDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMZWFkaW5nIHplcm9lc1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHRoaXMuciA9IG5ldyBCTihyKTtcbiAgdGhpcy5zID0gbmV3IEJOKHMpO1xuICB0aGlzLnJlY292ZXJ5UGFyYW0gPSBudWxsO1xuXG4gIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gY29uc3RydWN0TGVuZ3RoKGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPCAweDgwKSB7XG4gICAgYXJyLnB1c2gobGVuKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG9jdGV0cyA9IDEgKyAoTWF0aC5sb2cobGVuKSAvIE1hdGguTE4yID4+PiAzKTtcbiAgYXJyLnB1c2gob2N0ZXRzIHwgMHg4MCk7XG4gIHdoaWxlICgtLW9jdGV0cykge1xuICAgIGFyci5wdXNoKChsZW4gPj4+IChvY3RldHMgPDwgMykpICYgMHhmZik7XG4gIH1cbiAgYXJyLnB1c2gobGVuKTtcbn1cblxuU2lnbmF0dXJlLnByb3RvdHlwZS50b0RFUiA9IGZ1bmN0aW9uIHRvREVSKGVuYykge1xuICB2YXIgciA9IHRoaXMuci50b0FycmF5KCk7XG4gIHZhciBzID0gdGhpcy5zLnRvQXJyYXkoKTtcblxuICAvLyBQYWQgdmFsdWVzXG4gIGlmIChyWzBdICYgMHg4MClcbiAgICByID0gWyAwIF0uY29uY2F0KHIpO1xuICAvLyBQYWQgdmFsdWVzXG4gIGlmIChzWzBdICYgMHg4MClcbiAgICBzID0gWyAwIF0uY29uY2F0KHMpO1xuXG4gIHIgPSBybVBhZGRpbmcocik7XG4gIHMgPSBybVBhZGRpbmcocyk7XG5cbiAgd2hpbGUgKCFzWzBdICYmICEoc1sxXSAmIDB4ODApKSB7XG4gICAgcyA9IHMuc2xpY2UoMSk7XG4gIH1cbiAgdmFyIGFyciA9IFsgMHgwMiBdO1xuICBjb25zdHJ1Y3RMZW5ndGgoYXJyLCByLmxlbmd0aCk7XG4gIGFyciA9IGFyci5jb25jYXQocik7XG4gIGFyci5wdXNoKDB4MDIpO1xuICBjb25zdHJ1Y3RMZW5ndGgoYXJyLCBzLmxlbmd0aCk7XG4gIHZhciBiYWNrSGFsZiA9IGFyci5jb25jYXQocyk7XG4gIHZhciByZXMgPSBbIDB4MzAgXTtcbiAgY29uc3RydWN0TGVuZ3RoKHJlcywgYmFja0hhbGYubGVuZ3RoKTtcbiAgcmVzID0gcmVzLmNvbmNhdChiYWNrSGFsZik7XG4gIHJldHVybiB1dGlsc18xJDEuZW5jb2RlKHJlcywgZW5jKTtcbn07XG5cbid1c2Ugc3RyaWN0JztcblxuXG5cblxuXG52YXIgcmFuZCA9IC8qUmljTW9vOmV0aGVyczpyZXF1aXJlKGJyb3JhbmQpKi8oZnVuY3Rpb24oKSB7IHRocm93IG5ldyBFcnJvcigndW5zdXBwb3J0ZWQnKTsgfSk7XG52YXIgYXNzZXJ0JDUgPSB1dGlsc18xJDEuYXNzZXJ0O1xuXG5cblxuXG5mdW5jdGlvbiBFQyhvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBFQykpXG4gICAgcmV0dXJuIG5ldyBFQyhvcHRpb25zKTtcblxuICAvLyBTaG9ydGN1dCBgZWxsaXB0aWMuZWMoY3VydmUtbmFtZSlgXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICBhc3NlcnQkNShPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoY3VydmVzXzEsIG9wdGlvbnMpLFxuICAgICAgJ1Vua25vd24gY3VydmUgJyArIG9wdGlvbnMpO1xuXG4gICAgb3B0aW9ucyA9IGN1cnZlc18xW29wdGlvbnNdO1xuICB9XG5cbiAgLy8gU2hvcnRjdXQgZm9yIGBlbGxpcHRpYy5lYyhlbGxpcHRpYy5jdXJ2ZXMuY3VydmVOYW1lKWBcbiAgaWYgKG9wdGlvbnMgaW5zdGFuY2VvZiBjdXJ2ZXNfMS5QcmVzZXRDdXJ2ZSlcbiAgICBvcHRpb25zID0geyBjdXJ2ZTogb3B0aW9ucyB9O1xuXG4gIHRoaXMuY3VydmUgPSBvcHRpb25zLmN1cnZlLmN1cnZlO1xuICB0aGlzLm4gPSB0aGlzLmN1cnZlLm47XG4gIHRoaXMubmggPSB0aGlzLm4udXNocm4oMSk7XG4gIHRoaXMuZyA9IHRoaXMuY3VydmUuZztcblxuICAvLyBQb2ludCBvbiBjdXJ2ZVxuICB0aGlzLmcgPSBvcHRpb25zLmN1cnZlLmc7XG4gIHRoaXMuZy5wcmVjb21wdXRlKG9wdGlvbnMuY3VydmUubi5iaXRMZW5ndGgoKSArIDEpO1xuXG4gIC8vIEhhc2ggZm9yIGZ1bmN0aW9uIGZvciBEUkJHXG4gIHRoaXMuaGFzaCA9IG9wdGlvbnMuaGFzaCB8fCBvcHRpb25zLmN1cnZlLmhhc2g7XG59XG52YXIgZWMgPSBFQztcblxuRUMucHJvdG90eXBlLmtleVBhaXIgPSBmdW5jdGlvbiBrZXlQYWlyKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBrZXkodGhpcywgb3B0aW9ucyk7XG59O1xuXG5FQy5wcm90b3R5cGUua2V5RnJvbVByaXZhdGUgPSBmdW5jdGlvbiBrZXlGcm9tUHJpdmF0ZShwcml2LCBlbmMpIHtcbiAgcmV0dXJuIGtleS5mcm9tUHJpdmF0ZSh0aGlzLCBwcml2LCBlbmMpO1xufTtcblxuRUMucHJvdG90eXBlLmtleUZyb21QdWJsaWMgPSBmdW5jdGlvbiBrZXlGcm9tUHVibGljKHB1YiwgZW5jKSB7XG4gIHJldHVybiBrZXkuZnJvbVB1YmxpYyh0aGlzLCBwdWIsIGVuYyk7XG59O1xuXG5FQy5wcm90b3R5cGUuZ2VuS2V5UGFpciA9IGZ1bmN0aW9uIGdlbktleVBhaXIob3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpXG4gICAgb3B0aW9ucyA9IHt9O1xuXG4gIC8vIEluc3RhbnRpYXRlIEhtYWNfRFJCR1xuICB2YXIgZHJiZyA9IG5ldyBobWFjRHJiZyh7XG4gICAgaGFzaDogdGhpcy5oYXNoLFxuICAgIHBlcnM6IG9wdGlvbnMucGVycyxcbiAgICBwZXJzRW5jOiBvcHRpb25zLnBlcnNFbmMgfHwgJ3V0ZjgnLFxuICAgIGVudHJvcHk6IG9wdGlvbnMuZW50cm9weSB8fCByYW5kKHRoaXMuaGFzaC5obWFjU3RyZW5ndGgpLFxuICAgIGVudHJvcHlFbmM6IG9wdGlvbnMuZW50cm9weSAmJiBvcHRpb25zLmVudHJvcHlFbmMgfHwgJ3V0ZjgnLFxuICAgIG5vbmNlOiB0aGlzLm4udG9BcnJheSgpLFxuICB9KTtcblxuICB2YXIgYnl0ZXMgPSB0aGlzLm4uYnl0ZUxlbmd0aCgpO1xuICB2YXIgbnMyID0gdGhpcy5uLnN1YihuZXcgQk4oMikpO1xuICBmb3IgKDs7KSB7XG4gICAgdmFyIHByaXYgPSBuZXcgQk4oZHJiZy5nZW5lcmF0ZShieXRlcykpO1xuICAgIGlmIChwcml2LmNtcChuczIpID4gMClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgcHJpdi5pYWRkbigxKTtcbiAgICByZXR1cm4gdGhpcy5rZXlGcm9tUHJpdmF0ZShwcml2KTtcbiAgfVxufTtcblxuRUMucHJvdG90eXBlLl90cnVuY2F0ZVRvTiA9IGZ1bmN0aW9uIF90cnVuY2F0ZVRvTihtc2csIHRydW5jT25seSkge1xuICB2YXIgZGVsdGEgPSBtc2cuYnl0ZUxlbmd0aCgpICogOCAtIHRoaXMubi5iaXRMZW5ndGgoKTtcbiAgaWYgKGRlbHRhID4gMClcbiAgICBtc2cgPSBtc2cudXNocm4oZGVsdGEpO1xuICBpZiAoIXRydW5jT25seSAmJiBtc2cuY21wKHRoaXMubikgPj0gMClcbiAgICByZXR1cm4gbXNnLnN1Yih0aGlzLm4pO1xuICBlbHNlXG4gICAgcmV0dXJuIG1zZztcbn07XG5cbkVDLnByb3RvdHlwZS5zaWduID0gZnVuY3Rpb24gc2lnbihtc2csIGtleSwgZW5jLCBvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZW5jID09PSAnb2JqZWN0Jykge1xuICAgIG9wdGlvbnMgPSBlbmM7XG4gICAgZW5jID0gbnVsbDtcbiAgfVxuICBpZiAoIW9wdGlvbnMpXG4gICAgb3B0aW9ucyA9IHt9O1xuXG4gIGtleSA9IHRoaXMua2V5RnJvbVByaXZhdGUoa2V5LCBlbmMpO1xuICBtc2cgPSB0aGlzLl90cnVuY2F0ZVRvTihuZXcgQk4obXNnLCAxNikpO1xuXG4gIC8vIFplcm8tZXh0ZW5kIGtleSB0byBwcm92aWRlIGVub3VnaCBlbnRyb3B5XG4gIHZhciBieXRlcyA9IHRoaXMubi5ieXRlTGVuZ3RoKCk7XG4gIHZhciBia2V5ID0ga2V5LmdldFByaXZhdGUoKS50b0FycmF5KCdiZScsIGJ5dGVzKTtcblxuICAvLyBaZXJvLWV4dGVuZCBub25jZSB0byBoYXZlIHRoZSBzYW1lIGJ5dGUgc2l6ZSBhcyBOXG4gIHZhciBub25jZSA9IG1zZy50b0FycmF5KCdiZScsIGJ5dGVzKTtcblxuICAvLyBJbnN0YW50aWF0ZSBIbWFjX0RSQkdcbiAgdmFyIGRyYmcgPSBuZXcgaG1hY0RyYmcoe1xuICAgIGhhc2g6IHRoaXMuaGFzaCxcbiAgICBlbnRyb3B5OiBia2V5LFxuICAgIG5vbmNlOiBub25jZSxcbiAgICBwZXJzOiBvcHRpb25zLnBlcnMsXG4gICAgcGVyc0VuYzogb3B0aW9ucy5wZXJzRW5jIHx8ICd1dGY4JyxcbiAgfSk7XG5cbiAgLy8gTnVtYmVyIG9mIGJ5dGVzIHRvIGdlbmVyYXRlXG4gIHZhciBuczEgPSB0aGlzLm4uc3ViKG5ldyBCTigxKSk7XG5cbiAgZm9yICh2YXIgaXRlciA9IDA7IDsgaXRlcisrKSB7XG4gICAgdmFyIGsgPSBvcHRpb25zLmsgP1xuICAgICAgb3B0aW9ucy5rKGl0ZXIpIDpcbiAgICAgIG5ldyBCTihkcmJnLmdlbmVyYXRlKHRoaXMubi5ieXRlTGVuZ3RoKCkpKTtcbiAgICBrID0gdGhpcy5fdHJ1bmNhdGVUb04oaywgdHJ1ZSk7XG4gICAgaWYgKGsuY21wbigxKSA8PSAwIHx8IGsuY21wKG5zMSkgPj0gMClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgdmFyIGtwID0gdGhpcy5nLm11bChrKTtcbiAgICBpZiAoa3AuaXNJbmZpbml0eSgpKVxuICAgICAgY29udGludWU7XG5cbiAgICB2YXIga3BYID0ga3AuZ2V0WCgpO1xuICAgIHZhciByID0ga3BYLnVtb2QodGhpcy5uKTtcbiAgICBpZiAoci5jbXBuKDApID09PSAwKVxuICAgICAgY29udGludWU7XG5cbiAgICB2YXIgcyA9IGsuaW52bSh0aGlzLm4pLm11bChyLm11bChrZXkuZ2V0UHJpdmF0ZSgpKS5pYWRkKG1zZykpO1xuICAgIHMgPSBzLnVtb2QodGhpcy5uKTtcbiAgICBpZiAocy5jbXBuKDApID09PSAwKVxuICAgICAgY29udGludWU7XG5cbiAgICB2YXIgcmVjb3ZlcnlQYXJhbSA9IChrcC5nZXRZKCkuaXNPZGQoKSA/IDEgOiAwKSB8XG4gICAgICAgICAgICAgICAgICAgICAgICAoa3BYLmNtcChyKSAhPT0gMCA/IDIgOiAwKTtcblxuICAgIC8vIFVzZSBjb21wbGVtZW50IG9mIGBzYCwgaWYgaXQgaXMgPiBgbiAvIDJgXG4gICAgaWYgKG9wdGlvbnMuY2Fub25pY2FsICYmIHMuY21wKHRoaXMubmgpID4gMCkge1xuICAgICAgcyA9IHRoaXMubi5zdWIocyk7XG4gICAgICByZWNvdmVyeVBhcmFtIF49IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBzaWduYXR1cmUoeyByOiByLCBzOiBzLCByZWNvdmVyeVBhcmFtOiByZWNvdmVyeVBhcmFtIH0pO1xuICB9XG59O1xuXG5FQy5wcm90b3R5cGUudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5KG1zZywgc2lnbmF0dXJlJDEsIGtleSwgZW5jKSB7XG4gIG1zZyA9IHRoaXMuX3RydW5jYXRlVG9OKG5ldyBCTihtc2csIDE2KSk7XG4gIGtleSA9IHRoaXMua2V5RnJvbVB1YmxpYyhrZXksIGVuYyk7XG4gIHNpZ25hdHVyZSQxID0gbmV3IHNpZ25hdHVyZShzaWduYXR1cmUkMSwgJ2hleCcpO1xuXG4gIC8vIFBlcmZvcm0gcHJpbWl0aXZlIHZhbHVlcyB2YWxpZGF0aW9uXG4gIHZhciByID0gc2lnbmF0dXJlJDEucjtcbiAgdmFyIHMgPSBzaWduYXR1cmUkMS5zO1xuICBpZiAoci5jbXBuKDEpIDwgMCB8fCByLmNtcCh0aGlzLm4pID49IDApXG4gICAgcmV0dXJuIGZhbHNlO1xuICBpZiAocy5jbXBuKDEpIDwgMCB8fCBzLmNtcCh0aGlzLm4pID49IDApXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIFZhbGlkYXRlIHNpZ25hdHVyZVxuICB2YXIgc2ludiA9IHMuaW52bSh0aGlzLm4pO1xuICB2YXIgdTEgPSBzaW52Lm11bChtc2cpLnVtb2QodGhpcy5uKTtcbiAgdmFyIHUyID0gc2ludi5tdWwocikudW1vZCh0aGlzLm4pO1xuICB2YXIgcDtcblxuICBpZiAoIXRoaXMuY3VydmUuX21heHdlbGxUcmljaykge1xuICAgIHAgPSB0aGlzLmcubXVsQWRkKHUxLCBrZXkuZ2V0UHVibGljKCksIHUyKTtcbiAgICBpZiAocC5pc0luZmluaXR5KCkpXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICByZXR1cm4gcC5nZXRYKCkudW1vZCh0aGlzLm4pLmNtcChyKSA9PT0gMDtcbiAgfVxuXG4gIC8vIE5PVEU6IEdyZWcgTWF4d2VsbCdzIHRyaWNrLCBpbnNwaXJlZCBieTpcbiAgLy8gaHR0cHM6Ly9naXQuaW8vdmFkM0tcblxuICBwID0gdGhpcy5nLmptdWxBZGQodTEsIGtleS5nZXRQdWJsaWMoKSwgdTIpO1xuICBpZiAocC5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIENvbXBhcmUgYHAueGAgb2YgSmFjb2JpYW4gcG9pbnQgd2l0aCBgcmAsXG4gIC8vIHRoaXMgd2lsbCBkbyBgcC54ID09IHIgKiBwLnpeMmAgaW5zdGVhZCBvZiBtdWx0aXBseWluZyBgcC54YCBieSB0aGVcbiAgLy8gaW52ZXJzZSBvZiBgcC56XjJgXG4gIHJldHVybiBwLmVxWFRvUChyKTtcbn07XG5cbkVDLnByb3RvdHlwZS5yZWNvdmVyUHViS2V5ID0gZnVuY3Rpb24obXNnLCBzaWduYXR1cmUkMSwgaiwgZW5jKSB7XG4gIGFzc2VydCQ1KCgzICYgaikgPT09IGosICdUaGUgcmVjb3ZlcnkgcGFyYW0gaXMgbW9yZSB0aGFuIHR3byBiaXRzJyk7XG4gIHNpZ25hdHVyZSQxID0gbmV3IHNpZ25hdHVyZShzaWduYXR1cmUkMSwgZW5jKTtcblxuICB2YXIgbiA9IHRoaXMubjtcbiAgdmFyIGUgPSBuZXcgQk4obXNnKTtcbiAgdmFyIHIgPSBzaWduYXR1cmUkMS5yO1xuICB2YXIgcyA9IHNpZ25hdHVyZSQxLnM7XG5cbiAgLy8gQSBzZXQgTFNCIHNpZ25pZmllcyB0aGF0IHRoZSB5LWNvb3JkaW5hdGUgaXMgb2RkXG4gIHZhciBpc1lPZGQgPSBqICYgMTtcbiAgdmFyIGlzU2Vjb25kS2V5ID0gaiA+PiAxO1xuICBpZiAoci5jbXAodGhpcy5jdXJ2ZS5wLnVtb2QodGhpcy5jdXJ2ZS5uKSkgPj0gMCAmJiBpc1NlY29uZEtleSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBmaW5kIHNlbmNvbmQga2V5IGNhbmRpbmF0ZScpO1xuXG4gIC8vIDEuMS4gTGV0IHggPSByICsgam4uXG4gIGlmIChpc1NlY29uZEtleSlcbiAgICByID0gdGhpcy5jdXJ2ZS5wb2ludEZyb21YKHIuYWRkKHRoaXMuY3VydmUubiksIGlzWU9kZCk7XG4gIGVsc2VcbiAgICByID0gdGhpcy5jdXJ2ZS5wb2ludEZyb21YKHIsIGlzWU9kZCk7XG5cbiAgdmFyIHJJbnYgPSBzaWduYXR1cmUkMS5yLmludm0obik7XG4gIHZhciBzMSA9IG4uc3ViKGUpLm11bChySW52KS51bW9kKG4pO1xuICB2YXIgczIgPSBzLm11bChySW52KS51bW9kKG4pO1xuXG4gIC8vIDEuNi4xIENvbXB1dGUgUSA9IHJeLTEgKHNSIC0gIGVHKVxuICAvLyAgICAgICAgICAgICAgIFEgPSByXi0xIChzUiArIC1lRylcbiAgcmV0dXJuIHRoaXMuZy5tdWxBZGQoczEsIHIsIHMyKTtcbn07XG5cbkVDLnByb3RvdHlwZS5nZXRLZXlSZWNvdmVyeVBhcmFtID0gZnVuY3Rpb24oZSwgc2lnbmF0dXJlJDEsIFEsIGVuYykge1xuICBzaWduYXR1cmUkMSA9IG5ldyBzaWduYXR1cmUoc2lnbmF0dXJlJDEsIGVuYyk7XG4gIGlmIChzaWduYXR1cmUkMS5yZWNvdmVyeVBhcmFtICE9PSBudWxsKVxuICAgIHJldHVybiBzaWduYXR1cmUkMS5yZWNvdmVyeVBhcmFtO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgdmFyIFFwcmltZTtcbiAgICB0cnkge1xuICAgICAgUXByaW1lID0gdGhpcy5yZWNvdmVyUHViS2V5KGUsIHNpZ25hdHVyZSQxLCBpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoUXByaW1lLmVxKFEpKVxuICAgICAgcmV0dXJuIGk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gZmluZCB2YWxpZCByZWNvdmVyeSBmYWN0b3InKTtcbn07XG5cbnZhciBlbGxpcHRpY18xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZWxsaXB0aWMgPSBleHBvcnRzO1xuXG5lbGxpcHRpYy52ZXJzaW9uID0gLypSaWNNb286ZXRoZXJzKi97IHZlcnNpb246IFwiNi41LjRcIiB9LnZlcnNpb247XG5lbGxpcHRpYy51dGlscyA9IHV0aWxzXzEkMTtcbmVsbGlwdGljLnJhbmQgPSAvKlJpY01vbzpldGhlcnM6cmVxdWlyZShicm9yYW5kKSovKGZ1bmN0aW9uKCkgeyB0aHJvdyBuZXcgRXJyb3IoJ3Vuc3VwcG9ydGVkJyk7IH0pO1xuZWxsaXB0aWMuY3VydmUgPSBjdXJ2ZV8xO1xuZWxsaXB0aWMuY3VydmVzID0gY3VydmVzXzE7XG5cbi8vIFByb3RvY29sc1xuZWxsaXB0aWMuZWMgPSBlYztcbmVsbGlwdGljLmVkZHNhID0gLypSaWNNb286ZXRoZXJzOnJlcXVpcmUoLi9lbGxpcHRpYy9lZGRzYSkqLyhudWxsKTtcbn0pO1xuXG52YXIgRUMkMSA9IGVsbGlwdGljXzEuZWM7XG5cbmV4cG9ydCB7IEVDJDEgYXMgRUMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVsbGlwdGljLmpzLm1hcFxuIiwiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSBcInNpZ25pbmcta2V5LzUuNi4yXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdmVyc2lvbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7IEVDIH0gZnJvbSBcIi4vZWxsaXB0aWNcIjtcbmltcG9ydCB7IGFycmF5aWZ5LCBoZXhEYXRhTGVuZ3RoLCBoZXhsaWZ5LCBoZXhaZXJvUGFkLCBzcGxpdFNpZ25hdHVyZSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9ieXRlc1wiO1xuaW1wb3J0IHsgZGVmaW5lUmVhZE9ubHkgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvcHJvcGVydGllc1wiO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2xvZ2dlclwiO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuL192ZXJzaW9uXCI7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKHZlcnNpb24pO1xubGV0IF9jdXJ2ZSA9IG51bGw7XG5mdW5jdGlvbiBnZXRDdXJ2ZSgpIHtcbiAgICBpZiAoIV9jdXJ2ZSkge1xuICAgICAgICBfY3VydmUgPSBuZXcgRUMoXCJzZWNwMjU2azFcIik7XG4gICAgfVxuICAgIHJldHVybiBfY3VydmU7XG59XG5leHBvcnQgY2xhc3MgU2lnbmluZ0tleSB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZUtleSkge1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcImN1cnZlXCIsIFwic2VjcDI1NmsxXCIpO1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcInByaXZhdGVLZXlcIiwgaGV4bGlmeShwcml2YXRlS2V5KSk7XG4gICAgICAgIGlmIChoZXhEYXRhTGVuZ3RoKHRoaXMucHJpdmF0ZUtleSkgIT09IDMyKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBwcml2YXRlIGtleVwiLCBcInByaXZhdGVLZXlcIiwgXCJbWyBSRURBQ1RFRCBdXVwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBrZXlQYWlyID0gZ2V0Q3VydmUoKS5rZXlGcm9tUHJpdmF0ZShhcnJheWlmeSh0aGlzLnByaXZhdGVLZXkpKTtcbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJwdWJsaWNLZXlcIiwgXCIweFwiICsga2V5UGFpci5nZXRQdWJsaWMoZmFsc2UsIFwiaGV4XCIpKTtcbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJjb21wcmVzc2VkUHVibGljS2V5XCIsIFwiMHhcIiArIGtleVBhaXIuZ2V0UHVibGljKHRydWUsIFwiaGV4XCIpKTtcbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJfaXNTaWduaW5nS2V5XCIsIHRydWUpO1xuICAgIH1cbiAgICBfYWRkUG9pbnQob3RoZXIpIHtcbiAgICAgICAgY29uc3QgcDAgPSBnZXRDdXJ2ZSgpLmtleUZyb21QdWJsaWMoYXJyYXlpZnkodGhpcy5wdWJsaWNLZXkpKTtcbiAgICAgICAgY29uc3QgcDEgPSBnZXRDdXJ2ZSgpLmtleUZyb21QdWJsaWMoYXJyYXlpZnkob3RoZXIpKTtcbiAgICAgICAgcmV0dXJuIFwiMHhcIiArIHAwLnB1Yi5hZGQocDEucHViKS5lbmNvZGVDb21wcmVzc2VkKFwiaGV4XCIpO1xuICAgIH1cbiAgICBzaWduRGlnZXN0KGRpZ2VzdCkge1xuICAgICAgICBjb25zdCBrZXlQYWlyID0gZ2V0Q3VydmUoKS5rZXlGcm9tUHJpdmF0ZShhcnJheWlmeSh0aGlzLnByaXZhdGVLZXkpKTtcbiAgICAgICAgY29uc3QgZGlnZXN0Qnl0ZXMgPSBhcnJheWlmeShkaWdlc3QpO1xuICAgICAgICBpZiAoZGlnZXN0Qnl0ZXMubGVuZ3RoICE9PSAzMikge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImJhZCBkaWdlc3QgbGVuZ3RoXCIsIFwiZGlnZXN0XCIsIGRpZ2VzdCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2lnbmF0dXJlID0ga2V5UGFpci5zaWduKGRpZ2VzdEJ5dGVzLCB7IGNhbm9uaWNhbDogdHJ1ZSB9KTtcbiAgICAgICAgcmV0dXJuIHNwbGl0U2lnbmF0dXJlKHtcbiAgICAgICAgICAgIHJlY292ZXJ5UGFyYW06IHNpZ25hdHVyZS5yZWNvdmVyeVBhcmFtLFxuICAgICAgICAgICAgcjogaGV4WmVyb1BhZChcIjB4XCIgKyBzaWduYXR1cmUuci50b1N0cmluZygxNiksIDMyKSxcbiAgICAgICAgICAgIHM6IGhleFplcm9QYWQoXCIweFwiICsgc2lnbmF0dXJlLnMudG9TdHJpbmcoMTYpLCAzMiksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb21wdXRlU2hhcmVkU2VjcmV0KG90aGVyS2V5KSB7XG4gICAgICAgIGNvbnN0IGtleVBhaXIgPSBnZXRDdXJ2ZSgpLmtleUZyb21Qcml2YXRlKGFycmF5aWZ5KHRoaXMucHJpdmF0ZUtleSkpO1xuICAgICAgICBjb25zdCBvdGhlcktleVBhaXIgPSBnZXRDdXJ2ZSgpLmtleUZyb21QdWJsaWMoYXJyYXlpZnkoY29tcHV0ZVB1YmxpY0tleShvdGhlcktleSkpKTtcbiAgICAgICAgcmV0dXJuIGhleFplcm9QYWQoXCIweFwiICsga2V5UGFpci5kZXJpdmUob3RoZXJLZXlQYWlyLmdldFB1YmxpYygpKS50b1N0cmluZygxNiksIDMyKTtcbiAgICB9XG4gICAgc3RhdGljIGlzU2lnbmluZ0tleSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX2lzU2lnbmluZ0tleSk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHJlY292ZXJQdWJsaWNLZXkoZGlnZXN0LCBzaWduYXR1cmUpIHtcbiAgICBjb25zdCBzaWcgPSBzcGxpdFNpZ25hdHVyZShzaWduYXR1cmUpO1xuICAgIGNvbnN0IHJzID0geyByOiBhcnJheWlmeShzaWcuciksIHM6IGFycmF5aWZ5KHNpZy5zKSB9O1xuICAgIHJldHVybiBcIjB4XCIgKyBnZXRDdXJ2ZSgpLnJlY292ZXJQdWJLZXkoYXJyYXlpZnkoZGlnZXN0KSwgcnMsIHNpZy5yZWNvdmVyeVBhcmFtKS5lbmNvZGUoXCJoZXhcIiwgZmFsc2UpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVQdWJsaWNLZXkoa2V5LCBjb21wcmVzc2VkKSB7XG4gICAgY29uc3QgYnl0ZXMgPSBhcnJheWlmeShrZXkpO1xuICAgIGlmIChieXRlcy5sZW5ndGggPT09IDMyKSB7XG4gICAgICAgIGNvbnN0IHNpZ25pbmdLZXkgPSBuZXcgU2lnbmluZ0tleShieXRlcyk7XG4gICAgICAgIGlmIChjb21wcmVzc2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gXCIweFwiICsgZ2V0Q3VydmUoKS5rZXlGcm9tUHJpdmF0ZShieXRlcykuZ2V0UHVibGljKHRydWUsIFwiaGV4XCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaWduaW5nS2V5LnB1YmxpY0tleTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYnl0ZXMubGVuZ3RoID09PSAzMykge1xuICAgICAgICBpZiAoY29tcHJlc3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuIGhleGxpZnkoYnl0ZXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcIjB4XCIgKyBnZXRDdXJ2ZSgpLmtleUZyb21QdWJsaWMoYnl0ZXMpLmdldFB1YmxpYyhmYWxzZSwgXCJoZXhcIik7XG4gICAgfVxuICAgIGVsc2UgaWYgKGJ5dGVzLmxlbmd0aCA9PT0gNjUpIHtcbiAgICAgICAgaWYgKCFjb21wcmVzc2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gaGV4bGlmeShieXRlcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFwiMHhcIiArIGdldEN1cnZlKCkua2V5RnJvbVB1YmxpYyhieXRlcykuZ2V0UHVibGljKHRydWUsIFwiaGV4XCIpO1xuICAgIH1cbiAgICByZXR1cm4gbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgcHVibGljIG9yIHByaXZhdGUga2V5XCIsIFwia2V5XCIsIFwiW1JFREFDVEVEXVwiKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImV4cG9ydCBjb25zdCB2ZXJzaW9uID0gXCJ0cmFuc2FjdGlvbnMvNS42LjJcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV92ZXJzaW9uLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHsgZ2V0QWRkcmVzcyB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9hZGRyZXNzXCI7XG5pbXBvcnQgeyBCaWdOdW1iZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYmlnbnVtYmVyXCI7XG5pbXBvcnQgeyBhcnJheWlmeSwgaGV4Q29uY2F0LCBoZXhEYXRhTGVuZ3RoLCBoZXhEYXRhU2xpY2UsIGhleGxpZnksIGhleFplcm9QYWQsIGlzQnl0ZXNMaWtlLCBzcGxpdFNpZ25hdHVyZSwgc3RyaXBaZXJvcywgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcbmltcG9ydCB7IFplcm8gfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBrZWNjYWsyNTYgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3Qva2VjY2FrMjU2XCI7XG5pbXBvcnQgeyBjaGVja1Byb3BlcnRpZXMgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvcHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUkxQIGZyb20gXCJAZXRoZXJzcHJvamVjdC9ybHBcIjtcbmltcG9ydCB7IGNvbXB1dGVQdWJsaWNLZXksIHJlY292ZXJQdWJsaWNLZXkgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3Qvc2lnbmluZy1rZXlcIjtcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcbmV4cG9ydCB2YXIgVHJhbnNhY3Rpb25UeXBlcztcbihmdW5jdGlvbiAoVHJhbnNhY3Rpb25UeXBlcykge1xuICAgIFRyYW5zYWN0aW9uVHlwZXNbVHJhbnNhY3Rpb25UeXBlc1tcImxlZ2FjeVwiXSA9IDBdID0gXCJsZWdhY3lcIjtcbiAgICBUcmFuc2FjdGlvblR5cGVzW1RyYW5zYWN0aW9uVHlwZXNbXCJlaXAyOTMwXCJdID0gMV0gPSBcImVpcDI5MzBcIjtcbiAgICBUcmFuc2FjdGlvblR5cGVzW1RyYW5zYWN0aW9uVHlwZXNbXCJlaXAxNTU5XCJdID0gMl0gPSBcImVpcDE1NTlcIjtcbn0pKFRyYW5zYWN0aW9uVHlwZXMgfHwgKFRyYW5zYWN0aW9uVHlwZXMgPSB7fSkpO1xuO1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuZnVuY3Rpb24gaGFuZGxlQWRkcmVzcyh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gXCIweFwiKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0QWRkcmVzcyh2YWx1ZSk7XG59XG5mdW5jdGlvbiBoYW5kbGVOdW1iZXIodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IFwiMHhcIikge1xuICAgICAgICByZXR1cm4gWmVybztcbiAgICB9XG4gICAgcmV0dXJuIEJpZ051bWJlci5mcm9tKHZhbHVlKTtcbn1cbi8vIExlZ2FjeSBUcmFuc2FjdGlvbiBGaWVsZHNcbmNvbnN0IHRyYW5zYWN0aW9uRmllbGRzID0gW1xuICAgIHsgbmFtZTogXCJub25jZVwiLCBtYXhMZW5ndGg6IDMyLCBudW1lcmljOiB0cnVlIH0sXG4gICAgeyBuYW1lOiBcImdhc1ByaWNlXCIsIG1heExlbmd0aDogMzIsIG51bWVyaWM6IHRydWUgfSxcbiAgICB7IG5hbWU6IFwiZ2FzTGltaXRcIiwgbWF4TGVuZ3RoOiAzMiwgbnVtZXJpYzogdHJ1ZSB9LFxuICAgIHsgbmFtZTogXCJ0b1wiLCBsZW5ndGg6IDIwIH0sXG4gICAgeyBuYW1lOiBcInZhbHVlXCIsIG1heExlbmd0aDogMzIsIG51bWVyaWM6IHRydWUgfSxcbiAgICB7IG5hbWU6IFwiZGF0YVwiIH0sXG5dO1xuY29uc3QgYWxsb3dlZFRyYW5zYWN0aW9uS2V5cyA9IHtcbiAgICBjaGFpbklkOiB0cnVlLCBkYXRhOiB0cnVlLCBnYXNMaW1pdDogdHJ1ZSwgZ2FzUHJpY2U6IHRydWUsIG5vbmNlOiB0cnVlLCB0bzogdHJ1ZSwgdHlwZTogdHJ1ZSwgdmFsdWU6IHRydWVcbn07XG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZUFkZHJlc3Moa2V5KSB7XG4gICAgY29uc3QgcHVibGljS2V5ID0gY29tcHV0ZVB1YmxpY0tleShrZXkpO1xuICAgIHJldHVybiBnZXRBZGRyZXNzKGhleERhdGFTbGljZShrZWNjYWsyNTYoaGV4RGF0YVNsaWNlKHB1YmxpY0tleSwgMSkpLCAxMikpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlY292ZXJBZGRyZXNzKGRpZ2VzdCwgc2lnbmF0dXJlKSB7XG4gICAgcmV0dXJuIGNvbXB1dGVBZGRyZXNzKHJlY292ZXJQdWJsaWNLZXkoYXJyYXlpZnkoZGlnZXN0KSwgc2lnbmF0dXJlKSk7XG59XG5mdW5jdGlvbiBmb3JtYXROdW1iZXIodmFsdWUsIG5hbWUpIHtcbiAgICBjb25zdCByZXN1bHQgPSBzdHJpcFplcm9zKEJpZ051bWJlci5mcm9tKHZhbHVlKS50b0hleFN0cmluZygpKTtcbiAgICBpZiAocmVzdWx0Lmxlbmd0aCA+IDMyKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGxlbmd0aCBmb3IgXCIgKyBuYW1lLCAoXCJ0cmFuc2FjdGlvbjpcIiArIG5hbWUpLCB2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBhY2Nlc3NTZXRpZnkoYWRkciwgc3RvcmFnZUtleXMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBhZGRyZXNzOiBnZXRBZGRyZXNzKGFkZHIpLFxuICAgICAgICBzdG9yYWdlS2V5czogKHN0b3JhZ2VLZXlzIHx8IFtdKS5tYXAoKHN0b3JhZ2VLZXksIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoaGV4RGF0YUxlbmd0aChzdG9yYWdlS2V5KSAhPT0gMzIpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBhY2Nlc3MgbGlzdCBzdG9yYWdlS2V5XCIsIGBhY2Nlc3NMaXN0WyR7YWRkcn06JHtpbmRleH1dYCwgc3RvcmFnZUtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3RvcmFnZUtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9KVxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gYWNjZXNzTGlzdGlmeSh2YWx1ZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWUubWFwKChzZXQsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzZXQpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNldC5sZW5ndGggPiAyKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJhY2Nlc3MgbGlzdCBleHBlY3RlZCB0byBiZSBbIGFkZHJlc3MsIHN0b3JhZ2VLZXlzW10gXVwiLCBgdmFsdWVbJHtpbmRleH1dYCwgc2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjY2Vzc1NldGlmeShzZXRbMF0sIHNldFsxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYWNjZXNzU2V0aWZ5KHNldC5hZGRyZXNzLCBzZXQuc3RvcmFnZUtleXMpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gT2JqZWN0LmtleXModmFsdWUpLm1hcCgoYWRkcikgPT4ge1xuICAgICAgICBjb25zdCBzdG9yYWdlS2V5cyA9IHZhbHVlW2FkZHJdLnJlZHVjZSgoYWNjdW0sIHN0b3JhZ2VLZXkpID0+IHtcbiAgICAgICAgICAgIGFjY3VtW3N0b3JhZ2VLZXldID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBhY2N1bTtcbiAgICAgICAgfSwge30pO1xuICAgICAgICByZXR1cm4gYWNjZXNzU2V0aWZ5KGFkZHIsIE9iamVjdC5rZXlzKHN0b3JhZ2VLZXlzKS5zb3J0KCkpO1xuICAgIH0pO1xuICAgIHJlc3VsdC5zb3J0KChhLCBiKSA9PiAoYS5hZGRyZXNzLmxvY2FsZUNvbXBhcmUoYi5hZGRyZXNzKSkpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBmb3JtYXRBY2Nlc3NMaXN0KHZhbHVlKSB7XG4gICAgcmV0dXJuIGFjY2Vzc0xpc3RpZnkodmFsdWUpLm1hcCgoc2V0KSA9PiBbc2V0LmFkZHJlc3MsIHNldC5zdG9yYWdlS2V5c10pO1xufVxuZnVuY3Rpb24gX3NlcmlhbGl6ZUVpcDE1NTkodHJhbnNhY3Rpb24sIHNpZ25hdHVyZSkge1xuICAgIC8vIElmIHRoZXJlIGlzIGFuIGV4cGxpY2l0IGdhc1ByaWNlLCBtYWtlIHN1cmUgaXQgbWF0Y2hlcyB0aGVcbiAgICAvLyBFSVAtMTU1OSBmZWVzOyBvdGhlcndpc2UgdGhleSBtYXkgbm90IHVuZGVyc3RhbmQgd2hhdCB0aGV5XG4gICAgLy8gdGhpbmsgdGhleSBhcmUgc2V0dGluZyBpbiB0ZXJtcyBvZiBmZWUuXG4gICAgaWYgKHRyYW5zYWN0aW9uLmdhc1ByaWNlICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgZ2FzUHJpY2UgPSBCaWdOdW1iZXIuZnJvbSh0cmFuc2FjdGlvbi5nYXNQcmljZSk7XG4gICAgICAgIGNvbnN0IG1heEZlZVBlckdhcyA9IEJpZ051bWJlci5mcm9tKHRyYW5zYWN0aW9uLm1heEZlZVBlckdhcyB8fCAwKTtcbiAgICAgICAgaWYgKCFnYXNQcmljZS5lcShtYXhGZWVQZXJHYXMpKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwibWlzbWF0Y2ggRUlQLTE1NTkgZ2FzUHJpY2UgIT0gbWF4RmVlUGVyR2FzXCIsIFwidHhcIiwge1xuICAgICAgICAgICAgICAgIGdhc1ByaWNlLCBtYXhGZWVQZXJHYXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGZpZWxkcyA9IFtcbiAgICAgICAgZm9ybWF0TnVtYmVyKHRyYW5zYWN0aW9uLmNoYWluSWQgfHwgMCwgXCJjaGFpbklkXCIpLFxuICAgICAgICBmb3JtYXROdW1iZXIodHJhbnNhY3Rpb24ubm9uY2UgfHwgMCwgXCJub25jZVwiKSxcbiAgICAgICAgZm9ybWF0TnVtYmVyKHRyYW5zYWN0aW9uLm1heFByaW9yaXR5RmVlUGVyR2FzIHx8IDAsIFwibWF4UHJpb3JpdHlGZWVQZXJHYXNcIiksXG4gICAgICAgIGZvcm1hdE51bWJlcih0cmFuc2FjdGlvbi5tYXhGZWVQZXJHYXMgfHwgMCwgXCJtYXhGZWVQZXJHYXNcIiksXG4gICAgICAgIGZvcm1hdE51bWJlcih0cmFuc2FjdGlvbi5nYXNMaW1pdCB8fCAwLCBcImdhc0xpbWl0XCIpLFxuICAgICAgICAoKHRyYW5zYWN0aW9uLnRvICE9IG51bGwpID8gZ2V0QWRkcmVzcyh0cmFuc2FjdGlvbi50bykgOiBcIjB4XCIpLFxuICAgICAgICBmb3JtYXROdW1iZXIodHJhbnNhY3Rpb24udmFsdWUgfHwgMCwgXCJ2YWx1ZVwiKSxcbiAgICAgICAgKHRyYW5zYWN0aW9uLmRhdGEgfHwgXCIweFwiKSxcbiAgICAgICAgKGZvcm1hdEFjY2Vzc0xpc3QodHJhbnNhY3Rpb24uYWNjZXNzTGlzdCB8fCBbXSkpXG4gICAgXTtcbiAgICBpZiAoc2lnbmF0dXJlKSB7XG4gICAgICAgIGNvbnN0IHNpZyA9IHNwbGl0U2lnbmF0dXJlKHNpZ25hdHVyZSk7XG4gICAgICAgIGZpZWxkcy5wdXNoKGZvcm1hdE51bWJlcihzaWcucmVjb3ZlcnlQYXJhbSwgXCJyZWNvdmVyeVBhcmFtXCIpKTtcbiAgICAgICAgZmllbGRzLnB1c2goc3RyaXBaZXJvcyhzaWcucikpO1xuICAgICAgICBmaWVsZHMucHVzaChzdHJpcFplcm9zKHNpZy5zKSk7XG4gICAgfVxuICAgIHJldHVybiBoZXhDb25jYXQoW1wiMHgwMlwiLCBSTFAuZW5jb2RlKGZpZWxkcyldKTtcbn1cbmZ1bmN0aW9uIF9zZXJpYWxpemVFaXAyOTMwKHRyYW5zYWN0aW9uLCBzaWduYXR1cmUpIHtcbiAgICBjb25zdCBmaWVsZHMgPSBbXG4gICAgICAgIGZvcm1hdE51bWJlcih0cmFuc2FjdGlvbi5jaGFpbklkIHx8IDAsIFwiY2hhaW5JZFwiKSxcbiAgICAgICAgZm9ybWF0TnVtYmVyKHRyYW5zYWN0aW9uLm5vbmNlIHx8IDAsIFwibm9uY2VcIiksXG4gICAgICAgIGZvcm1hdE51bWJlcih0cmFuc2FjdGlvbi5nYXNQcmljZSB8fCAwLCBcImdhc1ByaWNlXCIpLFxuICAgICAgICBmb3JtYXROdW1iZXIodHJhbnNhY3Rpb24uZ2FzTGltaXQgfHwgMCwgXCJnYXNMaW1pdFwiKSxcbiAgICAgICAgKCh0cmFuc2FjdGlvbi50byAhPSBudWxsKSA/IGdldEFkZHJlc3ModHJhbnNhY3Rpb24udG8pIDogXCIweFwiKSxcbiAgICAgICAgZm9ybWF0TnVtYmVyKHRyYW5zYWN0aW9uLnZhbHVlIHx8IDAsIFwidmFsdWVcIiksXG4gICAgICAgICh0cmFuc2FjdGlvbi5kYXRhIHx8IFwiMHhcIiksXG4gICAgICAgIChmb3JtYXRBY2Nlc3NMaXN0KHRyYW5zYWN0aW9uLmFjY2Vzc0xpc3QgfHwgW10pKVxuICAgIF07XG4gICAgaWYgKHNpZ25hdHVyZSkge1xuICAgICAgICBjb25zdCBzaWcgPSBzcGxpdFNpZ25hdHVyZShzaWduYXR1cmUpO1xuICAgICAgICBmaWVsZHMucHVzaChmb3JtYXROdW1iZXIoc2lnLnJlY292ZXJ5UGFyYW0sIFwicmVjb3ZlcnlQYXJhbVwiKSk7XG4gICAgICAgIGZpZWxkcy5wdXNoKHN0cmlwWmVyb3Moc2lnLnIpKTtcbiAgICAgICAgZmllbGRzLnB1c2goc3RyaXBaZXJvcyhzaWcucykpO1xuICAgIH1cbiAgICByZXR1cm4gaGV4Q29uY2F0KFtcIjB4MDFcIiwgUkxQLmVuY29kZShmaWVsZHMpXSk7XG59XG4vLyBMZWdhY3kgVHJhbnNhY3Rpb25zIGFuZCBFSVAtMTU1XG5mdW5jdGlvbiBfc2VyaWFsaXplKHRyYW5zYWN0aW9uLCBzaWduYXR1cmUpIHtcbiAgICBjaGVja1Byb3BlcnRpZXModHJhbnNhY3Rpb24sIGFsbG93ZWRUcmFuc2FjdGlvbktleXMpO1xuICAgIGNvbnN0IHJhdyA9IFtdO1xuICAgIHRyYW5zYWN0aW9uRmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkSW5mbykge1xuICAgICAgICBsZXQgdmFsdWUgPSB0cmFuc2FjdGlvbltmaWVsZEluZm8ubmFtZV0gfHwgKFtdKTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHt9O1xuICAgICAgICBpZiAoZmllbGRJbmZvLm51bWVyaWMpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuaGV4UGFkID0gXCJsZWZ0XCI7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgPSBhcnJheWlmeShoZXhsaWZ5KHZhbHVlLCBvcHRpb25zKSk7XG4gICAgICAgIC8vIEZpeGVkLXdpZHRoIGZpZWxkXG4gICAgICAgIGlmIChmaWVsZEluZm8ubGVuZ3RoICYmIHZhbHVlLmxlbmd0aCAhPT0gZmllbGRJbmZvLmxlbmd0aCAmJiB2YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBsZW5ndGggZm9yIFwiICsgZmllbGRJbmZvLm5hbWUsIChcInRyYW5zYWN0aW9uOlwiICsgZmllbGRJbmZvLm5hbWUpLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVmFyaWFibGUtd2lkdGggKHdpdGggYSBtYXhpbXVtKVxuICAgICAgICBpZiAoZmllbGRJbmZvLm1heExlbmd0aCkge1xuICAgICAgICAgICAgdmFsdWUgPSBzdHJpcFplcm9zKHZhbHVlKTtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiBmaWVsZEluZm8ubWF4TGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgbGVuZ3RoIGZvciBcIiArIGZpZWxkSW5mby5uYW1lLCAoXCJ0cmFuc2FjdGlvbjpcIiArIGZpZWxkSW5mby5uYW1lKSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJhdy5wdXNoKGhleGxpZnkodmFsdWUpKTtcbiAgICB9KTtcbiAgICBsZXQgY2hhaW5JZCA9IDA7XG4gICAgaWYgKHRyYW5zYWN0aW9uLmNoYWluSWQgIT0gbnVsbCkge1xuICAgICAgICAvLyBBIGNoYWluSWQgd2FzIHByb3ZpZGVkOyBpZiBub24temVybyB3ZSdsbCB1c2UgRUlQLTE1NVxuICAgICAgICBjaGFpbklkID0gdHJhbnNhY3Rpb24uY2hhaW5JZDtcbiAgICAgICAgaWYgKHR5cGVvZiAoY2hhaW5JZCkgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHRyYW5zYWN0aW9uLmNoYWluSWRcIiwgXCJ0cmFuc2FjdGlvblwiLCB0cmFuc2FjdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoc2lnbmF0dXJlICYmICFpc0J5dGVzTGlrZShzaWduYXR1cmUpICYmIHNpZ25hdHVyZS52ID4gMjgpIHtcbiAgICAgICAgLy8gTm8gY2hhaW5JZCBwcm92aWRlZCwgYnV0IHRoZSBzaWduYXR1cmUgaXMgc2lnbmluZyB3aXRoIEVJUC0xNTU7IGRlcml2ZSBjaGFpbklkXG4gICAgICAgIGNoYWluSWQgPSBNYXRoLmZsb29yKChzaWduYXR1cmUudiAtIDM1KSAvIDIpO1xuICAgIH1cbiAgICAvLyBXZSBoYXZlIGFuIEVJUC0xNTUgdHJhbnNhY3Rpb24gKGNoYWluSWQgd2FzIHNwZWNpZmllZCBhbmQgbm9uLXplcm8pXG4gICAgaWYgKGNoYWluSWQgIT09IDApIHtcbiAgICAgICAgcmF3LnB1c2goaGV4bGlmeShjaGFpbklkKSk7IC8vIEBUT0RPOiBoZXhWYWx1ZT9cbiAgICAgICAgcmF3LnB1c2goXCIweFwiKTtcbiAgICAgICAgcmF3LnB1c2goXCIweFwiKTtcbiAgICB9XG4gICAgLy8gUmVxdWVzdGluZyBhbiB1bnNpZ25lZCB0cmFuc2FjdGlvblxuICAgIGlmICghc2lnbmF0dXJlKSB7XG4gICAgICAgIHJldHVybiBSTFAuZW5jb2RlKHJhdyk7XG4gICAgfVxuICAgIC8vIFRoZSBzcGxpdFNpZ25hdHVyZSB3aWxsIGVuc3VyZSB0aGUgdHJhbnNhY3Rpb24gaGFzIGEgcmVjb3ZlcnlQYXJhbSBpbiB0aGVcbiAgICAvLyBjYXNlIHRoYXQgdGhlIHNpZ25UcmFuc2FjdGlvbiBmdW5jdGlvbiBvbmx5IGFkZHMgYSB2LlxuICAgIGNvbnN0IHNpZyA9IHNwbGl0U2lnbmF0dXJlKHNpZ25hdHVyZSk7XG4gICAgLy8gV2UgcHVzaGVkIGEgY2hhaW5JZCBhbmQgbnVsbCByLCBzIG9uIGZvciBoYXNoaW5nIG9ubHk7IHJlbW92ZSB0aG9zZVxuICAgIGxldCB2ID0gMjcgKyBzaWcucmVjb3ZlcnlQYXJhbTtcbiAgICBpZiAoY2hhaW5JZCAhPT0gMCkge1xuICAgICAgICByYXcucG9wKCk7XG4gICAgICAgIHJhdy5wb3AoKTtcbiAgICAgICAgcmF3LnBvcCgpO1xuICAgICAgICB2ICs9IGNoYWluSWQgKiAyICsgODtcbiAgICAgICAgLy8gSWYgYW4gRUlQLTE1NSB2IChkaXJlY3RseSBvciBpbmRpcmVjdGx5OyBtYXliZSBfdnMpIHdhcyBwcm92aWRlZCwgY2hlY2sgaXQhXG4gICAgICAgIGlmIChzaWcudiA+IDI4ICYmIHNpZy52ICE9PSB2KSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwidHJhbnNhY3Rpb24uY2hhaW5JZC9zaWduYXR1cmUudiBtaXNtYXRjaFwiLCBcInNpZ25hdHVyZVwiLCBzaWduYXR1cmUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHNpZy52ICE9PSB2KSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJ0cmFuc2FjdGlvbi5jaGFpbklkL3NpZ25hdHVyZS52IG1pc21hdGNoXCIsIFwic2lnbmF0dXJlXCIsIHNpZ25hdHVyZSk7XG4gICAgfVxuICAgIHJhdy5wdXNoKGhleGxpZnkodikpO1xuICAgIHJhdy5wdXNoKHN0cmlwWmVyb3MoYXJyYXlpZnkoc2lnLnIpKSk7XG4gICAgcmF3LnB1c2goc3RyaXBaZXJvcyhhcnJheWlmeShzaWcucykpKTtcbiAgICByZXR1cm4gUkxQLmVuY29kZShyYXcpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZSh0cmFuc2FjdGlvbiwgc2lnbmF0dXJlKSB7XG4gICAgLy8gTGVnYWN5IGFuZCBFSVAtMTU1IFRyYW5zYWN0aW9uc1xuICAgIGlmICh0cmFuc2FjdGlvbi50eXBlID09IG51bGwgfHwgdHJhbnNhY3Rpb24udHlwZSA9PT0gMCkge1xuICAgICAgICBpZiAodHJhbnNhY3Rpb24uYWNjZXNzTGlzdCAhPSBudWxsKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwidW50eXBlZCB0cmFuc2FjdGlvbnMgZG8gbm90IHN1cHBvcnQgYWNjZXNzTGlzdDsgaW5jbHVkZSB0eXBlOiAxXCIsIFwidHJhbnNhY3Rpb25cIiwgdHJhbnNhY3Rpb24pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfc2VyaWFsaXplKHRyYW5zYWN0aW9uLCBzaWduYXR1cmUpO1xuICAgIH1cbiAgICAvLyBUeXBlZCBUcmFuc2FjdGlvbnMgKEVJUC0yNzE4KVxuICAgIHN3aXRjaCAodHJhbnNhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICByZXR1cm4gX3NlcmlhbGl6ZUVpcDI5MzAodHJhbnNhY3Rpb24sIHNpZ25hdHVyZSk7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHJldHVybiBfc2VyaWFsaXplRWlwMTU1OSh0cmFuc2FjdGlvbiwgc2lnbmF0dXJlKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gbG9nZ2VyLnRocm93RXJyb3IoYHVuc3VwcG9ydGVkIHRyYW5zYWN0aW9uIHR5cGU6ICR7dHJhbnNhY3Rpb24udHlwZX1gLCBMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTiwge1xuICAgICAgICBvcGVyYXRpb246IFwic2VyaWFsaXplVHJhbnNhY3Rpb25cIixcbiAgICAgICAgdHJhbnNhY3Rpb25UeXBlOiB0cmFuc2FjdGlvbi50eXBlXG4gICAgfSk7XG59XG5mdW5jdGlvbiBfcGFyc2VFaXBTaWduYXR1cmUodHgsIGZpZWxkcywgc2VyaWFsaXplKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVjaWQgPSBoYW5kbGVOdW1iZXIoZmllbGRzWzBdKS50b051bWJlcigpO1xuICAgICAgICBpZiAocmVjaWQgIT09IDAgJiYgcmVjaWQgIT09IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImJhZCByZWNpZFwiKTtcbiAgICAgICAgfVxuICAgICAgICB0eC52ID0gcmVjaWQ7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCB2IGZvciB0cmFuc2FjdGlvbiB0eXBlOiAxXCIsIFwidlwiLCBmaWVsZHNbMF0pO1xuICAgIH1cbiAgICB0eC5yID0gaGV4WmVyb1BhZChmaWVsZHNbMV0sIDMyKTtcbiAgICB0eC5zID0gaGV4WmVyb1BhZChmaWVsZHNbMl0sIDMyKTtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBkaWdlc3QgPSBrZWNjYWsyNTYoc2VyaWFsaXplKHR4KSk7XG4gICAgICAgIHR4LmZyb20gPSByZWNvdmVyQWRkcmVzcyhkaWdlc3QsIHsgcjogdHguciwgczogdHgucywgcmVjb3ZlcnlQYXJhbTogdHgudiB9KTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IH1cbn1cbmZ1bmN0aW9uIF9wYXJzZUVpcDE1NTkocGF5bG9hZCkge1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gUkxQLmRlY29kZShwYXlsb2FkLnNsaWNlKDEpKTtcbiAgICBpZiAodHJhbnNhY3Rpb24ubGVuZ3RoICE9PSA5ICYmIHRyYW5zYWN0aW9uLmxlbmd0aCAhPT0gMTIpIHtcbiAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgY29tcG9uZW50IGNvdW50IGZvciB0cmFuc2FjdGlvbiB0eXBlOiAyXCIsIFwicGF5bG9hZFwiLCBoZXhsaWZ5KHBheWxvYWQpKTtcbiAgICB9XG4gICAgY29uc3QgbWF4UHJpb3JpdHlGZWVQZXJHYXMgPSBoYW5kbGVOdW1iZXIodHJhbnNhY3Rpb25bMl0pO1xuICAgIGNvbnN0IG1heEZlZVBlckdhcyA9IGhhbmRsZU51bWJlcih0cmFuc2FjdGlvblszXSk7XG4gICAgY29uc3QgdHggPSB7XG4gICAgICAgIHR5cGU6IDIsXG4gICAgICAgIGNoYWluSWQ6IGhhbmRsZU51bWJlcih0cmFuc2FjdGlvblswXSkudG9OdW1iZXIoKSxcbiAgICAgICAgbm9uY2U6IGhhbmRsZU51bWJlcih0cmFuc2FjdGlvblsxXSkudG9OdW1iZXIoKSxcbiAgICAgICAgbWF4UHJpb3JpdHlGZWVQZXJHYXM6IG1heFByaW9yaXR5RmVlUGVyR2FzLFxuICAgICAgICBtYXhGZWVQZXJHYXM6IG1heEZlZVBlckdhcyxcbiAgICAgICAgZ2FzUHJpY2U6IG51bGwsXG4gICAgICAgIGdhc0xpbWl0OiBoYW5kbGVOdW1iZXIodHJhbnNhY3Rpb25bNF0pLFxuICAgICAgICB0bzogaGFuZGxlQWRkcmVzcyh0cmFuc2FjdGlvbls1XSksXG4gICAgICAgIHZhbHVlOiBoYW5kbGVOdW1iZXIodHJhbnNhY3Rpb25bNl0pLFxuICAgICAgICBkYXRhOiB0cmFuc2FjdGlvbls3XSxcbiAgICAgICAgYWNjZXNzTGlzdDogYWNjZXNzTGlzdGlmeSh0cmFuc2FjdGlvbls4XSksXG4gICAgfTtcbiAgICAvLyBVbnNpZ25lZCBFSVAtMTU1OSBUcmFuc2FjdGlvblxuICAgIGlmICh0cmFuc2FjdGlvbi5sZW5ndGggPT09IDkpIHtcbiAgICAgICAgcmV0dXJuIHR4O1xuICAgIH1cbiAgICB0eC5oYXNoID0ga2VjY2FrMjU2KHBheWxvYWQpO1xuICAgIF9wYXJzZUVpcFNpZ25hdHVyZSh0eCwgdHJhbnNhY3Rpb24uc2xpY2UoOSksIF9zZXJpYWxpemVFaXAxNTU5KTtcbiAgICByZXR1cm4gdHg7XG59XG5mdW5jdGlvbiBfcGFyc2VFaXAyOTMwKHBheWxvYWQpIHtcbiAgICBjb25zdCB0cmFuc2FjdGlvbiA9IFJMUC5kZWNvZGUocGF5bG9hZC5zbGljZSgxKSk7XG4gICAgaWYgKHRyYW5zYWN0aW9uLmxlbmd0aCAhPT0gOCAmJiB0cmFuc2FjdGlvbi5sZW5ndGggIT09IDExKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGNvbXBvbmVudCBjb3VudCBmb3IgdHJhbnNhY3Rpb24gdHlwZTogMVwiLCBcInBheWxvYWRcIiwgaGV4bGlmeShwYXlsb2FkKSk7XG4gICAgfVxuICAgIGNvbnN0IHR4ID0ge1xuICAgICAgICB0eXBlOiAxLFxuICAgICAgICBjaGFpbklkOiBoYW5kbGVOdW1iZXIodHJhbnNhY3Rpb25bMF0pLnRvTnVtYmVyKCksXG4gICAgICAgIG5vbmNlOiBoYW5kbGVOdW1iZXIodHJhbnNhY3Rpb25bMV0pLnRvTnVtYmVyKCksXG4gICAgICAgIGdhc1ByaWNlOiBoYW5kbGVOdW1iZXIodHJhbnNhY3Rpb25bMl0pLFxuICAgICAgICBnYXNMaW1pdDogaGFuZGxlTnVtYmVyKHRyYW5zYWN0aW9uWzNdKSxcbiAgICAgICAgdG86IGhhbmRsZUFkZHJlc3ModHJhbnNhY3Rpb25bNF0pLFxuICAgICAgICB2YWx1ZTogaGFuZGxlTnVtYmVyKHRyYW5zYWN0aW9uWzVdKSxcbiAgICAgICAgZGF0YTogdHJhbnNhY3Rpb25bNl0sXG4gICAgICAgIGFjY2Vzc0xpc3Q6IGFjY2Vzc0xpc3RpZnkodHJhbnNhY3Rpb25bN10pXG4gICAgfTtcbiAgICAvLyBVbnNpZ25lZCBFSVAtMjkzMCBUcmFuc2FjdGlvblxuICAgIGlmICh0cmFuc2FjdGlvbi5sZW5ndGggPT09IDgpIHtcbiAgICAgICAgcmV0dXJuIHR4O1xuICAgIH1cbiAgICB0eC5oYXNoID0ga2VjY2FrMjU2KHBheWxvYWQpO1xuICAgIF9wYXJzZUVpcFNpZ25hdHVyZSh0eCwgdHJhbnNhY3Rpb24uc2xpY2UoOCksIF9zZXJpYWxpemVFaXAyOTMwKTtcbiAgICByZXR1cm4gdHg7XG59XG4vLyBMZWdhY3kgVHJhbnNhY3Rpb25zIGFuZCBFSVAtMTU1XG5mdW5jdGlvbiBfcGFyc2UocmF3VHJhbnNhY3Rpb24pIHtcbiAgICBjb25zdCB0cmFuc2FjdGlvbiA9IFJMUC5kZWNvZGUocmF3VHJhbnNhY3Rpb24pO1xuICAgIGlmICh0cmFuc2FjdGlvbi5sZW5ndGggIT09IDkgJiYgdHJhbnNhY3Rpb24ubGVuZ3RoICE9PSA2KSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHJhdyB0cmFuc2FjdGlvblwiLCBcInJhd1RyYW5zYWN0aW9uXCIsIHJhd1RyYW5zYWN0aW9uKTtcbiAgICB9XG4gICAgY29uc3QgdHggPSB7XG4gICAgICAgIG5vbmNlOiBoYW5kbGVOdW1iZXIodHJhbnNhY3Rpb25bMF0pLnRvTnVtYmVyKCksXG4gICAgICAgIGdhc1ByaWNlOiBoYW5kbGVOdW1iZXIodHJhbnNhY3Rpb25bMV0pLFxuICAgICAgICBnYXNMaW1pdDogaGFuZGxlTnVtYmVyKHRyYW5zYWN0aW9uWzJdKSxcbiAgICAgICAgdG86IGhhbmRsZUFkZHJlc3ModHJhbnNhY3Rpb25bM10pLFxuICAgICAgICB2YWx1ZTogaGFuZGxlTnVtYmVyKHRyYW5zYWN0aW9uWzRdKSxcbiAgICAgICAgZGF0YTogdHJhbnNhY3Rpb25bNV0sXG4gICAgICAgIGNoYWluSWQ6IDBcbiAgICB9O1xuICAgIC8vIExlZ2FjeSB1bnNpZ25lZCB0cmFuc2FjdGlvblxuICAgIGlmICh0cmFuc2FjdGlvbi5sZW5ndGggPT09IDYpIHtcbiAgICAgICAgcmV0dXJuIHR4O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICB0eC52ID0gQmlnTnVtYmVyLmZyb20odHJhbnNhY3Rpb25bNl0pLnRvTnVtYmVyKCk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAvLyBAVE9ETzogV2hhdCBtYWtlcyBzbmVzZSB0byBkbz8gVGhlIHYgaXMgdG9vIGJpZ1xuICAgICAgICByZXR1cm4gdHg7XG4gICAgfVxuICAgIHR4LnIgPSBoZXhaZXJvUGFkKHRyYW5zYWN0aW9uWzddLCAzMik7XG4gICAgdHgucyA9IGhleFplcm9QYWQodHJhbnNhY3Rpb25bOF0sIDMyKTtcbiAgICBpZiAoQmlnTnVtYmVyLmZyb20odHgucikuaXNaZXJvKCkgJiYgQmlnTnVtYmVyLmZyb20odHgucykuaXNaZXJvKCkpIHtcbiAgICAgICAgLy8gRUlQLTE1NSB1bnNpZ25lZCB0cmFuc2FjdGlvblxuICAgICAgICB0eC5jaGFpbklkID0gdHgudjtcbiAgICAgICAgdHgudiA9IDA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBTaWduZWQgVHJhbnNhY3Rpb25cbiAgICAgICAgdHguY2hhaW5JZCA9IE1hdGguZmxvb3IoKHR4LnYgLSAzNSkgLyAyKTtcbiAgICAgICAgaWYgKHR4LmNoYWluSWQgPCAwKSB7XG4gICAgICAgICAgICB0eC5jaGFpbklkID0gMDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVjb3ZlcnlQYXJhbSA9IHR4LnYgLSAyNztcbiAgICAgICAgY29uc3QgcmF3ID0gdHJhbnNhY3Rpb24uc2xpY2UoMCwgNik7XG4gICAgICAgIGlmICh0eC5jaGFpbklkICE9PSAwKSB7XG4gICAgICAgICAgICByYXcucHVzaChoZXhsaWZ5KHR4LmNoYWluSWQpKTtcbiAgICAgICAgICAgIHJhdy5wdXNoKFwiMHhcIik7XG4gICAgICAgICAgICByYXcucHVzaChcIjB4XCIpO1xuICAgICAgICAgICAgcmVjb3ZlcnlQYXJhbSAtPSB0eC5jaGFpbklkICogMiArIDg7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGlnZXN0ID0ga2VjY2FrMjU2KFJMUC5lbmNvZGUocmF3KSk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0eC5mcm9tID0gcmVjb3ZlckFkZHJlc3MoZGlnZXN0LCB7IHI6IGhleGxpZnkodHguciksIHM6IGhleGxpZnkodHgucyksIHJlY292ZXJ5UGFyYW06IHJlY292ZXJ5UGFyYW0gfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgdHguaGFzaCA9IGtlY2NhazI1NihyYXdUcmFuc2FjdGlvbik7XG4gICAgfVxuICAgIHR4LnR5cGUgPSBudWxsO1xuICAgIHJldHVybiB0eDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZShyYXdUcmFuc2FjdGlvbikge1xuICAgIGNvbnN0IHBheWxvYWQgPSBhcnJheWlmeShyYXdUcmFuc2FjdGlvbik7XG4gICAgLy8gTGVnYWN5IGFuZCBFSVAtMTU1IFRyYW5zYWN0aW9uc1xuICAgIGlmIChwYXlsb2FkWzBdID4gMHg3Zikge1xuICAgICAgICByZXR1cm4gX3BhcnNlKHBheWxvYWQpO1xuICAgIH1cbiAgICAvLyBUeXBlZCBUcmFuc2FjdGlvbiAoRUlQLTI3MTgpXG4gICAgc3dpdGNoIChwYXlsb2FkWzBdKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIHJldHVybiBfcGFyc2VFaXAyOTMwKHBheWxvYWQpO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICByZXR1cm4gX3BhcnNlRWlwMTU1OShwYXlsb2FkKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gbG9nZ2VyLnRocm93RXJyb3IoYHVuc3VwcG9ydGVkIHRyYW5zYWN0aW9uIHR5cGU6ICR7cGF5bG9hZFswXX1gLCBMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTiwge1xuICAgICAgICBvcGVyYXRpb246IFwicGFyc2VUcmFuc2FjdGlvblwiLFxuICAgICAgICB0cmFuc2FjdGlvblR5cGU6IHBheWxvYWRbMF1cbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHsgYXJyYXlpZnkgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGUodGV4dERhdGEpIHtcbiAgICB0ZXh0RGF0YSA9IGF0b2IodGV4dERhdGEpO1xuICAgIGNvbnN0IGRhdGEgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRleHREYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGRhdGEucHVzaCh0ZXh0RGF0YS5jaGFyQ29kZUF0KGkpKTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5aWZ5KGRhdGEpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZShkYXRhKSB7XG4gICAgZGF0YSA9IGFycmF5aWZ5KGRhdGEpO1xuICAgIGxldCB0ZXh0RGF0YSA9IFwiXCI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRleHREYXRhICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoZGF0YVtpXSk7XG4gICAgfVxuICAgIHJldHVybiBidG9hKHRleHREYXRhKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2U2NC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuaW1wb3J0IHsgYXJyYXlpZnkgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcbmV4cG9ydCBmdW5jdGlvbiBnZXRVcmwoaHJlZiwgb3B0aW9ucykge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09IG51bGwpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXF1ZXN0ID0ge1xuICAgICAgICAgICAgbWV0aG9kOiAob3B0aW9ucy5tZXRob2QgfHwgXCJHRVRcIiksXG4gICAgICAgICAgICBoZWFkZXJzOiAob3B0aW9ucy5oZWFkZXJzIHx8IHt9KSxcbiAgICAgICAgICAgIGJvZHk6IChvcHRpb25zLmJvZHkgfHwgdW5kZWZpbmVkKSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG9wdGlvbnMuc2tpcEZldGNoU2V0dXAgIT09IHRydWUpIHtcbiAgICAgICAgICAgIHJlcXVlc3QubW9kZSA9IFwiY29yc1wiOyAvLyBuby1jb3JzLCBjb3JzLCAqc2FtZS1vcmlnaW5cbiAgICAgICAgICAgIHJlcXVlc3QuY2FjaGUgPSBcIm5vLWNhY2hlXCI7IC8vICpkZWZhdWx0LCBuby1jYWNoZSwgcmVsb2FkLCBmb3JjZS1jYWNoZSwgb25seS1pZi1jYWNoZWRcbiAgICAgICAgICAgIHJlcXVlc3QuY3JlZGVudGlhbHMgPSBcInNhbWUtb3JpZ2luXCI7IC8vIGluY2x1ZGUsICpzYW1lLW9yaWdpbiwgb21pdFxuICAgICAgICAgICAgcmVxdWVzdC5yZWRpcmVjdCA9IFwiZm9sbG93XCI7IC8vIG1hbnVhbCwgKmZvbGxvdywgZXJyb3JcbiAgICAgICAgICAgIHJlcXVlc3QucmVmZXJyZXIgPSBcImNsaWVudFwiOyAvLyBuby1yZWZlcnJlciwgKmNsaWVudFxuICAgICAgICB9XG4gICAgICAgIDtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCBmZXRjaChocmVmLCByZXF1ZXN0KTtcbiAgICAgICAgY29uc3QgYm9keSA9IHlpZWxkIHJlc3BvbnNlLmFycmF5QnVmZmVyKCk7XG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICAgICAgaWYgKHJlc3BvbnNlLmhlYWRlcnMuZm9yRWFjaCkge1xuICAgICAgICAgICAgcmVzcG9uc2UuaGVhZGVycy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgaGVhZGVyc1trZXkudG9Mb3dlckNhc2UoKV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgKChyZXNwb25zZS5oZWFkZXJzKS5rZXlzKSgpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgICAgIGhlYWRlcnNba2V5LnRvTG93ZXJDYXNlKCldID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoa2V5KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgc3RhdHVzQ29kZTogcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICAgICAgc3RhdHVzTWVzc2FnZTogcmVzcG9uc2Uuc3RhdHVzVGV4dCxcbiAgICAgICAgICAgIGJvZHk6IGFycmF5aWZ5KG5ldyBVaW50OEFycmF5KGJvZHkpKSxcbiAgICAgICAgfTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldHVybC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuaW1wb3J0IHsgZGVjb2RlIGFzIGJhc2U2NERlY29kZSwgZW5jb2RlIGFzIGJhc2U2NEVuY29kZSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9iYXNlNjRcIjtcbmltcG9ydCB7IGhleGxpZnksIGlzQnl0ZXNMaWtlIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2J5dGVzXCI7XG5pbXBvcnQgeyBzaGFsbG93Q29weSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9wcm9wZXJ0aWVzXCI7XG5pbXBvcnQgeyB0b1V0ZjhCeXRlcywgdG9VdGY4U3RyaW5nIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3N0cmluZ3NcIjtcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcbmltcG9ydCB7IGdldFVybCB9IGZyb20gXCIuL2dldHVybFwiO1xuZnVuY3Rpb24gc3RhbGxlcihkdXJhdGlvbikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICBzZXRUaW1lb3V0KHJlc29sdmUsIGR1cmF0aW9uKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGJvZHlpZnkodmFsdWUsIHR5cGUpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKGlzQnl0ZXNMaWtlKHZhbHVlKSkge1xuICAgICAgICBpZiAodHlwZSAmJiAodHlwZS5zcGxpdChcIi9cIilbMF0gPT09IFwidGV4dFwiIHx8IHR5cGUuc3BsaXQoXCI7XCIpWzBdLnRyaW0oKSA9PT0gXCJhcHBsaWNhdGlvbi9qc29uXCIpKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0b1V0ZjhTdHJpbmcodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgICAgIDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGV4bGlmeSh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbi8vIFRoaXMgQVBJIGlzIHN0aWxsIGEgd29yayBpbiBwcm9ncmVzczsgdGhlIGZ1dHVyZSBjaGFuZ2VzIHdpbGwgbGlrZWx5IGJlOlxuLy8gLSBDb25uZWN0aW9uSW5mbyA9PiBGZXRjaERhdGFSZXF1ZXN0PFQgPSBhbnk+XG4vLyAtIEZldGNoRGF0YVJlcXVlc3QuYm9keT8gPSBzdHJpbmcgfCBVaW50OEFycmF5IHwgeyBjb250ZW50VHlwZTogc3RyaW5nLCBkYXRhOiBzdHJpbmcgfCBVaW50OEFycmF5IH1cbi8vICAgLSBJZiBzdHJpbmcgPT4gdGV4dC9wbGFpbiwgVWludDhBcnJheSA9PiBhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0gKGlmIGNvbnRlbnQtdHlwZSB1bnNwZWNpZmllZClcbi8vIC0gRmV0Y2hEYXRhUmVxdWVzdC5wcm9jZXNzRnVuYyA9IChib2R5OiBVaW50OEFycmF5LCByZXNwb25zZTogRmV0Y2hEYXRhUmVzcG9uc2UpID0+IFRcbi8vIEZvciB0aGlzIHJlYXNvbiwgaXQgc2hvdWxkIGJlIGNvbnNpZGVyZWQgaW50ZXJuYWwgdW50aWwgdGhlIEFQSSBpcyBmaW5hbGl6ZWRcbmV4cG9ydCBmdW5jdGlvbiBfZmV0Y2hEYXRhKGNvbm5lY3Rpb24sIGJvZHksIHByb2Nlc3NGdW5jKSB7XG4gICAgLy8gSG93IG1hbnkgdGltZXMgdG8gcmV0cnkgaW4gdGhlIGV2ZW50IG9mIGEgdGhyb3R0bGVcbiAgICBjb25zdCBhdHRlbXB0TGltaXQgPSAodHlwZW9mIChjb25uZWN0aW9uKSA9PT0gXCJvYmplY3RcIiAmJiBjb25uZWN0aW9uLnRocm90dGxlTGltaXQgIT0gbnVsbCkgPyBjb25uZWN0aW9uLnRocm90dGxlTGltaXQgOiAxMjtcbiAgICBsb2dnZXIuYXNzZXJ0QXJndW1lbnQoKGF0dGVtcHRMaW1pdCA+IDAgJiYgKGF0dGVtcHRMaW1pdCAlIDEpID09PSAwKSwgXCJpbnZhbGlkIGNvbm5lY3Rpb24gdGhyb3R0bGUgbGltaXRcIiwgXCJjb25uZWN0aW9uLnRocm90dGxlTGltaXRcIiwgYXR0ZW1wdExpbWl0KTtcbiAgICBjb25zdCB0aHJvdHRsZUNhbGxiYWNrID0gKCh0eXBlb2YgKGNvbm5lY3Rpb24pID09PSBcIm9iamVjdFwiKSA/IGNvbm5lY3Rpb24udGhyb3R0bGVDYWxsYmFjayA6IG51bGwpO1xuICAgIGNvbnN0IHRocm90dGxlU2xvdEludGVydmFsID0gKCh0eXBlb2YgKGNvbm5lY3Rpb24pID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiAoY29ubmVjdGlvbi50aHJvdHRsZVNsb3RJbnRlcnZhbCkgPT09IFwibnVtYmVyXCIpID8gY29ubmVjdGlvbi50aHJvdHRsZVNsb3RJbnRlcnZhbCA6IDEwMCk7XG4gICAgbG9nZ2VyLmFzc2VydEFyZ3VtZW50KCh0aHJvdHRsZVNsb3RJbnRlcnZhbCA+IDAgJiYgKHRocm90dGxlU2xvdEludGVydmFsICUgMSkgPT09IDApLCBcImludmFsaWQgY29ubmVjdGlvbiB0aHJvdHRsZSBzbG90IGludGVydmFsXCIsIFwiY29ubmVjdGlvbi50aHJvdHRsZVNsb3RJbnRlcnZhbFwiLCB0aHJvdHRsZVNsb3RJbnRlcnZhbCk7XG4gICAgY29uc3QgZXJyb3JQYXNzVGhyb3VnaCA9ICgodHlwZW9mIChjb25uZWN0aW9uKSA9PT0gXCJvYmplY3RcIikgPyAhIShjb25uZWN0aW9uLmVycm9yUGFzc1Rocm91Z2gpIDogZmFsc2UpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBsZXQgdXJsID0gbnVsbDtcbiAgICAvLyBAVE9ETzogQWxsb3cgQ29ubmVjdGlvbkluZm8gdG8gb3ZlcnJpZGUgc29tZSBvZiB0aGVzZSB2YWx1ZXNcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgfTtcbiAgICBsZXQgYWxsb3czMDQgPSBmYWxzZTtcbiAgICBsZXQgdGltZW91dCA9IDIgKiA2MCAqIDEwMDA7XG4gICAgaWYgKHR5cGVvZiAoY29ubmVjdGlvbikgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdXJsID0gY29ubmVjdGlvbjtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIChjb25uZWN0aW9uKSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBpZiAoY29ubmVjdGlvbiA9PSBudWxsIHx8IGNvbm5lY3Rpb24udXJsID09IG51bGwpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJtaXNzaW5nIFVSTFwiLCBcImNvbm5lY3Rpb24udXJsXCIsIGNvbm5lY3Rpb24pO1xuICAgICAgICB9XG4gICAgICAgIHVybCA9IGNvbm5lY3Rpb24udXJsO1xuICAgICAgICBpZiAodHlwZW9mIChjb25uZWN0aW9uLnRpbWVvdXQpID09PSBcIm51bWJlclwiICYmIGNvbm5lY3Rpb24udGltZW91dCA+IDApIHtcbiAgICAgICAgICAgIHRpbWVvdXQgPSBjb25uZWN0aW9uLnRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbm5lY3Rpb24uaGVhZGVycykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gY29ubmVjdGlvbi5oZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgaGVhZGVyc1trZXkudG9Mb3dlckNhc2UoKV0gPSB7IGtleToga2V5LCB2YWx1ZTogU3RyaW5nKGNvbm5lY3Rpb24uaGVhZGVyc1trZXldKSB9O1xuICAgICAgICAgICAgICAgIGlmIChbXCJpZi1ub25lLW1hdGNoXCIsIFwiaWYtbW9kaWZpZWQtc2luY2VcIl0uaW5kZXhPZihrZXkudG9Mb3dlckNhc2UoKSkgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBhbGxvdzMwNCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMuYWxsb3dHemlwID0gISFjb25uZWN0aW9uLmFsbG93R3ppcDtcbiAgICAgICAgaWYgKGNvbm5lY3Rpb24udXNlciAhPSBudWxsICYmIGNvbm5lY3Rpb24ucGFzc3dvcmQgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHVybC5zdWJzdHJpbmcoMCwgNikgIT09IFwiaHR0cHM6XCIgJiYgY29ubmVjdGlvbi5hbGxvd0luc2VjdXJlQXV0aGVudGljYXRpb24gIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcImJhc2ljIGF1dGhlbnRpY2F0aW9uIHJlcXVpcmVzIGEgc2VjdXJlIGh0dHBzIHVybFwiLCBMb2dnZXIuZXJyb3JzLklOVkFMSURfQVJHVU1FTlQsIHsgYXJndW1lbnQ6IFwidXJsXCIsIHVybDogdXJsLCB1c2VyOiBjb25uZWN0aW9uLnVzZXIsIHBhc3N3b3JkOiBcIltSRURBQ1RFRF1cIiB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGF1dGhvcml6YXRpb24gPSBjb25uZWN0aW9uLnVzZXIgKyBcIjpcIiArIGNvbm5lY3Rpb24ucGFzc3dvcmQ7XG4gICAgICAgICAgICBoZWFkZXJzW1wiYXV0aG9yaXphdGlvblwiXSA9IHtcbiAgICAgICAgICAgICAgICBrZXk6IFwiQXV0aG9yaXphdGlvblwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBcIkJhc2ljIFwiICsgYmFzZTY0RW5jb2RlKHRvVXRmOEJ5dGVzKGF1dGhvcml6YXRpb24pKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29ubmVjdGlvbi5za2lwRmV0Y2hTZXR1cCAhPSBudWxsKSB7XG4gICAgICAgICAgICBvcHRpb25zLnNraXBGZXRjaFNldHVwID0gISFjb25uZWN0aW9uLnNraXBGZXRjaFNldHVwO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHJlRGF0YSA9IG5ldyBSZWdFeHAoXCJeZGF0YTooW2EtejAtOS1dKy9bYS16MC05LV0rKTtiYXNlNjQsKC4qKSRcIiwgXCJpXCIpO1xuICAgIGNvbnN0IGRhdGFNYXRjaCA9ICgodXJsKSA/IHVybC5tYXRjaChyZURhdGEpIDogbnVsbCk7XG4gICAgaWYgKGRhdGFNYXRjaCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICAgICAgICAgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgICAgICAgICAgIHN0YXR1c01lc3NhZ2U6IFwiT0tcIixcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7IFwiY29udGVudC10eXBlXCI6IGRhdGFNYXRjaFsxXSB9LFxuICAgICAgICAgICAgICAgIGJvZHk6IGJhc2U2NERlY29kZShkYXRhTWF0Y2hbMl0pXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IHJlc3BvbnNlLmJvZHk7XG4gICAgICAgICAgICBpZiAocHJvY2Vzc0Z1bmMpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBwcm9jZXNzRnVuYyhyZXNwb25zZS5ib2R5LCByZXNwb25zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcInByb2Nlc3NpbmcgcmVzcG9uc2UgZXJyb3JcIiwgTG9nZ2VyLmVycm9ycy5TRVJWRVJfRVJST1IsIHtcbiAgICAgICAgICAgICAgICBib2R5OiBib2R5aWZ5KGRhdGFNYXRjaFsxXSwgZGF0YU1hdGNoWzJdKSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgICAgICAgICAgcmVxdWVzdEJvZHk6IG51bGwsXG4gICAgICAgICAgICAgICAgcmVxdWVzdE1ldGhvZDogXCJHRVRcIixcbiAgICAgICAgICAgICAgICB1cmw6IHVybFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGJvZHkpIHtcbiAgICAgICAgb3B0aW9ucy5tZXRob2QgPSBcIlBPU1RcIjtcbiAgICAgICAgb3B0aW9ucy5ib2R5ID0gYm9keTtcbiAgICAgICAgaWYgKGhlYWRlcnNbXCJjb250ZW50LXR5cGVcIl0gPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVyc1tcImNvbnRlbnQtdHlwZVwiXSA9IHsga2V5OiBcIkNvbnRlbnQtVHlwZVwiLCB2YWx1ZTogXCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIiB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChoZWFkZXJzW1wiY29udGVudC1sZW5ndGhcIl0gPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVyc1tcImNvbnRlbnQtbGVuZ3RoXCJdID0geyBrZXk6IFwiQ29udGVudC1MZW5ndGhcIiwgdmFsdWU6IFN0cmluZyhib2R5Lmxlbmd0aCkgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBmbGF0SGVhZGVycyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKGhlYWRlcnMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBjb25zdCBoZWFkZXIgPSBoZWFkZXJzW2tleV07XG4gICAgICAgIGZsYXRIZWFkZXJzW2hlYWRlci5rZXldID0gaGVhZGVyLnZhbHVlO1xuICAgIH0pO1xuICAgIG9wdGlvbnMuaGVhZGVycyA9IGZsYXRIZWFkZXJzO1xuICAgIGNvbnN0IHJ1bm5pbmdUaW1lb3V0ID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGV0IHRpbWVyID0gbnVsbDtcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWVyID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aW1lciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChsb2dnZXIubWFrZUVycm9yKFwidGltZW91dFwiLCBMb2dnZXIuZXJyb3JzLlRJTUVPVVQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RCb2R5OiBib2R5aWZ5KG9wdGlvbnMuYm9keSwgZmxhdEhlYWRlcnNbXCJjb250ZW50LXR5cGVcIl0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdE1ldGhvZDogb3B0aW9ucy5tZXRob2QsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiB0aW1lb3V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB1cmxcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRpbWVyID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICAgICAgdGltZXIgPSBudWxsO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4geyBwcm9taXNlLCBjYW5jZWwgfTtcbiAgICB9KSgpO1xuICAgIGNvbnN0IHJ1bm5pbmdGZXRjaCA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBhdHRlbXB0ID0gMDsgYXR0ZW1wdCA8IGF0dGVtcHRMaW1pdDsgYXR0ZW1wdCsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IHJlc3BvbnNlID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IHlpZWxkIGdldFVybCh1cmwsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXR0ZW1wdCA8IGF0dGVtcHRMaW1pdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDMwMSB8fCByZXNwb25zZS5zdGF0dXNDb2RlID09PSAzMDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZWRpcmVjdGlvbjsgZm9yIG5vdyB3ZSBvbmx5IHN1cHBvcnQgYWJzb2x1dGUgbG9jYXRhaW9uc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gcmVzcG9uc2UuaGVhZGVycy5sb2NhdGlvbiB8fCBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLm1ldGhvZCA9PT0gXCJHRVRcIiAmJiBsb2NhdGlvbi5tYXRjaCgvXmh0dHBzOi8pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IHJlc3BvbnNlLmhlYWRlcnMubG9jYXRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDQyOSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEV4cG9uZW50aWFsIGJhY2stb2ZmIHRocm90dGxpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdHJ5QWdhaW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aHJvdHRsZUNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeUFnYWluID0geWllbGQgdGhyb3R0bGVDYWxsYmFjayhhdHRlbXB0LCB1cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJ5QWdhaW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0YWxsID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmV0cnlBZnRlciA9IHJlc3BvbnNlLmhlYWRlcnNbXCJyZXRyeS1hZnRlclwiXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAocmV0cnlBZnRlcikgPT09IFwic3RyaW5nXCIgJiYgcmV0cnlBZnRlci5tYXRjaCgvXlsxLTldWzAtOV0qJC8pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFsbCA9IHBhcnNlSW50KHJldHJ5QWZ0ZXIpICogMTAwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWxsID0gdGhyb3R0bGVTbG90SW50ZXJ2YWwgKiBwYXJzZUludChTdHJpbmcoTWF0aC5yYW5kb20oKSAqIE1hdGgucG93KDIsIGF0dGVtcHQpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcIlN0YWxsaW5nIDQyOVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgc3RhbGxlcihzdGFsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBlcnJvci5yZXNwb25zZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bm5pbmdUaW1lb3V0LmNhbmNlbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJtaXNzaW5nIHJlc3BvbnNlXCIsIExvZ2dlci5lcnJvcnMuU0VSVkVSX0VSUk9SLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEJvZHk6IGJvZHlpZnkob3B0aW9ucy5ib2R5LCBmbGF0SGVhZGVyc1tcImNvbnRlbnQtdHlwZVwiXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdE1ldGhvZDogb3B0aW9ucy5tZXRob2QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmVyRXJyb3I6IGVycm9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogdXJsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgYm9keSA9IHJlc3BvbnNlLmJvZHk7XG4gICAgICAgICAgICAgICAgaWYgKGFsbG93MzA0ICYmIHJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDMwNCkge1xuICAgICAgICAgICAgICAgICAgICBib2R5ID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIWVycm9yUGFzc1Rocm91Z2ggJiYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPCAyMDAgfHwgcmVzcG9uc2Uuc3RhdHVzQ29kZSA+PSAzMDApKSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bm5pbmdUaW1lb3V0LmNhbmNlbCgpO1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcImJhZCByZXNwb25zZVwiLCBMb2dnZXIuZXJyb3JzLlNFUlZFUl9FUlJPUiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiByZXNwb25zZS5zdGF0dXNDb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IGJvZHlpZnkoYm9keSwgKChyZXNwb25zZS5oZWFkZXJzKSA/IHJlc3BvbnNlLmhlYWRlcnNbXCJjb250ZW50LXR5cGVcIl0gOiBudWxsKSksXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0Qm9keTogYm9keWlmeShvcHRpb25zLmJvZHksIGZsYXRIZWFkZXJzW1wiY29udGVudC10eXBlXCJdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RNZXRob2Q6IG9wdGlvbnMubWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB1cmxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzRnVuYykge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0geWllbGQgcHJvY2Vzc0Z1bmMoYm9keSwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcnVubmluZ1RpbWVvdXQuY2FuY2VsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWxsb3cgdGhlIHByb2Nlc3NGdW5jIHRvIHRyaWdnZXIgYSB0aHJvdHRsZVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yLnRocm90dGxlUmV0cnkgJiYgYXR0ZW1wdCA8IGF0dGVtcHRMaW1pdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0cnlBZ2FpbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRocm90dGxlQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5QWdhaW4gPSB5aWVsZCB0aHJvdHRsZUNhbGxiYWNrKGF0dGVtcHQsIHVybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cnlBZ2Fpbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0aW1lb3V0ID0gdGhyb3R0bGVTbG90SW50ZXJ2YWwgKiBwYXJzZUludChTdHJpbmcoTWF0aC5yYW5kb20oKSAqIE1hdGgucG93KDIsIGF0dGVtcHQpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJTdGFsbGluZyBjYWxsYmFja1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgc3RhbGxlcih0aW1lb3V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcnVubmluZ1RpbWVvdXQuY2FuY2VsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcInByb2Nlc3NpbmcgcmVzcG9uc2UgZXJyb3JcIiwgTG9nZ2VyLmVycm9ycy5TRVJWRVJfRVJST1IsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib2R5OiBib2R5aWZ5KGJvZHksICgocmVzcG9uc2UuaGVhZGVycykgPyByZXNwb25zZS5oZWFkZXJzW1wiY29udGVudC10eXBlXCJdIDogbnVsbCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0Qm9keTogYm9keWlmeShvcHRpb25zLmJvZHksIGZsYXRIZWFkZXJzW1wiY29udGVudC10eXBlXCJdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0TWV0aG9kOiBvcHRpb25zLm1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHVybFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcnVubmluZ1RpbWVvdXQuY2FuY2VsKCk7XG4gICAgICAgICAgICAgICAgLy8gSWYgd2UgaGFkIGEgcHJvY2Vzc0Z1bmMsIGl0IGVpdGhlciByZXR1cm5lZCBhIFQgb3IgdGhyZXcgYWJvdmUuXG4gICAgICAgICAgICAgICAgLy8gVGhlIFwiYm9keVwiIGlzIG5vdyBhIFVpbnQ4QXJyYXkuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJvZHk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbG9nZ2VyLnRocm93RXJyb3IoXCJmYWlsZWQgcmVzcG9uc2VcIiwgTG9nZ2VyLmVycm9ycy5TRVJWRVJfRVJST1IsIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0Qm9keTogYm9keWlmeShvcHRpb25zLmJvZHksIGZsYXRIZWFkZXJzW1wiY29udGVudC10eXBlXCJdKSxcbiAgICAgICAgICAgICAgICByZXF1ZXN0TWV0aG9kOiBvcHRpb25zLm1ldGhvZCxcbiAgICAgICAgICAgICAgICB1cmw6IHVybFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pKCk7XG4gICAgcmV0dXJuIFByb21pc2UucmFjZShbcnVubmluZ1RpbWVvdXQucHJvbWlzZSwgcnVubmluZ0ZldGNoXSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZmV0Y2hKc29uKGNvbm5lY3Rpb24sIGpzb24sIHByb2Nlc3NGdW5jKSB7XG4gICAgbGV0IHByb2Nlc3NKc29uRnVuYyA9ICh2YWx1ZSwgcmVzcG9uc2UpID0+IHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IG51bGw7XG4gICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IEpTT04ucGFyc2UodG9VdGY4U3RyaW5nKHZhbHVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcImludmFsaWQgSlNPTlwiLCBMb2dnZXIuZXJyb3JzLlNFUlZFUl9FUlJPUiwge1xuICAgICAgICAgICAgICAgICAgICBib2R5OiB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb2Nlc3NGdW5jKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBwcm9jZXNzRnVuYyhyZXN1bHQsIHJlc3BvbnNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgLy8gSWYgd2UgaGF2ZSBqc29uIHRvIHNlbmQsIHdlIG11c3RcbiAgICAvLyAtIGFkZCBjb250ZW50LXR5cGUgb2YgYXBwbGljYXRpb24vanNvbiAodW5sZXNzIGFscmVhZHkgb3ZlcnJpZGRlbilcbiAgICAvLyAtIGNvbnZlcnQgdGhlIGpzb24gdG8gYnl0ZXNcbiAgICBsZXQgYm9keSA9IG51bGw7XG4gICAgaWYgKGpzb24gIT0gbnVsbCkge1xuICAgICAgICBib2R5ID0gdG9VdGY4Qnl0ZXMoanNvbik7XG4gICAgICAgIC8vIENyZWF0ZSBhIGNvbm5lY3Rpb24gd2l0aCB0aGUgY29udGVudC10eXBlIHNldCBmb3IgSlNPTlxuICAgICAgICBjb25zdCB1cGRhdGVkID0gKHR5cGVvZiAoY29ubmVjdGlvbikgPT09IFwic3RyaW5nXCIpID8gKHsgdXJsOiBjb25uZWN0aW9uIH0pIDogc2hhbGxvd0NvcHkoY29ubmVjdGlvbik7XG4gICAgICAgIGlmICh1cGRhdGVkLmhlYWRlcnMpIHtcbiAgICAgICAgICAgIGNvbnN0IGhhc0NvbnRlbnRUeXBlID0gKE9iamVjdC5rZXlzKHVwZGF0ZWQuaGVhZGVycykuZmlsdGVyKChrKSA9PiAoay50b0xvd2VyQ2FzZSgpID09PSBcImNvbnRlbnQtdHlwZVwiKSkubGVuZ3RoKSAhPT0gMDtcbiAgICAgICAgICAgIGlmICghaGFzQ29udGVudFR5cGUpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVkLmhlYWRlcnMgPSBzaGFsbG93Q29weSh1cGRhdGVkLmhlYWRlcnMpO1xuICAgICAgICAgICAgICAgIHVwZGF0ZWQuaGVhZGVyc1tcImNvbnRlbnQtdHlwZVwiXSA9IFwiYXBwbGljYXRpb24vanNvblwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdXBkYXRlZC5oZWFkZXJzID0geyBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbm5lY3Rpb24gPSB1cGRhdGVkO1xuICAgIH1cbiAgICByZXR1cm4gX2ZldGNoRGF0YShjb25uZWN0aW9uLCBib2R5LCBwcm9jZXNzSnNvbkZ1bmMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBvbGwoZnVuYywgb3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIG9wdGlvbnMgPSBzaGFsbG93Q29weShvcHRpb25zKTtcbiAgICBpZiAob3B0aW9ucy5mbG9vciA9PSBudWxsKSB7XG4gICAgICAgIG9wdGlvbnMuZmxvb3IgPSAwO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5jZWlsaW5nID09IG51bGwpIHtcbiAgICAgICAgb3B0aW9ucy5jZWlsaW5nID0gMTAwMDA7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmludGVydmFsID09IG51bGwpIHtcbiAgICAgICAgb3B0aW9ucy5pbnRlcnZhbCA9IDI1MDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgbGV0IHRpbWVyID0gbnVsbDtcbiAgICAgICAgbGV0IGRvbmUgPSBmYWxzZTtcbiAgICAgICAgLy8gUmV0dXJucyB0cnVlIGlmIGNhbmNlbCB3YXMgc3VjY2Vzc2Z1bC4gVW5zdWNjZXNzZnVsIGNhbmNlbCBtZWFucyB3ZSdyZSBhbHJlYWR5IGRvbmUuXG4gICAgICAgIGNvbnN0IGNhbmNlbCA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICAgICBpZiAodGltZXIpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH07XG4gICAgICAgIGlmIChvcHRpb25zLnRpbWVvdXQpIHtcbiAgICAgICAgICAgIHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGNhbmNlbCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJ0aW1lb3V0XCIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBvcHRpb25zLnRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJldHJ5TGltaXQgPSBvcHRpb25zLnJldHJ5TGltaXQ7XG4gICAgICAgIGxldCBhdHRlbXB0ID0gMDtcbiAgICAgICAgZnVuY3Rpb24gY2hlY2soKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuYygpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHdlIGhhdmUgYSByZXN1bHQsIG9yIGFyZSBhbGxvd2VkIG51bGwgdGhlbiB3ZSdyZSBkb25lXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjYW5jZWwoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG9wdGlvbnMub25jZVBvbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5vbmNlUG9sbC5vbmNlKFwicG9sbFwiLCBjaGVjayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG9wdGlvbnMub25jZUJsb2NrKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMub25jZUJsb2NrLm9uY2UoXCJibG9ja1wiLCBjaGVjayk7XG4gICAgICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgZXhwb25lbnRpYWwgYmFjay1vZmYgKHVwIHRvIDEwcykgb3VyIG5leHQgcmVxdWVzdFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICghZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICBhdHRlbXB0Kys7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhdHRlbXB0ID4gcmV0cnlMaW1pdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbmNlbCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcInJldHJ5IGxpbWl0IHJlYWNoZWRcIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxldCB0aW1lb3V0ID0gb3B0aW9ucy5pbnRlcnZhbCAqIHBhcnNlSW50KFN0cmluZyhNYXRoLnJhbmRvbSgpICogTWF0aC5wb3coMiwgYXR0ZW1wdCkpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWVvdXQgPCBvcHRpb25zLmZsb29yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0ID0gb3B0aW9ucy5mbG9vcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGltZW91dCA+IG9wdGlvbnMuY2VpbGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dCA9IG9wdGlvbnMuY2VpbGluZztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGNoZWNrLCB0aW1lb3V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2FuY2VsKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjaGVjaygpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSBcIndlYi81LjYuMVwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X3ZlcnNpb24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbmltcG9ydCB7IEJpZ051bWJlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9iaWdudW1iZXJcIjtcbmltcG9ydCB7IGlzSGV4U3RyaW5nIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2J5dGVzXCI7XG5pbXBvcnQgeyBEZXNjcmlwdGlvbiwgZGVmaW5lUmVhZE9ubHksIHJlc29sdmVQcm9wZXJ0aWVzIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3Byb3BlcnRpZXNcIjtcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcbjtcbjtcbi8vZXhwb3J0IHR5cGUgQ2FsbFRyYW5zYWN0aW9uYWJsZSA9IHtcbi8vICAgIGNhbGwodHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uUmVxdWVzdCk6IFByb21pc2U8VHJhbnNhY3Rpb25SZXNwb25zZT47XG4vL307XG5leHBvcnQgY2xhc3MgRm9ya0V2ZW50IGV4dGVuZHMgRGVzY3JpcHRpb24ge1xuICAgIHN0YXRpYyBpc0ZvcmtFdmVudCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX2lzRm9ya0V2ZW50KTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQmxvY2tGb3JrRXZlbnQgZXh0ZW5kcyBGb3JrRXZlbnQge1xuICAgIGNvbnN0cnVjdG9yKGJsb2NrSGFzaCwgZXhwaXJ5KSB7XG4gICAgICAgIGlmICghaXNIZXhTdHJpbmcoYmxvY2tIYXNoLCAzMikpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGJsb2NrSGFzaFwiLCBcImJsb2NrSGFzaFwiLCBibG9ja0hhc2gpO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIF9pc0ZvcmtFdmVudDogdHJ1ZSxcbiAgICAgICAgICAgIF9pc0Jsb2NrRm9ya0V2ZW50OiB0cnVlLFxuICAgICAgICAgICAgZXhwaXJ5OiAoZXhwaXJ5IHx8IDApLFxuICAgICAgICAgICAgYmxvY2tIYXNoOiBibG9ja0hhc2hcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFRyYW5zYWN0aW9uRm9ya0V2ZW50IGV4dGVuZHMgRm9ya0V2ZW50IHtcbiAgICBjb25zdHJ1Y3RvcihoYXNoLCBleHBpcnkpIHtcbiAgICAgICAgaWYgKCFpc0hleFN0cmluZyhoYXNoLCAzMikpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHRyYW5zYWN0aW9uIGhhc2hcIiwgXCJoYXNoXCIsIGhhc2gpO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIF9pc0ZvcmtFdmVudDogdHJ1ZSxcbiAgICAgICAgICAgIF9pc1RyYW5zYWN0aW9uRm9ya0V2ZW50OiB0cnVlLFxuICAgICAgICAgICAgZXhwaXJ5OiAoZXhwaXJ5IHx8IDApLFxuICAgICAgICAgICAgaGFzaDogaGFzaFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgVHJhbnNhY3Rpb25PcmRlckZvcmtFdmVudCBleHRlbmRzIEZvcmtFdmVudCB7XG4gICAgY29uc3RydWN0b3IoYmVmb3JlSGFzaCwgYWZ0ZXJIYXNoLCBleHBpcnkpIHtcbiAgICAgICAgaWYgKCFpc0hleFN0cmluZyhiZWZvcmVIYXNoLCAzMikpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHRyYW5zYWN0aW9uIGhhc2hcIiwgXCJiZWZvcmVIYXNoXCIsIGJlZm9yZUhhc2gpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNIZXhTdHJpbmcoYWZ0ZXJIYXNoLCAzMikpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHRyYW5zYWN0aW9uIGhhc2hcIiwgXCJhZnRlckhhc2hcIiwgYWZ0ZXJIYXNoKTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBfaXNGb3JrRXZlbnQ6IHRydWUsXG4gICAgICAgICAgICBfaXNUcmFuc2FjdGlvbk9yZGVyRm9ya0V2ZW50OiB0cnVlLFxuICAgICAgICAgICAgZXhwaXJ5OiAoZXhwaXJ5IHx8IDApLFxuICAgICAgICAgICAgYmVmb3JlSGFzaDogYmVmb3JlSGFzaCxcbiAgICAgICAgICAgIGFmdGVySGFzaDogYWZ0ZXJIYXNoXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEV4cG9ydGVkIEFic3RyYWN0c1xuZXhwb3J0IGNsYXNzIFByb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgbG9nZ2VyLmNoZWNrQWJzdHJhY3QobmV3LnRhcmdldCwgUHJvdmlkZXIpO1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcIl9pc1Byb3ZpZGVyXCIsIHRydWUpO1xuICAgIH1cbiAgICBnZXRGZWVEYXRhKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgeyBibG9jaywgZ2FzUHJpY2UgfSA9IHlpZWxkIHJlc29sdmVQcm9wZXJ0aWVzKHtcbiAgICAgICAgICAgICAgICBibG9jazogdGhpcy5nZXRCbG9jayhcImxhdGVzdFwiKSxcbiAgICAgICAgICAgICAgICBnYXNQcmljZTogdGhpcy5nZXRHYXNQcmljZSgpLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBAVE9ETzogV2h5IGlzIHRoaXMgbm93IGZhaWxpbmcgb24gQ2FsYXZlcmFzP1xuICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbGV0IG1heEZlZVBlckdhcyA9IG51bGwsIG1heFByaW9yaXR5RmVlUGVyR2FzID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChibG9jayAmJiBibG9jay5iYXNlRmVlUGVyR2FzKSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgbWF5IHdhbnQgdG8gY29tcHV0ZSB0aGlzIG1vcmUgYWNjdXJhdGVseSBpbiB0aGUgZnV0dXJlLFxuICAgICAgICAgICAgICAgIC8vIHVzaW5nIHRoZSBmb3JtdWxhIFwiY2hlY2sgaWYgdGhlIGJhc2UgZmVlIGlzIGNvcnJlY3RcIi5cbiAgICAgICAgICAgICAgICAvLyBTZWU6IGh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMTU1OVxuICAgICAgICAgICAgICAgIG1heFByaW9yaXR5RmVlUGVyR2FzID0gQmlnTnVtYmVyLmZyb20oXCIxNTAwMDAwMDAwXCIpO1xuICAgICAgICAgICAgICAgIG1heEZlZVBlckdhcyA9IGJsb2NrLmJhc2VGZWVQZXJHYXMubXVsKDIpLmFkZChtYXhQcmlvcml0eUZlZVBlckdhcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyBtYXhGZWVQZXJHYXMsIG1heFByaW9yaXR5RmVlUGVyR2FzLCBnYXNQcmljZSB9O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gQWxpYXMgZm9yIFwib25cIlxuICAgIGFkZExpc3RlbmVyKGV2ZW50TmFtZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub24oZXZlbnROYW1lLCBsaXN0ZW5lcik7XG4gICAgfVxuICAgIC8vIEFsaWFzIGZvciBcIm9mZlwiXG4gICAgcmVtb3ZlTGlzdGVuZXIoZXZlbnROYW1lLCBsaXN0ZW5lcikge1xuICAgICAgICByZXR1cm4gdGhpcy5vZmYoZXZlbnROYW1lLCBsaXN0ZW5lcik7XG4gICAgfVxuICAgIHN0YXRpYyBpc1Byb3ZpZGVyKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5faXNQcm92aWRlcik7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSBcImFic3RyYWN0LXByb3ZpZGVyLzUuNi4xXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdmVyc2lvbi5qcy5tYXAiLCIvKipcbiAqIHZhciBiYXNleCA9IHJlcXVpcmUoXCJiYXNlLXhcIik7XG4gKlxuICogVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBoZWF2aWx5IGJhc2VkIG9uIGJhc2UteC4gVGhlIG1haW4gcmVhc29uIHRvXG4gKiBkZXZpYXRlIHdhcyB0byBwcmV2ZW50IHRoZSBkZXBlbmRlbmN5IG9mIEJ1ZmZlci5cbiAqXG4gKiBDb250cmlidXRvcnM6XG4gKlxuICogYmFzZS14IGVuY29kaW5nXG4gKiBGb3JrZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vY3J5cHRvY29pbmpzL2JzNThcbiAqIE9yaWdpbmFsbHkgd3JpdHRlbiBieSBNaWtlIEhlYXJuIGZvciBCaXRjb2luSlxuICogQ29weXJpZ2h0IChjKSAyMDExIEdvb2dsZSBJbmNcbiAqIFBvcnRlZCB0byBKYXZhU2NyaXB0IGJ5IFN0ZWZhbiBUaG9tYXNcbiAqIE1lcmdlZCBCdWZmZXIgcmVmYWN0b3JpbmdzIGZyb20gYmFzZTU4LW5hdGl2ZSBieSBTdGVwaGVuIFBhaXJcbiAqIENvcHlyaWdodCAoYykgMjAxMyBCaXRQYXkgSW5jXG4gKlxuICogVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKlxuICogQ29weXJpZ2h0IGJhc2UteCBjb250cmlidXRvcnMgKGMpIDIwMTZcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuICogY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLFxuICogdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvblxuICogdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsXG4gKiBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGVcbiAqIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkdcbiAqIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1NcbiAqIElOIFRIRSBTT0ZUV0FSRS5cbiAqXG4gKi9cbmltcG9ydCB7IGFycmF5aWZ5IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2J5dGVzXCI7XG5pbXBvcnQgeyBkZWZpbmVSZWFkT25seSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9wcm9wZXJ0aWVzXCI7XG5leHBvcnQgY2xhc3MgQmFzZVgge1xuICAgIGNvbnN0cnVjdG9yKGFscGhhYmV0KSB7XG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiYWxwaGFiZXRcIiwgYWxwaGFiZXQpO1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcImJhc2VcIiwgYWxwaGFiZXQubGVuZ3RoKTtcbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJfYWxwaGFiZXRNYXBcIiwge30pO1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcIl9sZWFkZXJcIiwgYWxwaGFiZXQuY2hhckF0KDApKTtcbiAgICAgICAgLy8gcHJlLWNvbXB1dGUgbG9va3VwIHRhYmxlXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxwaGFiZXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuX2FscGhhYmV0TWFwW2FscGhhYmV0LmNoYXJBdChpKV0gPSBpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVuY29kZSh2YWx1ZSkge1xuICAgICAgICBsZXQgc291cmNlID0gYXJyYXlpZnkodmFsdWUpO1xuICAgICAgICBpZiAoc291cmNlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGRpZ2l0cyA9IFswXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2UubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGxldCBjYXJyeSA9IHNvdXJjZVtpXTtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZGlnaXRzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgY2FycnkgKz0gZGlnaXRzW2pdIDw8IDg7XG4gICAgICAgICAgICAgICAgZGlnaXRzW2pdID0gY2FycnkgJSB0aGlzLmJhc2U7XG4gICAgICAgICAgICAgICAgY2FycnkgPSAoY2FycnkgLyB0aGlzLmJhc2UpIHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlIChjYXJyeSA+IDApIHtcbiAgICAgICAgICAgICAgICBkaWdpdHMucHVzaChjYXJyeSAlIHRoaXMuYmFzZSk7XG4gICAgICAgICAgICAgICAgY2FycnkgPSAoY2FycnkgLyB0aGlzLmJhc2UpIHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgc3RyaW5nID0gXCJcIjtcbiAgICAgICAgLy8gZGVhbCB3aXRoIGxlYWRpbmcgemVyb3NcbiAgICAgICAgZm9yIChsZXQgayA9IDA7IHNvdXJjZVtrXSA9PT0gMCAmJiBrIDwgc291cmNlLmxlbmd0aCAtIDE7ICsraykge1xuICAgICAgICAgICAgc3RyaW5nICs9IHRoaXMuX2xlYWRlcjtcbiAgICAgICAgfVxuICAgICAgICAvLyBjb252ZXJ0IGRpZ2l0cyB0byBhIHN0cmluZ1xuICAgICAgICBmb3IgKGxldCBxID0gZGlnaXRzLmxlbmd0aCAtIDE7IHEgPj0gMDsgLS1xKSB7XG4gICAgICAgICAgICBzdHJpbmcgKz0gdGhpcy5hbHBoYWJldFtkaWdpdHNbcV1dO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgfVxuICAgIGRlY29kZSh2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mICh2YWx1ZSkgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJFeHBlY3RlZCBTdHJpbmdcIik7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGJ5dGVzID0gW107XG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShieXRlcyk7XG4gICAgICAgIH1cbiAgICAgICAgYnl0ZXMucHVzaCgwKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGJ5dGUgPSB0aGlzLl9hbHBoYWJldE1hcFt2YWx1ZVtpXV07XG4gICAgICAgICAgICBpZiAoYnl0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm9uLWJhc2VcIiArIHRoaXMuYmFzZSArIFwiIGNoYXJhY3RlclwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBjYXJyeSA9IGJ5dGU7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGJ5dGVzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgY2FycnkgKz0gYnl0ZXNbal0gKiB0aGlzLmJhc2U7XG4gICAgICAgICAgICAgICAgYnl0ZXNbal0gPSBjYXJyeSAmIDB4ZmY7XG4gICAgICAgICAgICAgICAgY2FycnkgPj49IDg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAoY2FycnkgPiAwKSB7XG4gICAgICAgICAgICAgICAgYnl0ZXMucHVzaChjYXJyeSAmIDB4ZmYpO1xuICAgICAgICAgICAgICAgIGNhcnJ5ID4+PSA4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGRlYWwgd2l0aCBsZWFkaW5nIHplcm9zXG4gICAgICAgIGZvciAobGV0IGsgPSAwOyB2YWx1ZVtrXSA9PT0gdGhpcy5fbGVhZGVyICYmIGsgPCB2YWx1ZS5sZW5ndGggLSAxOyArK2spIHtcbiAgICAgICAgICAgIGJ5dGVzLnB1c2goMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5aWZ5KG5ldyBVaW50OEFycmF5KGJ5dGVzLnJldmVyc2UoKSkpO1xuICAgIH1cbn1cbmNvbnN0IEJhc2UzMiA9IG5ldyBCYXNlWChcImFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MjM0NTY3XCIpO1xuY29uc3QgQmFzZTU4ID0gbmV3IEJhc2VYKFwiMTIzNDU2Nzg5QUJDREVGR0hKS0xNTlBRUlNUVVZXWFlaYWJjZGVmZ2hpamttbm9wcXJzdHV2d3h5elwiKTtcbmV4cG9ydCB7IEJhc2UzMiwgQmFzZTU4IH07XG4vL2NvbnNvbGUubG9nKEJhc2U1OC5kZWNvZGUoXCJRbWQyVjc3N281WHZKYllNZU1iOGsyblU1ZjhkM2NpVVE1WXBZdVdoenY4aURqXCIpKVxuLy9jb25zb2xlLmxvZyhCYXNlNTguZW5jb2RlKEJhc2U1OC5kZWNvZGUoXCJRbWQyVjc3N281WHZKYllNZU1iOGsyblU1ZjhkM2NpVVE1WXBZdVdoenY4aURqXCIpKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHsgdG9VdGY4Q29kZVBvaW50cywgX3RvVXRmOFN0cmluZywgVW5pY29kZU5vcm1hbGl6YXRpb25Gb3JtIH0gZnJvbSBcIi4vdXRmOFwiO1xuZnVuY3Rpb24gYnl0ZXMyKGRhdGEpIHtcbiAgICBpZiAoKGRhdGEubGVuZ3RoICUgNCkgIT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYmFkIGRhdGFcIik7XG4gICAgfVxuICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpICs9IDQpIHtcbiAgICAgICAgcmVzdWx0LnB1c2gocGFyc2VJbnQoZGF0YS5zdWJzdHJpbmcoaSwgaSArIDQpLCAxNikpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gY3JlYXRlVGFibGUoZGF0YSwgZnVuYykge1xuICAgIGlmICghZnVuYykge1xuICAgICAgICBmdW5jID0gZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBbcGFyc2VJbnQodmFsdWUsIDE2KV07IH07XG4gICAgfVxuICAgIGxldCBsbyA9IDA7XG4gICAgbGV0IHJlc3VsdCA9IHt9O1xuICAgIGRhdGEuc3BsaXQoXCIsXCIpLmZvckVhY2goKHBhaXIpID0+IHtcbiAgICAgICAgbGV0IGNvbXBzID0gcGFpci5zcGxpdChcIjpcIik7XG4gICAgICAgIGxvICs9IHBhcnNlSW50KGNvbXBzWzBdLCAxNik7XG4gICAgICAgIHJlc3VsdFtsb10gPSBmdW5jKGNvbXBzWzFdKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gY3JlYXRlUmFuZ2VUYWJsZShkYXRhKSB7XG4gICAgbGV0IGhpID0gMDtcbiAgICByZXR1cm4gZGF0YS5zcGxpdChcIixcIikubWFwKCh2KSA9PiB7XG4gICAgICAgIGxldCBjb21wcyA9IHYuc3BsaXQoXCItXCIpO1xuICAgICAgICBpZiAoY29tcHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBjb21wc1sxXSA9IFwiMFwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNvbXBzWzFdID09PSBcIlwiKSB7XG4gICAgICAgICAgICBjb21wc1sxXSA9IFwiMVwiO1xuICAgICAgICB9XG4gICAgICAgIGxldCBsbyA9IGhpICsgcGFyc2VJbnQoY29tcHNbMF0sIDE2KTtcbiAgICAgICAgaGkgPSBwYXJzZUludChjb21wc1sxXSwgMTYpO1xuICAgICAgICByZXR1cm4geyBsOiBsbywgaDogaGkgfTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIG1hdGNoTWFwKHZhbHVlLCByYW5nZXMpIHtcbiAgICBsZXQgbG8gPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmFuZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCByYW5nZSA9IHJhbmdlc1tpXTtcbiAgICAgICAgbG8gKz0gcmFuZ2UubDtcbiAgICAgICAgaWYgKHZhbHVlID49IGxvICYmIHZhbHVlIDw9IGxvICsgcmFuZ2UuaCAmJiAoKHZhbHVlIC0gbG8pICUgKHJhbmdlLmQgfHwgMSkpID09PSAwKSB7XG4gICAgICAgICAgICBpZiAocmFuZ2UuZSAmJiByYW5nZS5lLmluZGV4T2YodmFsdWUgLSBsbykgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmFuZ2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5jb25zdCBUYWJsZV9BXzFfcmFuZ2VzID0gY3JlYXRlUmFuZ2VUYWJsZShcIjIyMSwxMy0xYiw1Zi0sNDAtMTAsNTEtZiwxMS0zLDMtMywyLTIsMi00LDgsMiwxNSwyZCwyOC04LDg4LDQ4LDI3LSwzLTUsMTEtMjAsMjctLDgsMjgsMy01LDEyLDE4LGItYSwxYy00LDYtMTYsMi1kLDItMiwyLDFiLTQsMTctOSw4Zi0sMTAsZiwxZi0yLDFjLTM0LDMzLTE0ZSw0LDM2LSwxMy0sNi0yLDFhLWYsNCw5LSwzLSwxNyw4LDItMiw1LSwyLDgtLDMtLDQtOCwyLTMsMyw2LSwxNi02LDItLDctMywzLSwxNyw4LDMsMywzLSwyLDYtMywzLSw0LWEsNSwyLTYsMTAtYiw0LDgsMiw0LDE3LDgsMyw2LSxiLDQsNC0sMi1lLDItNCxiLTEwLDQsOS0sMy0sMTcsOCwzLSw1LSw5LTIsMy0sNC03LDMtMywzLDQtMyxjLTEwLDMsNy0yLDQsNS0yLDMsMiwzLTIsMy0yLDQtMiw5LDQtMyw2LTIsNCw1LTgsMi1lLGQtZCw0LDksNCwxOCxiLDYtMyw4LDQsNS02LDMtOCwzLTMsYi0xMSwzLDksNCwxOCxiLDYtMyw4LDQsNS02LDMtNiwyLDMtMyxiLTExLDMsOSw0LDE4LDExLTMsNy0sNCw1LTgsMi03LDMtMyxiLTExLDMsMTMtMiwxOSxhLDItLDgtMiwyLTMsNywyLDktMTEsNC1iLDNiLTMsMWUtMjQsMywyLSwzLDItLDItNSw1LDgsNCwyLDItLDMsZSw0LSw2LDIsNy0sYi0sMy0yMSw0OSwyMy01LDFjLTMsOSwyNSwxMC0sMi0yZiwyMyw2LDMsOC0yLDUtNSwxYi00NSwyNy05LDJhLSwyLTMsNWItNCw0NS00LDUzLTUsOCw0MCwyLDUtLDgsMiw1LSwyOCwyLDUtLDIwLDIsNS0sOCwyLDUtLDgsOCwxOCwyMCwyLDUtLDgsMjgsMTQtNSwxZC0yMiw1Ni1iLDI3Ny04LDFlLTIsNTItZSxlLDgtYSwxOC04LDE1LWIsZSw0LDMtYiw1ZS0yLGItMTUsMTAsYi01LDU5LTcsMmItNTU1LDlkLTMsNWItNSwxNy0sNy0sMjctLDctLDksMiwyLDIsMjAtLDM2LDEwLGYtLDcsMTQtLDQsYSw1NC0zLDItNiw2LTUsOS0sMWMtMTAsMTMtMWQsMWMtMTQsM2MtLDEwLTYsMzItYiwyNDAtMzAsMjgtMTgsYy0xNCxhMCwxMTUtLDMsNjYtLGItNzYsNSw1LSwxZCwyNCwyLDUtMiwyLDgtLDM1LTIsMTksZi0xMCwxZC0zLDMxMS0zN2YsMWIsNWEtYixkNy0xOSxkLTMsNDEsNTctLDY4LTQsMjktMyw1ZiwyOS0zNywyZS0yLDI1LWMsMmMtMiw0ZS0zLDMwLDc4LTMsNjQtLDIwLDE5YjctNDksNTFhNy01OSw0OGUtMiwzOC03MzgsMmJhNS01YiwyMjJmLSwzYy05NCw4LWIsNi00LDFiLDYsMiwzLDMsNmQtMjAsMTZlLWYsNDEtLDM3LTcsMmUtMiwxMS1mLDUtYiwxOC0sYiwxNCw1LTMsNiw4OC0sMixiZi0yLDctLDctLDctLDQtMiw4LDgtOSw4LTJmZiwyMCw1LWIsMWMtYjQsMjctLDI3LWNiYjEsZjctOSwyOC0yLGI1LTIyMSw1Niw0OCwzLSwyLSwzLSw1LGQsMiw1LDMsNDIsNS0sOSw4LDFkLDUsNiwyLTIsOCwxNTMtMywxMjMtMywzMy0yN2ZkLGE2ZGEtNTEyOCwyMWYtNWRmLDMtZmZmZCwzLWZmZmQsMy1mZmZkLDMtZmZmZCwzLWZmZmQsMy1mZmZkLDMtZmZmZCwzLWZmZmQsMy1mZmZkLDMtZmZmZCwzLWZmZmQsMywyLTFkLDYxLWZmN2RcIik7XG4vLyBAVE9ETzogTWFrZSB0aGlzIHJlbGF0aXZlLi4uXG5jb25zdCBUYWJsZV9CXzFfZmxhZ3MgPSBcImFkLDM0ZiwxODA2LDE4MGIsMTgwYywxODBkLDIwMGIsMjAwYywyMDBkLDIwNjAsZmVmZlwiLnNwbGl0KFwiLFwiKS5tYXAoKHYpID0+IHBhcnNlSW50KHYsIDE2KSk7XG5jb25zdCBUYWJsZV9CXzJfcmFuZ2VzID0gW1xuICAgIHsgaDogMjUsIHM6IDMyLCBsOiA2NSB9LFxuICAgIHsgaDogMzAsIHM6IDMyLCBlOiBbMjNdLCBsOiAxMjcgfSxcbiAgICB7IGg6IDU0LCBzOiAxLCBlOiBbNDhdLCBsOiA2NCwgZDogMiB9LFxuICAgIHsgaDogMTQsIHM6IDEsIGw6IDU3LCBkOiAyIH0sXG4gICAgeyBoOiA0NCwgczogMSwgbDogMTcsIGQ6IDIgfSxcbiAgICB7IGg6IDEwLCBzOiAxLCBlOiBbMiwgNiwgOF0sIGw6IDYxLCBkOiAyIH0sXG4gICAgeyBoOiAxNiwgczogMSwgbDogNjgsIGQ6IDIgfSxcbiAgICB7IGg6IDg0LCBzOiAxLCBlOiBbMTgsIDI0LCA2Nl0sIGw6IDE5LCBkOiAyIH0sXG4gICAgeyBoOiAyNiwgczogMzIsIGU6IFsxN10sIGw6IDQzNSB9LFxuICAgIHsgaDogMjIsIHM6IDEsIGw6IDcxLCBkOiAyIH0sXG4gICAgeyBoOiAxNSwgczogODAsIGw6IDQwIH0sXG4gICAgeyBoOiAzMSwgczogMzIsIGw6IDE2IH0sXG4gICAgeyBoOiAzMiwgczogMSwgbDogODAsIGQ6IDIgfSxcbiAgICB7IGg6IDUyLCBzOiAxLCBsOiA0MiwgZDogMiB9LFxuICAgIHsgaDogMTIsIHM6IDEsIGw6IDU1LCBkOiAyIH0sXG4gICAgeyBoOiA0MCwgczogMSwgZTogWzM4XSwgbDogMTUsIGQ6IDIgfSxcbiAgICB7IGg6IDE0LCBzOiAxLCBsOiA0OCwgZDogMiB9LFxuICAgIHsgaDogMzcsIHM6IDQ4LCBsOiA0OSB9LFxuICAgIHsgaDogMTQ4LCBzOiAxLCBsOiA2MzUxLCBkOiAyIH0sXG4gICAgeyBoOiA4OCwgczogMSwgbDogMTYwLCBkOiAyIH0sXG4gICAgeyBoOiAxNSwgczogMTYsIGw6IDcwNCB9LFxuICAgIHsgaDogMjUsIHM6IDI2LCBsOiA4NTQgfSxcbiAgICB7IGg6IDI1LCBzOiAzMiwgbDogNTU5MTUgfSxcbiAgICB7IGg6IDM3LCBzOiA0MCwgbDogMTI0NyB9LFxuICAgIHsgaDogMjUsIHM6IC0xMTk3MTEsIGw6IDUzMjQ4IH0sXG4gICAgeyBoOiAyNSwgczogLTExOTc2MywgbDogNTIgfSxcbiAgICB7IGg6IDI1LCBzOiAtMTE5ODE1LCBsOiA1MiB9LFxuICAgIHsgaDogMjUsIHM6IC0xMTk4NjcsIGU6IFsxLCA0LCA1LCA3LCA4LCAxMSwgMTIsIDE3XSwgbDogNTIgfSxcbiAgICB7IGg6IDI1LCBzOiAtMTE5OTE5LCBsOiA1MiB9LFxuICAgIHsgaDogMjQsIHM6IC0xMTk5NzEsIGU6IFsyLCA3LCA4LCAxN10sIGw6IDUyIH0sXG4gICAgeyBoOiAyNCwgczogLTEyMDAyMywgZTogWzIsIDcsIDEzLCAxNSwgMTYsIDE3XSwgbDogNTIgfSxcbiAgICB7IGg6IDI1LCBzOiAtMTIwMDc1LCBsOiA1MiB9LFxuICAgIHsgaDogMjUsIHM6IC0xMjAxMjcsIGw6IDUyIH0sXG4gICAgeyBoOiAyNSwgczogLTEyMDE3OSwgbDogNTIgfSxcbiAgICB7IGg6IDI1LCBzOiAtMTIwMjMxLCBsOiA1MiB9LFxuICAgIHsgaDogMjUsIHM6IC0xMjAyODMsIGw6IDUyIH0sXG4gICAgeyBoOiAyNSwgczogLTEyMDMzNSwgbDogNTIgfSxcbiAgICB7IGg6IDI0LCBzOiAtMTE5NTQzLCBlOiBbMTddLCBsOiA1NiB9LFxuICAgIHsgaDogMjQsIHM6IC0xMTk2MDEsIGU6IFsxN10sIGw6IDU4IH0sXG4gICAgeyBoOiAyNCwgczogLTExOTY1OSwgZTogWzE3XSwgbDogNTggfSxcbiAgICB7IGg6IDI0LCBzOiAtMTE5NzE3LCBlOiBbMTddLCBsOiA1OCB9LFxuICAgIHsgaDogMjQsIHM6IC0xMTk3NzUsIGU6IFsxN10sIGw6IDU4IH1cbl07XG5jb25zdCBUYWJsZV9CXzJfbHV0X2FicyA9IGNyZWF0ZVRhYmxlKFwiYjU6M2JjLGMzOmZmLDc6NzMsMjoyNTMsNToyNTQsMzoyNTYsMToyNTcsNToyNTksMToyNWIsMzoyNjAsMToyNjMsMjoyNjksMToyNjgsNToyNmYsMToyNzIsMjoyNzUsNzoyODAsMzoyODMsNToyODgsMzoyOGEsMToyOGIsNToyOTIsM2Y6MTk1LDE6MWJmLDI5OjE5ZSwxMjU6M2I5LDhiOjNiMiwxOjNiOCwxOjNjNSwzOjNjNiwxOjNjMCwxYTozYmEsMTozYzEsMTozYzMsMjozYjgsMTozYjUsMWJjOTozYjksMWM6MWY3NiwxOjFmNzcsZjoxZjdhLDE6MWY3YixkOjFmNzgsMToxZjc5LDE6MWY3YywxOjFmN2QsMTA3OjYzLDU6MjViLDQ6NjgsMTo2OCwxOjY4LDM6NjksMTo2OSwxOjZjLDM6NmUsNDo3MCwxOjcxLDE6NzIsMTo3MiwxOjcyLDc6N2EsMjozYzksMjo3YSwyOjZiLDE6ZTUsMTo2MiwxOjYzLDM6NjUsMTo2NiwyOjZkLGI6M2IzLDE6M2MwLDY6NjQsMWI1NzQ6M2I4LDFhOjNjMywyMDozYjgsMWE6M2MzLDIwOjNiOCwxYTozYzMsMjA6M2I4LDFhOjNjMywyMDozYjgsMWE6M2MzXCIpO1xuY29uc3QgVGFibGVfQl8yX2x1dF9yZWwgPSBjcmVhdGVUYWJsZShcIjE3OToxLDI6MSwyOjEsNToxLDI6MSxhOjRmLGE6MSw4OjEsMjoxLDI6MSwzOjEsNToxLDM6MSw0OjEsMjoxLDM6MSw0OjEsODoyLDE6MSwyOjIsMToxLDI6MiwyNzoyLDE5NToyNiwyOjI1LDE6MjUsMToyNSwyOjQwLDI6M2YsMTozZiwzMzoxLDExOi02LDE6LTksMWFjNzotM2EsNmQ6LTgsMTotOCwxOi04LDE6LTgsMTotOCwxOi04LDE6LTgsMTotOCw5Oi04LDE6LTgsMTotOCwxOi04LDE6LTgsMTotOCxiOi04LDE6LTgsMTotOCwxOi04LDE6LTgsMTotOCwxOi04LDE6LTgsOTotOCwxOi04LDE6LTgsMTotOCwxOi04LDE6LTgsMTotOCwxOi04LDk6LTgsMTotOCwxOi04LDE6LTgsMTotOCwxOi04LGM6LTgsMjotOCwyOi04LDI6LTgsOTotOCwxOi04LDE6LTgsMTotOCwxOi04LDE6LTgsMTotOCwxOi04LDQ5Oi04LDE6LTgsMTotNGEsMTotNGEsZDotNTYsMTotNTYsMTotNTYsMTotNTYsZDotOCwxOi04LGY6LTgsMTotOCwzOi03XCIpO1xuY29uc3QgVGFibGVfQl8yX2NvbXBsZXggPSBjcmVhdGVUYWJsZShcImRmOjAwNzMwMDczLDUxOjAwNjkwMzA3LDE5OjAyQkMwMDZFLGE3OjAwNkEwMzBDLDE4YTowMDIwMDNCOSwxNjowM0I5MDMwODAzMDEsMjA6MDNDNTAzMDgwMzAxLDFkNzowNTY1MDU4MiwxOTBmOjAwNjgwMzMxLDE6MDA3NDAzMDgsMTowMDc3MDMwQSwxOjAwNzkwMzBBLDE6MDA2MTAyQkUsYjY6MDNDNTAzMTMsMjowM0M1MDMxMzAzMDAsMjowM0M1MDMxMzAzMDEsMjowM0M1MDMxMzAzNDIsMmE6MUYwMDAzQjksMToxRjAxMDNCOSwxOjFGMDIwM0I5LDE6MUYwMzAzQjksMToxRjA0MDNCOSwxOjFGMDUwM0I5LDE6MUYwNjAzQjksMToxRjA3MDNCOSwxOjFGMDAwM0I5LDE6MUYwMTAzQjksMToxRjAyMDNCOSwxOjFGMDMwM0I5LDE6MUYwNDAzQjksMToxRjA1MDNCOSwxOjFGMDYwM0I5LDE6MUYwNzAzQjksMToxRjIwMDNCOSwxOjFGMjEwM0I5LDE6MUYyMjAzQjksMToxRjIzMDNCOSwxOjFGMjQwM0I5LDE6MUYyNTAzQjksMToxRjI2MDNCOSwxOjFGMjcwM0I5LDE6MUYyMDAzQjksMToxRjIxMDNCOSwxOjFGMjIwM0I5LDE6MUYyMzAzQjksMToxRjI0MDNCOSwxOjFGMjUwM0I5LDE6MUYyNjAzQjksMToxRjI3MDNCOSwxOjFGNjAwM0I5LDE6MUY2MTAzQjksMToxRjYyMDNCOSwxOjFGNjMwM0I5LDE6MUY2NDAzQjksMToxRjY1MDNCOSwxOjFGNjYwM0I5LDE6MUY2NzAzQjksMToxRjYwMDNCOSwxOjFGNjEwM0I5LDE6MUY2MjAzQjksMToxRjYzMDNCOSwxOjFGNjQwM0I5LDE6MUY2NTAzQjksMToxRjY2MDNCOSwxOjFGNjcwM0I5LDM6MUY3MDAzQjksMTowM0IxMDNCOSwxOjAzQUMwM0I5LDI6MDNCMTAzNDIsMTowM0IxMDM0MjAzQjksNTowM0IxMDNCOSw2OjFGNzQwM0I5LDE6MDNCNzAzQjksMTowM0FFMDNCOSwyOjAzQjcwMzQyLDE6MDNCNzAzNDIwM0I5LDU6MDNCNzAzQjksNjowM0I5MDMwODAzMDAsMTowM0I5MDMwODAzMDEsMzowM0I5MDM0MiwxOjAzQjkwMzA4MDM0MixiOjAzQzUwMzA4MDMwMCwxOjAzQzUwMzA4MDMwMSwxOjAzQzEwMzEzLDI6MDNDNTAzNDIsMTowM0M1MDMwODAzNDIsYjoxRjdDMDNCOSwxOjAzQzkwM0I5LDE6MDNDRTAzQjksMjowM0M5MDM0MiwxOjAzQzkwMzQyMDNCOSw1OjAzQzkwM0I5LGFjOjAwNzIwMDczLDViOjAwQjAwMDYzLDY6MDBCMDAwNjYsZDowMDZFMDA2RixhOjAwNzMwMDZELDE6MDA3NDAwNjUwMDZDLDE6MDA3NDAwNkQsMTI0ZjowMDY4MDA3MDAwNjEsMjowMDYxMDA3NSwyOjAwNkYwMDc2LGI6MDA3MDAwNjEsMTowMDZFMDA2MSwxOjAzQkMwMDYxLDE6MDA2RDAwNjEsMTowMDZCMDA2MSwxOjAwNkIwMDYyLDE6MDA2RDAwNjIsMTowMDY3MDA2MiwzOjAwNzAwMDY2LDE6MDA2RTAwNjYsMTowM0JDMDA2Niw0OjAwNjgwMDdBLDE6MDA2QjAwNjgwMDdBLDE6MDA2RDAwNjgwMDdBLDE6MDA2NzAwNjgwMDdBLDE6MDA3NDAwNjgwMDdBLDE1OjAwNzAwMDYxLDE6MDA2QjAwNzAwMDYxLDE6MDA2RDAwNzAwMDYxLDE6MDA2NzAwNzAwMDYxLDg6MDA3MDAwNzYsMTowMDZFMDA3NiwxOjAzQkMwMDc2LDE6MDA2RDAwNzYsMTowMDZCMDA3NiwxOjAwNkQwMDc2LDE6MDA3MDAwNzcsMTowMDZFMDA3NywxOjAzQkMwMDc3LDE6MDA2RDAwNzcsMTowMDZCMDA3NywxOjAwNkQwMDc3LDE6MDA2QjAzQzksMTowMDZEMDNDOSwyOjAwNjIwMDcxLDM6MDA2MzIyMTUwMDZCMDA2NywxOjAwNjMwMDZGMDAyRSwxOjAwNjQwMDYyLDE6MDA2NzAwNzksMjowMDY4MDA3MCwyOjAwNkIwMDZCLDE6MDA2QjAwNkQsOTowMDcwMDA2OCwyOjAwNzAwMDcwMDA2RCwxOjAwNzAwMDcyLDI6MDA3MzAwNzYsMTowMDc3MDA2MixjNzIzOjAwNjYwMDY2LDE6MDA2NjAwNjksMTowMDY2MDA2QywxOjAwNjYwMDY2MDA2OSwxOjAwNjYwMDY2MDA2QywxOjAwNzMwMDc0LDE6MDA3MzAwNzQsZDowNTc0MDU3NiwxOjA1NzQwNTY1LDE6MDU3NDA1NkIsMTowNTdFMDU3NiwxOjA1NzQwNTZEXCIsIGJ5dGVzMik7XG5jb25zdCBUYWJsZV9DX3JhbmdlcyA9IGNyZWF0ZVJhbmdlVGFibGUoXCI4MC0yMCwyYTAtLDM5YywzMixmNzEsMThlLDdmMi1mLDE5LTcsMzAtNCw3LTUsZjgxLWIsNSxhODAwLTIwZmYsNGQxLTFmLDExMCxmYS02LGQxNzQtNywyZTg0LSxmZmZmLSxmZmZmLSxmZmZmLSxmZmZmLSxmZmZmLSxmZmZmLSxmZmZmLSxmZmZmLSxmZmZmLSxmZmZmLSxmZmZmLSxmZmZmLSwyLDFmLTVmLGZmN2YtMjAwMDFcIik7XG5mdW5jdGlvbiBmbGF0dGVuKHZhbHVlcykge1xuICAgIHJldHVybiB2YWx1ZXMucmVkdWNlKChhY2N1bSwgdmFsdWUpID0+IHtcbiAgICAgICAgdmFsdWUuZm9yRWFjaCgodmFsdWUpID0+IHsgYWNjdW0ucHVzaCh2YWx1ZSk7IH0pO1xuICAgICAgICByZXR1cm4gYWNjdW07XG4gICAgfSwgW10pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIF9uYW1lcHJlcFRhYmxlQTEoY29kZXBvaW50KSB7XG4gICAgcmV0dXJuICEhbWF0Y2hNYXAoY29kZXBvaW50LCBUYWJsZV9BXzFfcmFuZ2VzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBfbmFtZXByZXBUYWJsZUIyKGNvZGVwb2ludCkge1xuICAgIGxldCByYW5nZSA9IG1hdGNoTWFwKGNvZGVwb2ludCwgVGFibGVfQl8yX3Jhbmdlcyk7XG4gICAgaWYgKHJhbmdlKSB7XG4gICAgICAgIHJldHVybiBbY29kZXBvaW50ICsgcmFuZ2Uuc107XG4gICAgfVxuICAgIGxldCBjb2RlcyA9IFRhYmxlX0JfMl9sdXRfYWJzW2NvZGVwb2ludF07XG4gICAgaWYgKGNvZGVzKSB7XG4gICAgICAgIHJldHVybiBjb2RlcztcbiAgICB9XG4gICAgbGV0IHNoaWZ0ID0gVGFibGVfQl8yX2x1dF9yZWxbY29kZXBvaW50XTtcbiAgICBpZiAoc2hpZnQpIHtcbiAgICAgICAgcmV0dXJuIFtjb2RlcG9pbnQgKyBzaGlmdFswXV07XG4gICAgfVxuICAgIGxldCBjb21wbGV4ID0gVGFibGVfQl8yX2NvbXBsZXhbY29kZXBvaW50XTtcbiAgICBpZiAoY29tcGxleCkge1xuICAgICAgICByZXR1cm4gY29tcGxleDtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5leHBvcnQgZnVuY3Rpb24gX25hbWVwcmVwVGFibGVDKGNvZGVwb2ludCkge1xuICAgIHJldHVybiAhIW1hdGNoTWFwKGNvZGVwb2ludCwgVGFibGVfQ19yYW5nZXMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG5hbWVwcmVwKHZhbHVlKSB7XG4gICAgLy8gVGhpcyBhbGxvd3MgcGxhdGZvcm1zIHdpdGggaW5jb21wbGV0ZSBub3JtYWxpemUgdG8gYnlwYXNzXG4gICAgLy8gaXQgZm9yIHZlcnkgYmFzaWMgbmFtZXMgd2hpY2ggdGhlIGJ1aWx0LWluIHRvTG93ZXJDYXNlXG4gICAgLy8gd2lsbCBjZXJ0YWlubHkgaGFuZGxlIGNvcnJlY3RseVxuICAgIGlmICh2YWx1ZS5tYXRjaCgvXlthLXowLTktXSokL2kpICYmIHZhbHVlLmxlbmd0aCA8PSA1OSkge1xuICAgICAgICByZXR1cm4gdmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICB9XG4gICAgLy8gR2V0IHRoZSBjb2RlIHBvaW50cyAoa2VlcGluZyB0aGUgY3VycmVudCBub3JtYWxpemF0aW9uKVxuICAgIGxldCBjb2RlcyA9IHRvVXRmOENvZGVQb2ludHModmFsdWUpO1xuICAgIGNvZGVzID0gZmxhdHRlbihjb2Rlcy5tYXAoKGNvZGUpID0+IHtcbiAgICAgICAgLy8gU3Vic3RpdHV0ZSBUYWJsZSBCLjEgKE1hcHMgdG8gTm90aGluZylcbiAgICAgICAgaWYgKFRhYmxlX0JfMV9mbGFncy5pbmRleE9mKGNvZGUpID49IDApIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29kZSA+PSAweGZlMDAgJiYgY29kZSA8PSAweGZlMGYpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTdWJzdGl0dXRlIFRhYmxlIEIuMiAoQ2FzZSBGb2xkaW5nKVxuICAgICAgICBsZXQgY29kZXNUYWJsZUIyID0gX25hbWVwcmVwVGFibGVCMihjb2RlKTtcbiAgICAgICAgaWYgKGNvZGVzVGFibGVCMikge1xuICAgICAgICAgICAgcmV0dXJuIGNvZGVzVGFibGVCMjtcbiAgICAgICAgfVxuICAgICAgICAvLyBObyBTdWJzdGl0dXRpb25cbiAgICAgICAgcmV0dXJuIFtjb2RlXTtcbiAgICB9KSk7XG4gICAgLy8gTm9ybWFsaXplIHVzaW5nIGZvcm0gS0NcbiAgICBjb2RlcyA9IHRvVXRmOENvZGVQb2ludHMoX3RvVXRmOFN0cmluZyhjb2RlcyksIFVuaWNvZGVOb3JtYWxpemF0aW9uRm9ybS5ORktDKTtcbiAgICAvLyBQcm9oaWJpdCBUYWJsZXMgQy4xLjIsIEMuMi4yLCBDLjMsIEMuNCwgQy41LCBDLjYsIEMuNywgQy44LCBDLjlcbiAgICBjb2Rlcy5mb3JFYWNoKChjb2RlKSA9PiB7XG4gICAgICAgIGlmIChfbmFtZXByZXBUYWJsZUMoY29kZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNUUklOR1BSRVBfQ09OVEFJTlNfUFJPSElCSVRFRFwiKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vIFByb2hpYml0IFVuYXNzaWduZWQgQ29kZSBQb2ludHMgKFRhYmxlIEEuMSlcbiAgICBjb2Rlcy5mb3JFYWNoKChjb2RlKSA9PiB7XG4gICAgICAgIGlmIChfbmFtZXByZXBUYWJsZUExKGNvZGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTVFJJTkdQUkVQX0NPTlRBSU5TX1VOQVNTSUdORURcIik7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBJRE5BIGV4dHJhc1xuICAgIGxldCBuYW1lID0gX3RvVXRmOFN0cmluZyhjb2Rlcyk7XG4gICAgLy8gSUROQTogNC4yLjMuMVxuICAgIGlmIChuYW1lLnN1YnN0cmluZygwLCAxKSA9PT0gXCItXCIgfHwgbmFtZS5zdWJzdHJpbmcoMiwgNCkgPT09IFwiLS1cIiB8fCBuYW1lLnN1YnN0cmluZyhuYW1lLmxlbmd0aCAtIDEpID09PSBcIi1cIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGh5cGhlblwiKTtcbiAgICB9XG4gICAgLy8gSUROQTogNC4yLjRcbiAgICBpZiAobmFtZS5sZW5ndGggPiA2Mykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0b28gbG9uZ1wiKTtcbiAgICB9XG4gICAgcmV0dXJuIG5hbWU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZG5hLmpzLm1hcCIsImltcG9ydCB7IGNvbmNhdCwgaGV4bGlmeSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9ieXRlc1wiO1xuaW1wb3J0IHsgbmFtZXByZXAsIHRvVXRmOEJ5dGVzIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3N0cmluZ3NcIjtcbmltcG9ydCB7IGtlY2NhazI1NiB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9rZWNjYWsyNTZcIjtcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcbmNvbnN0IFplcm9zID0gbmV3IFVpbnQ4QXJyYXkoMzIpO1xuWmVyb3MuZmlsbCgwKTtcbmNvbnN0IFBhcnRpdGlvbiA9IG5ldyBSZWdFeHAoXCJeKCguKilcXFxcLik/KFteLl0rKSRcIik7XG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZE5hbWUobmFtZSkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNvbXBzID0gbmFtZS5zcGxpdChcIi5cIik7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29tcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChuYW1lcHJlcChjb21wc1tpXSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZW1wdHlcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG5hbWVoYXNoKG5hbWUpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAodHlwZW9mIChuYW1lKSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBFTlMgbmFtZTsgbm90IGEgc3RyaW5nXCIsIFwibmFtZVwiLCBuYW1lKTtcbiAgICB9XG4gICAgbGV0IGN1cnJlbnQgPSBuYW1lO1xuICAgIGxldCByZXN1bHQgPSBaZXJvcztcbiAgICB3aGlsZSAoY3VycmVudC5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcGFydGl0aW9uID0gY3VycmVudC5tYXRjaChQYXJ0aXRpb24pO1xuICAgICAgICBpZiAocGFydGl0aW9uID09IG51bGwgfHwgcGFydGl0aW9uWzJdID09PSBcIlwiKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBFTlMgYWRkcmVzczsgbWlzc2luZyBjb21wb25lbnRcIiwgXCJuYW1lXCIsIG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxhYmVsID0gdG9VdGY4Qnl0ZXMobmFtZXByZXAocGFydGl0aW9uWzNdKSk7XG4gICAgICAgIHJlc3VsdCA9IGtlY2NhazI1Nihjb25jYXQoW3Jlc3VsdCwga2VjY2FrMjU2KGxhYmVsKV0pKTtcbiAgICAgICAgY3VycmVudCA9IHBhcnRpdGlvblsyXSB8fCBcIlwiO1xuICAgIH1cbiAgICByZXR1cm4gaGV4bGlmeShyZXN1bHQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRuc0VuY29kZShuYW1lKSB7XG4gICAgcmV0dXJuIGhleGxpZnkoY29uY2F0KG5hbWUuc3BsaXQoXCIuXCIpLm1hcCgoY29tcCkgPT4ge1xuICAgICAgICAvLyBXZSBqYW0gaW4gYW4gXyBwcmVmaXggdG8gZmlsbCBpbiB3aXRoIHRoZSBsZW5ndGggbGF0ZXJcbiAgICAgICAgLy8gTm90ZTogTmFtZXByZXAgdGhyb3dzIGlmIHRoZSBjb21wb25lbnQgaXMgb3ZlciA2MyBieXRlc1xuICAgICAgICBjb25zdCBieXRlcyA9IHRvVXRmOEJ5dGVzKFwiX1wiICsgbmFtZXByZXAoY29tcCkpO1xuICAgICAgICBieXRlc1swXSA9IGJ5dGVzLmxlbmd0aCAtIDE7XG4gICAgICAgIHJldHVybiBieXRlcztcbiAgICB9KSkpICsgXCIwMFwiO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmFtZWhhc2guanMubWFwIiwiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSBcIm5ldHdvcmtzLzUuNi40XCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdmVyc2lvbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcbjtcbmZ1bmN0aW9uIGlzUmVuZXR3b3JrYWJsZSh2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgJiYgdHlwZW9mICh2YWx1ZS5yZW5ldHdvcmspID09PSBcImZ1bmN0aW9uXCIpO1xufVxuZnVuY3Rpb24gZXRoRGVmYXVsdFByb3ZpZGVyKG5ldHdvcmspIHtcbiAgICBjb25zdCBmdW5jID0gZnVuY3Rpb24gKHByb3ZpZGVycywgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PSBudWxsKSB7XG4gICAgICAgICAgICBvcHRpb25zID0ge307XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJvdmlkZXJMaXN0ID0gW107XG4gICAgICAgIGlmIChwcm92aWRlcnMuSW5mdXJhUHJvdmlkZXIgJiYgb3B0aW9ucy5pbmZ1cmEgIT09IFwiLVwiKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHByb3ZpZGVyTGlzdC5wdXNoKG5ldyBwcm92aWRlcnMuSW5mdXJhUHJvdmlkZXIobmV0d29yaywgb3B0aW9ucy5pbmZ1cmEpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikgeyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3ZpZGVycy5FdGhlcnNjYW5Qcm92aWRlciAmJiBvcHRpb25zLmV0aGVyc2NhbiAhPT0gXCItXCIpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcHJvdmlkZXJMaXN0LnB1c2gobmV3IHByb3ZpZGVycy5FdGhlcnNjYW5Qcm92aWRlcihuZXR3b3JrLCBvcHRpb25zLmV0aGVyc2NhbikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvdmlkZXJzLkFsY2hlbXlQcm92aWRlciAmJiBvcHRpb25zLmFsY2hlbXkgIT09IFwiLVwiKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHByb3ZpZGVyTGlzdC5wdXNoKG5ldyBwcm92aWRlcnMuQWxjaGVteVByb3ZpZGVyKG5ldHdvcmssIG9wdGlvbnMuYWxjaGVteSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvdmlkZXJzLlBvY2tldFByb3ZpZGVyICYmIG9wdGlvbnMucG9ja2V0ICE9PSBcIi1cIikge1xuICAgICAgICAgICAgLy8gVGhlc2UgbmV0d29ya3MgYXJlIGN1cnJlbnRseSBmYXVsdHkgb24gUG9ja2V0IGFzIHRoZWlyXG4gICAgICAgICAgICAvLyBuZXR3b3JrIGRvZXMgbm90IGhhbmRsZSB0aGUgQmVybGluIGhhcmRmb3JrLCB3aGljaCBpc1xuICAgICAgICAgICAgLy8gbGl2ZSBvbiB0aGVzZSBvbmVzLlxuICAgICAgICAgICAgLy8gQFRPRE86IFRoaXMgZ29lcyBhd2F5IG9uY2UgUG9ja2V0IGhhcyB1cGdyYWRlZCB0aGVpciBub2Rlc1xuICAgICAgICAgICAgY29uc3Qgc2tpcCA9IFtcImdvZXJsaVwiLCBcInJvcHN0ZW5cIiwgXCJyaW5rZWJ5XCJdO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm92aWRlciA9IG5ldyBwcm92aWRlcnMuUG9ja2V0UHJvdmlkZXIobmV0d29yaywgb3B0aW9ucy5wb2NrZXQpO1xuICAgICAgICAgICAgICAgIGlmIChwcm92aWRlci5uZXR3b3JrICYmIHNraXAuaW5kZXhPZihwcm92aWRlci5uZXR3b3JrLm5hbWUpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlckxpc3QucHVzaChwcm92aWRlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvdmlkZXJzLkNsb3VkZmxhcmVQcm92aWRlciAmJiBvcHRpb25zLmNsb3VkZmxhcmUgIT09IFwiLVwiKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHByb3ZpZGVyTGlzdC5wdXNoKG5ldyBwcm92aWRlcnMuQ2xvdWRmbGFyZVByb3ZpZGVyKG5ldHdvcmspKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikgeyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3ZpZGVycy5BbmtyUHJvdmlkZXIgJiYgb3B0aW9ucy5hbmtyICE9PSBcIi1cIikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBza2lwID0gW1wicm9wc3RlblwiXTtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm92aWRlciA9IG5ldyBwcm92aWRlcnMuQW5rclByb3ZpZGVyKG5ldHdvcmssIG9wdGlvbnMuYW5rcik7XG4gICAgICAgICAgICAgICAgaWYgKHByb3ZpZGVyLm5ldHdvcmsgJiYgc2tpcC5pbmRleE9mKHByb3ZpZGVyLm5ldHdvcmsubmFtZSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyTGlzdC5wdXNoKHByb3ZpZGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwcm92aWRlckxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvdmlkZXJzLkZhbGxiYWNrUHJvdmlkZXIpIHtcbiAgICAgICAgICAgIGxldCBxdW9ydW0gPSAxO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMucXVvcnVtICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBxdW9ydW0gPSBvcHRpb25zLnF1b3J1bTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG5ldHdvcmsgPT09IFwiaG9tZXN0ZWFkXCIpIHtcbiAgICAgICAgICAgICAgICBxdW9ydW0gPSAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBwcm92aWRlcnMuRmFsbGJhY2tQcm92aWRlcihwcm92aWRlckxpc3QsIHF1b3J1bSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByb3ZpZGVyTGlzdFswXTtcbiAgICB9O1xuICAgIGZ1bmMucmVuZXR3b3JrID0gZnVuY3Rpb24gKG5ldHdvcmspIHtcbiAgICAgICAgcmV0dXJuIGV0aERlZmF1bHRQcm92aWRlcihuZXR3b3JrKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jO1xufVxuZnVuY3Rpb24gZXRjRGVmYXVsdFByb3ZpZGVyKHVybCwgbmV0d29yaykge1xuICAgIGNvbnN0IGZ1bmMgPSBmdW5jdGlvbiAocHJvdmlkZXJzLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChwcm92aWRlcnMuSnNvblJwY1Byb3ZpZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IHByb3ZpZGVycy5Kc29uUnBjUHJvdmlkZXIodXJsLCBuZXR3b3JrKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIGZ1bmMucmVuZXR3b3JrID0gZnVuY3Rpb24gKG5ldHdvcmspIHtcbiAgICAgICAgcmV0dXJuIGV0Y0RlZmF1bHRQcm92aWRlcih1cmwsIG5ldHdvcmspO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmM7XG59XG5jb25zdCBob21lc3RlYWQgPSB7XG4gICAgY2hhaW5JZDogMSxcbiAgICBlbnNBZGRyZXNzOiBcIjB4MDAwMDAwMDAwMDBDMkUwNzRlQzY5QTBkRmIyOTk3QkE2QzdkMmUxZVwiLFxuICAgIG5hbWU6IFwiaG9tZXN0ZWFkXCIsXG4gICAgX2RlZmF1bHRQcm92aWRlcjogZXRoRGVmYXVsdFByb3ZpZGVyKFwiaG9tZXN0ZWFkXCIpXG59O1xuY29uc3Qgcm9wc3RlbiA9IHtcbiAgICBjaGFpbklkOiAzLFxuICAgIGVuc0FkZHJlc3M6IFwiMHgwMDAwMDAwMDAwMEMyRTA3NGVDNjlBMGRGYjI5OTdCQTZDN2QyZTFlXCIsXG4gICAgbmFtZTogXCJyb3BzdGVuXCIsXG4gICAgX2RlZmF1bHRQcm92aWRlcjogZXRoRGVmYXVsdFByb3ZpZGVyKFwicm9wc3RlblwiKVxufTtcbmNvbnN0IGNsYXNzaWNNb3Jkb3IgPSB7XG4gICAgY2hhaW5JZDogNjMsXG4gICAgbmFtZTogXCJjbGFzc2ljTW9yZG9yXCIsXG4gICAgX2RlZmF1bHRQcm92aWRlcjogZXRjRGVmYXVsdFByb3ZpZGVyKFwiaHR0cHM6Ly93d3cuZXRoZXJjbHVzdGVyLmNvbS9tb3Jkb3JcIiwgXCJjbGFzc2ljTW9yZG9yXCIpXG59O1xuLy8gU2VlOiBodHRwczovL2NoYWlubGlzdC5vcmdcbmNvbnN0IG5ldHdvcmtzID0ge1xuICAgIHVuc3BlY2lmaWVkOiB7IGNoYWluSWQ6IDAsIG5hbWU6IFwidW5zcGVjaWZpZWRcIiB9LFxuICAgIGhvbWVzdGVhZDogaG9tZXN0ZWFkLFxuICAgIG1haW5uZXQ6IGhvbWVzdGVhZCxcbiAgICBtb3JkZW46IHsgY2hhaW5JZDogMiwgbmFtZTogXCJtb3JkZW5cIiB9LFxuICAgIHJvcHN0ZW46IHJvcHN0ZW4sXG4gICAgdGVzdG5ldDogcm9wc3RlbixcbiAgICByaW5rZWJ5OiB7XG4gICAgICAgIGNoYWluSWQ6IDQsXG4gICAgICAgIGVuc0FkZHJlc3M6IFwiMHgwMDAwMDAwMDAwMEMyRTA3NGVDNjlBMGRGYjI5OTdCQTZDN2QyZTFlXCIsXG4gICAgICAgIG5hbWU6IFwicmlua2VieVwiLFxuICAgICAgICBfZGVmYXVsdFByb3ZpZGVyOiBldGhEZWZhdWx0UHJvdmlkZXIoXCJyaW5rZWJ5XCIpXG4gICAgfSxcbiAgICBrb3Zhbjoge1xuICAgICAgICBjaGFpbklkOiA0MixcbiAgICAgICAgbmFtZTogXCJrb3ZhblwiLFxuICAgICAgICBfZGVmYXVsdFByb3ZpZGVyOiBldGhEZWZhdWx0UHJvdmlkZXIoXCJrb3ZhblwiKVxuICAgIH0sXG4gICAgZ29lcmxpOiB7XG4gICAgICAgIGNoYWluSWQ6IDUsXG4gICAgICAgIGVuc0FkZHJlc3M6IFwiMHgwMDAwMDAwMDAwMEMyRTA3NGVDNjlBMGRGYjI5OTdCQTZDN2QyZTFlXCIsXG4gICAgICAgIG5hbWU6IFwiZ29lcmxpXCIsXG4gICAgICAgIF9kZWZhdWx0UHJvdmlkZXI6IGV0aERlZmF1bHRQcm92aWRlcihcImdvZXJsaVwiKVxuICAgIH0sXG4gICAga2ludHN1Z2k6IHsgY2hhaW5JZDogMTMzNzcwMiwgbmFtZTogXCJraW50c3VnaVwiIH0sXG4gICAgLy8gRVRDIChTZWU6ICMzNTEpXG4gICAgY2xhc3NpYzoge1xuICAgICAgICBjaGFpbklkOiA2MSxcbiAgICAgICAgbmFtZTogXCJjbGFzc2ljXCIsXG4gICAgICAgIF9kZWZhdWx0UHJvdmlkZXI6IGV0Y0RlZmF1bHRQcm92aWRlcihcImh0dHBzOi9cXC93d3cuZXRoZXJjbHVzdGVyLmNvbS9ldGNcIiwgXCJjbGFzc2ljXCIpXG4gICAgfSxcbiAgICBjbGFzc2ljTW9yZGVuOiB7IGNoYWluSWQ6IDYyLCBuYW1lOiBcImNsYXNzaWNNb3JkZW5cIiB9LFxuICAgIGNsYXNzaWNNb3Jkb3I6IGNsYXNzaWNNb3Jkb3IsXG4gICAgY2xhc3NpY1Rlc3RuZXQ6IGNsYXNzaWNNb3Jkb3IsXG4gICAgY2xhc3NpY0tvdHRpOiB7XG4gICAgICAgIGNoYWluSWQ6IDYsXG4gICAgICAgIG5hbWU6IFwiY2xhc3NpY0tvdHRpXCIsXG4gICAgICAgIF9kZWZhdWx0UHJvdmlkZXI6IGV0Y0RlZmF1bHRQcm92aWRlcihcImh0dHBzOi9cXC93d3cuZXRoZXJjbHVzdGVyLmNvbS9rb3R0aVwiLCBcImNsYXNzaWNLb3R0aVwiKVxuICAgIH0sXG4gICAgeGRhaTogeyBjaGFpbklkOiAxMDAsIG5hbWU6IFwieGRhaVwiIH0sXG4gICAgbWF0aWM6IHtcbiAgICAgICAgY2hhaW5JZDogMTM3LFxuICAgICAgICBuYW1lOiBcIm1hdGljXCIsXG4gICAgICAgIF9kZWZhdWx0UHJvdmlkZXI6IGV0aERlZmF1bHRQcm92aWRlcihcIm1hdGljXCIpXG4gICAgfSxcbiAgICBtYXRpY211bTogeyBjaGFpbklkOiA4MDAwMSwgbmFtZTogXCJtYXRpY211bVwiIH0sXG4gICAgb3B0aW1pc206IHtcbiAgICAgICAgY2hhaW5JZDogMTAsXG4gICAgICAgIG5hbWU6IFwib3B0aW1pc21cIixcbiAgICAgICAgX2RlZmF1bHRQcm92aWRlcjogZXRoRGVmYXVsdFByb3ZpZGVyKFwib3B0aW1pc21cIilcbiAgICB9LFxuICAgIFwib3B0aW1pc20ta292YW5cIjogeyBjaGFpbklkOiA2OSwgbmFtZTogXCJvcHRpbWlzbS1rb3ZhblwiIH0sXG4gICAgXCJvcHRpbWlzbS1nb2VybGlcIjogeyBjaGFpbklkOiA0MjAsIG5hbWU6IFwib3B0aW1pc20tZ29lcmxpXCIgfSxcbiAgICBhcmJpdHJ1bTogeyBjaGFpbklkOiA0MjE2MSwgbmFtZTogXCJhcmJpdHJ1bVwiIH0sXG4gICAgXCJhcmJpdHJ1bS1yaW5rZWJ5XCI6IHsgY2hhaW5JZDogNDIxNjExLCBuYW1lOiBcImFyYml0cnVtLXJpbmtlYnlcIiB9LFxuICAgIGJuYjogeyBjaGFpbklkOiA1NiwgbmFtZTogXCJibmJcIiB9LFxuICAgIGJuYnQ6IHsgY2hhaW5JZDogOTcsIG5hbWU6IFwiYm5idFwiIH0sXG59O1xuLyoqXG4gKiAgZ2V0TmV0d29ya1xuICpcbiAqICBDb252ZXJ0cyBhIG5hbWVkIGNvbW1vbiBuZXR3b3JrcyBvciBjaGFpbiBJRCAobmV0d29yayBJRCkgdG8gYSBOZXR3b3JrXG4gKiAgYW5kIHZlcmlmaWVzIGEgbmV0d29yayBpcyBhIHZhbGlkIE5ldHdvcmsuLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV0d29yayhuZXR3b3JrKSB7XG4gICAgLy8gTm8gbmV0d29yayAobnVsbClcbiAgICBpZiAobmV0d29yayA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChuZXR3b3JrKSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgaW4gbmV0d29ya3MpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YW5kYXJkID0gbmV0d29ya3NbbmFtZV07XG4gICAgICAgICAgICBpZiAoc3RhbmRhcmQuY2hhaW5JZCA9PT0gbmV0d29yaykge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHN0YW5kYXJkLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGNoYWluSWQ6IHN0YW5kYXJkLmNoYWluSWQsXG4gICAgICAgICAgICAgICAgICAgIGVuc0FkZHJlc3M6IChzdGFuZGFyZC5lbnNBZGRyZXNzIHx8IG51bGwpLFxuICAgICAgICAgICAgICAgICAgICBfZGVmYXVsdFByb3ZpZGVyOiAoc3RhbmRhcmQuX2RlZmF1bHRQcm92aWRlciB8fCBudWxsKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNoYWluSWQ6IG5ldHdvcmssXG4gICAgICAgICAgICBuYW1lOiBcInVua25vd25cIlxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChuZXR3b3JrKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBjb25zdCBzdGFuZGFyZCA9IG5ldHdvcmtzW25ldHdvcmtdO1xuICAgICAgICBpZiAoc3RhbmRhcmQgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6IHN0YW5kYXJkLm5hbWUsXG4gICAgICAgICAgICBjaGFpbklkOiBzdGFuZGFyZC5jaGFpbklkLFxuICAgICAgICAgICAgZW5zQWRkcmVzczogc3RhbmRhcmQuZW5zQWRkcmVzcyxcbiAgICAgICAgICAgIF9kZWZhdWx0UHJvdmlkZXI6IChzdGFuZGFyZC5fZGVmYXVsdFByb3ZpZGVyIHx8IG51bGwpXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHN0YW5kYXJkID0gbmV0d29ya3NbbmV0d29yay5uYW1lXTtcbiAgICAvLyBOb3QgYSBzdGFuZGFyZCBuZXR3b3JrOyBjaGVjayB0aGF0IGl0IGlzIGEgdmFsaWQgbmV0d29yayBpbiBnZW5lcmFsXG4gICAgaWYgKCFzdGFuZGFyZCkge1xuICAgICAgICBpZiAodHlwZW9mIChuZXR3b3JrLmNoYWluSWQpICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBuZXR3b3JrIGNoYWluSWRcIiwgXCJuZXR3b3JrXCIsIG5ldHdvcmspO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXR3b3JrO1xuICAgIH1cbiAgICAvLyBNYWtlIHN1cmUgdGhlIGNoYWluSWQgbWF0Y2hlcyB0aGUgZXhwZWN0ZWQgbmV0d29yayBjaGFpbklkIChvciBpcyAwOyBkaXNhYmxlIEVJUC0xNTUpXG4gICAgaWYgKG5ldHdvcmsuY2hhaW5JZCAhPT0gMCAmJiBuZXR3b3JrLmNoYWluSWQgIT09IHN0YW5kYXJkLmNoYWluSWQpIHtcbiAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcIm5ldHdvcmsgY2hhaW5JZCBtaXNtYXRjaFwiLCBcIm5ldHdvcmtcIiwgbmV0d29yayk7XG4gICAgfVxuICAgIC8vIEBUT0RPOiBJbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uIGFkZCBhbiBhdHRhY2ggZnVuY3Rpb24gdG8gYSBkZWZhdWx0UHJvdmlkZXJcbiAgICAvLyBjbGFzcyBhbmQgbW92ZSB0aGUgX2RlZmF1bHRQcm92aWRlciBpbnRlcm5hbCB0byB0aGlzIGZpbGUgKGV4dGVuZCBOZXR3b3JrKVxuICAgIGxldCBkZWZhdWx0UHJvdmlkZXIgPSBuZXR3b3JrLl9kZWZhdWx0UHJvdmlkZXIgfHwgbnVsbDtcbiAgICBpZiAoZGVmYXVsdFByb3ZpZGVyID09IG51bGwgJiYgc3RhbmRhcmQuX2RlZmF1bHRQcm92aWRlcikge1xuICAgICAgICBpZiAoaXNSZW5ldHdvcmthYmxlKHN0YW5kYXJkLl9kZWZhdWx0UHJvdmlkZXIpKSB7XG4gICAgICAgICAgICBkZWZhdWx0UHJvdmlkZXIgPSBzdGFuZGFyZC5fZGVmYXVsdFByb3ZpZGVyLnJlbmV0d29yayhuZXR3b3JrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRlZmF1bHRQcm92aWRlciA9IHN0YW5kYXJkLl9kZWZhdWx0UHJvdmlkZXI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gU3RhbmRhcmQgTmV0d29yayAoYWxsb3cgb3ZlcnJpZGluZyB0aGUgRU5TIGFkZHJlc3MpXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogbmV0d29yay5uYW1lLFxuICAgICAgICBjaGFpbklkOiBzdGFuZGFyZC5jaGFpbklkLFxuICAgICAgICBlbnNBZGRyZXNzOiAobmV0d29yay5lbnNBZGRyZXNzIHx8IHN0YW5kYXJkLmVuc0FkZHJlc3MgfHwgbnVsbCksXG4gICAgICAgIF9kZWZhdWx0UHJvdmlkZXI6IGRlZmF1bHRQcm92aWRlclxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCBoYXNoIGZyb20gXCJoYXNoLmpzXCI7XG4vL2NvbnN0IF9yaXBlbWQxNjAgPSBfaGFzaC5yaXBlbWQxNjA7XG5pbXBvcnQgeyBhcnJheWlmeSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9ieXRlc1wiO1xuaW1wb3J0IHsgU3VwcG9ydGVkQWxnb3JpdGhtIH0gZnJvbSBcIi4vdHlwZXNcIjtcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcbmV4cG9ydCBmdW5jdGlvbiByaXBlbWQxNjAoZGF0YSkge1xuICAgIHJldHVybiBcIjB4XCIgKyAoaGFzaC5yaXBlbWQxNjAoKS51cGRhdGUoYXJyYXlpZnkoZGF0YSkpLmRpZ2VzdChcImhleFwiKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gc2hhMjU2KGRhdGEpIHtcbiAgICByZXR1cm4gXCIweFwiICsgKGhhc2guc2hhMjU2KCkudXBkYXRlKGFycmF5aWZ5KGRhdGEpKS5kaWdlc3QoXCJoZXhcIikpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNoYTUxMihkYXRhKSB7XG4gICAgcmV0dXJuIFwiMHhcIiArIChoYXNoLnNoYTUxMigpLnVwZGF0ZShhcnJheWlmeShkYXRhKSkuZGlnZXN0KFwiaGV4XCIpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlSG1hYyhhbGdvcml0aG0sIGtleSwgZGF0YSkge1xuICAgIGlmICghU3VwcG9ydGVkQWxnb3JpdGhtW2FsZ29yaXRobV0pIHtcbiAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJ1bnN1cHBvcnRlZCBhbGdvcml0aG0gXCIgKyBhbGdvcml0aG0sIExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLCB7XG4gICAgICAgICAgICBvcGVyYXRpb246IFwiaG1hY1wiLFxuICAgICAgICAgICAgYWxnb3JpdGhtOiBhbGdvcml0aG1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBcIjB4XCIgKyBoYXNoLmhtYWMoaGFzaFthbGdvcml0aG1dLCBhcnJheWlmeShrZXkpKS51cGRhdGUoYXJyYXlpZnkoZGF0YSkpLmRpZ2VzdChcImhleFwiKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoYTIuanMubWFwIiwiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSBcInNoYTIvNS42LjFcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV92ZXJzaW9uLmpzLm1hcCIsImV4cG9ydCBjb25zdCBBZGRyZXNzWmVybyA9IFwiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZGRyZXNzZXMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQgeyBnZXRBZGRyZXNzLCBnZXRDb250cmFjdEFkZHJlc3MgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYWRkcmVzc1wiO1xuaW1wb3J0IHsgQmlnTnVtYmVyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2JpZ251bWJlclwiO1xuaW1wb3J0IHsgaGV4RGF0YUxlbmd0aCwgaGV4RGF0YVNsaWNlLCBoZXhWYWx1ZSwgaGV4WmVyb1BhZCwgaXNIZXhTdHJpbmcgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcbmltcG9ydCB7IEFkZHJlc3NaZXJvIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgc2hhbGxvd0NvcHkgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvcHJvcGVydGllc1wiO1xuaW1wb3J0IHsgYWNjZXNzTGlzdGlmeSwgcGFyc2UgYXMgcGFyc2VUcmFuc2FjdGlvbiB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC90cmFuc2FjdGlvbnNcIjtcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcbmV4cG9ydCBjbGFzcyBGb3JtYXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmZvcm1hdHMgPSB0aGlzLmdldERlZmF1bHRGb3JtYXRzKCk7XG4gICAgfVxuICAgIGdldERlZmF1bHRGb3JtYXRzKCkge1xuICAgICAgICBjb25zdCBmb3JtYXRzID0gKHt9KTtcbiAgICAgICAgY29uc3QgYWRkcmVzcyA9IHRoaXMuYWRkcmVzcy5iaW5kKHRoaXMpO1xuICAgICAgICBjb25zdCBiaWdOdW1iZXIgPSB0aGlzLmJpZ051bWJlci5iaW5kKHRoaXMpO1xuICAgICAgICBjb25zdCBibG9ja1RhZyA9IHRoaXMuYmxvY2tUYWcuYmluZCh0aGlzKTtcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuZGF0YS5iaW5kKHRoaXMpO1xuICAgICAgICBjb25zdCBoYXNoID0gdGhpcy5oYXNoLmJpbmQodGhpcyk7XG4gICAgICAgIGNvbnN0IGhleCA9IHRoaXMuaGV4LmJpbmQodGhpcyk7XG4gICAgICAgIGNvbnN0IG51bWJlciA9IHRoaXMubnVtYmVyLmJpbmQodGhpcyk7XG4gICAgICAgIGNvbnN0IHR5cGUgPSB0aGlzLnR5cGUuYmluZCh0aGlzKTtcbiAgICAgICAgY29uc3Qgc3RyaWN0RGF0YSA9ICh2KSA9PiB7IHJldHVybiB0aGlzLmRhdGEodiwgdHJ1ZSk7IH07XG4gICAgICAgIGZvcm1hdHMudHJhbnNhY3Rpb24gPSB7XG4gICAgICAgICAgICBoYXNoOiBoYXNoLFxuICAgICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICAgIGFjY2Vzc0xpc3Q6IEZvcm1hdHRlci5hbGxvd051bGwodGhpcy5hY2Nlc3NMaXN0LmJpbmQodGhpcyksIG51bGwpLFxuICAgICAgICAgICAgYmxvY2tIYXNoOiBGb3JtYXR0ZXIuYWxsb3dOdWxsKGhhc2gsIG51bGwpLFxuICAgICAgICAgICAgYmxvY2tOdW1iZXI6IEZvcm1hdHRlci5hbGxvd051bGwobnVtYmVyLCBudWxsKSxcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uSW5kZXg6IEZvcm1hdHRlci5hbGxvd051bGwobnVtYmVyLCBudWxsKSxcbiAgICAgICAgICAgIGNvbmZpcm1hdGlvbnM6IEZvcm1hdHRlci5hbGxvd051bGwobnVtYmVyLCBudWxsKSxcbiAgICAgICAgICAgIGZyb206IGFkZHJlc3MsXG4gICAgICAgICAgICAvLyBlaXRoZXIgKGdhc1ByaWNlKSBvciAobWF4UHJpb3JpdHlGZWVQZXJHYXMgKyBtYXhGZWVQZXJHYXMpXG4gICAgICAgICAgICAvLyBtdXN0IGJlIHNldFxuICAgICAgICAgICAgZ2FzUHJpY2U6IEZvcm1hdHRlci5hbGxvd051bGwoYmlnTnVtYmVyKSxcbiAgICAgICAgICAgIG1heFByaW9yaXR5RmVlUGVyR2FzOiBGb3JtYXR0ZXIuYWxsb3dOdWxsKGJpZ051bWJlciksXG4gICAgICAgICAgICBtYXhGZWVQZXJHYXM6IEZvcm1hdHRlci5hbGxvd051bGwoYmlnTnVtYmVyKSxcbiAgICAgICAgICAgIGdhc0xpbWl0OiBiaWdOdW1iZXIsXG4gICAgICAgICAgICB0bzogRm9ybWF0dGVyLmFsbG93TnVsbChhZGRyZXNzLCBudWxsKSxcbiAgICAgICAgICAgIHZhbHVlOiBiaWdOdW1iZXIsXG4gICAgICAgICAgICBub25jZTogbnVtYmVyLFxuICAgICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICAgIHI6IEZvcm1hdHRlci5hbGxvd051bGwodGhpcy51aW50MjU2KSxcbiAgICAgICAgICAgIHM6IEZvcm1hdHRlci5hbGxvd051bGwodGhpcy51aW50MjU2KSxcbiAgICAgICAgICAgIHY6IEZvcm1hdHRlci5hbGxvd051bGwobnVtYmVyKSxcbiAgICAgICAgICAgIGNyZWF0ZXM6IEZvcm1hdHRlci5hbGxvd051bGwoYWRkcmVzcywgbnVsbCksXG4gICAgICAgICAgICByYXc6IEZvcm1hdHRlci5hbGxvd051bGwoZGF0YSksXG4gICAgICAgIH07XG4gICAgICAgIGZvcm1hdHMudHJhbnNhY3Rpb25SZXF1ZXN0ID0ge1xuICAgICAgICAgICAgZnJvbTogRm9ybWF0dGVyLmFsbG93TnVsbChhZGRyZXNzKSxcbiAgICAgICAgICAgIG5vbmNlOiBGb3JtYXR0ZXIuYWxsb3dOdWxsKG51bWJlciksXG4gICAgICAgICAgICBnYXNMaW1pdDogRm9ybWF0dGVyLmFsbG93TnVsbChiaWdOdW1iZXIpLFxuICAgICAgICAgICAgZ2FzUHJpY2U6IEZvcm1hdHRlci5hbGxvd051bGwoYmlnTnVtYmVyKSxcbiAgICAgICAgICAgIG1heFByaW9yaXR5RmVlUGVyR2FzOiBGb3JtYXR0ZXIuYWxsb3dOdWxsKGJpZ051bWJlciksXG4gICAgICAgICAgICBtYXhGZWVQZXJHYXM6IEZvcm1hdHRlci5hbGxvd051bGwoYmlnTnVtYmVyKSxcbiAgICAgICAgICAgIHRvOiBGb3JtYXR0ZXIuYWxsb3dOdWxsKGFkZHJlc3MpLFxuICAgICAgICAgICAgdmFsdWU6IEZvcm1hdHRlci5hbGxvd051bGwoYmlnTnVtYmVyKSxcbiAgICAgICAgICAgIGRhdGE6IEZvcm1hdHRlci5hbGxvd051bGwoc3RyaWN0RGF0YSksXG4gICAgICAgICAgICB0eXBlOiBGb3JtYXR0ZXIuYWxsb3dOdWxsKG51bWJlciksXG4gICAgICAgICAgICBhY2Nlc3NMaXN0OiBGb3JtYXR0ZXIuYWxsb3dOdWxsKHRoaXMuYWNjZXNzTGlzdC5iaW5kKHRoaXMpLCBudWxsKSxcbiAgICAgICAgfTtcbiAgICAgICAgZm9ybWF0cy5yZWNlaXB0TG9nID0ge1xuICAgICAgICAgICAgdHJhbnNhY3Rpb25JbmRleDogbnVtYmVyLFxuICAgICAgICAgICAgYmxvY2tOdW1iZXI6IG51bWJlcixcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uSGFzaDogaGFzaCxcbiAgICAgICAgICAgIGFkZHJlc3M6IGFkZHJlc3MsXG4gICAgICAgICAgICB0b3BpY3M6IEZvcm1hdHRlci5hcnJheU9mKGhhc2gpLFxuICAgICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICAgIGxvZ0luZGV4OiBudW1iZXIsXG4gICAgICAgICAgICBibG9ja0hhc2g6IGhhc2gsXG4gICAgICAgIH07XG4gICAgICAgIGZvcm1hdHMucmVjZWlwdCA9IHtcbiAgICAgICAgICAgIHRvOiBGb3JtYXR0ZXIuYWxsb3dOdWxsKHRoaXMuYWRkcmVzcywgbnVsbCksXG4gICAgICAgICAgICBmcm9tOiBGb3JtYXR0ZXIuYWxsb3dOdWxsKHRoaXMuYWRkcmVzcywgbnVsbCksXG4gICAgICAgICAgICBjb250cmFjdEFkZHJlc3M6IEZvcm1hdHRlci5hbGxvd051bGwoYWRkcmVzcywgbnVsbCksXG4gICAgICAgICAgICB0cmFuc2FjdGlvbkluZGV4OiBudW1iZXIsXG4gICAgICAgICAgICAvLyBzaG91bGQgYmUgYWxsb3dOdWxsKGhhc2gpLCBidXQgYnJva2VuLUVJUC02NTggc3VwcG9ydCBpcyBoYW5kbGVkIGluIHJlY2VpcHRcbiAgICAgICAgICAgIHJvb3Q6IEZvcm1hdHRlci5hbGxvd051bGwoaGV4KSxcbiAgICAgICAgICAgIGdhc1VzZWQ6IGJpZ051bWJlcixcbiAgICAgICAgICAgIGxvZ3NCbG9vbTogRm9ybWF0dGVyLmFsbG93TnVsbChkYXRhKSxcbiAgICAgICAgICAgIGJsb2NrSGFzaDogaGFzaCxcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uSGFzaDogaGFzaCxcbiAgICAgICAgICAgIGxvZ3M6IEZvcm1hdHRlci5hcnJheU9mKHRoaXMucmVjZWlwdExvZy5iaW5kKHRoaXMpKSxcbiAgICAgICAgICAgIGJsb2NrTnVtYmVyOiBudW1iZXIsXG4gICAgICAgICAgICBjb25maXJtYXRpb25zOiBGb3JtYXR0ZXIuYWxsb3dOdWxsKG51bWJlciwgbnVsbCksXG4gICAgICAgICAgICBjdW11bGF0aXZlR2FzVXNlZDogYmlnTnVtYmVyLFxuICAgICAgICAgICAgZWZmZWN0aXZlR2FzUHJpY2U6IEZvcm1hdHRlci5hbGxvd051bGwoYmlnTnVtYmVyKSxcbiAgICAgICAgICAgIHN0YXR1czogRm9ybWF0dGVyLmFsbG93TnVsbChudW1iZXIpLFxuICAgICAgICAgICAgdHlwZTogdHlwZVxuICAgICAgICB9O1xuICAgICAgICBmb3JtYXRzLmJsb2NrID0ge1xuICAgICAgICAgICAgaGFzaDogRm9ybWF0dGVyLmFsbG93TnVsbChoYXNoKSxcbiAgICAgICAgICAgIHBhcmVudEhhc2g6IGhhc2gsXG4gICAgICAgICAgICBudW1iZXI6IG51bWJlcixcbiAgICAgICAgICAgIHRpbWVzdGFtcDogbnVtYmVyLFxuICAgICAgICAgICAgbm9uY2U6IEZvcm1hdHRlci5hbGxvd051bGwoaGV4KSxcbiAgICAgICAgICAgIGRpZmZpY3VsdHk6IHRoaXMuZGlmZmljdWx0eS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgZ2FzTGltaXQ6IGJpZ051bWJlcixcbiAgICAgICAgICAgIGdhc1VzZWQ6IGJpZ051bWJlcixcbiAgICAgICAgICAgIG1pbmVyOiBGb3JtYXR0ZXIuYWxsb3dOdWxsKGFkZHJlc3MpLFxuICAgICAgICAgICAgZXh0cmFEYXRhOiBkYXRhLFxuICAgICAgICAgICAgdHJhbnNhY3Rpb25zOiBGb3JtYXR0ZXIuYWxsb3dOdWxsKEZvcm1hdHRlci5hcnJheU9mKGhhc2gpKSxcbiAgICAgICAgICAgIGJhc2VGZWVQZXJHYXM6IEZvcm1hdHRlci5hbGxvd051bGwoYmlnTnVtYmVyKVxuICAgICAgICB9O1xuICAgICAgICBmb3JtYXRzLmJsb2NrV2l0aFRyYW5zYWN0aW9ucyA9IHNoYWxsb3dDb3B5KGZvcm1hdHMuYmxvY2spO1xuICAgICAgICBmb3JtYXRzLmJsb2NrV2l0aFRyYW5zYWN0aW9ucy50cmFuc2FjdGlvbnMgPSBGb3JtYXR0ZXIuYWxsb3dOdWxsKEZvcm1hdHRlci5hcnJheU9mKHRoaXMudHJhbnNhY3Rpb25SZXNwb25zZS5iaW5kKHRoaXMpKSk7XG4gICAgICAgIGZvcm1hdHMuZmlsdGVyID0ge1xuICAgICAgICAgICAgZnJvbUJsb2NrOiBGb3JtYXR0ZXIuYWxsb3dOdWxsKGJsb2NrVGFnLCB1bmRlZmluZWQpLFxuICAgICAgICAgICAgdG9CbG9jazogRm9ybWF0dGVyLmFsbG93TnVsbChibG9ja1RhZywgdW5kZWZpbmVkKSxcbiAgICAgICAgICAgIGJsb2NrSGFzaDogRm9ybWF0dGVyLmFsbG93TnVsbChoYXNoLCB1bmRlZmluZWQpLFxuICAgICAgICAgICAgYWRkcmVzczogRm9ybWF0dGVyLmFsbG93TnVsbChhZGRyZXNzLCB1bmRlZmluZWQpLFxuICAgICAgICAgICAgdG9waWNzOiBGb3JtYXR0ZXIuYWxsb3dOdWxsKHRoaXMudG9waWNzLmJpbmQodGhpcyksIHVuZGVmaW5lZCksXG4gICAgICAgIH07XG4gICAgICAgIGZvcm1hdHMuZmlsdGVyTG9nID0ge1xuICAgICAgICAgICAgYmxvY2tOdW1iZXI6IEZvcm1hdHRlci5hbGxvd051bGwobnVtYmVyKSxcbiAgICAgICAgICAgIGJsb2NrSGFzaDogRm9ybWF0dGVyLmFsbG93TnVsbChoYXNoKSxcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uSW5kZXg6IG51bWJlcixcbiAgICAgICAgICAgIHJlbW92ZWQ6IEZvcm1hdHRlci5hbGxvd051bGwodGhpcy5ib29sZWFuLmJpbmQodGhpcykpLFxuICAgICAgICAgICAgYWRkcmVzczogYWRkcmVzcyxcbiAgICAgICAgICAgIGRhdGE6IEZvcm1hdHRlci5hbGxvd0ZhbHNpc2goZGF0YSwgXCIweFwiKSxcbiAgICAgICAgICAgIHRvcGljczogRm9ybWF0dGVyLmFycmF5T2YoaGFzaCksXG4gICAgICAgICAgICB0cmFuc2FjdGlvbkhhc2g6IGhhc2gsXG4gICAgICAgICAgICBsb2dJbmRleDogbnVtYmVyLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gZm9ybWF0cztcbiAgICB9XG4gICAgYWNjZXNzTGlzdChhY2Nlc3NMaXN0KSB7XG4gICAgICAgIHJldHVybiBhY2Nlc3NMaXN0aWZ5KGFjY2Vzc0xpc3QgfHwgW10pO1xuICAgIH1cbiAgICAvLyBSZXF1aXJlcyBhIEJpZ051bWJlcmlzaCB0aGF0IGlzIHdpdGhpbiB0aGUgSUVFRTc1NCBzYWZlIGludGVnZXIgcmFuZ2U7IHJldHVybnMgYSBudW1iZXJcbiAgICAvLyBTdHJpY3QhIFVzZWQgb24gaW5wdXQuXG4gICAgbnVtYmVyKG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyID09PSBcIjB4XCIpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBCaWdOdW1iZXIuZnJvbShudW1iZXIpLnRvTnVtYmVyKCk7XG4gICAgfVxuICAgIHR5cGUobnVtYmVyKSB7XG4gICAgICAgIGlmIChudW1iZXIgPT09IFwiMHhcIiB8fCBudW1iZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEJpZ051bWJlci5mcm9tKG51bWJlcikudG9OdW1iZXIoKTtcbiAgICB9XG4gICAgLy8gU3RyaWN0ISBVc2VkIG9uIGlucHV0LlxuICAgIGJpZ051bWJlcih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gQmlnTnVtYmVyLmZyb20odmFsdWUpO1xuICAgIH1cbiAgICAvLyBSZXF1aXJlcyBhIGJvb2xlYW4sIFwidHJ1ZVwiIG9yICBcImZhbHNlXCI7IHJldHVybnMgYSBib29sZWFuXG4gICAgYm9vbGVhbih2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mICh2YWx1ZSkgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IFwidHJ1ZVwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IFwiZmFsc2VcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGJvb2xlYW4gLSBcIiArIHZhbHVlKTtcbiAgICB9XG4gICAgaGV4KHZhbHVlLCBzdHJpY3QpIHtcbiAgICAgICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBpZiAoIXN0cmljdCAmJiB2YWx1ZS5zdWJzdHJpbmcoMCwgMikgIT09IFwiMHhcIikge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gXCIweFwiICsgdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNIZXhTdHJpbmcodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGhhc2hcIiwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgfVxuICAgIGRhdGEodmFsdWUsIHN0cmljdCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmhleCh2YWx1ZSwgc3RyaWN0KTtcbiAgICAgICAgaWYgKChyZXN1bHQubGVuZ3RoICUgMikgIT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgZGF0YTsgb2RkLWxlbmd0aCAtIFwiICsgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8vIFJlcXVpcmVzIGFuIGFkZHJlc3NcbiAgICAvLyBTdHJpY3QhIFVzZWQgb24gaW5wdXQuXG4gICAgYWRkcmVzcyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZ2V0QWRkcmVzcyh2YWx1ZSk7XG4gICAgfVxuICAgIGNhbGxBZGRyZXNzKHZhbHVlKSB7XG4gICAgICAgIGlmICghaXNIZXhTdHJpbmcodmFsdWUsIDMyKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWRkcmVzcyA9IGdldEFkZHJlc3MoaGV4RGF0YVNsaWNlKHZhbHVlLCAxMikpO1xuICAgICAgICByZXR1cm4gKGFkZHJlc3MgPT09IEFkZHJlc3NaZXJvKSA/IG51bGwgOiBhZGRyZXNzO1xuICAgIH1cbiAgICBjb250cmFjdEFkZHJlc3ModmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGdldENvbnRyYWN0QWRkcmVzcyh2YWx1ZSk7XG4gICAgfVxuICAgIC8vIFN0cmljdCEgVXNlZCBvbiBpbnB1dC5cbiAgICBibG9ja1RhZyhibG9ja1RhZykge1xuICAgICAgICBpZiAoYmxvY2tUYWcgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIFwibGF0ZXN0XCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJsb2NrVGFnID09PSBcImVhcmxpZXN0XCIpIHtcbiAgICAgICAgICAgIHJldHVybiBcIjB4MFwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChibG9ja1RhZyA9PT0gXCJsYXRlc3RcIiB8fCBibG9ja1RhZyA9PT0gXCJwZW5kaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBibG9ja1RhZztcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIChibG9ja1RhZykgPT09IFwibnVtYmVyXCIgfHwgaXNIZXhTdHJpbmcoYmxvY2tUYWcpKSB7XG4gICAgICAgICAgICByZXR1cm4gaGV4VmFsdWUoYmxvY2tUYWcpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgYmxvY2tUYWdcIik7XG4gICAgfVxuICAgIC8vIFJlcXVpcmVzIGEgaGFzaCwgb3B0aW9uYWxseSByZXF1aXJlcyAweCBwcmVmaXg7IHJldHVybnMgcHJlZml4ZWQgbG93ZXJjYXNlIGhhc2guXG4gICAgaGFzaCh2YWx1ZSwgc3RyaWN0KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuaGV4KHZhbHVlLCBzdHJpY3QpO1xuICAgICAgICBpZiAoaGV4RGF0YUxlbmd0aChyZXN1bHQpICE9PSAzMikge1xuICAgICAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGhhc2hcIiwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLy8gUmV0dXJucyB0aGUgZGlmZmljdWx0eSBhcyBhIG51bWJlciwgb3IgaWYgdG9vIGxhcmdlIChpLmUuIFBvQSBuZXR3b3JrKSBudWxsXG4gICAgZGlmZmljdWx0eSh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdiA9IEJpZ051bWJlci5mcm9tKHZhbHVlKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB2LnRvTnVtYmVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHVpbnQyNTYodmFsdWUpIHtcbiAgICAgICAgaWYgKCFpc0hleFN0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgdWludDI1NlwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGV4WmVyb1BhZCh2YWx1ZSwgMzIpO1xuICAgIH1cbiAgICBfYmxvY2sodmFsdWUsIGZvcm1hdCkge1xuICAgICAgICBpZiAodmFsdWUuYXV0aG9yICE9IG51bGwgJiYgdmFsdWUubWluZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFsdWUubWluZXIgPSB2YWx1ZS5hdXRob3I7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIGRpZmZpY3VsdHkgbWF5IG5lZWQgdG8gY29tZSBmcm9tIF9kaWZmaWN1bHR5IGluIHJlY3Vyc2VkIGJsb2Nrc1xuICAgICAgICBjb25zdCBkaWZmaWN1bHR5ID0gKHZhbHVlLl9kaWZmaWN1bHR5ICE9IG51bGwpID8gdmFsdWUuX2RpZmZpY3VsdHkgOiB2YWx1ZS5kaWZmaWN1bHR5O1xuICAgICAgICBjb25zdCByZXN1bHQgPSBGb3JtYXR0ZXIuY2hlY2soZm9ybWF0LCB2YWx1ZSk7XG4gICAgICAgIHJlc3VsdC5fZGlmZmljdWx0eSA9ICgoZGlmZmljdWx0eSA9PSBudWxsKSA/IG51bGwgOiBCaWdOdW1iZXIuZnJvbShkaWZmaWN1bHR5KSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGJsb2NrKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ibG9jayh2YWx1ZSwgdGhpcy5mb3JtYXRzLmJsb2NrKTtcbiAgICB9XG4gICAgYmxvY2tXaXRoVHJhbnNhY3Rpb25zKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ibG9jayh2YWx1ZSwgdGhpcy5mb3JtYXRzLmJsb2NrV2l0aFRyYW5zYWN0aW9ucyk7XG4gICAgfVxuICAgIC8vIFN0cmljdCEgVXNlZCBvbiBpbnB1dC5cbiAgICB0cmFuc2FjdGlvblJlcXVlc3QodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIEZvcm1hdHRlci5jaGVjayh0aGlzLmZvcm1hdHMudHJhbnNhY3Rpb25SZXF1ZXN0LCB2YWx1ZSk7XG4gICAgfVxuICAgIHRyYW5zYWN0aW9uUmVzcG9uc2UodHJhbnNhY3Rpb24pIHtcbiAgICAgICAgLy8gUmVuYW1lIGdhcyB0byBnYXNMaW1pdFxuICAgICAgICBpZiAodHJhbnNhY3Rpb24uZ2FzICE9IG51bGwgJiYgdHJhbnNhY3Rpb24uZ2FzTGltaXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgdHJhbnNhY3Rpb24uZ2FzTGltaXQgPSB0cmFuc2FjdGlvbi5nYXM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU29tZSBjbGllbnRzIChUZXN0UlBDKSBkbyBzdHJhbmdlIHRoaW5ncyBsaWtlIHJldHVybiAweDAgZm9yIHRoZVxuICAgICAgICAvLyAwIGFkZHJlc3M7IGNvcnJlY3QgdGhpcyB0byBiZSBhIHJlYWwgYWRkcmVzc1xuICAgICAgICBpZiAodHJhbnNhY3Rpb24udG8gJiYgQmlnTnVtYmVyLmZyb20odHJhbnNhY3Rpb24udG8pLmlzWmVybygpKSB7XG4gICAgICAgICAgICB0cmFuc2FjdGlvbi50byA9IFwiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVuYW1lIGlucHV0IHRvIGRhdGFcbiAgICAgICAgaWYgKHRyYW5zYWN0aW9uLmlucHV0ICE9IG51bGwgJiYgdHJhbnNhY3Rpb24uZGF0YSA9PSBudWxsKSB7XG4gICAgICAgICAgICB0cmFuc2FjdGlvbi5kYXRhID0gdHJhbnNhY3Rpb24uaW5wdXQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdG8gYW5kIGNyZWF0ZXMgYXJlIGVtcHR5LCBwb3B1bGF0ZSB0aGUgY3JlYXRlcyBmcm9tIHRoZSB0cmFuc2FjdGlvblxuICAgICAgICBpZiAodHJhbnNhY3Rpb24udG8gPT0gbnVsbCAmJiB0cmFuc2FjdGlvbi5jcmVhdGVzID09IG51bGwpIHtcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uLmNyZWF0ZXMgPSB0aGlzLmNvbnRyYWN0QWRkcmVzcyh0cmFuc2FjdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCh0cmFuc2FjdGlvbi50eXBlID09PSAxIHx8IHRyYW5zYWN0aW9uLnR5cGUgPT09IDIpICYmIHRyYW5zYWN0aW9uLmFjY2Vzc0xpc3QgPT0gbnVsbCkge1xuICAgICAgICAgICAgdHJhbnNhY3Rpb24uYWNjZXNzTGlzdCA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IEZvcm1hdHRlci5jaGVjayh0aGlzLmZvcm1hdHMudHJhbnNhY3Rpb24sIHRyYW5zYWN0aW9uKTtcbiAgICAgICAgaWYgKHRyYW5zYWN0aW9uLmNoYWluSWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgbGV0IGNoYWluSWQgPSB0cmFuc2FjdGlvbi5jaGFpbklkO1xuICAgICAgICAgICAgaWYgKGlzSGV4U3RyaW5nKGNoYWluSWQpKSB7XG4gICAgICAgICAgICAgICAgY2hhaW5JZCA9IEJpZ051bWJlci5mcm9tKGNoYWluSWQpLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQuY2hhaW5JZCA9IGNoYWluSWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgY2hhaW5JZCA9IHRyYW5zYWN0aW9uLm5ldHdvcmtJZDtcbiAgICAgICAgICAgIC8vIGdldGgtZXRjIHJldHVybnMgY2hhaW5JZFxuICAgICAgICAgICAgaWYgKGNoYWluSWQgPT0gbnVsbCAmJiByZXN1bHQudiA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY2hhaW5JZCA9IHRyYW5zYWN0aW9uLmNoYWluSWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNIZXhTdHJpbmcoY2hhaW5JZCkpIHtcbiAgICAgICAgICAgICAgICBjaGFpbklkID0gQmlnTnVtYmVyLmZyb20oY2hhaW5JZCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgKGNoYWluSWQpICE9PSBcIm51bWJlclwiICYmIHJlc3VsdC52ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjaGFpbklkID0gKHJlc3VsdC52IC0gMzUpIC8gMjtcbiAgICAgICAgICAgICAgICBpZiAoY2hhaW5JZCA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhaW5JZCA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNoYWluSWQgPSBwYXJzZUludChjaGFpbklkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgKGNoYWluSWQpICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgY2hhaW5JZCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQuY2hhaW5JZCA9IGNoYWluSWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gMHgwMDAwLi4uIHNob3VsZCBhY3R1YWxseSBiZSBudWxsXG4gICAgICAgIGlmIChyZXN1bHQuYmxvY2tIYXNoICYmIHJlc3VsdC5ibG9ja0hhc2gucmVwbGFjZSgvMC9nLCBcIlwiKSA9PT0gXCJ4XCIpIHtcbiAgICAgICAgICAgIHJlc3VsdC5ibG9ja0hhc2ggPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHRyYW5zYWN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBwYXJzZVRyYW5zYWN0aW9uKHZhbHVlKTtcbiAgICB9XG4gICAgcmVjZWlwdExvZyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gRm9ybWF0dGVyLmNoZWNrKHRoaXMuZm9ybWF0cy5yZWNlaXB0TG9nLCB2YWx1ZSk7XG4gICAgfVxuICAgIHJlY2VpcHQodmFsdWUpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gRm9ybWF0dGVyLmNoZWNrKHRoaXMuZm9ybWF0cy5yZWNlaXB0LCB2YWx1ZSk7XG4gICAgICAgIC8vIFJTSyBpbmNvcnJlY3RseSBpbXBsZW1lbnRlZCBFSVAtNjU4LCBzbyB3ZSBtdW5nZSB0aGluZ3MgYSBiaXQgaGVyZSBmb3IgaXRcbiAgICAgICAgaWYgKHJlc3VsdC5yb290ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChyZXN1bHQucm9vdC5sZW5ndGggPD0gNCkge1xuICAgICAgICAgICAgICAgIC8vIENvdWxkIGJlIDB4MDAsIDB4MCwgMHgwMSBvciAweDFcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IEJpZ051bWJlci5mcm9tKHJlc3VsdC5yb290KS50b051bWJlcigpO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gMCB8fCB2YWx1ZSA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgaWYgYm90aCBhcmUgc3BlY2lmaWVkLCB0aGV5IG1hdGNoXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdHVzICE9IG51bGwgJiYgKHJlc3VsdC5zdGF0dXMgIT09IHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImFsdC1yb290LXN0YXR1cy9zdGF0dXMgbWlzbWF0Y2hcIiwgXCJ2YWx1ZVwiLCB7IHJvb3Q6IHJlc3VsdC5yb290LCBzdGF0dXM6IHJlc3VsdC5zdGF0dXMgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnN0YXR1cyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcmVzdWx0LnJvb3Q7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBhbHQtcm9vdC1zdGF0dXNcIiwgXCJ2YWx1ZS5yb290XCIsIHJlc3VsdC5yb290KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChyZXN1bHQucm9vdC5sZW5ndGggIT09IDY2KSB7XG4gICAgICAgICAgICAgICAgLy8gTXVzdCBiZSBhIHZhbGlkIGJ5dGVzMzJcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCByb290IGhhc2hcIiwgXCJ2YWx1ZS5yb290XCIsIHJlc3VsdC5yb290KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0LnN0YXR1cyAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXN1bHQuYnl6YW50aXVtID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICB0b3BpY3ModmFsdWUpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUubWFwKCh2KSA9PiB0aGlzLnRvcGljcyh2KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGFzaCh2YWx1ZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGZpbHRlcih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gRm9ybWF0dGVyLmNoZWNrKHRoaXMuZm9ybWF0cy5maWx0ZXIsIHZhbHVlKTtcbiAgICB9XG4gICAgZmlsdGVyTG9nKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBGb3JtYXR0ZXIuY2hlY2sodGhpcy5mb3JtYXRzLmZpbHRlckxvZywgdmFsdWUpO1xuICAgIH1cbiAgICBzdGF0aWMgY2hlY2soZm9ybWF0LCBvYmplY3QpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGZvcm1hdCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGZvcm1hdFtrZXldKG9iamVjdFtrZXldKTtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGVycm9yLmNoZWNrS2V5ID0ga2V5O1xuICAgICAgICAgICAgICAgIGVycm9yLmNoZWNrVmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvLyBpZiB2YWx1ZSBpcyBudWxsLWlzaCwgbnVsbFZhbHVlIGlzIHJldHVybmVkXG4gICAgc3RhdGljIGFsbG93TnVsbChmb3JtYXQsIG51bGxWYWx1ZSkge1xuICAgICAgICByZXR1cm4gKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdCh2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBJZiB2YWx1ZSBpcyBmYWxzZS1pc2gsIHJlcGxhY2VWYWx1ZSBpcyByZXR1cm5lZFxuICAgIHN0YXRpYyBhbGxvd0ZhbHNpc2goZm9ybWF0LCByZXBsYWNlVmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVwbGFjZVZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdCh2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBSZXF1aXJlcyBhbiBBcnJheSBzYXRpc2Z5aW5nIGNoZWNrXG4gICAgc3RhdGljIGFycmF5T2YoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiAoZnVuY3Rpb24gKGFycmF5KSB7XG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXkpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm90IGFuIGFycmF5XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgICAgICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGZvcm1hdCh2YWx1ZSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gaXNDb21tdW5pdHlSZXNvdXJjYWJsZSh2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgJiYgdHlwZW9mICh2YWx1ZS5pc0NvbW11bml0eVJlc291cmNlKSA9PT0gXCJmdW5jdGlvblwiKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0NvbW11bml0eVJlc291cmNlKHZhbHVlKSB7XG4gICAgcmV0dXJuIChpc0NvbW11bml0eVJlc291cmNhYmxlKHZhbHVlKSAmJiB2YWx1ZS5pc0NvbW11bml0eVJlc291cmNlKCkpO1xufVxuLy8gU2hvdyB0aGUgdGhyb3R0bGUgbWVzc2FnZSBvbmx5IG9uY2VcbmxldCB0aHJvdHRsZU1lc3NhZ2UgPSBmYWxzZTtcbmV4cG9ydCBmdW5jdGlvbiBzaG93VGhyb3R0bGVNZXNzYWdlKCkge1xuICAgIGlmICh0aHJvdHRsZU1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aHJvdHRsZU1lc3NhZ2UgPSB0cnVlO1xuICAgIGNvbnNvbGUubG9nKFwiPT09PT09PT09IE5PVElDRSA9PT09PT09PT1cIik7XG4gICAgY29uc29sZS5sb2coXCJSZXF1ZXN0LVJhdGUgRXhjZWVkZWQgICh0aGlzIG1lc3NhZ2Ugd2lsbCBub3QgYmUgcmVwZWF0ZWQpXCIpO1xuICAgIGNvbnNvbGUubG9nKFwiXCIpO1xuICAgIGNvbnNvbGUubG9nKFwiVGhlIGRlZmF1bHQgQVBJIGtleXMgZm9yIGVhY2ggc2VydmljZSBhcmUgcHJvdmlkZWQgYXMgYSBoaWdobHktdGhyb3R0bGVkLFwiKTtcbiAgICBjb25zb2xlLmxvZyhcImNvbW11bml0eSByZXNvdXJjZSBmb3IgbG93LXRyYWZmaWMgcHJvamVjdHMgYW5kIGVhcmx5IHByb3RvdHlwaW5nLlwiKTtcbiAgICBjb25zb2xlLmxvZyhcIlwiKTtcbiAgICBjb25zb2xlLmxvZyhcIldoaWxlIHlvdXIgYXBwbGljYXRpb24gd2lsbCBjb250aW51ZSB0byBmdW5jdGlvbiwgd2UgaGlnaGx5IHJlY29tbWVuZGVkXCIpO1xuICAgIGNvbnNvbGUubG9nKFwic2lnbmluZyB1cCBmb3IgeW91ciBvd24gQVBJIGtleXMgdG8gaW1wcm92ZSBwZXJmb3JtYW5jZSwgaW5jcmVhc2UgeW91clwiKTtcbiAgICBjb25zb2xlLmxvZyhcInJlcXVlc3QgcmF0ZS9saW1pdCBhbmQgZW5hYmxlIG90aGVyIHBlcmtzLCBzdWNoIGFzIG1ldHJpY3MgYW5kIGFkdmFuY2VkIEFQSXMuXCIpO1xuICAgIGNvbnNvbGUubG9nKFwiXCIpO1xuICAgIGNvbnNvbGUubG9nKFwiRm9yIG1vcmUgZGV0YWlsczogaHR0cHM6L1xcL2RvY3MuZXRoZXJzLmlvL2FwaS1rZXlzL1wiKTtcbiAgICBjb25zb2xlLmxvZyhcIj09PT09PT09PT09PT09PT09PT09PT09PT09XCIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm9ybWF0dGVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5pbXBvcnQgeyBGb3JrRXZlbnQsIFByb3ZpZGVyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2Fic3RyYWN0LXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBlbmNvZGUgYXMgYmFzZTY0RW5jb2RlIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2Jhc2U2NFwiO1xuaW1wb3J0IHsgQmFzZTU4IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2Jhc2V4XCI7XG5pbXBvcnQgeyBCaWdOdW1iZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYmlnbnVtYmVyXCI7XG5pbXBvcnQgeyBhcnJheWlmeSwgY29uY2F0LCBoZXhDb25jYXQsIGhleERhdGFMZW5ndGgsIGhleERhdGFTbGljZSwgaGV4bGlmeSwgaGV4VmFsdWUsIGhleFplcm9QYWQsIGlzSGV4U3RyaW5nIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2J5dGVzXCI7XG5pbXBvcnQgeyBIYXNoWmVybyB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9jb25zdGFudHNcIjtcbmltcG9ydCB7IGRuc0VuY29kZSwgbmFtZWhhc2ggfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvaGFzaFwiO1xuaW1wb3J0IHsgZ2V0TmV0d29yayB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9uZXR3b3Jrc1wiO1xuaW1wb3J0IHsgZGVmaW5lUmVhZE9ubHksIGdldFN0YXRpYywgcmVzb2x2ZVByb3BlcnRpZXMgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvcHJvcGVydGllc1wiO1xuaW1wb3J0IHsgc2hhMjU2IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3NoYTJcIjtcbmltcG9ydCB7IHRvVXRmOEJ5dGVzLCB0b1V0ZjhTdHJpbmcgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3Qvc3RyaW5nc1wiO1xuaW1wb3J0IHsgZmV0Y2hKc29uLCBwb2xsIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3dlYlwiO1xuaW1wb3J0IGJlY2gzMiBmcm9tIFwiYmVjaDMyXCI7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbG9nZ2VyXCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4vX3ZlcnNpb25cIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIodmVyc2lvbik7XG5pbXBvcnQgeyBGb3JtYXR0ZXIgfSBmcm9tIFwiLi9mb3JtYXR0ZXJcIjtcbmNvbnN0IE1BWF9DQ0lQX1JFRElSRUNUUyA9IDEwO1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBFdmVudCBTZXJpYWxpemVpbmdcbmZ1bmN0aW9uIGNoZWNrVG9waWModG9waWMpIHtcbiAgICBpZiAodG9waWMgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gXCJudWxsXCI7XG4gICAgfVxuICAgIGlmIChoZXhEYXRhTGVuZ3RoKHRvcGljKSAhPT0gMzIpIHtcbiAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgdG9waWNcIiwgXCJ0b3BpY1wiLCB0b3BpYyk7XG4gICAgfVxuICAgIHJldHVybiB0b3BpYy50b0xvd2VyQ2FzZSgpO1xufVxuZnVuY3Rpb24gc2VyaWFsaXplVG9waWNzKHRvcGljcykge1xuICAgIC8vIFJlbW92ZSB0cmFpbGluZyBudWxsIEFORC10b3BpY3M7IHRoZXkgYXJlIHJlZHVuZGFudFxuICAgIHRvcGljcyA9IHRvcGljcy5zbGljZSgpO1xuICAgIHdoaWxlICh0b3BpY3MubGVuZ3RoID4gMCAmJiB0b3BpY3NbdG9waWNzLmxlbmd0aCAtIDFdID09IG51bGwpIHtcbiAgICAgICAgdG9waWNzLnBvcCgpO1xuICAgIH1cbiAgICByZXR1cm4gdG9waWNzLm1hcCgodG9waWMpID0+IHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodG9waWMpKSB7XG4gICAgICAgICAgICAvLyBPbmx5IHRyYWNrIHVuaXF1ZSBPUi10b3BpY3NcbiAgICAgICAgICAgIGNvbnN0IHVuaXF1ZSA9IHt9O1xuICAgICAgICAgICAgdG9waWMuZm9yRWFjaCgodG9waWMpID0+IHtcbiAgICAgICAgICAgICAgICB1bmlxdWVbY2hlY2tUb3BpYyh0b3BpYyldID0gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gVGhlIG9yZGVyIG9mIE9SLXRvcGljcyBkb2VzIG5vdCBtYXR0ZXJcbiAgICAgICAgICAgIGNvbnN0IHNvcnRlZCA9IE9iamVjdC5rZXlzKHVuaXF1ZSk7XG4gICAgICAgICAgICBzb3J0ZWQuc29ydCgpO1xuICAgICAgICAgICAgcmV0dXJuIHNvcnRlZC5qb2luKFwifFwiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjaGVja1RvcGljKHRvcGljKTtcbiAgICAgICAgfVxuICAgIH0pLmpvaW4oXCImXCIpO1xufVxuZnVuY3Rpb24gZGVzZXJpYWxpemVUb3BpY3MoZGF0YSkge1xuICAgIGlmIChkYXRhID09PSBcIlwiKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGEuc3BsaXQoLyYvZykubWFwKCh0b3BpYykgPT4ge1xuICAgICAgICBpZiAodG9waWMgPT09IFwiXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb21wcyA9IHRvcGljLnNwbGl0KFwifFwiKS5tYXAoKHRvcGljKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKCh0b3BpYyA9PT0gXCJudWxsXCIpID8gbnVsbCA6IHRvcGljKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiAoKGNvbXBzLmxlbmd0aCA9PT0gMSkgPyBjb21wc1swXSA6IGNvbXBzKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGdldEV2ZW50VGFnKGV2ZW50TmFtZSkge1xuICAgIGlmICh0eXBlb2YgKGV2ZW50TmFtZSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgZXZlbnROYW1lID0gZXZlbnROYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChoZXhEYXRhTGVuZ3RoKGV2ZW50TmFtZSkgPT09IDMyKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJ0eDpcIiArIGV2ZW50TmFtZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnROYW1lLmluZGV4T2YoXCI6XCIpID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIGV2ZW50TmFtZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGV2ZW50TmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIFwiZmlsdGVyOio6XCIgKyBzZXJpYWxpemVUb3BpY3MoZXZlbnROYW1lKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoRm9ya0V2ZW50LmlzRm9ya0V2ZW50KGV2ZW50TmFtZSkpIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oXCJub3QgaW1wbGVtZW50ZWRcIik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vdCBpbXBsZW1lbnRlZFwiKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZXZlbnROYW1lICYmIHR5cGVvZiAoZXZlbnROYW1lKSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICByZXR1cm4gXCJmaWx0ZXI6XCIgKyAoZXZlbnROYW1lLmFkZHJlc3MgfHwgXCIqXCIpICsgXCI6XCIgKyBzZXJpYWxpemVUb3BpY3MoZXZlbnROYW1lLnRvcGljcyB8fCBbXSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgZXZlbnQgLSBcIiArIGV2ZW50TmFtZSk7XG59XG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEhlbHBlciBPYmplY3RcbmZ1bmN0aW9uIGdldFRpbWUoKSB7XG4gICAgcmV0dXJuIChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7XG59XG5mdW5jdGlvbiBzdGFsbChkdXJhdGlvbikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICBzZXRUaW1lb3V0KHJlc29sdmUsIGR1cmF0aW9uKTtcbiAgICB9KTtcbn1cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gUHJvdmlkZXIgT2JqZWN0XG4vKipcbiAqICBFdmVudFR5cGVcbiAqICAgLSBcImJsb2NrXCJcbiAqICAgLSBcInBvbGxcIlxuICogICAtIFwiZGlkUG9sbFwiXG4gKiAgIC0gXCJwZW5kaW5nXCJcbiAqICAgLSBcImVycm9yXCJcbiAqICAgLSBcIm5ldHdvcmtcIlxuICogICAtIGZpbHRlclxuICogICAtIHRvcGljcyBhcnJheVxuICogICAtIHRyYW5zYWN0aW9uIGhhc2hcbiAqL1xuY29uc3QgUG9sbGFibGVFdmVudHMgPSBbXCJibG9ja1wiLCBcIm5ldHdvcmtcIiwgXCJwZW5kaW5nXCIsIFwicG9sbFwiXTtcbmV4cG9ydCBjbGFzcyBFdmVudCB7XG4gICAgY29uc3RydWN0b3IodGFnLCBsaXN0ZW5lciwgb25jZSkge1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcInRhZ1wiLCB0YWcpO1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcImxpc3RlbmVyXCIsIGxpc3RlbmVyKTtcbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJvbmNlXCIsIG9uY2UpO1xuICAgICAgICB0aGlzLl9sYXN0QmxvY2tOdW1iZXIgPSAtMjtcbiAgICAgICAgdGhpcy5faW5mbGlnaHQgPSBmYWxzZTtcbiAgICB9XG4gICAgZ2V0IGV2ZW50KCkge1xuICAgICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcInR4XCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGFzaDtcbiAgICAgICAgICAgIGNhc2UgXCJmaWx0ZXJcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMudGFnO1xuICAgIH1cbiAgICBnZXQgdHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFnLnNwbGl0KFwiOlwiKVswXTtcbiAgICB9XG4gICAgZ2V0IGhhc2goKSB7XG4gICAgICAgIGNvbnN0IGNvbXBzID0gdGhpcy50YWcuc3BsaXQoXCI6XCIpO1xuICAgICAgICBpZiAoY29tcHNbMF0gIT09IFwidHhcIikge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbXBzWzFdO1xuICAgIH1cbiAgICBnZXQgZmlsdGVyKCkge1xuICAgICAgICBjb25zdCBjb21wcyA9IHRoaXMudGFnLnNwbGl0KFwiOlwiKTtcbiAgICAgICAgaWYgKGNvbXBzWzBdICE9PSBcImZpbHRlclwiKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhZGRyZXNzID0gY29tcHNbMV07XG4gICAgICAgIGNvbnN0IHRvcGljcyA9IGRlc2VyaWFsaXplVG9waWNzKGNvbXBzWzJdKTtcbiAgICAgICAgY29uc3QgZmlsdGVyID0ge307XG4gICAgICAgIGlmICh0b3BpY3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZmlsdGVyLnRvcGljcyA9IHRvcGljcztcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWRkcmVzcyAmJiBhZGRyZXNzICE9PSBcIipcIikge1xuICAgICAgICAgICAgZmlsdGVyLmFkZHJlc3MgPSBhZGRyZXNzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWx0ZXI7XG4gICAgfVxuICAgIHBvbGxhYmxlKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMudGFnLmluZGV4T2YoXCI6XCIpID49IDAgfHwgUG9sbGFibGVFdmVudHMuaW5kZXhPZih0aGlzLnRhZykgPj0gMCk7XG4gICAgfVxufVxuO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NhdG9zaGlsYWJzL3NsaXBzL2Jsb2IvbWFzdGVyL3NsaXAtMDA0NC5tZFxuY29uc3QgY29pbkluZm9zID0ge1xuICAgIFwiMFwiOiB7IHN5bWJvbDogXCJidGNcIiwgcDJwa2g6IDB4MDAsIHAyc2g6IDB4MDUsIHByZWZpeDogXCJiY1wiIH0sXG4gICAgXCIyXCI6IHsgc3ltYm9sOiBcImx0Y1wiLCBwMnBraDogMHgzMCwgcDJzaDogMHgzMiwgcHJlZml4OiBcImx0Y1wiIH0sXG4gICAgXCIzXCI6IHsgc3ltYm9sOiBcImRvZ2VcIiwgcDJwa2g6IDB4MWUsIHAyc2g6IDB4MTYgfSxcbiAgICBcIjYwXCI6IHsgc3ltYm9sOiBcImV0aFwiLCBpbGs6IFwiZXRoXCIgfSxcbiAgICBcIjYxXCI6IHsgc3ltYm9sOiBcImV0Y1wiLCBpbGs6IFwiZXRoXCIgfSxcbiAgICBcIjcwMFwiOiB7IHN5bWJvbDogXCJ4ZGFpXCIsIGlsazogXCJldGhcIiB9LFxufTtcbmZ1bmN0aW9uIGJ5dGVzMzJpZnkodmFsdWUpIHtcbiAgICByZXR1cm4gaGV4WmVyb1BhZChCaWdOdW1iZXIuZnJvbSh2YWx1ZSkudG9IZXhTdHJpbmcoKSwgMzIpO1xufVxuLy8gQ29tcHV0ZSB0aGUgQmFzZTU4Q2hlY2sgZW5jb2RlZCBkYXRhIChjaGVja3N1bSBpcyBmaXJzdCA0IGJ5dGVzIG9mIHNoYTI1NmQpXG5mdW5jdGlvbiBiYXNlNThFbmNvZGUoZGF0YSkge1xuICAgIHJldHVybiBCYXNlNTguZW5jb2RlKGNvbmNhdChbZGF0YSwgaGV4RGF0YVNsaWNlKHNoYTI1NihzaGEyNTYoZGF0YSkpLCAwLCA0KV0pKTtcbn1cbmNvbnN0IG1hdGNoZXJJcGZzID0gbmV3IFJlZ0V4cChcIl4oaXBmcyk6L1xcLyguKikkXCIsIFwiaVwiKTtcbmNvbnN0IG1hdGNoZXJzID0gW1xuICAgIG5ldyBSZWdFeHAoXCJeKGh0dHBzKTovXFwvKC4qKSRcIiwgXCJpXCIpLFxuICAgIG5ldyBSZWdFeHAoXCJeKGRhdGEpOiguKikkXCIsIFwiaVwiKSxcbiAgICBtYXRjaGVySXBmcyxcbiAgICBuZXcgUmVnRXhwKFwiXmVpcDE1NTpbMC05XSsvKGVyY1swLTldKyk6KC4qKSRcIiwgXCJpXCIpLFxuXTtcbmZ1bmN0aW9uIF9wYXJzZVN0cmluZyhyZXN1bHQsIHN0YXJ0KSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHRvVXRmOFN0cmluZyhfcGFyc2VCeXRlcyhyZXN1bHQsIHN0YXJ0KSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBfcGFyc2VCeXRlcyhyZXN1bHQsIHN0YXJ0KSB7XG4gICAgaWYgKHJlc3VsdCA9PT0gXCIweFwiKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBvZmZzZXQgPSBCaWdOdW1iZXIuZnJvbShoZXhEYXRhU2xpY2UocmVzdWx0LCBzdGFydCwgc3RhcnQgKyAzMikpLnRvTnVtYmVyKCk7XG4gICAgY29uc3QgbGVuZ3RoID0gQmlnTnVtYmVyLmZyb20oaGV4RGF0YVNsaWNlKHJlc3VsdCwgb2Zmc2V0LCBvZmZzZXQgKyAzMikpLnRvTnVtYmVyKCk7XG4gICAgcmV0dXJuIGhleERhdGFTbGljZShyZXN1bHQsIG9mZnNldCArIDMyLCBvZmZzZXQgKyAzMiArIGxlbmd0aCk7XG59XG4vLyBUcmltIG9mZiB0aGUgaXBmczovLyBwcmVmaXggYW5kIHJldHVybiB0aGUgZGVmYXVsdCBnYXRld2F5IFVSTFxuZnVuY3Rpb24gZ2V0SXBmc0xpbmsobGluaykge1xuICAgIGlmIChsaW5rLm1hdGNoKC9eaXBmczpcXC9cXC9pcGZzXFwvL2kpKSB7XG4gICAgICAgIGxpbmsgPSBsaW5rLnN1YnN0cmluZygxMik7XG4gICAgfVxuICAgIGVsc2UgaWYgKGxpbmsubWF0Y2goL15pcGZzOlxcL1xcLy9pKSkge1xuICAgICAgICBsaW5rID0gbGluay5zdWJzdHJpbmcoNyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwidW5zdXBwb3J0ZWQgSVBGUyBmb3JtYXRcIiwgXCJsaW5rXCIsIGxpbmspO1xuICAgIH1cbiAgICByZXR1cm4gYGh0dHBzOi9cXC9nYXRld2F5LmlwZnMuaW8vaXBmcy8ke2xpbmt9YDtcbn1cbmZ1bmN0aW9uIG51bVBhZCh2YWx1ZSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IGFycmF5aWZ5KHZhbHVlKTtcbiAgICBpZiAocmVzdWx0Lmxlbmd0aCA+IDMyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImludGVybmFsOyBzaG91bGQgbm90IGhhcHBlblwiKTtcbiAgICB9XG4gICAgY29uc3QgcGFkZGVkID0gbmV3IFVpbnQ4QXJyYXkoMzIpO1xuICAgIHBhZGRlZC5zZXQocmVzdWx0LCAzMiAtIHJlc3VsdC5sZW5ndGgpO1xuICAgIHJldHVybiBwYWRkZWQ7XG59XG5mdW5jdGlvbiBieXRlc1BhZCh2YWx1ZSkge1xuICAgIGlmICgodmFsdWUubGVuZ3RoICUgMzIpID09PSAwKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkoTWF0aC5jZWlsKHZhbHVlLmxlbmd0aCAvIDMyKSAqIDMyKTtcbiAgICByZXN1bHQuc2V0KHZhbHVlKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLy8gQUJJIEVuY29kZXMgYSBzZXJpZXMgb2YgKGJ5dGVzLCBieXRlcywgLi4uKVxuZnVuY3Rpb24gZW5jb2RlQnl0ZXMoZGF0YXMpIHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBsZXQgYnl0ZUNvdW50ID0gMDtcbiAgICAvLyBBZGQgcGxhY2UtaG9sZGVycyBmb3IgcG9pbnRlcnMgYXMgd2UgYWRkIGl0ZW1zXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhcy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQucHVzaChudWxsKTtcbiAgICAgICAgYnl0ZUNvdW50ICs9IDMyO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGFzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBhcnJheWlmeShkYXRhc1tpXSk7XG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgYnl0ZXMgb2Zmc2V0XG4gICAgICAgIHJlc3VsdFtpXSA9IG51bVBhZChieXRlQ291bnQpO1xuICAgICAgICAvLyBUaGUgbGVuZ3RoIGFuZCBwYWRkZWQgdmFsdWUgb2YgZGF0YVxuICAgICAgICByZXN1bHQucHVzaChudW1QYWQoZGF0YS5sZW5ndGgpKTtcbiAgICAgICAgcmVzdWx0LnB1c2goYnl0ZXNQYWQoZGF0YSkpO1xuICAgICAgICBieXRlQ291bnQgKz0gMzIgKyBNYXRoLmNlaWwoZGF0YS5sZW5ndGggLyAzMikgKiAzMjtcbiAgICB9XG4gICAgcmV0dXJuIGhleENvbmNhdChyZXN1bHQpO1xufVxuZXhwb3J0IGNsYXNzIFJlc29sdmVyIHtcbiAgICAvLyBUaGUgcmVzb2x2ZWRBZGRyZXNzIGlzIG9ubHkgZm9yIGNyZWF0aW5nIGEgUmV2ZXJzZUxvb2t1cCByZXNvbHZlclxuICAgIGNvbnN0cnVjdG9yKHByb3ZpZGVyLCBhZGRyZXNzLCBuYW1lLCByZXNvbHZlZEFkZHJlc3MpIHtcbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJwcm92aWRlclwiLCBwcm92aWRlcik7XG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwibmFtZVwiLCBuYW1lKTtcbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJhZGRyZXNzXCIsIHByb3ZpZGVyLmZvcm1hdHRlci5hZGRyZXNzKGFkZHJlc3MpKTtcbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJfcmVzb2x2ZWRBZGRyZXNzXCIsIHJlc29sdmVkQWRkcmVzcyk7XG4gICAgfVxuICAgIHN1cHBvcnRzV2lsZGNhcmQoKSB7XG4gICAgICAgIGlmICghdGhpcy5fc3VwcG9ydHNFaXAyNTQ0KSB7XG4gICAgICAgICAgICAvLyBzdXBwb3J0c0ludGVyZmFjZShieXRlczQgPSBzZWxlY3RvcihcInJlc29sdmUoYnl0ZXMsYnl0ZXMpXCIpKVxuICAgICAgICAgICAgdGhpcy5fc3VwcG9ydHNFaXAyNTQ0ID0gdGhpcy5wcm92aWRlci5jYWxsKHtcbiAgICAgICAgICAgICAgICB0bzogdGhpcy5hZGRyZXNzLFxuICAgICAgICAgICAgICAgIGRhdGE6IFwiMHgwMWZmYzlhNzkwNjFiOTIzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIlxuICAgICAgICAgICAgfSkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEJpZ051bWJlci5mcm9tKHJlc3VsdCkuZXEoMSk7XG4gICAgICAgICAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IuY29kZSA9PT0gTG9nZ2VyLmVycm9ycy5DQUxMX0VYQ0VQVElPTikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFJldGhyb3cgdGhlIGVycm9yOiBsaW5rIGlzIGRvd24sIGV0Yy4gTGV0IGZ1dHVyZSBhdHRlbXB0cyByZXRyeS5cbiAgICAgICAgICAgICAgICB0aGlzLl9zdXBwb3J0c0VpcDI1NDQgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3N1cHBvcnRzRWlwMjU0NDtcbiAgICB9XG4gICAgX2ZldGNoKHNlbGVjdG9yLCBwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAvLyBlLmcuIGtlY2NhazI1NihcImFkZHIoYnl0ZXMzMix1aW50MjU2KVwiKVxuICAgICAgICAgICAgY29uc3QgdHggPSB7XG4gICAgICAgICAgICAgICAgdG86IHRoaXMuYWRkcmVzcyxcbiAgICAgICAgICAgICAgICBjY2lwUmVhZEVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgZGF0YTogaGV4Q29uY2F0KFtzZWxlY3RvciwgbmFtZWhhc2godGhpcy5uYW1lKSwgKHBhcmFtZXRlcnMgfHwgXCIweFwiKV0pXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gV2lsZGNhcmQgc3VwcG9ydDsgdXNlIEVJUC0yNTQ0IHRvIHJlc29sdmUgdGhlIHJlcXVlc3RcbiAgICAgICAgICAgIGxldCBwYXJzZUJ5dGVzID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoeWllbGQgdGhpcy5zdXBwb3J0c1dpbGRjYXJkKCkpIHtcbiAgICAgICAgICAgICAgICBwYXJzZUJ5dGVzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAvLyBzZWxlY3RvcihcInJlc29sdmUoYnl0ZXMsYnl0ZXMpXCIpXG4gICAgICAgICAgICAgICAgdHguZGF0YSA9IGhleENvbmNhdChbXCIweDkwNjFiOTIzXCIsIGVuY29kZUJ5dGVzKFtkbnNFbmNvZGUodGhpcy5uYW1lKSwgdHguZGF0YV0pXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSB5aWVsZCB0aGlzLnByb3ZpZGVyLmNhbGwodHgpO1xuICAgICAgICAgICAgICAgIGlmICgoYXJyYXlpZnkocmVzdWx0KS5sZW5ndGggJSAzMikgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJyZXNvbHZlciB0aHJldyBlcnJvclwiLCBMb2dnZXIuZXJyb3JzLkNBTExfRVhDRVBUSU9OLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbjogdHgsIGRhdGE6IHJlc3VsdFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlQnl0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gX3BhcnNlQnl0ZXMocmVzdWx0LCAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvci5jb2RlID09PSBMb2dnZXIuZXJyb3JzLkNBTExfRVhDRVBUSU9OKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9mZXRjaEJ5dGVzKHNlbGVjdG9yLCBwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB5aWVsZCB0aGlzLl9mZXRjaChzZWxlY3RvciwgcGFyYW1ldGVycyk7XG4gICAgICAgICAgICBpZiAocmVzdWx0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3BhcnNlQnl0ZXMocmVzdWx0LCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX2dldEFkZHJlc3MoY29pblR5cGUsIGhleEJ5dGVzKSB7XG4gICAgICAgIGNvbnN0IGNvaW5JbmZvID0gY29pbkluZm9zW1N0cmluZyhjb2luVHlwZSldO1xuICAgICAgICBpZiAoY29pbkluZm8gPT0gbnVsbCkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoYHVuc3VwcG9ydGVkIGNvaW4gdHlwZTogJHtjb2luVHlwZX1gLCBMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTiwge1xuICAgICAgICAgICAgICAgIG9wZXJhdGlvbjogYGdldEFkZHJlc3MoJHtjb2luVHlwZX0pYFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvaW5JbmZvLmlsayA9PT0gXCJldGhcIikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvdmlkZXIuZm9ybWF0dGVyLmFkZHJlc3MoaGV4Qnl0ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJ5dGVzID0gYXJyYXlpZnkoaGV4Qnl0ZXMpO1xuICAgICAgICAvLyBQMlBLSDogT1BfRFVQIE9QX0hBU0gxNjAgPHB1YktleUhhc2g+IE9QX0VRVUFMVkVSSUZZIE9QX0NIRUNLU0lHXG4gICAgICAgIGlmIChjb2luSW5mby5wMnBraCAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBwMnBraCA9IGhleEJ5dGVzLm1hdGNoKC9eMHg3NmE5KFswLTlhLWZdWzAtOWEtZl0pKFswLTlhLWZdKik4OGFjJC8pO1xuICAgICAgICAgICAgaWYgKHAycGtoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gcGFyc2VJbnQocDJwa2hbMV0sIDE2KTtcbiAgICAgICAgICAgICAgICBpZiAocDJwa2hbMl0ubGVuZ3RoID09PSBsZW5ndGggKiAyICYmIGxlbmd0aCA+PSAxICYmIGxlbmd0aCA8PSA3NSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYmFzZTU4RW5jb2RlKGNvbmNhdChbW2NvaW5JbmZvLnAycGtoXSwgKFwiMHhcIiArIHAycGtoWzJdKV0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gUDJTSDogT1BfSEFTSDE2MCA8c2NyaXB0SGFzaD4gT1BfRVFVQUxcbiAgICAgICAgaWYgKGNvaW5JbmZvLnAyc2ggIT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgcDJzaCA9IGhleEJ5dGVzLm1hdGNoKC9eMHhhOShbMC05YS1mXVswLTlhLWZdKShbMC05YS1mXSopODckLyk7XG4gICAgICAgICAgICBpZiAocDJzaCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IHBhcnNlSW50KHAyc2hbMV0sIDE2KTtcbiAgICAgICAgICAgICAgICBpZiAocDJzaFsyXS5sZW5ndGggPT09IGxlbmd0aCAqIDIgJiYgbGVuZ3RoID49IDEgJiYgbGVuZ3RoIDw9IDc1KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiYXNlNThFbmNvZGUoY29uY2F0KFtbY29pbkluZm8ucDJzaF0sIChcIjB4XCIgKyBwMnNoWzJdKV0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gQmVjaDMyXG4gICAgICAgIGlmIChjb2luSW5mby5wcmVmaXggIT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gYnl0ZXNbMV07XG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYml0Y29pbi9iaXBzL2Jsb2IvbWFzdGVyL2JpcC0wMTQxLm1lZGlhd2lraSN3aXRuZXNzLXByb2dyYW1cbiAgICAgICAgICAgIGxldCB2ZXJzaW9uID0gYnl0ZXNbMF07XG4gICAgICAgICAgICBpZiAodmVyc2lvbiA9PT0gMHgwMCkge1xuICAgICAgICAgICAgICAgIGlmIChsZW5ndGggIT09IDIwICYmIGxlbmd0aCAhPT0gMzIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmVyc2lvbiA9IC0xO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZlcnNpb24gPSAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh2ZXJzaW9uID49IDAgJiYgYnl0ZXMubGVuZ3RoID09PSAyICsgbGVuZ3RoICYmIGxlbmd0aCA+PSAxICYmIGxlbmd0aCA8PSA3NSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHdvcmRzID0gYmVjaDMyLnRvV29yZHMoYnl0ZXMuc2xpY2UoMikpO1xuICAgICAgICAgICAgICAgIHdvcmRzLnVuc2hpZnQodmVyc2lvbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJlY2gzMi5lbmNvZGUoY29pbkluZm8ucHJlZml4LCB3b3Jkcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGdldEFkZHJlc3MoY29pblR5cGUpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGlmIChjb2luVHlwZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29pblR5cGUgPSA2MDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIElmIEV0aGVyZXVtLCB1c2UgdGhlIHN0YW5kYXJkIGBhZGRyKGJ5dGVzMzIpYFxuICAgICAgICAgICAgaWYgKGNvaW5UeXBlID09PSA2MCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGtlY2NhazI1NihcImFkZHIoYnl0ZXMzMilcIilcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0geWllbGQgdGhpcy5fZmV0Y2goXCIweDNiM2I1N2RlXCIpO1xuICAgICAgICAgICAgICAgICAgICAvLyBObyBhZGRyZXNzXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IFwiMHhcIiB8fCByZXN1bHQgPT09IEhhc2haZXJvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wcm92aWRlci5mb3JtYXR0ZXIuY2FsbEFkZHJlc3MocmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvci5jb2RlID09PSBMb2dnZXIuZXJyb3JzLkNBTExfRVhDRVBUSU9OKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBrZWNjYWsyNTYoXCJhZGRyKGJ5dGVzMzIsdWludDI1NlwiKVxuICAgICAgICAgICAgY29uc3QgaGV4Qnl0ZXMgPSB5aWVsZCB0aGlzLl9mZXRjaEJ5dGVzKFwiMHhmMWNiN2UwNlwiLCBieXRlczMyaWZ5KGNvaW5UeXBlKSk7XG4gICAgICAgICAgICAvLyBObyBhZGRyZXNzXG4gICAgICAgICAgICBpZiAoaGV4Qnl0ZXMgPT0gbnVsbCB8fCBoZXhCeXRlcyA9PT0gXCIweFwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBDb21wdXRlIHRoZSBhZGRyZXNzXG4gICAgICAgICAgICBjb25zdCBhZGRyZXNzID0gdGhpcy5fZ2V0QWRkcmVzcyhjb2luVHlwZSwgaGV4Qnl0ZXMpO1xuICAgICAgICAgICAgaWYgKGFkZHJlc3MgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKGBpbnZhbGlkIG9yIHVuc3VwcG9ydGVkIGNvaW4gZGF0YWAsIExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLCB7XG4gICAgICAgICAgICAgICAgICAgIG9wZXJhdGlvbjogYGdldEFkZHJlc3MoJHtjb2luVHlwZX0pYCxcbiAgICAgICAgICAgICAgICAgICAgY29pblR5cGU6IGNvaW5UeXBlLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBoZXhCeXRlc1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFkZHJlc3M7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXRBdmF0YXIoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCBsaW5rYWdlID0gW3sgdHlwZTogXCJuYW1lXCIsIGNvbnRlbnQ6IHRoaXMubmFtZSB9XTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8gdGVzdCBkYXRhIGZvciByaWNtb28uZXRoXG4gICAgICAgICAgICAgICAgLy9jb25zdCBhdmF0YXIgPSBcImVpcDE1NToxL2VyYzcyMToweDI2NTM4NWM3ZjQxMzIyMjhBMGQ1NEVCMUE5ZTc0NjBiOTFjMGNDNjgvMjkyMzNcIjtcbiAgICAgICAgICAgICAgICBjb25zdCBhdmF0YXIgPSB5aWVsZCB0aGlzLmdldFRleHQoXCJhdmF0YXJcIik7XG4gICAgICAgICAgICAgICAgaWYgKGF2YXRhciA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hdGNoZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gYXZhdGFyLm1hdGNoKG1hdGNoZXJzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNjaGVtZSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoc2NoZW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaHR0cHNcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rYWdlLnB1c2goeyB0eXBlOiBcInVybFwiLCBjb250ZW50OiBhdmF0YXIgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgbGlua2FnZSwgdXJsOiBhdmF0YXIgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkYXRhXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlua2FnZS5wdXNoKHsgdHlwZTogXCJkYXRhXCIsIGNvbnRlbnQ6IGF2YXRhciB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBsaW5rYWdlLCB1cmw6IGF2YXRhciB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImlwZnNcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rYWdlLnB1c2goeyB0eXBlOiBcImlwZnNcIiwgY29udGVudDogYXZhdGFyIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGxpbmthZ2UsIHVybDogZ2V0SXBmc0xpbmsoYXZhdGFyKSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImVyYzcyMVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImVyYzExNTVcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERlcGVuZGluZyBvbiB0aGUgRVJDIHR5cGUsIHVzZSB0b2tlblVSSSh1aW50MjU2KSBvciB1cmwodWludDI1NilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RvciA9IChzY2hlbWUgPT09IFwiZXJjNzIxXCIpID8gXCIweGM4N2I1NmRkXCIgOiBcIjB4MGU4OTM0MWNcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rYWdlLnB1c2goeyB0eXBlOiBzY2hlbWUsIGNvbnRlbnQ6IGF2YXRhciB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgb3duZXIgb2YgdGhpcyBuYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3duZXIgPSAodGhpcy5fcmVzb2x2ZWRBZGRyZXNzIHx8ICh5aWVsZCB0aGlzLmdldEFkZHJlc3MoKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBzID0gKG1hdGNoWzJdIHx8IFwiXCIpLnNwbGl0KFwiL1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29tcHMubGVuZ3RoICE9PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhZGRyID0geWllbGQgdGhpcy5wcm92aWRlci5mb3JtYXR0ZXIuYWRkcmVzcyhjb21wc1swXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG9rZW5JZCA9IGhleFplcm9QYWQoQmlnTnVtYmVyLmZyb20oY29tcHNbMV0pLnRvSGV4U3RyaW5nKCksIDMyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayB0aGF0IHRoaXMgYWNjb3VudCBvd25zIHRoZSB0b2tlblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY2hlbWUgPT09IFwiZXJjNzIxXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb3duZXJPZih1aW50MjU2IHRva2VuSWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRva2VuT3duZXIgPSB0aGlzLnByb3ZpZGVyLmZvcm1hdHRlci5jYWxsQWRkcmVzcyh5aWVsZCB0aGlzLnByb3ZpZGVyLmNhbGwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG86IGFkZHIsIGRhdGE6IGhleENvbmNhdChbXCIweDYzNTIyMTFlXCIsIHRva2VuSWRdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvd25lciAhPT0gdG9rZW5Pd25lcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlua2FnZS5wdXNoKHsgdHlwZTogXCJvd25lclwiLCBjb250ZW50OiB0b2tlbk93bmVyIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzY2hlbWUgPT09IFwiZXJjMTE1NVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJhbGFuY2VPZihhZGRyZXNzIG93bmVyLCB1aW50MjU2IHRva2VuSWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJhbGFuY2UgPSBCaWdOdW1iZXIuZnJvbSh5aWVsZCB0aGlzLnByb3ZpZGVyLmNhbGwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG86IGFkZHIsIGRhdGE6IGhleENvbmNhdChbXCIweDAwZmRkNThlXCIsIGhleFplcm9QYWQob3duZXIsIDMyKSwgdG9rZW5JZF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJhbGFuY2UuaXNaZXJvKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmthZ2UucHVzaCh7IHR5cGU6IFwiYmFsYW5jZVwiLCBjb250ZW50OiBiYWxhbmNlLnRvU3RyaW5nKCkgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENhbGwgdGhlIHRva2VuIGNvbnRyYWN0IGZvciB0aGUgbWV0YWRhdGEgVVJMXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHggPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvOiB0aGlzLnByb3ZpZGVyLmZvcm1hdHRlci5hZGRyZXNzKGNvbXBzWzBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogaGV4Q29uY2F0KFtzZWxlY3RvciwgdG9rZW5JZF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWV0YWRhdGFVcmwgPSBfcGFyc2VTdHJpbmcoeWllbGQgdGhpcy5wcm92aWRlci5jYWxsKHR4KSwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1ldGFkYXRhVXJsID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmthZ2UucHVzaCh7IHR5cGU6IFwibWV0YWRhdGEtdXJsLWJhc2VcIiwgY29udGVudDogbWV0YWRhdGFVcmwgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRVJDLTExNTUgYWxsb3dzIGEgZ2VuZXJpYyB7aWR9IGluIHRoZSBVUkxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2NoZW1lID09PSBcImVyYzExNTVcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YVVybCA9IG1ldGFkYXRhVXJsLnJlcGxhY2UoXCJ7aWR9XCIsIHRva2VuSWQuc3Vic3RyaW5nKDIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlua2FnZS5wdXNoKHsgdHlwZTogXCJtZXRhZGF0YS11cmwtZXhwYW5kZWRcIiwgY29udGVudDogbWV0YWRhdGFVcmwgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyYW5zZm9ybSBJUEZTIG1ldGFkYXRhIGxpbmtzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1ldGFkYXRhVXJsLm1hdGNoKC9eaXBmczovaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGFVcmwgPSBnZXRJcGZzTGluayhtZXRhZGF0YVVybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmthZ2UucHVzaCh7IHR5cGU6IFwibWV0YWRhdGEtdXJsXCIsIGNvbnRlbnQ6IG1ldGFkYXRhVXJsIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgdG9rZW4gbWV0YWRhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXRhZGF0YSA9IHlpZWxkIGZldGNoSnNvbihtZXRhZGF0YVVybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtZXRhZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlua2FnZS5wdXNoKHsgdHlwZTogXCJtZXRhZGF0YVwiLCBjb250ZW50OiBKU09OLnN0cmluZ2lmeShtZXRhZGF0YSkgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUHVsbCB0aGUgaW1hZ2UgVVJMIG91dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbWFnZVVybCA9IG1ldGFkYXRhLmltYWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKGltYWdlVXJsKSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGltYWdlVXJsLm1hdGNoKC9eKGh0dHBzOlxcL1xcL3xkYXRhOikvaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWxsb3dcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyYW5zZm9ybSBJUEZTIGxpbmsgdG8gZ2F0ZXdheVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpcGZzID0gaW1hZ2VVcmwubWF0Y2gobWF0Y2hlcklwZnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXBmcyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rYWdlLnB1c2goeyB0eXBlOiBcInVybC1pcGZzXCIsIGNvbnRlbnQ6IGltYWdlVXJsIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZVVybCA9IGdldElwZnNMaW5rKGltYWdlVXJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlua2FnZS5wdXNoKHsgdHlwZTogXCJ1cmxcIiwgY29udGVudDogaW1hZ2VVcmwgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgbGlua2FnZSwgdXJsOiBpbWFnZVVybCB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0Q29udGVudEhhc2goKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAvLyBrZWNjYWsyNTYoXCJjb250ZW50aGFzaCgpXCIpXG4gICAgICAgICAgICBjb25zdCBoZXhCeXRlcyA9IHlpZWxkIHRoaXMuX2ZldGNoQnl0ZXMoXCIweGJjMWM1OGQxXCIpO1xuICAgICAgICAgICAgLy8gTm8gY29udGVudGhhc2hcbiAgICAgICAgICAgIGlmIChoZXhCeXRlcyA9PSBudWxsIHx8IGhleEJ5dGVzID09PSBcIjB4XCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIElQRlMgKENJRDogMSwgVHlwZTogREFHLVBCKVxuICAgICAgICAgICAgY29uc3QgaXBmcyA9IGhleEJ5dGVzLm1hdGNoKC9eMHhlMzAxMDE3MCgoWzAtOWEtZl1bMC05YS1mXSkoWzAtOWEtZl1bMC05YS1mXSkoWzAtOWEtZl0qKSkkLyk7XG4gICAgICAgICAgICBpZiAoaXBmcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IHBhcnNlSW50KGlwZnNbM10sIDE2KTtcbiAgICAgICAgICAgICAgICBpZiAoaXBmc1s0XS5sZW5ndGggPT09IGxlbmd0aCAqIDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiaXBmczovXFwvXCIgKyBCYXNlNTguZW5jb2RlKFwiMHhcIiArIGlwZnNbMV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIElQTlMgKENJRDogMSwgVHlwZTogbGlicDJwLWtleSlcbiAgICAgICAgICAgIGNvbnN0IGlwbnMgPSBoZXhCeXRlcy5tYXRjaCgvXjB4ZTUwMTAxNzIoKFswLTlhLWZdWzAtOWEtZl0pKFswLTlhLWZdWzAtOWEtZl0pKFswLTlhLWZdKikpJC8pO1xuICAgICAgICAgICAgaWYgKGlwbnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsZW5ndGggPSBwYXJzZUludChpcG5zWzNdLCAxNik7XG4gICAgICAgICAgICAgICAgaWYgKGlwbnNbNF0ubGVuZ3RoID09PSBsZW5ndGggKiAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcImlwbnM6L1xcL1wiICsgQmFzZTU4LmVuY29kZShcIjB4XCIgKyBpcG5zWzFdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTd2FybSAoQ0lEOiAxLCBUeXBlOiBzd2FybS1tYW5pZmVzdDsgaGFzaC9sZW5ndGggaGFyZC1jb2RlZCB0byBrZWNjYWsyNTYvMzIpXG4gICAgICAgICAgICBjb25zdCBzd2FybSA9IGhleEJ5dGVzLm1hdGNoKC9eMHhlNDAxMDFmYTAxMWIyMChbMC05YS1mXSopJC8pO1xuICAgICAgICAgICAgaWYgKHN3YXJtKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN3YXJtWzFdLmxlbmd0aCA9PT0gKDMyICogMikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiYnp6Oi9cXC9cIiArIHN3YXJtWzFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHNreW5ldCA9IGhleEJ5dGVzLm1hdGNoKC9eMHg5MGIyYzYwNShbMC05YS1mXSopJC8pO1xuICAgICAgICAgICAgaWYgKHNreW5ldCkge1xuICAgICAgICAgICAgICAgIGlmIChza3luZXRbMV0ubGVuZ3RoID09PSAoMzQgKiAyKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBVUkwgU2FmZSBiYXNlNjQ7IGh0dHBzOi8vZGF0YXRyYWNrZXIuaWV0Zi5vcmcvZG9jL2h0bWwvcmZjNDY0OCNzZWN0aW9uLTVcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdXJsU2FmZSA9IHsgXCI9XCI6IFwiXCIsIFwiK1wiOiBcIi1cIiwgXCIvXCI6IFwiX1wiIH07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhhc2ggPSBiYXNlNjRFbmNvZGUoXCIweFwiICsgc2t5bmV0WzFdKS5yZXBsYWNlKC9bPStcXC9dL2csIChhKSA9PiAodXJsU2FmZVthXSkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJzaWE6L1xcL1wiICsgaGFzaDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbG9nZ2VyLnRocm93RXJyb3IoYGludmFsaWQgb3IgdW5zdXBwb3J0ZWQgY29udGVudCBoYXNoIGRhdGFgLCBMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTiwge1xuICAgICAgICAgICAgICAgIG9wZXJhdGlvbjogXCJnZXRDb250ZW50SGFzaCgpXCIsXG4gICAgICAgICAgICAgICAgZGF0YTogaGV4Qnl0ZXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0VGV4dChrZXkpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIC8vIFRoZSBrZXkgZW5jb2RlZCBhcyBwYXJhbWV0ZXIgdG8gZmV0Y2hCeXRlc1xuICAgICAgICAgICAgbGV0IGtleUJ5dGVzID0gdG9VdGY4Qnl0ZXMoa2V5KTtcbiAgICAgICAgICAgIC8vIFRoZSBub2RlaGFzaCBjb25zdW1lcyB0aGUgZmlyc3Qgc2xvdCwgc28gdGhlIHN0cmluZyBwb2ludGVyIHRhcmdldHNcbiAgICAgICAgICAgIC8vIG9mZnNldCA2NCwgd2l0aCB0aGUgbGVuZ3RoIGF0IG9mZnNldCA2NCBhbmQgZGF0YSBzdGFydGluZyBhdCBvZmZzZXQgOTZcbiAgICAgICAgICAgIGtleUJ5dGVzID0gY29uY2F0KFtieXRlczMyaWZ5KDY0KSwgYnl0ZXMzMmlmeShrZXlCeXRlcy5sZW5ndGgpLCBrZXlCeXRlc10pO1xuICAgICAgICAgICAgLy8gUGFkIHRvIHdvcmQtc2l6ZSAoMzIgYnl0ZXMpXG4gICAgICAgICAgICBpZiAoKGtleUJ5dGVzLmxlbmd0aCAlIDMyKSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGtleUJ5dGVzID0gY29uY2F0KFtrZXlCeXRlcywgaGV4WmVyb1BhZChcIjB4XCIsIDMyIC0gKGtleS5sZW5ndGggJSAzMikpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBoZXhCeXRlcyA9IHlpZWxkIHRoaXMuX2ZldGNoQnl0ZXMoXCIweDU5ZDFkNDNjXCIsIGhleGxpZnkoa2V5Qnl0ZXMpKTtcbiAgICAgICAgICAgIGlmIChoZXhCeXRlcyA9PSBudWxsIHx8IGhleEJ5dGVzID09PSBcIjB4XCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0b1V0ZjhTdHJpbmcoaGV4Qnl0ZXMpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5sZXQgZGVmYXVsdEZvcm1hdHRlciA9IG51bGw7XG5sZXQgbmV4dFBvbGxJZCA9IDE7XG5leHBvcnQgY2xhc3MgQmFzZVByb3ZpZGVyIGV4dGVuZHMgUHJvdmlkZXIge1xuICAgIC8qKlxuICAgICAqICByZWFkeVxuICAgICAqXG4gICAgICogIEEgUHJvbWlzZTxOZXR3b3JrPiB0aGF0IHJlc29sdmVzIG9ubHkgb25jZSB0aGUgcHJvdmlkZXIgaXMgcmVhZHkuXG4gICAgICpcbiAgICAgKiAgU3ViLWNsYXNzZXMgdGhhdCBjYWxsIHRoZSBzdXBlciB3aXRoIGEgbmV0d29yayB3aXRob3V0IGEgY2hhaW5JZFxuICAgICAqICBNVVNUIHNldCB0aGlzLiBTdGFuZGFyZCBuYW1lZCBuZXR3b3JrcyBoYXZlIGEga25vd24gY2hhaW5JZC5cbiAgICAgKlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG5ldHdvcmspIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgLy8gRXZlbnRzIGJlaW5nIGxpc3RlbmVkIHRvXG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IFtdO1xuICAgICAgICB0aGlzLl9lbWl0dGVkID0geyBibG9jazogLTIgfTtcbiAgICAgICAgdGhpcy5kaXNhYmxlQ2NpcFJlYWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5mb3JtYXR0ZXIgPSBuZXcudGFyZ2V0LmdldEZvcm1hdHRlcigpO1xuICAgICAgICAvLyBJZiBuZXR3b3JrIGlzIGFueSwgdGhpcyBQcm92aWRlciBhbGxvd3MgdGhlIHVuZGVybHlpbmdcbiAgICAgICAgLy8gbmV0d29yayB0byBjaGFuZ2UgZHluYW1pY2FsbHksIGFuZCB3ZSBhdXRvLWRldGVjdCB0aGVcbiAgICAgICAgLy8gY3VycmVudCBuZXR3b3JrXG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiYW55TmV0d29ya1wiLCAobmV0d29yayA9PT0gXCJhbnlcIikpO1xuICAgICAgICBpZiAodGhpcy5hbnlOZXR3b3JrKSB7XG4gICAgICAgICAgICBuZXR3b3JrID0gdGhpcy5kZXRlY3ROZXR3b3JrKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5ldHdvcmsgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICB0aGlzLl9uZXR3b3JrUHJvbWlzZSA9IG5ldHdvcms7XG4gICAgICAgICAgICAvLyBTcXVhc2ggYW55IFwidW5oYW5kbGVkIHByb21pc2VcIiBlcnJvcnM7IHRoYXQgZG8gbm90IG5lZWQgdG8gYmUgaGFuZGxlZFxuICAgICAgICAgICAgbmV0d29yay5jYXRjaCgoZXJyb3IpID0+IHsgfSk7XG4gICAgICAgICAgICAvLyBUcmlnZ2VyIGluaXRpYWwgbmV0d29yayBzZXR0aW5nIChhc3luYylcbiAgICAgICAgICAgIHRoaXMuX3JlYWR5KCkuY2F0Y2goKGVycm9yKSA9PiB7IH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qga25vd25OZXR3b3JrID0gZ2V0U3RhdGljKG5ldy50YXJnZXQsIFwiZ2V0TmV0d29ya1wiKShuZXR3b3JrKTtcbiAgICAgICAgICAgIGlmIChrbm93bk5ldHdvcmspIHtcbiAgICAgICAgICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcIl9uZXR3b3JrXCIsIGtub3duTmV0d29yayk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwibmV0d29ya1wiLCBrbm93bk5ldHdvcmssIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgbmV0d29ya1wiLCBcIm5ldHdvcmtcIiwgbmV0d29yayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbWF4SW50ZXJuYWxCbG9ja051bWJlciA9IC0xMDI0O1xuICAgICAgICB0aGlzLl9sYXN0QmxvY2tOdW1iZXIgPSAtMjtcbiAgICAgICAgdGhpcy5fbWF4RmlsdGVyQmxvY2tSYW5nZSA9IDEwO1xuICAgICAgICB0aGlzLl9wb2xsaW5nSW50ZXJ2YWwgPSA0MDAwO1xuICAgICAgICB0aGlzLl9mYXN0UXVlcnlEYXRlID0gMDtcbiAgICB9XG4gICAgX3JlYWR5KCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX25ldHdvcmsgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGxldCBuZXR3b3JrID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbmV0d29ya1Byb21pc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldHdvcmsgPSB5aWVsZCB0aGlzLl9uZXR3b3JrUHJvbWlzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBUcnkgdGhlIFByb3ZpZGVyJ3MgbmV0d29yayBkZXRlY3Rpb24gKHRoaXMgTVVTVCB0aHJvdyBpZiBpdCBjYW5ub3QpXG4gICAgICAgICAgICAgICAgaWYgKG5ldHdvcmsgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBuZXR3b3JrID0geWllbGQgdGhpcy5kZXRlY3ROZXR3b3JrKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFRoaXMgc2hvdWxkIG5ldmVyIGhhcHBlbjsgZXZlcnkgUHJvdmlkZXIgc3ViLWNsYXNzIHNob3VsZCBoYXZlXG4gICAgICAgICAgICAgICAgLy8gc3VnZ2VzdGVkIGEgbmV0d29yayBieSBoZXJlIChvciBoYXZlIHRocm93bikuXG4gICAgICAgICAgICAgICAgaWYgKCFuZXR3b3JrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwibm8gbmV0d29yayBkZXRlY3RlZFwiLCBMb2dnZXIuZXJyb3JzLlVOS05PV05fRVJST1IsIHt9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gUG9zc2libGUgdGhpcyBjYWxsIHN0YWNrZWQgc28gZG8gbm90IGNhbGwgZGVmaW5lUmVhZE9ubHkgYWdhaW5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbmV0d29yayA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFueU5ldHdvcmspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX25ldHdvcmsgPSBuZXR3b3JrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJfbmV0d29ya1wiLCBuZXR3b3JrKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJuZXR3b3JrXCIsIG5ldHdvcmssIG51bGwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9uZXR3b3JrO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gVGhpcyB3aWxsIGFsd2F5cyByZXR1cm4gdGhlIG1vc3QgcmVjZW50bHkgZXN0YWJsaXNoZWQgbmV0d29yay5cbiAgICAvLyBGb3IgXCJhbnlcIiwgdGhpcyBjYW4gY2hhbmdlIChhIFwibmV0d29ya1wiIGV2ZW50IGlzIGVtaXR0ZWQgYmVmb3JlXG4gICAgLy8gYW55IGNoYW5nZSBpcyByZWZsZWN0ZWQpOyBvdGhlcndpc2UgdGhpcyBjYW5ub3QgY2hhbmdlXG4gICAgZ2V0IHJlYWR5KCkge1xuICAgICAgICByZXR1cm4gcG9sbCgoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVhZHkoKS50aGVuKChuZXR3b3JrKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldHdvcms7XG4gICAgICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgbmV0d29yayBpc24ndCBydW5uaW5nIHlldCwgd2Ugd2lsbCB3YWl0XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yLmNvZGUgPT09IExvZ2dlci5lcnJvcnMuTkVUV09SS19FUlJPUiAmJiBlcnJvci5ldmVudCA9PT0gXCJub05ldHdvcmtcIikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gQFRPRE86IFJlbW92ZSB0aGlzIGFuZCBqdXN0IGNyZWF0ZSBhIHNpbmdsZXRvbiBmb3JtYXR0ZXJcbiAgICBzdGF0aWMgZ2V0Rm9ybWF0dGVyKCkge1xuICAgICAgICBpZiAoZGVmYXVsdEZvcm1hdHRlciA9PSBudWxsKSB7XG4gICAgICAgICAgICBkZWZhdWx0Rm9ybWF0dGVyID0gbmV3IEZvcm1hdHRlcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWZhdWx0Rm9ybWF0dGVyO1xuICAgIH1cbiAgICAvLyBAVE9ETzogUmVtb3ZlIHRoaXMgYW5kIGp1c3QgdXNlIGdldE5ldHdvcmtcbiAgICBzdGF0aWMgZ2V0TmV0d29yayhuZXR3b3JrKSB7XG4gICAgICAgIHJldHVybiBnZXROZXR3b3JrKChuZXR3b3JrID09IG51bGwpID8gXCJob21lc3RlYWRcIiA6IG5ldHdvcmspO1xuICAgIH1cbiAgICBjY2lwUmVhZEZldGNoKHR4LCBjYWxsZGF0YSwgdXJscykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZGlzYWJsZUNjaXBSZWFkIHx8IHVybHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzZW5kZXIgPSB0eC50by50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGNhbGxkYXRhLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2VzID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVybHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCB1cmwgPSB1cmxzW2ldO1xuICAgICAgICAgICAgICAgIC8vIFVSTCBleHBhbnNpb25cbiAgICAgICAgICAgICAgICBjb25zdCBocmVmID0gdXJsLnJlcGxhY2UoXCJ7c2VuZGVyfVwiLCBzZW5kZXIpLnJlcGxhY2UoXCJ7ZGF0YX1cIiwgZGF0YSk7XG4gICAgICAgICAgICAgICAgLy8gSWYgbm8ge2RhdGF9IGlzIHByZXNlbnQsIHVzZSBQT1NUOyBvdGhlcndpc2UgR0VUXG4gICAgICAgICAgICAgICAgY29uc3QganNvbiA9ICh1cmwuaW5kZXhPZihcIntkYXRhfVwiKSA+PSAwKSA/IG51bGwgOiBKU09OLnN0cmluZ2lmeSh7IGRhdGEsIHNlbmRlciB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB5aWVsZCBmZXRjaEpzb24oeyB1cmw6IGhyZWYsIGVycm9yUGFzc1Rocm91Z2g6IHRydWUgfSwganNvbiwgKHZhbHVlLCByZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZS5zdGF0dXMgPSByZXNwb25zZS5zdGF0dXNDb2RlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5kYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQuZGF0YTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gKHJlc3VsdC5tZXNzYWdlIHx8IFwidW5rbm93biBlcnJvclwiKTtcbiAgICAgICAgICAgICAgICAvLyA0eHggaW5kaWNhdGVzIHRoZSByZXN1bHQgaXMgbm90IHByZXNlbnQ7IHN0b3BcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN0YXR1cyA+PSA0MDAgJiYgcmVzdWx0LnN0YXR1cyA8IDUwMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9nZ2VyLnRocm93RXJyb3IoYHJlc3BvbnNlIG5vdCBmb3VuZCBkdXJpbmcgQ0NJUCBmZXRjaDogJHtlcnJvck1lc3NhZ2V9YCwgTG9nZ2VyLmVycm9ycy5TRVJWRVJfRVJST1IsIHsgdXJsLCBlcnJvck1lc3NhZ2UgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIDV4eCBpbmRpY2F0ZXMgc2VydmVyIGlzc3VlOyB0cnkgdGhlIG5leHQgdXJsXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlcy5wdXNoKGVycm9yTWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbG9nZ2VyLnRocm93RXJyb3IoYGVycm9yIGVuY291bnRlcmVkIGR1cmluZyBDQ0lQIGZldGNoOiAke2Vycm9yTWVzc2FnZXMubWFwKChtKSA9PiBKU09OLnN0cmluZ2lmeShtKSkuam9pbihcIiwgXCIpfWAsIExvZ2dlci5lcnJvcnMuU0VSVkVSX0VSUk9SLCB7XG4gICAgICAgICAgICAgICAgdXJscywgZXJyb3JNZXNzYWdlc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBGZXRjaGVzIHRoZSBibG9ja051bWJlciwgYnV0IHdpbGwgcmV1c2UgYW55IHJlc3VsdCB0aGF0IGlzIGxlc3NcbiAgICAvLyB0aGFuIG1heEFnZSBvbGQgb3IgaGFzIGJlZW4gcmVxdWVzdGVkIHNpbmNlIHRoZSBsYXN0IHJlcXVlc3RcbiAgICBfZ2V0SW50ZXJuYWxCbG9ja051bWJlcihtYXhBZ2UpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHlpZWxkIHRoaXMuX3JlYWR5KCk7XG4gICAgICAgICAgICAvLyBBbGxvd2luZyBzdGFsZSBkYXRhIHVwIHRvIG1heEFnZSBvbGRcbiAgICAgICAgICAgIGlmIChtYXhBZ2UgPiAwKSB7XG4gICAgICAgICAgICAgICAgLy8gV2hpbGUgdGhlcmUgYXJlIHBlbmRpbmcgaW50ZXJuYWwgYmxvY2sgcmVxdWVzdHMuLi5cbiAgICAgICAgICAgICAgICB3aGlsZSAodGhpcy5faW50ZXJuYWxCbG9ja051bWJlcikge1xuICAgICAgICAgICAgICAgICAgICAvLyAuLi5cInJlbWVtYmVyXCIgd2hpY2ggZmV0Y2ggd2Ugc3RhcnRlZCB3aXRoXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGludGVybmFsQmxvY2tOdW1iZXIgPSB0aGlzLl9pbnRlcm5hbEJsb2NrTnVtYmVyO1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgdGhlIHJlc3VsdCBpcyBub3QgdG9vIHN0YWxlXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB5aWVsZCBpbnRlcm5hbEJsb2NrTnVtYmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChnZXRUaW1lKCkgLSByZXN1bHQucmVzcFRpbWUpIDw9IG1heEFnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQuYmxvY2tOdW1iZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUb28gb2xkOyBmZXRjaCBhIG5ldyB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgZmV0Y2ggcmVqZWN0ZWQ7IGlmIHdlIGFyZSB0aGUgZmlyc3QgdG8gZ2V0IHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVqZWN0aW9uLCBkcm9wIHRocm91Z2ggc28gd2UgcmVwbGFjZSBpdCB3aXRoIGEgbmV3XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmZXRjaDsgYWxsIG90aGVycyBibG9ja2VkIHdpbGwgdGhlbiBnZXQgdGhhdCBmZXRjaFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2hpY2ggd29uJ3QgbWF0Y2ggdGhlIG9uZSB0aGV5IFwicmVtZW1iZXJlZFwiIGFuZCBsb29wXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faW50ZXJuYWxCbG9ja051bWJlciA9PT0gaW50ZXJuYWxCbG9ja051bWJlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmVxVGltZSA9IGdldFRpbWUoKTtcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrSW50ZXJuYWxCbG9ja051bWJlciA9IHJlc29sdmVQcm9wZXJ0aWVzKHtcbiAgICAgICAgICAgICAgICBibG9ja051bWJlcjogdGhpcy5wZXJmb3JtKFwiZ2V0QmxvY2tOdW1iZXJcIiwge30pLFxuICAgICAgICAgICAgICAgIG5ldHdvcmtFcnJvcjogdGhpcy5nZXROZXR3b3JrKCkudGhlbigobmV0d29yaykgPT4gKG51bGwpLCAoZXJyb3IpID0+IChlcnJvcikpXG4gICAgICAgICAgICB9KS50aGVuKCh7IGJsb2NrTnVtYmVyLCBuZXR3b3JrRXJyb3IgfSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChuZXR3b3JrRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVW5yZW1lbWJlciB0aGlzIGJhZCBpbnRlcm5hbCBibG9jayBudW1iZXJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2ludGVybmFsQmxvY2tOdW1iZXIgPT09IGNoZWNrSW50ZXJuYWxCbG9ja051bWJlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faW50ZXJuYWxCbG9ja051bWJlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV0d29ya0Vycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCByZXNwVGltZSA9IGdldFRpbWUoKTtcbiAgICAgICAgICAgICAgICBibG9ja051bWJlciA9IEJpZ051bWJlci5mcm9tKGJsb2NrTnVtYmVyKS50b051bWJlcigpO1xuICAgICAgICAgICAgICAgIGlmIChibG9ja051bWJlciA8IHRoaXMuX21heEludGVybmFsQmxvY2tOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgYmxvY2tOdW1iZXIgPSB0aGlzLl9tYXhJbnRlcm5hbEJsb2NrTnVtYmVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9tYXhJbnRlcm5hbEJsb2NrTnVtYmVyID0gYmxvY2tOdW1iZXI7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0RmFzdEJsb2NrTnVtYmVyKGJsb2NrTnVtYmVyKTsgLy8gQFRPRE86IFN0aWxsIG5lZWQgdGhpcz9cbiAgICAgICAgICAgICAgICByZXR1cm4geyBibG9ja051bWJlciwgcmVxVGltZSwgcmVzcFRpbWUgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5faW50ZXJuYWxCbG9ja051bWJlciA9IGNoZWNrSW50ZXJuYWxCbG9ja051bWJlcjtcbiAgICAgICAgICAgIC8vIFN3YWxsb3cgdW5oYW5kbGVkIGV4Y2VwdGlvbnM7IGlmIG5lZWRlZCB0aGV5IGFyZSBoYW5kbGVkIGVsc2Ugd2hlcmVcbiAgICAgICAgICAgIGNoZWNrSW50ZXJuYWxCbG9ja051bWJlci5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBEb24ndCBudWxsIHRoZSBkZWFkIChyZWplY3RlZCkgZmV0Y2gsIGlmIGl0IGhhcyBhbHJlYWR5IGJlZW4gdXBkYXRlZFxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pbnRlcm5hbEJsb2NrTnVtYmVyID09PSBjaGVja0ludGVybmFsQmxvY2tOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW50ZXJuYWxCbG9ja051bWJlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gKHlpZWxkIGNoZWNrSW50ZXJuYWxCbG9ja051bWJlcikuYmxvY2tOdW1iZXI7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBwb2xsKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgcG9sbElkID0gbmV4dFBvbGxJZCsrO1xuICAgICAgICAgICAgLy8gVHJhY2sgYWxsIHJ1bm5pbmcgcHJvbWlzZXMsIHNvIHdlIGNhbiB0cmlnZ2VyIGEgcG9zdC1wb2xsIG9uY2UgdGhleSBhcmUgY29tcGxldGVcbiAgICAgICAgICAgIGNvbnN0IHJ1bm5lcnMgPSBbXTtcbiAgICAgICAgICAgIGxldCBibG9ja051bWJlciA9IG51bGw7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGJsb2NrTnVtYmVyID0geWllbGQgdGhpcy5fZ2V0SW50ZXJuYWxCbG9ja051bWJlcigxMDAgKyB0aGlzLnBvbGxpbmdJbnRlcnZhbCAvIDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiZXJyb3JcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3NldEZhc3RCbG9ja051bWJlcihibG9ja051bWJlcik7XG4gICAgICAgICAgICAvLyBFbWl0IGEgcG9sbCBldmVudCBhZnRlciB3ZSBoYXZlIHRoZSBsYXRlc3QgKGZhc3QpIGJsb2NrIG51bWJlclxuICAgICAgICAgICAgdGhpcy5lbWl0KFwicG9sbFwiLCBwb2xsSWQsIGJsb2NrTnVtYmVyKTtcbiAgICAgICAgICAgIC8vIElmIHRoZSBibG9jayBoYXMgbm90IGNoYW5nZWQsIG1laC5cbiAgICAgICAgICAgIGlmIChibG9ja051bWJlciA9PT0gdGhpcy5fbGFzdEJsb2NrTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiZGlkUG9sbFwiLCBwb2xsSWQpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEZpcnN0IHBvbGxpbmcgY3ljbGUsIHRyaWdnZXIgYSBcImJsb2NrXCIgZXZlbnRzXG4gICAgICAgICAgICBpZiAodGhpcy5fZW1pdHRlZC5ibG9jayA9PT0gLTIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0dGVkLmJsb2NrID0gYmxvY2tOdW1iZXIgLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKE1hdGguYWJzKCh0aGlzLl9lbWl0dGVkLmJsb2NrKSAtIGJsb2NrTnVtYmVyKSA+IDEwMDApIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIud2FybihgbmV0d29yayBibG9jayBza2V3IGRldGVjdGVkOyBza2lwcGluZyBibG9jayBldmVudHMgKGVtaXR0ZWQ9JHt0aGlzLl9lbWl0dGVkLmJsb2NrfSBibG9ja051bWJlciR7YmxvY2tOdW1iZXJ9KWApO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImVycm9yXCIsIGxvZ2dlci5tYWtlRXJyb3IoXCJuZXR3b3JrIGJsb2NrIHNrZXcgZGV0ZWN0ZWRcIiwgTG9nZ2VyLmVycm9ycy5ORVRXT1JLX0VSUk9SLCB7XG4gICAgICAgICAgICAgICAgICAgIGJsb2NrTnVtYmVyOiBibG9ja051bWJlcixcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IFwiYmxvY2tTa2V3XCIsXG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzQmxvY2tOdW1iZXI6IHRoaXMuX2VtaXR0ZWQuYmxvY2tcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiYmxvY2tcIiwgYmxvY2tOdW1iZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gTm90aWZ5IGFsbCBsaXN0ZW5lciBmb3IgZWFjaCBibG9jayB0aGF0IGhhcyBwYXNzZWRcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5fZW1pdHRlZC5ibG9jayArIDE7IGkgPD0gYmxvY2tOdW1iZXI7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJibG9ja1wiLCBpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBUaGUgZW1pdHRlZCBibG9jayB3YXMgdXBkYXRlZCwgY2hlY2sgZm9yIG9ic29sZXRlIGV2ZW50c1xuICAgICAgICAgICAgaWYgKHRoaXMuX2VtaXR0ZWQuYmxvY2sgIT09IGJsb2NrTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdHRlZC5ibG9jayA9IGJsb2NrTnVtYmVyO1xuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMuX2VtaXR0ZWQpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgYmxvY2sgZXZlbnQgZG9lcyBub3QgZXhwaXJlXG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXkgPT09IFwiYmxvY2tcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBibG9jayB3ZSB3ZXJlIGF0IHdoZW4gd2UgZW1pdHRlZCB0aGlzIGV2ZW50XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGV2ZW50QmxvY2tOdW1iZXIgPSB0aGlzLl9lbWl0dGVkW2tleV07XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGNhbm5vdCBnYXJiYWdlIGNvbGxlY3QgcGVuZGluZyB0cmFuc2FjdGlvbnMgb3IgYmxvY2tzIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhleSBzaG91bGQgYmUgZ2FyYmFnZSBjb2xsZWN0ZWQgYnkgdGhlIFByb3ZpZGVyIHdoZW4gc2V0dGluZ1xuICAgICAgICAgICAgICAgICAgICAvLyBcInBlbmRpbmdcIiBldmVudHNcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50QmxvY2tOdW1iZXIgPT09IFwicGVuZGluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gRXZpY3QgYW55IHRyYW5zYWN0aW9uIGhhc2hlcyBvciBibG9jayBoYXNoZXMgb3ZlciAxMiBibG9ja3NcbiAgICAgICAgICAgICAgICAgICAgLy8gb2xkLCBzaW5jZSB0aGV5IHNob3VsZCBub3QgcmV0dXJuIG51bGwgYW55d2F5c1xuICAgICAgICAgICAgICAgICAgICBpZiAoYmxvY2tOdW1iZXIgLSBldmVudEJsb2NrTnVtYmVyID4gMTIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9lbWl0dGVkW2tleV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEZpcnN0IHBvbGxpbmcgY3ljbGVcbiAgICAgICAgICAgIGlmICh0aGlzLl9sYXN0QmxvY2tOdW1iZXIgPT09IC0yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGFzdEJsb2NrTnVtYmVyID0gYmxvY2tOdW1iZXIgLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRmluZCBhbGwgdHJhbnNhY3Rpb24gaGFzaGVzIHdlIGFyZSB3YWl0aW5nIG9uXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMuZm9yRWFjaCgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGV2ZW50LnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInR4XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhhc2ggPSBldmVudC5oYXNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJ1bm5lciA9IHRoaXMuZ2V0VHJhbnNhY3Rpb25SZWNlaXB0KGhhc2gpLnRoZW4oKHJlY2VpcHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlY2VpcHQgfHwgcmVjZWlwdC5ibG9ja051bWJlciA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbWl0dGVkW1widDpcIiArIGhhc2hdID0gcmVjZWlwdC5ibG9ja051bWJlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoaGFzaCwgcmVjZWlwdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHsgdGhpcy5lbWl0KFwiZXJyb3JcIiwgZXJyb3IpOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bm5lcnMucHVzaChydW5uZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImZpbHRlclwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBvbmx5IGFsbG93IGEgc2luZ2xlIGdldExvZ3MgdG8gYmUgaW4tZmxpZ2h0IGF0IGEgdGltZVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFldmVudC5faW5mbGlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5faW5mbGlnaHQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpbHRlciBmcm9tIHRoZSBsYXN0IGtub3duIGV2ZW50OyBkdWUgdG8gbG9hZC1iYWxhbmNpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmQgc29tZSBub2RlcyByZXR1cm5pbmcgdXBkYXRlZCBibG9jayBudW1iZXJzIGJlZm9yZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGluZGV4aW5nIGV2ZW50cywgYSBsb2dzIHJlc3VsdCB3aXRoIDAgZW50cmllcyBjYW5ub3QgYmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0cnVzdGVkIGFuZCB3ZSBtdXN0IHJldHJ5IGEgcmFuZ2Ugd2hpY2ggaW5jbHVkZXMgaXQgYWdhaW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWx0ZXIgPSBldmVudC5maWx0ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyLmZyb21CbG9jayA9IGV2ZW50Ll9sYXN0QmxvY2tOdW1iZXIgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlci50b0Jsb2NrID0gYmxvY2tOdW1iZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUHJldmVudCBmaXRsZXIgcmFuZ2VzIGZyb20gZ3Jvd2luZyB0b28gd2lsZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWx0ZXIudG9CbG9jayAtIHRoaXMuX21heEZpbHRlckJsb2NrUmFuZ2UgPiBmaWx0ZXIuZnJvbUJsb2NrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlci5mcm9tQmxvY2sgPSBmaWx0ZXIudG9CbG9jayAtIHRoaXMuX21heEZpbHRlckJsb2NrUmFuZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJ1bm5lciA9IHRoaXMuZ2V0TG9ncyhmaWx0ZXIpLnRoZW4oKGxvZ3MpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWxsb3cgdGhlIG5leHQgZ2V0TG9nc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5faW5mbGlnaHQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9ncy5mb3JFYWNoKChsb2cpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9ubHkgd2hlbiB3ZSBnZXQgYW4gZXZlbnQgZm9yIGEgZ2l2ZW4gYmxvY2sgbnVtYmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYW4gd2UgdHJ1c3QgdGhlIGV2ZW50cyBhcmUgaW5kZXhlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvZy5ibG9ja051bWJlciA+IGV2ZW50Ll9sYXN0QmxvY2tOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5fbGFzdEJsb2NrTnVtYmVyID0gbG9nLmJsb2NrTnVtYmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHdlIHN0YWxsIHJlcXVlc3RzIHRvIGZldGNoIGJsb2NrcyBhbmQgdHhzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbWl0dGVkW1wiYjpcIiArIGxvZy5ibG9ja0hhc2hdID0gbG9nLmJsb2NrTnVtYmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW1pdHRlZFtcInQ6XCIgKyBsb2cudHJhbnNhY3Rpb25IYXNoXSA9IGxvZy5ibG9ja051bWJlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChmaWx0ZXIsIGxvZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFsbG93IGFub3RoZXIgZ2V0TG9ncyAodGhlIHJhbmdlIHdhcyBub3QgdXBkYXRlZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuX2luZmxpZ2h0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVubmVycy5wdXNoKHJ1bm5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fbGFzdEJsb2NrTnVtYmVyID0gYmxvY2tOdW1iZXI7XG4gICAgICAgICAgICAvLyBPbmNlIGFsbCBldmVudHMgZm9yIHRoaXMgbG9vcCBoYXZlIGJlZW4gcHJvY2Vzc2VkLCBlbWl0IFwiZGlkUG9sbFwiXG4gICAgICAgICAgICBQcm9taXNlLmFsbChydW5uZXJzKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJkaWRQb2xsXCIsIHBvbGxJZCk7XG4gICAgICAgICAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHsgdGhpcy5lbWl0KFwiZXJyb3JcIiwgZXJyb3IpOyB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIERlcHJlY2F0ZWQ7IGRvIG5vdCB1c2UgdGhpc1xuICAgIHJlc2V0RXZlbnRzQmxvY2soYmxvY2tOdW1iZXIpIHtcbiAgICAgICAgdGhpcy5fbGFzdEJsb2NrTnVtYmVyID0gYmxvY2tOdW1iZXIgLSAxO1xuICAgICAgICBpZiAodGhpcy5wb2xsaW5nKSB7XG4gICAgICAgICAgICB0aGlzLnBvbGwoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgbmV0d29yaygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX25ldHdvcms7XG4gICAgfVxuICAgIC8vIFRoaXMgbWV0aG9kIHNob3VsZCBxdWVyeSB0aGUgbmV0d29yayBpZiB0aGUgdW5kZXJseWluZyBuZXR3b3JrXG4gICAgLy8gY2FuIGNoYW5nZSwgc3VjaCBhcyB3aGVuIGNvbm5lY3RlZCB0byBhIEpTT04tUlBDIGJhY2tlbmRcbiAgICBkZXRlY3ROZXR3b3JrKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0Vycm9yKFwicHJvdmlkZXIgZG9lcyBub3Qgc3VwcG9ydCBuZXR3b3JrIGRldGVjdGlvblwiLCBMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTiwge1xuICAgICAgICAgICAgICAgIG9wZXJhdGlvbjogXCJwcm92aWRlci5kZXRlY3ROZXR3b3JrXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0TmV0d29yaygpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ldHdvcmsgPSB5aWVsZCB0aGlzLl9yZWFkeSgpO1xuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHdlIGFyZSBzdGlsbCBjb25uZWN0ZWQgdG8gdGhlIHNhbWUgbmV0d29yazsgdGhpcyBpc1xuICAgICAgICAgICAgLy8gb25seSBhbiBleHRlcm5hbCBjYWxsIGZvciBiYWNrZW5kcyB3aGljaCBjYW4gaGF2ZSB0aGUgdW5kZXJseWluZ1xuICAgICAgICAgICAgLy8gbmV0d29yayBjaGFuZ2Ugc3BvbnRhbmVvdXNseVxuICAgICAgICAgICAgY29uc3QgY3VycmVudE5ldHdvcmsgPSB5aWVsZCB0aGlzLmRldGVjdE5ldHdvcmsoKTtcbiAgICAgICAgICAgIGlmIChuZXR3b3JrLmNoYWluSWQgIT09IGN1cnJlbnROZXR3b3JrLmNoYWluSWQpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBhcmUgYWxsb3dpbmcgbmV0d29yayBjaGFuZ2VzLCB0aGluZ3MgY2FuIGdldCBjb21wbGV4IGZhc3Q7XG4gICAgICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHlvdSBrbm93IHdoYXQgeW91IGFyZSBkb2luZyBpZiB5b3UgdXNlIFwiYW55XCJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hbnlOZXR3b3JrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX25ldHdvcmsgPSBjdXJyZW50TmV0d29yaztcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVzZXQgYWxsIGludGVybmFsIGJsb2NrIG51bWJlciBndWFyZHMgYW5kIGNhY2hlc1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9sYXN0QmxvY2tOdW1iZXIgPSAtMjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmFzdEJsb2NrTnVtYmVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmFzdEJsb2NrTnVtYmVyUHJvbWlzZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zhc3RRdWVyeURhdGUgPSAwO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbWl0dGVkLmJsb2NrID0gLTI7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21heEludGVybmFsQmxvY2tOdW1iZXIgPSAtMTAyNDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW50ZXJuYWxCbG9ja051bWJlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBcIm5ldHdvcmtcIiBldmVudCBNVVNUIGhhcHBlbiBiZWZvcmUgdGhpcyBtZXRob2QgcmVzb2x2ZXNcbiAgICAgICAgICAgICAgICAgICAgLy8gc28gYW55IGV2ZW50cyBoYXZlIGEgY2hhbmNlIHRvIHVucmVnaXN0ZXIsIHNvIHdlIHN0YWxsIGFuXG4gICAgICAgICAgICAgICAgICAgIC8vIGFkZGl0aW9uYWwgZXZlbnQgbG9vcCBiZWZvcmUgcmV0dXJuaW5nIGZyb20gL3RoaXMvIGNhbGxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwibmV0d29ya1wiLCBjdXJyZW50TmV0d29yaywgbmV0d29yayk7XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIHN0YWxsKDApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbmV0d29yaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBsb2dnZXIubWFrZUVycm9yKFwidW5kZXJseWluZyBuZXR3b3JrIGNoYW5nZWRcIiwgTG9nZ2VyLmVycm9ycy5ORVRXT1JLX0VSUk9SLCB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50OiBcImNoYW5nZWRcIixcbiAgICAgICAgICAgICAgICAgICAgbmV0d29yazogbmV0d29yayxcbiAgICAgICAgICAgICAgICAgICAgZGV0ZWN0ZWROZXR3b3JrOiBjdXJyZW50TmV0d29ya1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImVycm9yXCIsIGVycm9yKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXR3b3JrO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0IGJsb2NrTnVtYmVyKCkge1xuICAgICAgICB0aGlzLl9nZXRJbnRlcm5hbEJsb2NrTnVtYmVyKDEwMCArIHRoaXMucG9sbGluZ0ludGVydmFsIC8gMikudGhlbigoYmxvY2tOdW1iZXIpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3NldEZhc3RCbG9ja051bWJlcihibG9ja051bWJlcik7XG4gICAgICAgIH0sIChlcnJvcikgPT4geyB9KTtcbiAgICAgICAgcmV0dXJuICh0aGlzLl9mYXN0QmxvY2tOdW1iZXIgIT0gbnVsbCkgPyB0aGlzLl9mYXN0QmxvY2tOdW1iZXIgOiAtMTtcbiAgICB9XG4gICAgZ2V0IHBvbGxpbmcoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5fcG9sbGVyICE9IG51bGwpO1xuICAgIH1cbiAgICBzZXQgcG9sbGluZyh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgJiYgIXRoaXMuX3BvbGxlcikge1xuICAgICAgICAgICAgdGhpcy5fcG9sbGVyID0gc2V0SW50ZXJ2YWwoKCkgPT4geyB0aGlzLnBvbGwoKTsgfSwgdGhpcy5wb2xsaW5nSW50ZXJ2YWwpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9ib290c3RyYXBQb2xsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYm9vdHN0cmFwUG9sbCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgYmxvY2sgYWRkaXRpb25hbCBwb2xscyB1bnRpbCB0aGUgcG9sbGluZyBpbnRlcnZhbFxuICAgICAgICAgICAgICAgICAgICAvLyBpcyBkb25lLCB0byBwcmV2ZW50IG92ZXJ3aGVsbWluZyB0aGUgcG9sbCBmdW5jdGlvblxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ib290c3RyYXBQb2xsID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBwb2xsaW5nIHdhcyBkaXNhYmxlZCwgc29tZXRoaW5nIG1heSByZXF1aXJlIGEgcG9rZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2luY2Ugc3RhcnRpbmcgdGhlIGJvb3RzdHJhcCBwb2xsIGFuZCBpdCB3YXMgZGlzYWJsZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5fcG9sbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb2xsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDbGVhciBvdXQgdGhlIGJvb3RzdHJhcCBzbyB3ZSBjYW4gZG8gYW5vdGhlclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYm9vdHN0cmFwUG9sbCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH0sIHRoaXMucG9sbGluZ0ludGVydmFsKTtcbiAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghdmFsdWUgJiYgdGhpcy5fcG9sbGVyKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMuX3BvbGxlcik7XG4gICAgICAgICAgICB0aGlzLl9wb2xsZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBwb2xsaW5nSW50ZXJ2YWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wb2xsaW5nSW50ZXJ2YWw7XG4gICAgfVxuICAgIHNldCBwb2xsaW5nSW50ZXJ2YWwodmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiAodmFsdWUpICE9PSBcIm51bWJlclwiIHx8IHZhbHVlIDw9IDAgfHwgcGFyc2VJbnQoU3RyaW5nKHZhbHVlKSkgIT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgcG9sbGluZyBpbnRlcnZhbFwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wb2xsaW5nSW50ZXJ2YWwgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHRoaXMuX3BvbGxlcikge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9wb2xsZXIpO1xuICAgICAgICAgICAgdGhpcy5fcG9sbGVyID0gc2V0SW50ZXJ2YWwoKCkgPT4geyB0aGlzLnBvbGwoKTsgfSwgdGhpcy5fcG9sbGluZ0ludGVydmFsKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfZ2V0RmFzdEJsb2NrTnVtYmVyKCkge1xuICAgICAgICBjb25zdCBub3cgPSBnZXRUaW1lKCk7XG4gICAgICAgIC8vIFN0YWxlIGJsb2NrIG51bWJlciwgcmVxdWVzdCBhIG5ld2VyIHZhbHVlXG4gICAgICAgIGlmICgobm93IC0gdGhpcy5fZmFzdFF1ZXJ5RGF0ZSkgPiAyICogdGhpcy5fcG9sbGluZ0ludGVydmFsKSB7XG4gICAgICAgICAgICB0aGlzLl9mYXN0UXVlcnlEYXRlID0gbm93O1xuICAgICAgICAgICAgdGhpcy5fZmFzdEJsb2NrTnVtYmVyUHJvbWlzZSA9IHRoaXMuZ2V0QmxvY2tOdW1iZXIoKS50aGVuKChibG9ja051bWJlcikgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9mYXN0QmxvY2tOdW1iZXIgPT0gbnVsbCB8fCBibG9ja051bWJlciA+IHRoaXMuX2Zhc3RCbG9ja051bWJlcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mYXN0QmxvY2tOdW1iZXIgPSBibG9ja051bWJlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Zhc3RCbG9ja051bWJlcjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9mYXN0QmxvY2tOdW1iZXJQcm9taXNlO1xuICAgIH1cbiAgICBfc2V0RmFzdEJsb2NrTnVtYmVyKGJsb2NrTnVtYmVyKSB7XG4gICAgICAgIC8vIE9sZGVyIGJsb2NrLCBtYXliZSBhIHN0YWxlIHJlcXVlc3RcbiAgICAgICAgaWYgKHRoaXMuX2Zhc3RCbG9ja051bWJlciAhPSBudWxsICYmIGJsb2NrTnVtYmVyIDwgdGhpcy5fZmFzdEJsb2NrTnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gVXBkYXRlIHRoZSB0aW1lIHdlIHVwZGF0ZWQgdGhlIGJsb2NrbnVtYmVyXG4gICAgICAgIHRoaXMuX2Zhc3RRdWVyeURhdGUgPSBnZXRUaW1lKCk7XG4gICAgICAgIC8vIE5ld2VyIGJsb2NrIG51bWJlciwgdXNlICBpdFxuICAgICAgICBpZiAodGhpcy5fZmFzdEJsb2NrTnVtYmVyID09IG51bGwgfHwgYmxvY2tOdW1iZXIgPiB0aGlzLl9mYXN0QmxvY2tOdW1iZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2Zhc3RCbG9ja051bWJlciA9IGJsb2NrTnVtYmVyO1xuICAgICAgICAgICAgdGhpcy5fZmFzdEJsb2NrTnVtYmVyUHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShibG9ja051bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgd2FpdEZvclRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uSGFzaCwgY29uZmlybWF0aW9ucywgdGltZW91dCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dhaXRGb3JUcmFuc2FjdGlvbih0cmFuc2FjdGlvbkhhc2gsIChjb25maXJtYXRpb25zID09IG51bGwpID8gMSA6IGNvbmZpcm1hdGlvbnMsIHRpbWVvdXQgfHwgMCwgbnVsbCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfd2FpdEZvclRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uSGFzaCwgY29uZmlybWF0aW9ucywgdGltZW91dCwgcmVwbGFjZWFibGUpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlY2VpcHQgPSB5aWVsZCB0aGlzLmdldFRyYW5zYWN0aW9uUmVjZWlwdCh0cmFuc2FjdGlvbkhhc2gpO1xuICAgICAgICAgICAgLy8gUmVjZWlwdCBpcyBhbHJlYWR5IGdvb2RcbiAgICAgICAgICAgIGlmICgocmVjZWlwdCA/IHJlY2VpcHQuY29uZmlybWF0aW9ucyA6IDApID49IGNvbmZpcm1hdGlvbnMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVjZWlwdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFBvbGwgdW50aWwgdGhlIHJlY2VpcHQgaXMgZ29vZC4uLlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjYW5jZWxGdW5jcyA9IFtdO1xuICAgICAgICAgICAgICAgIGxldCBkb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgY29uc3QgYWxyZWFkeURvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsRnVuY3MuZm9yRWFjaCgoZnVuYykgPT4geyBmdW5jKCk7IH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCBtaW5lZEhhbmRsZXIgPSAocmVjZWlwdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVjZWlwdC5jb25maXJtYXRpb25zIDwgY29uZmlybWF0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChhbHJlYWR5RG9uZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZWNlaXB0KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRoaXMub24odHJhbnNhY3Rpb25IYXNoLCBtaW5lZEhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIGNhbmNlbEZ1bmNzLnB1c2goKCkgPT4geyB0aGlzLnJlbW92ZUxpc3RlbmVyKHRyYW5zYWN0aW9uSGFzaCwgbWluZWRIYW5kbGVyKTsgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlcGxhY2VhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBsYXN0QmxvY2tOdW1iZXIgPSByZXBsYWNlYWJsZS5zdGFydEJsb2NrO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc2Nhbm5lZEJsb2NrID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVwbGFjZUhhbmRsZXIgPSAoYmxvY2tOdW1iZXIpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2FpdCAxIHNlY29uZDsgdGhpcyBpcyBvbmx5IHVzZWQgaW4gdGhlIGNhc2Ugb2YgYSBmYXVsdCwgc29cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIHdpbGwgdHJhZGUgb2ZmIGEgbGl0dGxlIGJpdCBvZiBsYXRlbmN5IGZvciBtb3JlIGNvbnNpc3RlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlc3VsdHMgYW5kIGZld2VyIEpTT04tUlBDIGNhbGxzXG4gICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCBzdGFsbCgxMDAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0VHJhbnNhY3Rpb25Db3VudChyZXBsYWNlYWJsZS5mcm9tKS50aGVuKChub25jZSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vbmNlIDw9IHJlcGxhY2VhYmxlLm5vbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RCbG9ja051bWJlciA9IGJsb2NrTnVtYmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmlyc3QgY2hlY2sgaWYgdGhlIHRyYW5zYWN0aW9uIHdhcyBtaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtaW5lZCA9IHlpZWxkIHRoaXMuZ2V0VHJhbnNhY3Rpb24odHJhbnNhY3Rpb25IYXNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtaW5lZCAmJiBtaW5lZC5ibG9ja051bWJlciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpcnN0IHRpbWUgc2Nhbm5pbmcuIFdlIHN0YXJ0IGEgbGl0dGxlIGVhcmxpZXIgZm9yIHNvbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2lnZ2xlIHJvb20gaGVyZSB0byBoYW5kbGUgdGhlIGV2ZW50dWFsbHkgY29uc2lzdGVudCBuYXR1cmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb2YgYmxvY2tjaGFpbiAoZS5nLiB0aGUgZ2V0VHJhbnNhY3Rpb25Db3VudCB3YXMgZm9yIGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGlmZmVyZW50IGJsb2NrKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2Nhbm5lZEJsb2NrID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjYW5uZWRCbG9jayA9IGxhc3RCbG9ja051bWJlciAtIDM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2Nhbm5lZEJsb2NrIDwgcmVwbGFjZWFibGUuc3RhcnRCbG9jaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjYW5uZWRCbG9jayA9IHJlcGxhY2VhYmxlLnN0YXJ0QmxvY2s7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHNjYW5uZWRCbG9jayA8PSBibG9ja051bWJlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBibG9jayA9IHlpZWxkIHRoaXMuZ2V0QmxvY2tXaXRoVHJhbnNhY3Rpb25zKHNjYW5uZWRCbG9jayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCB0aSA9IDA7IHRpIDwgYmxvY2sudHJhbnNhY3Rpb25zLmxlbmd0aDsgdGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHR4ID0gYmxvY2sudHJhbnNhY3Rpb25zW3RpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdWNjZXNzZnVsbHkgbWluZWQhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR4Lmhhc2ggPT09IHRyYW5zYWN0aW9uSGFzaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1hdGNoZXMgb3VyIHRyYW5zYWN0aW9uIGZyb20gYW5kIG5vbmNlOyBpdHMgYSByZXBsYWNlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eC5mcm9tID09PSByZXBsYWNlYWJsZS5mcm9tICYmIHR4Lm5vbmNlID09PSByZXBsYWNlYWJsZS5ub25jZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgcmVjZWlwdCBvZiB0aGUgcmVwbGFjZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVjZWlwdCA9IHlpZWxkIHRoaXMud2FpdEZvclRyYW5zYWN0aW9uKHR4Lmhhc2gsIGNvbmZpcm1hdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBbHJlYWR5IHJlc29sdmVkIG9yIHJlamVjdGVkIChwcm9sbHkgYSB0aW1lb3V0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWxyZWFkeURvbmUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSByZWFzb24gd2Ugd2VyZSByZXBsYWNlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVhc29uID0gXCJyZXBsYWNlZFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHguZGF0YSA9PT0gcmVwbGFjZWFibGUuZGF0YSAmJiB0eC50byA9PT0gcmVwbGFjZWFibGUudG8gJiYgdHgudmFsdWUuZXEocmVwbGFjZWFibGUudmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFzb24gPSBcInJlcHJpY2VkXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHguZGF0YSA9PT0gXCIweFwiICYmIHR4LmZyb20gPT09IHR4LnRvICYmIHR4LnZhbHVlLmlzWmVybygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFzb24gPSBcImNhbmNlbGxlZFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEV4cGxhaW4gd2h5IHdlIHdlcmUgcmVwbGFjZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGxvZ2dlci5tYWtlRXJyb3IoXCJ0cmFuc2FjdGlvbiB3YXMgcmVwbGFjZWRcIiwgTG9nZ2VyLmVycm9ycy5UUkFOU0FDVElPTl9SRVBMQUNFRCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsbGVkOiAocmVhc29uID09PSBcInJlcGxhY2VkXCIgfHwgcmVhc29uID09PSBcImNhbmNlbGxlZFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYXNvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiB0aGlzLl93cmFwVHJhbnNhY3Rpb24odHgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzaDogdHJhbnNhY3Rpb25IYXNoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjZWlwdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FubmVkQmxvY2srKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25jZShcImJsb2NrXCIsIHJlcGxhY2VIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25jZShcImJsb2NrXCIsIHJlcGxhY2VIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uY2UoXCJibG9ja1wiLCByZXBsYWNlSGFuZGxlcik7XG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbEZ1bmNzLnB1c2goKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcihcImJsb2NrXCIsIHJlcGxhY2VIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKHRpbWVvdXQpID09PSBcIm51bWJlclwiICYmIHRpbWVvdXQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWxyZWFkeURvbmUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChsb2dnZXIubWFrZUVycm9yKFwidGltZW91dCBleGNlZWRlZFwiLCBMb2dnZXIuZXJyb3JzLlRJTUVPVVQsIHsgdGltZW91dDogdGltZW91dCB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGltZXIudW5yZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVyLnVucmVmKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsRnVuY3MucHVzaCgoKSA9PiB7IGNsZWFyVGltZW91dCh0aW1lcik7IH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0QmxvY2tOdW1iZXIoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0SW50ZXJuYWxCbG9ja051bWJlcigwKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldEdhc1ByaWNlKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgeWllbGQgdGhpcy5nZXROZXR3b3JrKCk7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB5aWVsZCB0aGlzLnBlcmZvcm0oXCJnZXRHYXNQcmljZVwiLCB7fSk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBCaWdOdW1iZXIuZnJvbShyZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0Vycm9yKFwiYmFkIHJlc3VsdCBmcm9tIGJhY2tlbmRcIiwgTG9nZ2VyLmVycm9ycy5TRVJWRVJfRVJST1IsIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBcImdldEdhc1ByaWNlXCIsXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCwgZXJyb3JcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldEJhbGFuY2UoYWRkcmVzc09yTmFtZSwgYmxvY2tUYWcpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHlpZWxkIHRoaXMuZ2V0TmV0d29yaygpO1xuICAgICAgICAgICAgY29uc3QgcGFyYW1zID0geWllbGQgcmVzb2x2ZVByb3BlcnRpZXMoe1xuICAgICAgICAgICAgICAgIGFkZHJlc3M6IHRoaXMuX2dldEFkZHJlc3MoYWRkcmVzc09yTmFtZSksXG4gICAgICAgICAgICAgICAgYmxvY2tUYWc6IHRoaXMuX2dldEJsb2NrVGFnKGJsb2NrVGFnKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB5aWVsZCB0aGlzLnBlcmZvcm0oXCJnZXRCYWxhbmNlXCIsIHBhcmFtcyk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBCaWdOdW1iZXIuZnJvbShyZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0Vycm9yKFwiYmFkIHJlc3VsdCBmcm9tIGJhY2tlbmRcIiwgTG9nZ2VyLmVycm9ycy5TRVJWRVJfRVJST1IsIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBcImdldEJhbGFuY2VcIixcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLCByZXN1bHQsIGVycm9yXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXRUcmFuc2FjdGlvbkNvdW50KGFkZHJlc3NPck5hbWUsIGJsb2NrVGFnKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB5aWVsZCB0aGlzLmdldE5ldHdvcmsoKTtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHlpZWxkIHJlc29sdmVQcm9wZXJ0aWVzKHtcbiAgICAgICAgICAgICAgICBhZGRyZXNzOiB0aGlzLl9nZXRBZGRyZXNzKGFkZHJlc3NPck5hbWUpLFxuICAgICAgICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLl9nZXRCbG9ja1RhZyhibG9ja1RhZylcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0geWllbGQgdGhpcy5wZXJmb3JtKFwiZ2V0VHJhbnNhY3Rpb25Db3VudFwiLCBwYXJhbXMpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQmlnTnVtYmVyLmZyb20ocmVzdWx0KS50b051bWJlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0Vycm9yKFwiYmFkIHJlc3VsdCBmcm9tIGJhY2tlbmRcIiwgTG9nZ2VyLmVycm9ycy5TRVJWRVJfRVJST1IsIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBcImdldFRyYW5zYWN0aW9uQ291bnRcIixcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLCByZXN1bHQsIGVycm9yXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXRDb2RlKGFkZHJlc3NPck5hbWUsIGJsb2NrVGFnKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB5aWVsZCB0aGlzLmdldE5ldHdvcmsoKTtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHlpZWxkIHJlc29sdmVQcm9wZXJ0aWVzKHtcbiAgICAgICAgICAgICAgICBhZGRyZXNzOiB0aGlzLl9nZXRBZGRyZXNzKGFkZHJlc3NPck5hbWUpLFxuICAgICAgICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLl9nZXRCbG9ja1RhZyhibG9ja1RhZylcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0geWllbGQgdGhpcy5wZXJmb3JtKFwiZ2V0Q29kZVwiLCBwYXJhbXMpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaGV4bGlmeShyZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0Vycm9yKFwiYmFkIHJlc3VsdCBmcm9tIGJhY2tlbmRcIiwgTG9nZ2VyLmVycm9ycy5TRVJWRVJfRVJST1IsIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBcImdldENvZGVcIixcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLCByZXN1bHQsIGVycm9yXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXRTdG9yYWdlQXQoYWRkcmVzc09yTmFtZSwgcG9zaXRpb24sIGJsb2NrVGFnKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB5aWVsZCB0aGlzLmdldE5ldHdvcmsoKTtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHlpZWxkIHJlc29sdmVQcm9wZXJ0aWVzKHtcbiAgICAgICAgICAgICAgICBhZGRyZXNzOiB0aGlzLl9nZXRBZGRyZXNzKGFkZHJlc3NPck5hbWUpLFxuICAgICAgICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLl9nZXRCbG9ja1RhZyhibG9ja1RhZyksXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IFByb21pc2UucmVzb2x2ZShwb3NpdGlvbikudGhlbigocCkgPT4gaGV4VmFsdWUocCkpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHlpZWxkIHRoaXMucGVyZm9ybShcImdldFN0b3JhZ2VBdFwiLCBwYXJhbXMpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaGV4bGlmeShyZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0Vycm9yKFwiYmFkIHJlc3VsdCBmcm9tIGJhY2tlbmRcIiwgTG9nZ2VyLmVycm9ycy5TRVJWRVJfRVJST1IsIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBcImdldFN0b3JhZ2VBdFwiLFxuICAgICAgICAgICAgICAgICAgICBwYXJhbXMsIHJlc3VsdCwgZXJyb3JcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIFRoaXMgc2hvdWxkIGJlIGNhbGxlZCBieSBhbnkgc3ViY2xhc3Mgd3JhcHBpbmcgYSBUcmFuc2FjdGlvblJlc3BvbnNlXG4gICAgX3dyYXBUcmFuc2FjdGlvbih0eCwgaGFzaCwgc3RhcnRCbG9jaykge1xuICAgICAgICBpZiAoaGFzaCAhPSBudWxsICYmIGhleERhdGFMZW5ndGgoaGFzaCkgIT09IDMyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHJlc3BvbnNlIC0gc2VuZFRyYW5zYWN0aW9uXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHR4O1xuICAgICAgICAvLyBDaGVjayB0aGUgaGFzaCB3ZSBleHBlY3QgaXMgdGhlIHNhbWUgYXMgdGhlIGhhc2ggdGhlIHNlcnZlciByZXBvcnRlZFxuICAgICAgICBpZiAoaGFzaCAhPSBudWxsICYmIHR4Lmhhc2ggIT09IGhhc2gpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiVHJhbnNhY3Rpb24gaGFzaCBtaXNtYXRjaCBmcm9tIFByb3ZpZGVyLnNlbmRUcmFuc2FjdGlvbi5cIiwgTG9nZ2VyLmVycm9ycy5VTktOT1dOX0VSUk9SLCB7IGV4cGVjdGVkSGFzaDogdHguaGFzaCwgcmV0dXJuZWRIYXNoOiBoYXNoIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC53YWl0ID0gKGNvbmZpcm1zLCB0aW1lb3V0KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBpZiAoY29uZmlybXMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbmZpcm1zID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aW1lb3V0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aW1lb3V0ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEdldCB0aGUgZGV0YWlscyB0byBkZXRlY3QgcmVwbGFjZW1lbnRcbiAgICAgICAgICAgIGxldCByZXBsYWNlbWVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmIChjb25maXJtcyAhPT0gMCAmJiBzdGFydEJsb2NrICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXBsYWNlbWVudCA9IHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogdHguZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgZnJvbTogdHguZnJvbSxcbiAgICAgICAgICAgICAgICAgICAgbm9uY2U6IHR4Lm5vbmNlLFxuICAgICAgICAgICAgICAgICAgICB0bzogdHgudG8sXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0eC52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRCbG9ja1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZWNlaXB0ID0geWllbGQgdGhpcy5fd2FpdEZvclRyYW5zYWN0aW9uKHR4Lmhhc2gsIGNvbmZpcm1zLCB0aW1lb3V0LCByZXBsYWNlbWVudCk7XG4gICAgICAgICAgICBpZiAocmVjZWlwdCA9PSBudWxsICYmIGNvbmZpcm1zID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBObyBsb25nZXIgcGVuZGluZywgYWxsb3cgdGhlIHBvbGxpbmcgbG9vcCB0byBnYXJiYWdlIGNvbGxlY3QgdGhpc1xuICAgICAgICAgICAgdGhpcy5fZW1pdHRlZFtcInQ6XCIgKyB0eC5oYXNoXSA9IHJlY2VpcHQuYmxvY2tOdW1iZXI7XG4gICAgICAgICAgICBpZiAocmVjZWlwdC5zdGF0dXMgPT09IDApIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcInRyYW5zYWN0aW9uIGZhaWxlZFwiLCBMb2dnZXIuZXJyb3JzLkNBTExfRVhDRVBUSU9OLCB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uSGFzaDogdHguaGFzaCxcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb246IHR4LFxuICAgICAgICAgICAgICAgICAgICByZWNlaXB0OiByZWNlaXB0XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVjZWlwdDtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHNlbmRUcmFuc2FjdGlvbihzaWduZWRUcmFuc2FjdGlvbikge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgeWllbGQgdGhpcy5nZXROZXR3b3JrKCk7XG4gICAgICAgICAgICBjb25zdCBoZXhUeCA9IHlpZWxkIFByb21pc2UucmVzb2x2ZShzaWduZWRUcmFuc2FjdGlvbikudGhlbih0ID0+IGhleGxpZnkodCkpO1xuICAgICAgICAgICAgY29uc3QgdHggPSB0aGlzLmZvcm1hdHRlci50cmFuc2FjdGlvbihzaWduZWRUcmFuc2FjdGlvbik7XG4gICAgICAgICAgICBpZiAodHguY29uZmlybWF0aW9ucyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdHguY29uZmlybWF0aW9ucyA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBibG9ja051bWJlciA9IHlpZWxkIHRoaXMuX2dldEludGVybmFsQmxvY2tOdW1iZXIoMTAwICsgMiAqIHRoaXMucG9sbGluZ0ludGVydmFsKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGFzaCA9IHlpZWxkIHRoaXMucGVyZm9ybShcInNlbmRUcmFuc2FjdGlvblwiLCB7IHNpZ25lZFRyYW5zYWN0aW9uOiBoZXhUeCB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd3JhcFRyYW5zYWN0aW9uKHR4LCBoYXNoLCBibG9ja051bWJlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBlcnJvci50cmFuc2FjdGlvbiA9IHR4O1xuICAgICAgICAgICAgICAgIGVycm9yLnRyYW5zYWN0aW9uSGFzaCA9IHR4Lmhhc2g7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfZ2V0VHJhbnNhY3Rpb25SZXF1ZXN0KHRyYW5zYWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZXMgPSB5aWVsZCB0cmFuc2FjdGlvbjtcbiAgICAgICAgICAgIGNvbnN0IHR4ID0ge307XG4gICAgICAgICAgICBbXCJmcm9tXCIsIFwidG9cIl0uZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlc1trZXldID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0eFtrZXldID0gUHJvbWlzZS5yZXNvbHZlKHZhbHVlc1trZXldKS50aGVuKCh2KSA9PiAodiA/IHRoaXMuX2dldEFkZHJlc3ModikgOiBudWxsKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFtcImdhc0xpbWl0XCIsIFwiZ2FzUHJpY2VcIiwgXCJtYXhGZWVQZXJHYXNcIiwgXCJtYXhQcmlvcml0eUZlZVBlckdhc1wiLCBcInZhbHVlXCJdLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZXNba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdHhba2V5XSA9IFByb21pc2UucmVzb2x2ZSh2YWx1ZXNba2V5XSkudGhlbigodikgPT4gKHYgPyBCaWdOdW1iZXIuZnJvbSh2KSA6IG51bGwpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgW1widHlwZVwiXS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVzW2tleV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHR4W2tleV0gPSBQcm9taXNlLnJlc29sdmUodmFsdWVzW2tleV0pLnRoZW4oKHYpID0+ICgodiAhPSBudWxsKSA/IHYgOiBudWxsKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICh2YWx1ZXMuYWNjZXNzTGlzdCkge1xuICAgICAgICAgICAgICAgIHR4LmFjY2Vzc0xpc3QgPSB0aGlzLmZvcm1hdHRlci5hY2Nlc3NMaXN0KHZhbHVlcy5hY2Nlc3NMaXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFtcImRhdGFcIl0uZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlc1trZXldID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0eFtrZXldID0gUHJvbWlzZS5yZXNvbHZlKHZhbHVlc1trZXldKS50aGVuKCh2KSA9PiAodiA/IGhleGxpZnkodikgOiBudWxsKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcm1hdHRlci50cmFuc2FjdGlvblJlcXVlc3QoeWllbGQgcmVzb2x2ZVByb3BlcnRpZXModHgpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9nZXRGaWx0ZXIoZmlsdGVyKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBmaWx0ZXIgPSB5aWVsZCBmaWx0ZXI7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICAgICAgICAgIGlmIChmaWx0ZXIuYWRkcmVzcyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmFkZHJlc3MgPSB0aGlzLl9nZXRBZGRyZXNzKGZpbHRlci5hZGRyZXNzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFtcImJsb2NrSGFzaFwiLCBcInRvcGljc1wiXS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZmlsdGVyW2tleV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gZmlsdGVyW2tleV07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFtcImZyb21CbG9ja1wiLCBcInRvQmxvY2tcIl0uZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGZpbHRlcltrZXldID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXN1bHRba2V5XSA9IHRoaXMuX2dldEJsb2NrVGFnKGZpbHRlcltrZXldKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0dGVyLmZpbHRlcih5aWVsZCByZXNvbHZlUHJvcGVydGllcyhyZXN1bHQpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9jYWxsKHRyYW5zYWN0aW9uLCBibG9ja1RhZywgYXR0ZW1wdCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgaWYgKGF0dGVtcHQgPj0gTUFYX0NDSVBfUkVESVJFQ1RTKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJDQ0lQIHJlYWQgZXhjZWVkZWQgbWF4aW11bSByZWRpcmVjdGlvbnNcIiwgTG9nZ2VyLmVycm9ycy5TRVJWRVJfRVJST1IsIHtcbiAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RzOiBhdHRlbXB0LCB0cmFuc2FjdGlvblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdHhTZW5kZXIgPSB0cmFuc2FjdGlvbi50bztcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHlpZWxkIHRoaXMucGVyZm9ybShcImNhbGxcIiwgeyB0cmFuc2FjdGlvbiwgYmxvY2tUYWcgfSk7XG4gICAgICAgICAgICAvLyBDQ0lQIFJlYWQgcmVxdWVzdCB2aWEgT2ZmY2hhaW5Mb29rdXAoYWRkcmVzcyxzdHJpbmdbXSxieXRlcyxieXRlczQsYnl0ZXMpXG4gICAgICAgICAgICBpZiAoYXR0ZW1wdCA+PSAwICYmIGJsb2NrVGFnID09PSBcImxhdGVzdFwiICYmIHR4U2VuZGVyICE9IG51bGwgJiYgcmVzdWx0LnN1YnN0cmluZygwLCAxMCkgPT09IFwiMHg1NTZmMTgzMFwiICYmIChoZXhEYXRhTGVuZ3RoKHJlc3VsdCkgJSAzMiA9PT0gNCkpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gaGV4RGF0YVNsaWNlKHJlc3VsdCwgNCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIHRoZSBzZW5kZXIgb2YgdGhlIE9mZmNoYWluTG9va3VwIG1hdGNoZXMgdGhlIHRyYW5zYWN0aW9uXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbmRlciA9IGhleERhdGFTbGljZShkYXRhLCAwLCAzMik7XG4gICAgICAgICAgICAgICAgICAgIGlmICghQmlnTnVtYmVyLmZyb20oc2VuZGVyKS5lcSh0eFNlbmRlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiQ0NJUCBSZWFkIHNlbmRlciBkaWQgbm90IG1hdGNoXCIsIExvZ2dlci5lcnJvcnMuQ0FMTF9FWENFUFRJT04sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk9mZmNoYWluTG9va3VwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmF0dXJlOiBcIk9mZmNoYWluTG9va3VwKGFkZHJlc3Msc3RyaW5nW10sYnl0ZXMsYnl0ZXM0LGJ5dGVzKVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uLCBkYXRhOiByZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIFJlYWQgdGhlIFVSTHMgZnJvbSB0aGUgcmVzcG9uc2VcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdXJscyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB1cmxzT2Zmc2V0ID0gQmlnTnVtYmVyLmZyb20oaGV4RGF0YVNsaWNlKGRhdGEsIDMyLCA2NCkpLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHVybHNMZW5ndGggPSBCaWdOdW1iZXIuZnJvbShoZXhEYXRhU2xpY2UoZGF0YSwgdXJsc09mZnNldCwgdXJsc09mZnNldCArIDMyKSkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdXJsc0RhdGEgPSBoZXhEYXRhU2xpY2UoZGF0YSwgdXJsc09mZnNldCArIDMyKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgdSA9IDA7IHUgPCB1cmxzTGVuZ3RoOyB1KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IF9wYXJzZVN0cmluZyh1cmxzRGF0YSwgdSAqIDMyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1cmwgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiQ0NJUCBSZWFkIGNvbnRhaW5lZCBjb3JydXB0IFVSTCBzdHJpbmdcIiwgTG9nZ2VyLmVycm9ycy5DQUxMX0VYQ0VQVElPTiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk9mZmNoYWluTG9va3VwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hdHVyZTogXCJPZmZjaGFpbkxvb2t1cChhZGRyZXNzLHN0cmluZ1tdLGJ5dGVzLGJ5dGVzNCxieXRlcylcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb24sIGRhdGE6IHJlc3VsdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdXJscy5wdXNoKHVybCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBDQ0lQIGNhbGxkYXRhIHRvIGZvcndhcmRcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FsbGRhdGEgPSBfcGFyc2VCeXRlcyhkYXRhLCA2NCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgY2FsbGJhY2tTZWxlY3RvciAoYnl0ZXM0KVxuICAgICAgICAgICAgICAgICAgICBpZiAoIUJpZ051bWJlci5mcm9tKGhleERhdGFTbGljZShkYXRhLCAxMDAsIDEyOCkpLmlzWmVybygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcIkNDSVAgUmVhZCBjYWxsYmFjayBzZWxlY3RvciBpbmNsdWRlZCBqdW5rXCIsIExvZ2dlci5lcnJvcnMuQ0FMTF9FWENFUFRJT04sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk9mZmNoYWluTG9va3VwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmF0dXJlOiBcIk9mZmNoYWluTG9va3VwKGFkZHJlc3Msc3RyaW5nW10sYnl0ZXMsYnl0ZXM0LGJ5dGVzKVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uLCBkYXRhOiByZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrU2VsZWN0b3IgPSBoZXhEYXRhU2xpY2UoZGF0YSwgOTYsIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgZXh0cmEgZGF0YSB0byBzZW5kIGJhY2sgdG8gdGhlIGNvbnRyYWN0IGFzIGNvbnRleHRcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXh0cmFEYXRhID0gX3BhcnNlQnl0ZXMoZGF0YSwgMTI4KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2NpcFJlc3VsdCA9IHlpZWxkIHRoaXMuY2NpcFJlYWRGZXRjaCh0cmFuc2FjdGlvbiwgY2FsbGRhdGEsIHVybHMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2NpcFJlc3VsdCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcIkNDSVAgUmVhZCBkaXNhYmxlZCBvciBwcm92aWRlZCBubyBVUkxzXCIsIExvZ2dlci5lcnJvcnMuQ0FMTF9FWENFUFRJT04sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk9mZmNoYWluTG9va3VwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmF0dXJlOiBcIk9mZmNoYWluTG9va3VwKGFkZHJlc3Msc3RyaW5nW10sYnl0ZXMsYnl0ZXM0LGJ5dGVzKVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uLCBkYXRhOiByZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHR4ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG86IHR4U2VuZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogaGV4Q29uY2F0KFtjYWxsYmFja1NlbGVjdG9yLCBlbmNvZGVCeXRlcyhbY2NpcFJlc3VsdCwgZXh0cmFEYXRhXSldKVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FsbCh0eCwgYmxvY2tUYWcsIGF0dGVtcHQgKyAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvci5jb2RlID09PSBMb2dnZXIuZXJyb3JzLlNFUlZFUl9FUlJPUikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBoZXhsaWZ5KHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9nZ2VyLnRocm93RXJyb3IoXCJiYWQgcmVzdWx0IGZyb20gYmFja2VuZFwiLCBMb2dnZXIuZXJyb3JzLlNFUlZFUl9FUlJPUiwge1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiY2FsbFwiLFxuICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IHsgdHJhbnNhY3Rpb24sIGJsb2NrVGFnIH0sIHJlc3VsdCwgZXJyb3JcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNhbGwodHJhbnNhY3Rpb24sIGJsb2NrVGFnKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB5aWVsZCB0aGlzLmdldE5ldHdvcmsoKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc29sdmVkID0geWllbGQgcmVzb2x2ZVByb3BlcnRpZXMoe1xuICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uOiB0aGlzLl9nZXRUcmFuc2FjdGlvblJlcXVlc3QodHJhbnNhY3Rpb24pLFxuICAgICAgICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLl9nZXRCbG9ja1RhZyhibG9ja1RhZyksXG4gICAgICAgICAgICAgICAgY2NpcFJlYWRFbmFibGVkOiBQcm9taXNlLnJlc29sdmUodHJhbnNhY3Rpb24uY2NpcFJlYWRFbmFibGVkKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FsbChyZXNvbHZlZC50cmFuc2FjdGlvbiwgcmVzb2x2ZWQuYmxvY2tUYWcsIHJlc29sdmVkLmNjaXBSZWFkRW5hYmxlZCA/IDAgOiAtMSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlc3RpbWF0ZUdhcyh0cmFuc2FjdGlvbikge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgeWllbGQgdGhpcy5nZXROZXR3b3JrKCk7XG4gICAgICAgICAgICBjb25zdCBwYXJhbXMgPSB5aWVsZCByZXNvbHZlUHJvcGVydGllcyh7XG4gICAgICAgICAgICAgICAgdHJhbnNhY3Rpb246IHRoaXMuX2dldFRyYW5zYWN0aW9uUmVxdWVzdCh0cmFuc2FjdGlvbilcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0geWllbGQgdGhpcy5wZXJmb3JtKFwiZXN0aW1hdGVHYXNcIiwgcGFyYW1zKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEJpZ051bWJlci5mcm9tKHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9nZ2VyLnRocm93RXJyb3IoXCJiYWQgcmVzdWx0IGZyb20gYmFja2VuZFwiLCBMb2dnZXIuZXJyb3JzLlNFUlZFUl9FUlJPUiwge1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiZXN0aW1hdGVHYXNcIixcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLCByZXN1bHQsIGVycm9yXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfZ2V0QWRkcmVzcyhhZGRyZXNzT3JOYW1lKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBhZGRyZXNzT3JOYW1lID0geWllbGQgYWRkcmVzc09yTmFtZTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgKGFkZHJlc3NPck5hbWUpICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgYWRkcmVzcyBvciBFTlMgbmFtZVwiLCBcIm5hbWVcIiwgYWRkcmVzc09yTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBhZGRyZXNzID0geWllbGQgdGhpcy5yZXNvbHZlTmFtZShhZGRyZXNzT3JOYW1lKTtcbiAgICAgICAgICAgIGlmIChhZGRyZXNzID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcIkVOUyBuYW1lIG5vdCBjb25maWd1cmVkXCIsIExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLCB7XG4gICAgICAgICAgICAgICAgICAgIG9wZXJhdGlvbjogYHJlc29sdmVOYW1lKCR7SlNPTi5zdHJpbmdpZnkoYWRkcmVzc09yTmFtZSl9KWBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhZGRyZXNzO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX2dldEJsb2NrKGJsb2NrSGFzaE9yQmxvY2tUYWcsIGluY2x1ZGVUcmFuc2FjdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHlpZWxkIHRoaXMuZ2V0TmV0d29yaygpO1xuICAgICAgICAgICAgYmxvY2tIYXNoT3JCbG9ja1RhZyA9IHlpZWxkIGJsb2NrSGFzaE9yQmxvY2tUYWc7XG4gICAgICAgICAgICAvLyBJZiBibG9ja1RhZyBpcyBhIG51bWJlciAobm90IFwibGF0ZXN0XCIsIGV0YyksIHRoaXMgaXMgdGhlIGJsb2NrIG51bWJlclxuICAgICAgICAgICAgbGV0IGJsb2NrTnVtYmVyID0gLTEyODtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICBpbmNsdWRlVHJhbnNhY3Rpb25zOiAhIWluY2x1ZGVUcmFuc2FjdGlvbnNcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoaXNIZXhTdHJpbmcoYmxvY2tIYXNoT3JCbG9ja1RhZywgMzIpKSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zLmJsb2NrSGFzaCA9IGJsb2NrSGFzaE9yQmxvY2tUYWc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBwYXJhbXMuYmxvY2tUYWcgPSB5aWVsZCB0aGlzLl9nZXRCbG9ja1RhZyhibG9ja0hhc2hPckJsb2NrVGFnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzSGV4U3RyaW5nKHBhcmFtcy5ibG9ja1RhZykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrTnVtYmVyID0gcGFyc2VJbnQocGFyYW1zLmJsb2NrVGFnLnN1YnN0cmluZygyKSwgMTYpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBibG9jayBoYXNoIG9yIGJsb2NrIHRhZ1wiLCBcImJsb2NrSGFzaE9yQmxvY2tUYWdcIiwgYmxvY2tIYXNoT3JCbG9ja1RhZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBvbGwoKCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJsb2NrID0geWllbGQgdGhpcy5wZXJmb3JtKFwiZ2V0QmxvY2tcIiwgcGFyYW1zKTtcbiAgICAgICAgICAgICAgICAvLyBCbG9jayB3YXMgbm90IGZvdW5kXG4gICAgICAgICAgICAgICAgaWYgKGJsb2NrID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRm9yIGJsb2NraGFzaGVzLCBpZiB3ZSBkaWRuJ3Qgc2F5IGl0IGV4aXN0ZWQsIHRoYXQgYmxvY2toYXNoIG1heVxuICAgICAgICAgICAgICAgICAgICAvLyBub3QgZXhpc3QuIElmIHdlIGRpZCBzZWUgaXQgdGhvdWdoLCBwZXJoYXBzIGZyb20gYSBsb2csIHdlIGtub3dcbiAgICAgICAgICAgICAgICAgICAgLy8gaXQgZXhpc3RzLCBhbmQgdGhpcyBub2RlIGlzIGp1c3Qgbm90IGNhdWdodCB1cCB5ZXQuXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbXMuYmxvY2tIYXNoICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9lbWl0dGVkW1wiYjpcIiArIHBhcmFtcy5ibG9ja0hhc2hdID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBGb3IgYmxvY2sgdGFncywgaWYgd2UgYXJlIGFza2luZyBmb3IgYSBmdXR1cmUgYmxvY2ssIHdlIHJldHVybiBudWxsXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbXMuYmxvY2tUYWcgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJsb2NrTnVtYmVyID4gdGhpcy5fZW1pdHRlZC5ibG9jaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIFJldHJ5IG9uIHRoZSBuZXh0IGJsb2NrXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEFkZCB0cmFuc2FjdGlvbnNcbiAgICAgICAgICAgICAgICBpZiAoaW5jbHVkZVRyYW5zYWN0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgYmxvY2tOdW1iZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJsb2NrLnRyYW5zYWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHggPSBibG9jay50cmFuc2FjdGlvbnNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHguYmxvY2tOdW1iZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR4LmNvbmZpcm1hdGlvbnMgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHguY29uZmlybWF0aW9ucyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJsb2NrTnVtYmVyID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tOdW1iZXIgPSB5aWVsZCB0aGlzLl9nZXRJbnRlcm5hbEJsb2NrTnVtYmVyKDEwMCArIDIgKiB0aGlzLnBvbGxpbmdJbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgY29uZmlybWF0aW9ucyB1c2luZyB0aGUgZmFzdCBibG9jayBudW1iZXIgKHBlc3NpbWlzdGljKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb25maXJtYXRpb25zID0gKGJsb2NrTnVtYmVyIC0gdHguYmxvY2tOdW1iZXIpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlybWF0aW9ucyA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1hdGlvbnMgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eC5jb25maXJtYXRpb25zID0gY29uZmlybWF0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBibG9ja1dpdGhUeHMgPSB0aGlzLmZvcm1hdHRlci5ibG9ja1dpdGhUcmFuc2FjdGlvbnMoYmxvY2spO1xuICAgICAgICAgICAgICAgICAgICBibG9ja1dpdGhUeHMudHJhbnNhY3Rpb25zID0gYmxvY2tXaXRoVHhzLnRyYW5zYWN0aW9ucy5tYXAoKHR4KSA9PiB0aGlzLl93cmFwVHJhbnNhY3Rpb24odHgpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJsb2NrV2l0aFR4cztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0dGVyLmJsb2NrKGJsb2NrKTtcbiAgICAgICAgICAgIH0pLCB7IG9uY2VQb2xsOiB0aGlzIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0QmxvY2soYmxvY2tIYXNoT3JCbG9ja1RhZykge1xuICAgICAgICByZXR1cm4gKHRoaXMuX2dldEJsb2NrKGJsb2NrSGFzaE9yQmxvY2tUYWcsIGZhbHNlKSk7XG4gICAgfVxuICAgIGdldEJsb2NrV2l0aFRyYW5zYWN0aW9ucyhibG9ja0hhc2hPckJsb2NrVGFnKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5fZ2V0QmxvY2soYmxvY2tIYXNoT3JCbG9ja1RhZywgdHJ1ZSkpO1xuICAgIH1cbiAgICBnZXRUcmFuc2FjdGlvbih0cmFuc2FjdGlvbkhhc2gpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHlpZWxkIHRoaXMuZ2V0TmV0d29yaygpO1xuICAgICAgICAgICAgdHJhbnNhY3Rpb25IYXNoID0geWllbGQgdHJhbnNhY3Rpb25IYXNoO1xuICAgICAgICAgICAgY29uc3QgcGFyYW1zID0geyB0cmFuc2FjdGlvbkhhc2g6IHRoaXMuZm9ybWF0dGVyLmhhc2godHJhbnNhY3Rpb25IYXNoLCB0cnVlKSB9O1xuICAgICAgICAgICAgcmV0dXJuIHBvbGwoKCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHlpZWxkIHRoaXMucGVyZm9ybShcImdldFRyYW5zYWN0aW9uXCIsIHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9lbWl0dGVkW1widDpcIiArIHRyYW5zYWN0aW9uSGFzaF0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgdHggPSB0aGlzLmZvcm1hdHRlci50cmFuc2FjdGlvblJlc3BvbnNlKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgaWYgKHR4LmJsb2NrTnVtYmVyID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdHguY29uZmlybWF0aW9ucyA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR4LmNvbmZpcm1hdGlvbnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBibG9ja051bWJlciA9IHlpZWxkIHRoaXMuX2dldEludGVybmFsQmxvY2tOdW1iZXIoMTAwICsgMiAqIHRoaXMucG9sbGluZ0ludGVydmFsKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBjb25maXJtYXRpb25zIHVzaW5nIHRoZSBmYXN0IGJsb2NrIG51bWJlciAocGVzc2ltaXN0aWMpXG4gICAgICAgICAgICAgICAgICAgIGxldCBjb25maXJtYXRpb25zID0gKGJsb2NrTnVtYmVyIC0gdHguYmxvY2tOdW1iZXIpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpcm1hdGlvbnMgPD0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybWF0aW9ucyA9IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdHguY29uZmlybWF0aW9ucyA9IGNvbmZpcm1hdGlvbnM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93cmFwVHJhbnNhY3Rpb24odHgpO1xuICAgICAgICAgICAgfSksIHsgb25jZVBvbGw6IHRoaXMgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXRUcmFuc2FjdGlvblJlY2VpcHQodHJhbnNhY3Rpb25IYXNoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB5aWVsZCB0aGlzLmdldE5ldHdvcmsoKTtcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uSGFzaCA9IHlpZWxkIHRyYW5zYWN0aW9uSGFzaDtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHsgdHJhbnNhY3Rpb25IYXNoOiB0aGlzLmZvcm1hdHRlci5oYXNoKHRyYW5zYWN0aW9uSGFzaCwgdHJ1ZSkgfTtcbiAgICAgICAgICAgIHJldHVybiBwb2xsKCgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB5aWVsZCB0aGlzLnBlcmZvcm0oXCJnZXRUcmFuc2FjdGlvblJlY2VpcHRcIiwgcGFyYW1zKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2VtaXR0ZWRbXCJ0OlwiICsgdHJhbnNhY3Rpb25IYXNoXSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBcImdldGgtZXRjXCIgcmV0dXJucyByZWNlaXB0cyBiZWZvcmUgdGhleSBhcmUgcmVhZHlcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmJsb2NrSGFzaCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHJlY2VpcHQgPSB0aGlzLmZvcm1hdHRlci5yZWNlaXB0KHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgaWYgKHJlY2VpcHQuYmxvY2tOdW1iZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZWNlaXB0LmNvbmZpcm1hdGlvbnMgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChyZWNlaXB0LmNvbmZpcm1hdGlvbnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBibG9ja051bWJlciA9IHlpZWxkIHRoaXMuX2dldEludGVybmFsQmxvY2tOdW1iZXIoMTAwICsgMiAqIHRoaXMucG9sbGluZ0ludGVydmFsKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBjb25maXJtYXRpb25zIHVzaW5nIHRoZSBmYXN0IGJsb2NrIG51bWJlciAocGVzc2ltaXN0aWMpXG4gICAgICAgICAgICAgICAgICAgIGxldCBjb25maXJtYXRpb25zID0gKGJsb2NrTnVtYmVyIC0gcmVjZWlwdC5ibG9ja051bWJlcikgKyAxO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlybWF0aW9ucyA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtYXRpb25zID0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZWNlaXB0LmNvbmZpcm1hdGlvbnMgPSBjb25maXJtYXRpb25zO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVjZWlwdDtcbiAgICAgICAgICAgIH0pLCB7IG9uY2VQb2xsOiB0aGlzIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0TG9ncyhmaWx0ZXIpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHlpZWxkIHRoaXMuZ2V0TmV0d29yaygpO1xuICAgICAgICAgICAgY29uc3QgcGFyYW1zID0geWllbGQgcmVzb2x2ZVByb3BlcnRpZXMoeyBmaWx0ZXI6IHRoaXMuX2dldEZpbHRlcihmaWx0ZXIpIH0pO1xuICAgICAgICAgICAgY29uc3QgbG9ncyA9IHlpZWxkIHRoaXMucGVyZm9ybShcImdldExvZ3NcIiwgcGFyYW1zKTtcbiAgICAgICAgICAgIGxvZ3MuZm9yRWFjaCgobG9nKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGxvZy5yZW1vdmVkID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nLnJlbW92ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBGb3JtYXR0ZXIuYXJyYXlPZih0aGlzLmZvcm1hdHRlci5maWx0ZXJMb2cuYmluZCh0aGlzLmZvcm1hdHRlcikpKGxvZ3MpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0RXRoZXJQcmljZSgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHlpZWxkIHRoaXMuZ2V0TmV0d29yaygpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGVyZm9ybShcImdldEV0aGVyUHJpY2VcIiwge30pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX2dldEJsb2NrVGFnKGJsb2NrVGFnKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBibG9ja1RhZyA9IHlpZWxkIGJsb2NrVGFnO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiAoYmxvY2tUYWcpID09PSBcIm51bWJlclwiICYmIGJsb2NrVGFnIDwgMCkge1xuICAgICAgICAgICAgICAgIGlmIChibG9ja1RhZyAlIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgQmxvY2tUYWdcIiwgXCJibG9ja1RhZ1wiLCBibG9ja1RhZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBibG9ja051bWJlciA9IHlpZWxkIHRoaXMuX2dldEludGVybmFsQmxvY2tOdW1iZXIoMTAwICsgMiAqIHRoaXMucG9sbGluZ0ludGVydmFsKTtcbiAgICAgICAgICAgICAgICBibG9ja051bWJlciArPSBibG9ja1RhZztcbiAgICAgICAgICAgICAgICBpZiAoYmxvY2tOdW1iZXIgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGJsb2NrTnVtYmVyID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0dGVyLmJsb2NrVGFnKGJsb2NrTnVtYmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcm1hdHRlci5ibG9ja1RhZyhibG9ja1RhZyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXRSZXNvbHZlcihuYW1lKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBsZXQgY3VycmVudE5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudE5hbWUgPT09IFwiXCIgfHwgY3VycmVudE5hbWUgPT09IFwiLlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBPcHRpbWl6YXRpb24gc2luY2UgdGhlIGV0aCBub2RlIGNhbm5vdCBjaGFuZ2UgYW5kIGRvZXNcbiAgICAgICAgICAgICAgICAvLyBub3QgaGF2ZSBhIHdpbGRjYXJkIHJlc29sdmVyXG4gICAgICAgICAgICAgICAgaWYgKG5hbWUgIT09IFwiZXRoXCIgJiYgY3VycmVudE5hbWUgPT09IFwiZXRoXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIENoZWNrIHRoZSBjdXJyZW50IG5vZGUgZm9yIGEgcmVzb2x2ZXJcbiAgICAgICAgICAgICAgICBjb25zdCBhZGRyID0geWllbGQgdGhpcy5fZ2V0UmVzb2x2ZXIoY3VycmVudE5hbWUsIFwiZ2V0UmVzb2x2ZXJcIik7XG4gICAgICAgICAgICAgICAgLy8gRm91bmQgYSByZXNvbHZlciFcbiAgICAgICAgICAgICAgICBpZiAoYWRkciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc29sdmVyID0gbmV3IFJlc29sdmVyKHRoaXMsIGFkZHIsIG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAvLyBMZWdhY3kgcmVzb2x2ZXIgZm91bmQsIHVzaW5nIEVJUC0yNTQ0IHNvIGl0IGlzbid0IHNhZmUgdG8gdXNlXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50TmFtZSAhPT0gbmFtZSAmJiAhKHlpZWxkIHJlc29sdmVyLnN1cHBvcnRzV2lsZGNhcmQoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBwYXJlbnQgbm9kZVxuICAgICAgICAgICAgICAgIGN1cnJlbnROYW1lID0gY3VycmVudE5hbWUuc3BsaXQoXCIuXCIpLnNsaWNlKDEpLmpvaW4oXCIuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgX2dldFJlc29sdmVyKG5hbWUsIG9wZXJhdGlvbikge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgaWYgKG9wZXJhdGlvbiA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uID0gXCJFTlNcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG5ldHdvcmsgPSB5aWVsZCB0aGlzLmdldE5ldHdvcmsoKTtcbiAgICAgICAgICAgIC8vIE5vIEVOUy4uLlxuICAgICAgICAgICAgaWYgKCFuZXR3b3JrLmVuc0FkZHJlc3MpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcIm5ldHdvcmsgZG9lcyBub3Qgc3VwcG9ydCBFTlNcIiwgTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHsgb3BlcmF0aW9uLCBuZXR3b3JrOiBuZXR3b3JrLm5hbWUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIGtlY2NhazI1NihcInJlc29sdmVyKGJ5dGVzMzIpXCIpXG4gICAgICAgICAgICAgICAgY29uc3QgYWRkckRhdGEgPSB5aWVsZCB0aGlzLmNhbGwoe1xuICAgICAgICAgICAgICAgICAgICB0bzogbmV0d29yay5lbnNBZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiAoXCIweDAxNzhiOGJmXCIgKyBuYW1laGFzaChuYW1lKS5zdWJzdHJpbmcoMikpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0dGVyLmNhbGxBZGRyZXNzKGFkZHJEYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIC8vIEVOUyByZWdpc3RyeSBjYW5ub3QgdGhyb3cgZXJyb3JzIG9uIHJlc29sdmVyKGJ5dGVzMzIpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJlc29sdmVOYW1lKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIG5hbWUgPSB5aWVsZCBuYW1lO1xuICAgICAgICAgICAgLy8gSWYgaXQgaXMgYWxyZWFkeSBhbiBhZGRyZXNzLCBub3RoaW5nIHRvIHJlc29sdmVcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLmZvcm1hdHRlci5hZGRyZXNzKG5hbWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIC8vIElmIGlzIGlzIGEgaGV4c3RyaW5nLCB0aGUgYWRkcmVzcyBpcyBiYWQgKFNlZSAjNjk0KVxuICAgICAgICAgICAgICAgIGlmIChpc0hleFN0cmluZyhuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIChuYW1lKSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIEVOUyBuYW1lXCIsIFwibmFtZVwiLCBuYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEdldCB0aGUgYWRkciBmcm9tIHRoZSByZXNvbHZlclxuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZXIgPSB5aWVsZCB0aGlzLmdldFJlc29sdmVyKG5hbWUpO1xuICAgICAgICAgICAgaWYgKCFyZXNvbHZlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHlpZWxkIHJlc29sdmVyLmdldEFkZHJlc3MoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGxvb2t1cEFkZHJlc3MoYWRkcmVzcykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgYWRkcmVzcyA9IHlpZWxkIGFkZHJlc3M7XG4gICAgICAgICAgICBhZGRyZXNzID0gdGhpcy5mb3JtYXR0ZXIuYWRkcmVzcyhhZGRyZXNzKTtcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBhZGRyZXNzLnN1YnN0cmluZygyKS50b0xvd2VyQ2FzZSgpICsgXCIuYWRkci5yZXZlcnNlXCI7XG4gICAgICAgICAgICBjb25zdCByZXNvbHZlckFkZHIgPSB5aWVsZCB0aGlzLl9nZXRSZXNvbHZlcihub2RlLCBcImxvb2t1cEFkZHJlc3NcIik7XG4gICAgICAgICAgICBpZiAocmVzb2x2ZXJBZGRyID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGtlY2NhayhcIm5hbWUoYnl0ZXMzMilcIilcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBfcGFyc2VTdHJpbmcoeWllbGQgdGhpcy5jYWxsKHtcbiAgICAgICAgICAgICAgICB0bzogcmVzb2x2ZXJBZGRyLFxuICAgICAgICAgICAgICAgIGRhdGE6IChcIjB4NjkxZjM0MzFcIiArIG5hbWVoYXNoKG5vZGUpLnN1YnN0cmluZygyKSlcbiAgICAgICAgICAgIH0pLCAwKTtcbiAgICAgICAgICAgIGNvbnN0IGFkZHIgPSB5aWVsZCB0aGlzLnJlc29sdmVOYW1lKG5hbWUpO1xuICAgICAgICAgICAgaWYgKGFkZHIgIT0gYWRkcmVzcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXRBdmF0YXIobmFtZU9yQWRkcmVzcykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgbGV0IHJlc29sdmVyID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChpc0hleFN0cmluZyhuYW1lT3JBZGRyZXNzKSkge1xuICAgICAgICAgICAgICAgIC8vIEFkZHJlc3M7IHJldmVyc2UgbG9va3VwXG4gICAgICAgICAgICAgICAgY29uc3QgYWRkcmVzcyA9IHRoaXMuZm9ybWF0dGVyLmFkZHJlc3MobmFtZU9yQWRkcmVzcyk7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZSA9IGFkZHJlc3Muc3Vic3RyaW5nKDIpLnRvTG93ZXJDYXNlKCkgKyBcIi5hZGRyLnJldmVyc2VcIjtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNvbHZlckFkZHJlc3MgPSB5aWVsZCB0aGlzLl9nZXRSZXNvbHZlcihub2RlLCBcImdldEF2YXRhclwiKTtcbiAgICAgICAgICAgICAgICBpZiAoIXJlc29sdmVyQWRkcmVzcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gVHJ5IHJlc29sdmluZyB0aGUgYXZhdGFyIGFnYWluc3QgdGhlIGFkZHIucmV2ZXJzZSByZXNvbHZlclxuICAgICAgICAgICAgICAgIHJlc29sdmVyID0gbmV3IFJlc29sdmVyKHRoaXMsIHJlc29sdmVyQWRkcmVzcywgbm9kZSk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXZhdGFyID0geWllbGQgcmVzb2x2ZXIuZ2V0QXZhdGFyKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhdmF0YXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhdmF0YXIudXJsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IuY29kZSAhPT0gTG9nZ2VyLmVycm9ycy5DQUxMX0VYQ0VQVElPTikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gVHJ5IGdldHRpbmcgdGhlIG5hbWUgYW5kIHBlcmZvcm1pbmcgZm9yd2FyZCBsb29rdXA7IGFsbG93aW5nIHdpbGRjYXJkc1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGtlY2NhayhcIm5hbWUoYnl0ZXMzMilcIilcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IF9wYXJzZVN0cmluZyh5aWVsZCB0aGlzLmNhbGwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdG86IHJlc29sdmVyQWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IChcIjB4NjkxZjM0MzFcIiArIG5hbWVoYXNoKG5vZGUpLnN1YnN0cmluZygyKSlcbiAgICAgICAgICAgICAgICAgICAgfSksIDApO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlciA9IHlpZWxkIHRoaXMuZ2V0UmVzb2x2ZXIobmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IuY29kZSAhPT0gTG9nZ2VyLmVycm9ycy5DQUxMX0VYQ0VQVElPTikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gRU5TIG5hbWU7IGZvcndhcmQgbG9va3VwIHdpdGggd2lsZGNhcmRcbiAgICAgICAgICAgICAgICByZXNvbHZlciA9IHlpZWxkIHRoaXMuZ2V0UmVzb2x2ZXIobmFtZU9yQWRkcmVzcyk7XG4gICAgICAgICAgICAgICAgaWYgKCFyZXNvbHZlcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBhdmF0YXIgPSB5aWVsZCByZXNvbHZlci5nZXRBdmF0YXIoKTtcbiAgICAgICAgICAgIGlmIChhdmF0YXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGF2YXRhci51cmw7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBwZXJmb3JtKG1ldGhvZCwgcGFyYW1zKSB7XG4gICAgICAgIHJldHVybiBsb2dnZXIudGhyb3dFcnJvcihtZXRob2QgKyBcIiBub3QgaW1wbGVtZW50ZWRcIiwgTG9nZ2VyLmVycm9ycy5OT1RfSU1QTEVNRU5URUQsIHsgb3BlcmF0aW9uOiBtZXRob2QgfSk7XG4gICAgfVxuICAgIF9zdGFydEV2ZW50KGV2ZW50KSB7XG4gICAgICAgIHRoaXMucG9sbGluZyA9ICh0aGlzLl9ldmVudHMuZmlsdGVyKChlKSA9PiBlLnBvbGxhYmxlKCkpLmxlbmd0aCA+IDApO1xuICAgIH1cbiAgICBfc3RvcEV2ZW50KGV2ZW50KSB7XG4gICAgICAgIHRoaXMucG9sbGluZyA9ICh0aGlzLl9ldmVudHMuZmlsdGVyKChlKSA9PiBlLnBvbGxhYmxlKCkpLmxlbmd0aCA+IDApO1xuICAgIH1cbiAgICBfYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGxpc3RlbmVyLCBvbmNlKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IEV2ZW50KGdldEV2ZW50VGFnKGV2ZW50TmFtZSksIGxpc3RlbmVyLCBvbmNlKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzLnB1c2goZXZlbnQpO1xuICAgICAgICB0aGlzLl9zdGFydEV2ZW50KGV2ZW50KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIG9uKGV2ZW50TmFtZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAgIH1cbiAgICBvbmNlKGV2ZW50TmFtZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBsaXN0ZW5lciwgdHJ1ZSk7XG4gICAgfVxuICAgIGVtaXQoZXZlbnROYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgbGV0IHN0b3BwZWQgPSBbXTtcbiAgICAgICAgbGV0IGV2ZW50VGFnID0gZ2V0RXZlbnRUYWcoZXZlbnROYW1lKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzLmZpbHRlcigoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudC50YWcgIT09IGV2ZW50VGFnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBldmVudC5saXN0ZW5lci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChldmVudC5vbmNlKSB7XG4gICAgICAgICAgICAgICAgc3RvcHBlZC5wdXNoKGV2ZW50KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHN0b3BwZWQuZm9yRWFjaCgoZXZlbnQpID0+IHsgdGhpcy5fc3RvcEV2ZW50KGV2ZW50KTsgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGxpc3RlbmVyQ291bnQoZXZlbnROYW1lKSB7XG4gICAgICAgIGlmICghZXZlbnROYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZXZlbnRzLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZXZlbnRUYWcgPSBnZXRFdmVudFRhZyhldmVudE5hbWUpO1xuICAgICAgICByZXR1cm4gdGhpcy5fZXZlbnRzLmZpbHRlcigoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoZXZlbnQudGFnID09PSBldmVudFRhZyk7XG4gICAgICAgIH0pLmxlbmd0aDtcbiAgICB9XG4gICAgbGlzdGVuZXJzKGV2ZW50TmFtZSkge1xuICAgICAgICBpZiAoZXZlbnROYW1lID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9ldmVudHMubWFwKChldmVudCkgPT4gZXZlbnQubGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBldmVudFRhZyA9IGdldEV2ZW50VGFnKGV2ZW50TmFtZSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9ldmVudHNcbiAgICAgICAgICAgIC5maWx0ZXIoKGV2ZW50KSA9PiAoZXZlbnQudGFnID09PSBldmVudFRhZykpXG4gICAgICAgICAgICAubWFwKChldmVudCkgPT4gZXZlbnQubGlzdGVuZXIpO1xuICAgIH1cbiAgICBvZmYoZXZlbnROYW1lLCBsaXN0ZW5lcikge1xuICAgICAgICBpZiAobGlzdGVuZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50TmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RvcHBlZCA9IFtdO1xuICAgICAgICBsZXQgZm91bmQgPSBmYWxzZTtcbiAgICAgICAgbGV0IGV2ZW50VGFnID0gZ2V0RXZlbnRUYWcoZXZlbnROYW1lKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzLmZpbHRlcigoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudC50YWcgIT09IGV2ZW50VGFnIHx8IGV2ZW50Lmxpc3RlbmVyICE9IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZm91bmQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIHN0b3BwZWQucHVzaChldmVudCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgICBzdG9wcGVkLmZvckVhY2goKGV2ZW50KSA9PiB7IHRoaXMuX3N0b3BFdmVudChldmVudCk7IH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50TmFtZSkge1xuICAgICAgICBsZXQgc3RvcHBlZCA9IFtdO1xuICAgICAgICBpZiAoZXZlbnROYW1lID09IG51bGwpIHtcbiAgICAgICAgICAgIHN0b3BwZWQgPSB0aGlzLl9ldmVudHM7XG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50VGFnID0gZ2V0RXZlbnRUYWcoZXZlbnROYW1lKTtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IHRoaXMuX2V2ZW50cy5maWx0ZXIoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LnRhZyAhPT0gZXZlbnRUYWcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0b3BwZWQucHVzaChldmVudCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgc3RvcHBlZC5mb3JFYWNoKChldmVudCkgPT4geyB0aGlzLl9zdG9wRXZlbnQoZXZlbnQpOyB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZS1wcm92aWRlci5qcy5tYXAiLCJleHBvcnQgY29uc3QgSGFzaFplcm8gPSBcIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGFzaGVzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5pbXBvcnQgeyBTaWduZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYWJzdHJhY3Qtc2lnbmVyXCI7XG5pbXBvcnQgeyBCaWdOdW1iZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYmlnbnVtYmVyXCI7XG5pbXBvcnQgeyBoZXhsaWZ5LCBoZXhWYWx1ZSwgaGV4WmVyb1BhZCwgaXNIZXhTdHJpbmcgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcbmltcG9ydCB7IF9UeXBlZERhdGFFbmNvZGVyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2hhc2hcIjtcbmltcG9ydCB7IGNoZWNrUHJvcGVydGllcywgZGVlcENvcHksIGRlZmluZVJlYWRPbmx5LCBnZXRTdGF0aWMsIHJlc29sdmVQcm9wZXJ0aWVzLCBzaGFsbG93Q29weSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9wcm9wZXJ0aWVzXCI7XG5pbXBvcnQgeyB0b1V0ZjhCeXRlcyB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9zdHJpbmdzXCI7XG5pbXBvcnQgeyBhY2Nlc3NMaXN0aWZ5IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3RyYW5zYWN0aW9uc1wiO1xuaW1wb3J0IHsgZmV0Y2hKc29uLCBwb2xsIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3dlYlwiO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2xvZ2dlclwiO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuL192ZXJzaW9uXCI7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKHZlcnNpb24pO1xuaW1wb3J0IHsgQmFzZVByb3ZpZGVyIH0gZnJvbSBcIi4vYmFzZS1wcm92aWRlclwiO1xuY29uc3QgZXJyb3JHYXMgPSBbXCJjYWxsXCIsIFwiZXN0aW1hdGVHYXNcIl07XG5mdW5jdGlvbiBzcGVsdW5rKHZhbHVlLCByZXF1aXJlRGF0YSkge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvLyBUaGVzZSAqYXJlKiB0aGUgZHJvaWRzIHdlJ3JlIGxvb2tpbmcgZm9yLlxuICAgIGlmICh0eXBlb2YgKHZhbHVlLm1lc3NhZ2UpID09PSBcInN0cmluZ1wiICYmIHZhbHVlLm1lc3NhZ2UubWF0Y2goXCJyZXZlcnRlZFwiKSkge1xuICAgICAgICBjb25zdCBkYXRhID0gaXNIZXhTdHJpbmcodmFsdWUuZGF0YSkgPyB2YWx1ZS5kYXRhIDogbnVsbDtcbiAgICAgICAgaWYgKCFyZXF1aXJlRGF0YSB8fCBkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4geyBtZXNzYWdlOiB2YWx1ZS5tZXNzYWdlLCBkYXRhIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gU3BlbHVuayBmdXJ0aGVyLi4uXG4gICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHZhbHVlKSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBzcGVsdW5rKHZhbHVlW2tleV0sIHJlcXVpcmVEYXRhKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvLyBNaWdodCBiZSBhIEpTT04gc3RyaW5nIHdlIGNhbiBmdXJ0aGVyIGRlc2NlbmQuLi5cbiAgICBpZiAodHlwZW9mICh2YWx1ZSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBzcGVsdW5rKEpTT04ucGFyc2UodmFsdWUpLCByZXF1aXJlRGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBjaGVja0Vycm9yKG1ldGhvZCwgZXJyb3IsIHBhcmFtcykge1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gcGFyYW1zLnRyYW5zYWN0aW9uIHx8IHBhcmFtcy5zaWduZWRUcmFuc2FjdGlvbjtcbiAgICAvLyBVbmRvIHRoZSBcImNvbnZlbmllbmNlXCIgc29tZSBub2RlcyBhcmUgYXR0ZW1wdGluZyB0byBwcmV2ZW50IGJhY2t3YXJkc1xuICAgIC8vIGluY29tcGF0aWJpbGl0eTsgbWF5YmUgZm9yIHY2IGNvbnNpZGVyIGZvcndhcmRpbmcgcmV2ZXJ0cyBhcyBlcnJvcnNcbiAgICBpZiAobWV0aG9kID09PSBcImNhbGxcIikge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzcGVsdW5rKGVycm9yLCB0cnVlKTtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5kYXRhO1xuICAgICAgICB9XG4gICAgICAgIC8vIE5vdGhpbmcgZGVzY3JpcHRpdmUuLlxuICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcIm1pc3NpbmcgcmV2ZXJ0IGRhdGEgaW4gY2FsbCBleGNlcHRpb247IFRyYW5zYWN0aW9uIHJldmVydGVkIHdpdGhvdXQgYSByZWFzb24gc3RyaW5nXCIsIExvZ2dlci5lcnJvcnMuQ0FMTF9FWENFUFRJT04sIHtcbiAgICAgICAgICAgIGRhdGE6IFwiMHhcIiwgdHJhbnNhY3Rpb24sIGVycm9yXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAobWV0aG9kID09PSBcImVzdGltYXRlR2FzXCIpIHtcbiAgICAgICAgLy8gVHJ5IHRvIGZpbmQgc29tZXRoaW5nLCB3aXRoIGEgcHJlZmVyZW5jZSBvbiBTRVJWRVJfRVJST1IgYm9keVxuICAgICAgICBsZXQgcmVzdWx0ID0gc3BlbHVuayhlcnJvci5ib2R5LCBmYWxzZSk7XG4gICAgICAgIGlmIChyZXN1bHQgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gc3BlbHVuayhlcnJvciwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEZvdW5kIFwicmV2ZXJ0ZWRcIiwgdGhpcyBpcyBhIENBTExfRVhDRVBUSU9OXG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiY2Fubm90IGVzdGltYXRlIGdhczsgdHJhbnNhY3Rpb24gbWF5IGZhaWwgb3IgbWF5IHJlcXVpcmUgbWFudWFsIGdhcyBsaW1pdFwiLCBMb2dnZXIuZXJyb3JzLlVOUFJFRElDVEFCTEVfR0FTX0xJTUlULCB7XG4gICAgICAgICAgICAgICAgcmVhc29uOiByZXN1bHQubWVzc2FnZSwgbWV0aG9kLCB0cmFuc2FjdGlvbiwgZXJyb3JcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEBUT0RPOiBTaG91bGQgd2Ugc3BlbHVuayBmb3IgbWVzc2FnZSB0b28/XG4gICAgbGV0IG1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlO1xuICAgIGlmIChlcnJvci5jb2RlID09PSBMb2dnZXIuZXJyb3JzLlNFUlZFUl9FUlJPUiAmJiBlcnJvci5lcnJvciAmJiB0eXBlb2YgKGVycm9yLmVycm9yLm1lc3NhZ2UpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIG1lc3NhZ2UgPSBlcnJvci5lcnJvci5tZXNzYWdlO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgKGVycm9yLmJvZHkpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIG1lc3NhZ2UgPSBlcnJvci5ib2R5O1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgKGVycm9yLnJlc3BvbnNlVGV4dCkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgbWVzc2FnZSA9IGVycm9yLnJlc3BvbnNlVGV4dDtcbiAgICB9XG4gICAgbWVzc2FnZSA9IChtZXNzYWdlIHx8IFwiXCIpLnRvTG93ZXJDYXNlKCk7XG4gICAgLy8gXCJpbnN1ZmZpY2llbnQgZnVuZHMgZm9yIGdhcyAqIHByaWNlICsgdmFsdWUgKyBjb3N0KGRhdGEpXCJcbiAgICBpZiAobWVzc2FnZS5tYXRjaCgvaW5zdWZmaWNpZW50IGZ1bmRzfGJhc2UgZmVlIGV4Y2VlZHMgZ2FzIGxpbWl0L2kpKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiaW5zdWZmaWNpZW50IGZ1bmRzIGZvciBpbnRyaW5zaWMgdHJhbnNhY3Rpb24gY29zdFwiLCBMb2dnZXIuZXJyb3JzLklOU1VGRklDSUVOVF9GVU5EUywge1xuICAgICAgICAgICAgZXJyb3IsIG1ldGhvZCwgdHJhbnNhY3Rpb25cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIFwibm9uY2UgdG9vIGxvd1wiXG4gICAgaWYgKG1lc3NhZ2UubWF0Y2goL25vbmNlIChpcyApP3RvbyBsb3cvaSkpIHtcbiAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJub25jZSBoYXMgYWxyZWFkeSBiZWVuIHVzZWRcIiwgTG9nZ2VyLmVycm9ycy5OT05DRV9FWFBJUkVELCB7XG4gICAgICAgICAgICBlcnJvciwgbWV0aG9kLCB0cmFuc2FjdGlvblxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gXCJyZXBsYWNlbWVudCB0cmFuc2FjdGlvbiB1bmRlcnByaWNlZFwiXG4gICAgaWYgKG1lc3NhZ2UubWF0Y2goL3JlcGxhY2VtZW50IHRyYW5zYWN0aW9uIHVuZGVycHJpY2VkfHRyYW5zYWN0aW9uIGdhcyBwcmljZS4qdG9vIGxvdy9pKSkge1xuICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcInJlcGxhY2VtZW50IGZlZSB0b28gbG93XCIsIExvZ2dlci5lcnJvcnMuUkVQTEFDRU1FTlRfVU5ERVJQUklDRUQsIHtcbiAgICAgICAgICAgIGVycm9yLCBtZXRob2QsIHRyYW5zYWN0aW9uXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBcInJlcGxhY2VtZW50IHRyYW5zYWN0aW9uIHVuZGVycHJpY2VkXCJcbiAgICBpZiAobWVzc2FnZS5tYXRjaCgvb25seSByZXBsYXktcHJvdGVjdGVkL2kpKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwibGVnYWN5IHByZS1laXAtMTU1IHRyYW5zYWN0aW9ucyBub3Qgc3VwcG9ydGVkXCIsIExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLCB7XG4gICAgICAgICAgICBlcnJvciwgbWV0aG9kLCB0cmFuc2FjdGlvblxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGVycm9yR2FzLmluZGV4T2YobWV0aG9kKSA+PSAwICYmIG1lc3NhZ2UubWF0Y2goL2dhcyByZXF1aXJlZCBleGNlZWRzIGFsbG93YW5jZXxhbHdheXMgZmFpbGluZyB0cmFuc2FjdGlvbnxleGVjdXRpb24gcmV2ZXJ0ZWQvKSkge1xuICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcImNhbm5vdCBlc3RpbWF0ZSBnYXM7IHRyYW5zYWN0aW9uIG1heSBmYWlsIG9yIG1heSByZXF1aXJlIG1hbnVhbCBnYXMgbGltaXRcIiwgTG9nZ2VyLmVycm9ycy5VTlBSRURJQ1RBQkxFX0dBU19MSU1JVCwge1xuICAgICAgICAgICAgZXJyb3IsIG1ldGhvZCwgdHJhbnNhY3Rpb25cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHRocm93IGVycm9yO1xufVxuZnVuY3Rpb24gdGltZXIodGltZW91dCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICBzZXRUaW1lb3V0KHJlc29sdmUsIHRpbWVvdXQpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZ2V0UmVzdWx0KHBheWxvYWQpIHtcbiAgICBpZiAocGF5bG9hZC5lcnJvcikge1xuICAgICAgICAvLyBAVE9ETzogbm90IGFueVxuICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihwYXlsb2FkLmVycm9yLm1lc3NhZ2UpO1xuICAgICAgICBlcnJvci5jb2RlID0gcGF5bG9hZC5lcnJvci5jb2RlO1xuICAgICAgICBlcnJvci5kYXRhID0gcGF5bG9hZC5lcnJvci5kYXRhO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gICAgcmV0dXJuIHBheWxvYWQucmVzdWx0O1xufVxuZnVuY3Rpb24gZ2V0TG93ZXJDYXNlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5jb25zdCBfY29uc3RydWN0b3JHdWFyZCA9IHt9O1xuZXhwb3J0IGNsYXNzIEpzb25ScGNTaWduZXIgZXh0ZW5kcyBTaWduZXIge1xuICAgIGNvbnN0cnVjdG9yKGNvbnN0cnVjdG9yR3VhcmQsIHByb3ZpZGVyLCBhZGRyZXNzT3JJbmRleCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBpZiAoY29uc3RydWN0b3JHdWFyZCAhPT0gX2NvbnN0cnVjdG9yR3VhcmQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImRvIG5vdCBjYWxsIHRoZSBKc29uUnBjU2lnbmVyIGNvbnN0cnVjdG9yIGRpcmVjdGx5OyB1c2UgcHJvdmlkZXIuZ2V0U2lnbmVyXCIpO1xuICAgICAgICB9XG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwicHJvdmlkZXJcIiwgcHJvdmlkZXIpO1xuICAgICAgICBpZiAoYWRkcmVzc09ySW5kZXggPT0gbnVsbCkge1xuICAgICAgICAgICAgYWRkcmVzc09ySW5kZXggPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgKGFkZHJlc3NPckluZGV4KSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJfYWRkcmVzc1wiLCB0aGlzLnByb3ZpZGVyLmZvcm1hdHRlci5hZGRyZXNzKGFkZHJlc3NPckluZGV4KSk7XG4gICAgICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcIl9pbmRleFwiLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgKGFkZHJlc3NPckluZGV4KSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJfaW5kZXhcIiwgYWRkcmVzc09ySW5kZXgpO1xuICAgICAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJfYWRkcmVzc1wiLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGFkZHJlc3Mgb3IgaW5kZXhcIiwgXCJhZGRyZXNzT3JJbmRleFwiLCBhZGRyZXNzT3JJbmRleCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29ubmVjdChwcm92aWRlcikge1xuICAgICAgICByZXR1cm4gbG9nZ2VyLnRocm93RXJyb3IoXCJjYW5ub3QgYWx0ZXIgSlNPTi1SUEMgU2lnbmVyIGNvbm5lY3Rpb25cIiwgTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbjogXCJjb25uZWN0XCJcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbm5lY3RVbmNoZWNrZWQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVW5jaGVja2VkSnNvblJwY1NpZ25lcihfY29uc3RydWN0b3JHdWFyZCwgdGhpcy5wcm92aWRlciwgdGhpcy5fYWRkcmVzcyB8fCB0aGlzLl9pbmRleCk7XG4gICAgfVxuICAgIGdldEFkZHJlc3MoKSB7XG4gICAgICAgIGlmICh0aGlzLl9hZGRyZXNzKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2FkZHJlc3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnByb3ZpZGVyLnNlbmQoXCJldGhfYWNjb3VudHNcIiwgW10pLnRoZW4oKGFjY291bnRzKSA9PiB7XG4gICAgICAgICAgICBpZiAoYWNjb3VudHMubGVuZ3RoIDw9IHRoaXMuX2luZGV4KSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJ1bmtub3duIGFjY291bnQgI1wiICsgdGhpcy5faW5kZXgsIExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLCB7XG4gICAgICAgICAgICAgICAgICAgIG9wZXJhdGlvbjogXCJnZXRBZGRyZXNzXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3ZpZGVyLmZvcm1hdHRlci5hZGRyZXNzKGFjY291bnRzW3RoaXMuX2luZGV4XSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzZW5kVW5jaGVja2VkVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pIHtcbiAgICAgICAgdHJhbnNhY3Rpb24gPSBzaGFsbG93Q29weSh0cmFuc2FjdGlvbik7XG4gICAgICAgIGNvbnN0IGZyb21BZGRyZXNzID0gdGhpcy5nZXRBZGRyZXNzKCkudGhlbigoYWRkcmVzcykgPT4ge1xuICAgICAgICAgICAgaWYgKGFkZHJlc3MpIHtcbiAgICAgICAgICAgICAgICBhZGRyZXNzID0gYWRkcmVzcy50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFkZHJlc3M7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBUaGUgSlNPTi1SUEMgZm9yIGV0aF9zZW5kVHJhbnNhY3Rpb24gdXNlcyA5MDAwMCBnYXM7IGlmIHRoZSB1c2VyXG4gICAgICAgIC8vIHdpc2hlcyB0byB1c2UgdGhpcywgaXQgaXMgZWFzeSB0byBzcGVjaWZ5IGV4cGxpY2l0bHksIG90aGVyd2lzZVxuICAgICAgICAvLyB3ZSBsb29rIGl0IHVwIGZvciB0aGVtLlxuICAgICAgICBpZiAodHJhbnNhY3Rpb24uZ2FzTGltaXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgZXN0aW1hdGUgPSBzaGFsbG93Q29weSh0cmFuc2FjdGlvbik7XG4gICAgICAgICAgICBlc3RpbWF0ZS5mcm9tID0gZnJvbUFkZHJlc3M7XG4gICAgICAgICAgICB0cmFuc2FjdGlvbi5nYXNMaW1pdCA9IHRoaXMucHJvdmlkZXIuZXN0aW1hdGVHYXMoZXN0aW1hdGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmFuc2FjdGlvbi50byAhPSBudWxsKSB7XG4gICAgICAgICAgICB0cmFuc2FjdGlvbi50byA9IFByb21pc2UucmVzb2x2ZSh0cmFuc2FjdGlvbi50bykudGhlbigodG8pID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICBpZiAodG8gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgYWRkcmVzcyA9IHlpZWxkIHRoaXMucHJvdmlkZXIucmVzb2x2ZU5hbWUodG8pO1xuICAgICAgICAgICAgICAgIGlmIChhZGRyZXNzID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInByb3ZpZGVkIEVOUyBuYW1lIHJlc29sdmVzIHRvIG51bGxcIiwgXCJ0eC50b1wiLCB0byk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBhZGRyZXNzO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNvbHZlUHJvcGVydGllcyh7XG4gICAgICAgICAgICB0eDogcmVzb2x2ZVByb3BlcnRpZXModHJhbnNhY3Rpb24pLFxuICAgICAgICAgICAgc2VuZGVyOiBmcm9tQWRkcmVzc1xuICAgICAgICB9KS50aGVuKCh7IHR4LCBzZW5kZXIgfSkgPT4ge1xuICAgICAgICAgICAgaWYgKHR4LmZyb20gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICh0eC5mcm9tLnRvTG93ZXJDYXNlKCkgIT09IHNlbmRlcikge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiZnJvbSBhZGRyZXNzIG1pc21hdGNoXCIsIFwidHJhbnNhY3Rpb25cIiwgdHJhbnNhY3Rpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHR4LmZyb20gPSBzZW5kZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBoZXhUeCA9IHRoaXMucHJvdmlkZXIuY29uc3RydWN0b3IuaGV4bGlmeVRyYW5zYWN0aW9uKHR4LCB7IGZyb206IHRydWUgfSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm92aWRlci5zZW5kKFwiZXRoX3NlbmRUcmFuc2FjdGlvblwiLCBbaGV4VHhdKS50aGVuKChoYXNoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhhc2g7XG4gICAgICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hlY2tFcnJvcihcInNlbmRUcmFuc2FjdGlvblwiLCBlcnJvciwgaGV4VHgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzaWduVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0Vycm9yKFwic2lnbmluZyB0cmFuc2FjdGlvbnMgaXMgdW5zdXBwb3J0ZWRcIiwgTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbjogXCJzaWduVHJhbnNhY3Rpb25cIlxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2VuZFRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAvLyBUaGlzIGNhbm5vdCBiZSBtaW5lZCBhbnkgZWFybGllciB0aGFuIGFueSByZWNlbnQgYmxvY2tcbiAgICAgICAgICAgIGNvbnN0IGJsb2NrTnVtYmVyID0geWllbGQgdGhpcy5wcm92aWRlci5fZ2V0SW50ZXJuYWxCbG9ja051bWJlcigxMDAgKyAyICogdGhpcy5wcm92aWRlci5wb2xsaW5nSW50ZXJ2YWwpO1xuICAgICAgICAgICAgLy8gU2VuZCB0aGUgdHJhbnNhY3Rpb25cbiAgICAgICAgICAgIGNvbnN0IGhhc2ggPSB5aWVsZCB0aGlzLnNlbmRVbmNoZWNrZWRUcmFuc2FjdGlvbih0cmFuc2FjdGlvbik7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIFVuZm9ydHVuYXRlbHksIEpTT04tUlBDIG9ubHkgcHJvdmlkZXMgYW5kIG9wYXF1ZSB0cmFuc2FjdGlvbiBoYXNoXG4gICAgICAgICAgICAgICAgLy8gZm9yIGEgcmVzcG9uc2UsIGFuZCB3ZSBuZWVkIHRoZSBhY3R1YWwgdHJhbnNhY3Rpb24sIHNvIHdlIHBvbGxcbiAgICAgICAgICAgICAgICAvLyBmb3IgaXQ7IGl0IHNob3VsZCBzaG93IHVwIHZlcnkgcXVpY2tseVxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCBwb2xsKCgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHggPSB5aWVsZCB0aGlzLnByb3ZpZGVyLmdldFRyYW5zYWN0aW9uKGhhc2gpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHggPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvdmlkZXIuX3dyYXBUcmFuc2FjdGlvbih0eCwgaGFzaCwgYmxvY2tOdW1iZXIpO1xuICAgICAgICAgICAgICAgIH0pLCB7IG9uY2VQb2xsOiB0aGlzLnByb3ZpZGVyIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgZXJyb3IudHJhbnNhY3Rpb25IYXNoID0gaGFzaDtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHNpZ25NZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSAoKHR5cGVvZiAobWVzc2FnZSkgPT09IFwic3RyaW5nXCIpID8gdG9VdGY4Qnl0ZXMobWVzc2FnZSkgOiBtZXNzYWdlKTtcbiAgICAgICAgICAgIGNvbnN0IGFkZHJlc3MgPSB5aWVsZCB0aGlzLmdldEFkZHJlc3MoKTtcbiAgICAgICAgICAgIHJldHVybiB5aWVsZCB0aGlzLnByb3ZpZGVyLnNlbmQoXCJwZXJzb25hbF9zaWduXCIsIFtoZXhsaWZ5KGRhdGEpLCBhZGRyZXNzLnRvTG93ZXJDYXNlKCldKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9sZWdhY3lTaWduTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gKCh0eXBlb2YgKG1lc3NhZ2UpID09PSBcInN0cmluZ1wiKSA/IHRvVXRmOEJ5dGVzKG1lc3NhZ2UpIDogbWVzc2FnZSk7XG4gICAgICAgICAgICBjb25zdCBhZGRyZXNzID0geWllbGQgdGhpcy5nZXRBZGRyZXNzKCk7XG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vd2lraS93aWtpL0pTT04tUlBDI2V0aF9zaWduXG4gICAgICAgICAgICByZXR1cm4geWllbGQgdGhpcy5wcm92aWRlci5zZW5kKFwiZXRoX3NpZ25cIiwgW2FkZHJlc3MudG9Mb3dlckNhc2UoKSwgaGV4bGlmeShkYXRhKV0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX3NpZ25UeXBlZERhdGEoZG9tYWluLCB0eXBlcywgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIC8vIFBvcHVsYXRlIGFueSBFTlMgbmFtZXMgKGluLXBsYWNlKVxuICAgICAgICAgICAgY29uc3QgcG9wdWxhdGVkID0geWllbGQgX1R5cGVkRGF0YUVuY29kZXIucmVzb2x2ZU5hbWVzKGRvbWFpbiwgdHlwZXMsIHZhbHVlLCAobmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3ZpZGVyLnJlc29sdmVOYW1lKG5hbWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBhZGRyZXNzID0geWllbGQgdGhpcy5nZXRBZGRyZXNzKCk7XG4gICAgICAgICAgICByZXR1cm4geWllbGQgdGhpcy5wcm92aWRlci5zZW5kKFwiZXRoX3NpZ25UeXBlZERhdGFfdjRcIiwgW1xuICAgICAgICAgICAgICAgIGFkZHJlc3MudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShfVHlwZWREYXRhRW5jb2Rlci5nZXRQYXlsb2FkKHBvcHVsYXRlZC5kb21haW4sIHR5cGVzLCBwb3B1bGF0ZWQudmFsdWUpKVxuICAgICAgICAgICAgXSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB1bmxvY2socGFzc3dvcmQpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHByb3ZpZGVyID0gdGhpcy5wcm92aWRlcjtcbiAgICAgICAgICAgIGNvbnN0IGFkZHJlc3MgPSB5aWVsZCB0aGlzLmdldEFkZHJlc3MoKTtcbiAgICAgICAgICAgIHJldHVybiBwcm92aWRlci5zZW5kKFwicGVyc29uYWxfdW5sb2NrQWNjb3VudFwiLCBbYWRkcmVzcy50b0xvd2VyQ2FzZSgpLCBwYXNzd29yZCwgbnVsbF0pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5jbGFzcyBVbmNoZWNrZWRKc29uUnBjU2lnbmVyIGV4dGVuZHMgSnNvblJwY1NpZ25lciB7XG4gICAgc2VuZFRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmRVbmNoZWNrZWRUcmFuc2FjdGlvbih0cmFuc2FjdGlvbikudGhlbigoaGFzaCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBoYXNoOiBoYXNoLFxuICAgICAgICAgICAgICAgIG5vbmNlOiBudWxsLFxuICAgICAgICAgICAgICAgIGdhc0xpbWl0OiBudWxsLFxuICAgICAgICAgICAgICAgIGdhc1ByaWNlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGE6IG51bGwsXG4gICAgICAgICAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgICAgICAgICAgY2hhaW5JZDogbnVsbCxcbiAgICAgICAgICAgICAgICBjb25maXJtYXRpb25zOiAwLFxuICAgICAgICAgICAgICAgIGZyb206IG51bGwsXG4gICAgICAgICAgICAgICAgd2FpdDogKGNvbmZpcm1hdGlvbnMpID0+IHsgcmV0dXJuIHRoaXMucHJvdmlkZXIud2FpdEZvclRyYW5zYWN0aW9uKGhhc2gsIGNvbmZpcm1hdGlvbnMpOyB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG59XG5jb25zdCBhbGxvd2VkVHJhbnNhY3Rpb25LZXlzID0ge1xuICAgIGNoYWluSWQ6IHRydWUsIGRhdGE6IHRydWUsIGdhc0xpbWl0OiB0cnVlLCBnYXNQcmljZTogdHJ1ZSwgbm9uY2U6IHRydWUsIHRvOiB0cnVlLCB2YWx1ZTogdHJ1ZSxcbiAgICB0eXBlOiB0cnVlLCBhY2Nlc3NMaXN0OiB0cnVlLFxuICAgIG1heEZlZVBlckdhczogdHJ1ZSwgbWF4UHJpb3JpdHlGZWVQZXJHYXM6IHRydWVcbn07XG5leHBvcnQgY2xhc3MgSnNvblJwY1Byb3ZpZGVyIGV4dGVuZHMgQmFzZVByb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcih1cmwsIG5ldHdvcmspIHtcbiAgICAgICAgbGV0IG5ldHdvcmtPclJlYWR5ID0gbmV0d29yaztcbiAgICAgICAgLy8gVGhlIG5ldHdvcmsgaXMgdW5rbm93biwgcXVlcnkgdGhlIEpTT04tUlBDIGZvciBpdFxuICAgICAgICBpZiAobmV0d29ya09yUmVhZHkgPT0gbnVsbCkge1xuICAgICAgICAgICAgbmV0d29ya09yUmVhZHkgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGV0ZWN0TmV0d29yaygpLnRoZW4oKG5ldHdvcmspID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUobmV0d29yayk7XG4gICAgICAgICAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcihuZXR3b3JrT3JSZWFkeSk7XG4gICAgICAgIC8vIERlZmF1bHQgVVJMXG4gICAgICAgIGlmICghdXJsKSB7XG4gICAgICAgICAgICB1cmwgPSBnZXRTdGF0aWModGhpcy5jb25zdHJ1Y3RvciwgXCJkZWZhdWx0VXJsXCIpKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiAodXJsKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJjb25uZWN0aW9uXCIsIE9iamVjdC5mcmVlemUoe1xuICAgICAgICAgICAgICAgIHVybDogdXJsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcImNvbm5lY3Rpb25cIiwgT2JqZWN0LmZyZWV6ZShzaGFsbG93Q29weSh1cmwpKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbmV4dElkID0gNDI7XG4gICAgfVxuICAgIGdldCBfY2FjaGUoKSB7XG4gICAgICAgIGlmICh0aGlzLl9ldmVudExvb3BDYWNoZSA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9ldmVudExvb3BDYWNoZSA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9ldmVudExvb3BDYWNoZTtcbiAgICB9XG4gICAgc3RhdGljIGRlZmF1bHRVcmwoKSB7XG4gICAgICAgIHJldHVybiBcImh0dHA6L1xcL2xvY2FsaG9zdDo4NTQ1XCI7XG4gICAgfVxuICAgIGRldGVjdE5ldHdvcmsoKSB7XG4gICAgICAgIGlmICghdGhpcy5fY2FjaGVbXCJkZXRlY3ROZXR3b3JrXCJdKSB7XG4gICAgICAgICAgICB0aGlzLl9jYWNoZVtcImRldGVjdE5ldHdvcmtcIl0gPSB0aGlzLl91bmNhY2hlZERldGVjdE5ldHdvcmsoKTtcbiAgICAgICAgICAgIC8vIENsZWFyIHRoaXMgY2FjaGUgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgbmV4dCBldmVudCBsb29wXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZVtcImRldGVjdE5ldHdvcmtcIl0gPSBudWxsO1xuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlW1wiZGV0ZWN0TmV0d29ya1wiXTtcbiAgICB9XG4gICAgX3VuY2FjaGVkRGV0ZWN0TmV0d29yaygpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHlpZWxkIHRpbWVyKDApO1xuICAgICAgICAgICAgbGV0IGNoYWluSWQgPSBudWxsO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjaGFpbklkID0geWllbGQgdGhpcy5zZW5kKFwiZXRoX2NoYWluSWRcIiwgW10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY2hhaW5JZCA9IHlpZWxkIHRoaXMuc2VuZChcIm5ldF92ZXJzaW9uXCIsIFtdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjaGFpbklkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBnZXROZXR3b3JrID0gZ2V0U3RhdGljKHRoaXMuY29uc3RydWN0b3IsIFwiZ2V0TmV0d29ya1wiKTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0TmV0d29yayhCaWdOdW1iZXIuZnJvbShjaGFpbklkKS50b051bWJlcigpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2dnZXIudGhyb3dFcnJvcihcImNvdWxkIG5vdCBkZXRlY3QgbmV0d29ya1wiLCBMb2dnZXIuZXJyb3JzLk5FVFdPUktfRVJST1IsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYWluSWQ6IGNoYWluSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudDogXCJpbnZhbGlkTmV0d29ya1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VydmVyRXJyb3I6IGVycm9yXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBsb2dnZXIudGhyb3dFcnJvcihcImNvdWxkIG5vdCBkZXRlY3QgbmV0d29ya1wiLCBMb2dnZXIuZXJyb3JzLk5FVFdPUktfRVJST1IsIHtcbiAgICAgICAgICAgICAgICBldmVudDogXCJub05ldHdvcmtcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXRTaWduZXIoYWRkcmVzc09ySW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBKc29uUnBjU2lnbmVyKF9jb25zdHJ1Y3Rvckd1YXJkLCB0aGlzLCBhZGRyZXNzT3JJbmRleCk7XG4gICAgfVxuICAgIGdldFVuY2hlY2tlZFNpZ25lcihhZGRyZXNzT3JJbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRTaWduZXIoYWRkcmVzc09ySW5kZXgpLmNvbm5lY3RVbmNoZWNrZWQoKTtcbiAgICB9XG4gICAgbGlzdEFjY291bnRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKFwiZXRoX2FjY291bnRzXCIsIFtdKS50aGVuKChhY2NvdW50cykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGFjY291bnRzLm1hcCgoYSkgPT4gdGhpcy5mb3JtYXR0ZXIuYWRkcmVzcyhhKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzZW5kKG1ldGhvZCwgcGFyYW1zKSB7XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSB7XG4gICAgICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgICAgICAgICAgaWQ6ICh0aGlzLl9uZXh0SWQrKyksXG4gICAgICAgICAgICBqc29ucnBjOiBcIjIuMFwiXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZW1pdChcImRlYnVnXCIsIHtcbiAgICAgICAgICAgIGFjdGlvbjogXCJyZXF1ZXN0XCIsXG4gICAgICAgICAgICByZXF1ZXN0OiBkZWVwQ29weShyZXF1ZXN0KSxcbiAgICAgICAgICAgIHByb3ZpZGVyOiB0aGlzXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBXZSBjYW4gZXhwYW5kIHRoaXMgaW4gdGhlIGZ1dHVyZSB0byBhbnkgY2FsbCwgYnV0IGZvciBub3cgdGhlc2VcbiAgICAgICAgLy8gYXJlIHRoZSBiaWdnZXN0IHdpbnMgYW5kIGRvIG5vdCByZXF1aXJlIGFueSBzZXJpYWxpemluZyBwYXJhbWV0ZXJzLlxuICAgICAgICBjb25zdCBjYWNoZSA9IChbXCJldGhfY2hhaW5JZFwiLCBcImV0aF9ibG9ja051bWJlclwiXS5pbmRleE9mKG1ldGhvZCkgPj0gMCk7XG4gICAgICAgIGlmIChjYWNoZSAmJiB0aGlzLl9jYWNoZVttZXRob2RdKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGVbbWV0aG9kXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSBmZXRjaEpzb24odGhpcy5jb25uZWN0aW9uLCBKU09OLnN0cmluZ2lmeShyZXF1ZXN0KSwgZ2V0UmVzdWx0KS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZW1pdChcImRlYnVnXCIsIHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IFwicmVzcG9uc2VcIixcbiAgICAgICAgICAgICAgICByZXF1ZXN0OiByZXF1ZXN0LFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlOiByZXN1bHQsXG4gICAgICAgICAgICAgICAgcHJvdmlkZXI6IHRoaXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJkZWJ1Z1wiLCB7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiBcInJlc3BvbnNlXCIsXG4gICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICAgICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgICAgICAgICAgcHJvdmlkZXI6IHRoaXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBDYWNoZSB0aGUgZmV0Y2gsIGJ1dCBjbGVhciBpdCBvbiB0aGUgbmV4dCBldmVudCBsb29wXG4gICAgICAgIGlmIChjYWNoZSkge1xuICAgICAgICAgICAgdGhpcy5fY2FjaGVbbWV0aG9kXSA9IHJlc3VsdDtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlW21ldGhvZF0gPSBudWxsO1xuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgcHJlcGFyZVJlcXVlc3QobWV0aG9kLCBwYXJhbXMpIHtcbiAgICAgICAgc3dpdGNoIChtZXRob2QpIHtcbiAgICAgICAgICAgIGNhc2UgXCJnZXRCbG9ja051bWJlclwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBbXCJldGhfYmxvY2tOdW1iZXJcIiwgW11dO1xuICAgICAgICAgICAgY2FzZSBcImdldEdhc1ByaWNlXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcImV0aF9nYXNQcmljZVwiLCBbXV07XG4gICAgICAgICAgICBjYXNlIFwiZ2V0QmFsYW5jZVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBbXCJldGhfZ2V0QmFsYW5jZVwiLCBbZ2V0TG93ZXJDYXNlKHBhcmFtcy5hZGRyZXNzKSwgcGFyYW1zLmJsb2NrVGFnXV07XG4gICAgICAgICAgICBjYXNlIFwiZ2V0VHJhbnNhY3Rpb25Db3VudFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBbXCJldGhfZ2V0VHJhbnNhY3Rpb25Db3VudFwiLCBbZ2V0TG93ZXJDYXNlKHBhcmFtcy5hZGRyZXNzKSwgcGFyYW1zLmJsb2NrVGFnXV07XG4gICAgICAgICAgICBjYXNlIFwiZ2V0Q29kZVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBbXCJldGhfZ2V0Q29kZVwiLCBbZ2V0TG93ZXJDYXNlKHBhcmFtcy5hZGRyZXNzKSwgcGFyYW1zLmJsb2NrVGFnXV07XG4gICAgICAgICAgICBjYXNlIFwiZ2V0U3RvcmFnZUF0XCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcImV0aF9nZXRTdG9yYWdlQXRcIiwgW2dldExvd2VyQ2FzZShwYXJhbXMuYWRkcmVzcyksIGhleFplcm9QYWQocGFyYW1zLnBvc2l0aW9uLCAzMiksIHBhcmFtcy5ibG9ja1RhZ11dO1xuICAgICAgICAgICAgY2FzZSBcInNlbmRUcmFuc2FjdGlvblwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBbXCJldGhfc2VuZFJhd1RyYW5zYWN0aW9uXCIsIFtwYXJhbXMuc2lnbmVkVHJhbnNhY3Rpb25dXTtcbiAgICAgICAgICAgIGNhc2UgXCJnZXRCbG9ja1wiOlxuICAgICAgICAgICAgICAgIGlmIChwYXJhbXMuYmxvY2tUYWcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcImV0aF9nZXRCbG9ja0J5TnVtYmVyXCIsIFtwYXJhbXMuYmxvY2tUYWcsICEhcGFyYW1zLmluY2x1ZGVUcmFuc2FjdGlvbnNdXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocGFyYW1zLmJsb2NrSGFzaCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW1wiZXRoX2dldEJsb2NrQnlIYXNoXCIsIFtwYXJhbXMuYmxvY2tIYXNoLCAhIXBhcmFtcy5pbmNsdWRlVHJhbnNhY3Rpb25zXV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgY2FzZSBcImdldFRyYW5zYWN0aW9uXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcImV0aF9nZXRUcmFuc2FjdGlvbkJ5SGFzaFwiLCBbcGFyYW1zLnRyYW5zYWN0aW9uSGFzaF1dO1xuICAgICAgICAgICAgY2FzZSBcImdldFRyYW5zYWN0aW9uUmVjZWlwdFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBbXCJldGhfZ2V0VHJhbnNhY3Rpb25SZWNlaXB0XCIsIFtwYXJhbXMudHJhbnNhY3Rpb25IYXNoXV07XG4gICAgICAgICAgICBjYXNlIFwiY2FsbFwiOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGV4bGlmeVRyYW5zYWN0aW9uID0gZ2V0U3RhdGljKHRoaXMuY29uc3RydWN0b3IsIFwiaGV4bGlmeVRyYW5zYWN0aW9uXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbXCJldGhfY2FsbFwiLCBbaGV4bGlmeVRyYW5zYWN0aW9uKHBhcmFtcy50cmFuc2FjdGlvbiwgeyBmcm9tOiB0cnVlIH0pLCBwYXJhbXMuYmxvY2tUYWddXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgXCJlc3RpbWF0ZUdhc1wiOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGV4bGlmeVRyYW5zYWN0aW9uID0gZ2V0U3RhdGljKHRoaXMuY29uc3RydWN0b3IsIFwiaGV4bGlmeVRyYW5zYWN0aW9uXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbXCJldGhfZXN0aW1hdGVHYXNcIiwgW2hleGxpZnlUcmFuc2FjdGlvbihwYXJhbXMudHJhbnNhY3Rpb24sIHsgZnJvbTogdHJ1ZSB9KV1dO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcImdldExvZ3NcIjpcbiAgICAgICAgICAgICAgICBpZiAocGFyYW1zLmZpbHRlciAmJiBwYXJhbXMuZmlsdGVyLmFkZHJlc3MgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBwYXJhbXMuZmlsdGVyLmFkZHJlc3MgPSBnZXRMb3dlckNhc2UocGFyYW1zLmZpbHRlci5hZGRyZXNzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcImV0aF9nZXRMb2dzXCIsIFtwYXJhbXMuZmlsdGVyXV07XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBwZXJmb3JtKG1ldGhvZCwgcGFyYW1zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAvLyBMZWdhY3kgbmV0d29ya3MgZG8gbm90IGxpa2UgdGhlIHR5cGUgZmllbGQgYmVpbmcgcGFzc2VkIGFsb25nICh3aGljaFxuICAgICAgICAgICAgLy8gaXMgZmFpciksIHNvIHdlIGRlbGV0ZSB0eXBlIGlmIGl0IGlzIDAgYW5kIGEgbm9uLUVJUC0xNTU5IG5ldHdvcmtcbiAgICAgICAgICAgIGlmIChtZXRob2QgPT09IFwiY2FsbFwiIHx8IG1ldGhvZCA9PT0gXCJlc3RpbWF0ZUdhc1wiKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdHggPSBwYXJhbXMudHJhbnNhY3Rpb247XG4gICAgICAgICAgICAgICAgaWYgKHR4ICYmIHR4LnR5cGUgIT0gbnVsbCAmJiBCaWdOdW1iZXIuZnJvbSh0eC50eXBlKS5pc1plcm8oKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSBhcmUgbm8gRUlQLTE1NTkgcHJvcGVydGllcywgaXQgbWlnaHQgYmUgbm9uLUVJUC0xNTU5XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eC5tYXhGZWVQZXJHYXMgPT0gbnVsbCAmJiB0eC5tYXhQcmlvcml0eUZlZVBlckdhcyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmZWVEYXRhID0geWllbGQgdGhpcy5nZXRGZWVEYXRhKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmVlRGF0YS5tYXhGZWVQZXJHYXMgPT0gbnVsbCAmJiBmZWVEYXRhLm1heFByaW9yaXR5RmVlUGVyR2FzID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOZXR3b3JrIGRvZXNuJ3Qga25vdyBhYm91dCBFSVAtMTU1OSAoYW5kIGhlbmNlIHR5cGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zID0gc2hhbGxvd0NvcHkocGFyYW1zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMudHJhbnNhY3Rpb24gPSBzaGFsbG93Q29weSh0eCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHBhcmFtcy50cmFuc2FjdGlvbi50eXBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYXJncyA9IHRoaXMucHJlcGFyZVJlcXVlc3QobWV0aG9kLCBwYXJhbXMpO1xuICAgICAgICAgICAgaWYgKGFyZ3MgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKG1ldGhvZCArIFwiIG5vdCBpbXBsZW1lbnRlZFwiLCBMb2dnZXIuZXJyb3JzLk5PVF9JTVBMRU1FTlRFRCwgeyBvcGVyYXRpb246IG1ldGhvZCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkIHRoaXMuc2VuZChhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBjaGVja0Vycm9yKG1ldGhvZCwgZXJyb3IsIHBhcmFtcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfc3RhcnRFdmVudChldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQudGFnID09PSBcInBlbmRpbmdcIikge1xuICAgICAgICAgICAgdGhpcy5fc3RhcnRQZW5kaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIuX3N0YXJ0RXZlbnQoZXZlbnQpO1xuICAgIH1cbiAgICBfc3RhcnRQZW5kaW5nKCkge1xuICAgICAgICBpZiAodGhpcy5fcGVuZGluZ0ZpbHRlciAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHBlbmRpbmdGaWx0ZXIgPSB0aGlzLnNlbmQoXCJldGhfbmV3UGVuZGluZ1RyYW5zYWN0aW9uRmlsdGVyXCIsIFtdKTtcbiAgICAgICAgdGhpcy5fcGVuZGluZ0ZpbHRlciA9IHBlbmRpbmdGaWx0ZXI7XG4gICAgICAgIHBlbmRpbmdGaWx0ZXIudGhlbihmdW5jdGlvbiAoZmlsdGVySWQpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBvbGwoKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5zZW5kKFwiZXRoX2dldEZpbHRlckNoYW5nZXNcIiwgW2ZpbHRlcklkXSkudGhlbihmdW5jdGlvbiAoaGFzaGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLl9wZW5kaW5nRmlsdGVyICE9IHBlbmRpbmdGaWx0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxldCBzZXEgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgaGFzaGVzLmZvckVhY2goZnVuY3Rpb24gKGhhc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEBUT0RPOiBUaGlzIHNob3VsZCBiZSBnYXJiYWdlIGNvbGxlY3RlZCBhdCBzb21lIHBvaW50Li4uIEhvdz8gV2hlbj9cbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2VtaXR0ZWRbXCJ0OlwiICsgaGFzaC50b0xvd2VyQ2FzZSgpXSA9IFwicGVuZGluZ1wiO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VxID0gc2VxLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLmdldFRyYW5zYWN0aW9uKGhhc2gpLnRoZW4oZnVuY3Rpb24gKHR4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZW1pdChcInBlbmRpbmdcIiwgdHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlcS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aW1lcigxMDAwKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLl9wZW5kaW5nRmlsdGVyICE9IHBlbmRpbmdGaWx0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2VuZChcImV0aF91bmluc3RhbGxGaWx0ZXJcIiwgW2ZpbHRlcklkXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHBvbGwoKTsgfSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH0pLmNhdGNoKChlcnJvcikgPT4geyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBvbGwoKTtcbiAgICAgICAgICAgIHJldHVybiBmaWx0ZXJJZDtcbiAgICAgICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7IH0pO1xuICAgIH1cbiAgICBfc3RvcEV2ZW50KGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC50YWcgPT09IFwicGVuZGluZ1wiICYmIHRoaXMubGlzdGVuZXJDb3VudChcInBlbmRpbmdcIikgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuX3BlbmRpbmdGaWx0ZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyLl9zdG9wRXZlbnQoZXZlbnQpO1xuICAgIH1cbiAgICAvLyBDb252ZXJ0IGFuIGV0aGVycy5qcyB0cmFuc2FjdGlvbiBpbnRvIGEgSlNPTi1SUEMgdHJhbnNhY3Rpb25cbiAgICAvLyAgLSBnYXNMaW1pdCA9PiBnYXNcbiAgICAvLyAgLSBBbGwgdmFsdWVzIGhleGxpZmllZFxuICAgIC8vICAtIEFsbCBudW1lcmljIHZhbHVlcyB6ZXJvLXN0cmlwZWRcbiAgICAvLyAgLSBBbGwgYWRkcmVzc2VzIGFyZSBsb3dlcmNhc2VkXG4gICAgLy8gTk9URTogVGhpcyBhbGxvd3MgYSBUcmFuc2FjdGlvblJlcXVlc3QsIGJ1dCBhbGwgdmFsdWVzIHNob3VsZCBiZSByZXNvbHZlZFxuICAgIC8vICAgICAgIGJlZm9yZSB0aGlzIGlzIGNhbGxlZFxuICAgIC8vIEBUT0RPOiBUaGlzIHdpbGwgbGlrZWx5IGJlIHJlbW92ZWQgaW4gZnV0dXJlIHZlcnNpb25zIGFuZCBwcmVwYXJlUmVxdWVzdFxuICAgIC8vICAgICAgICB3aWxsIGJlIHRoZSBwcmVmZXJyZWQgbWV0aG9kIGZvciB0aGlzLlxuICAgIHN0YXRpYyBoZXhsaWZ5VHJhbnNhY3Rpb24odHJhbnNhY3Rpb24sIGFsbG93RXh0cmEpIHtcbiAgICAgICAgLy8gQ2hlY2sgb25seSBhbGxvd2VkIHByb3BlcnRpZXMgYXJlIGdpdmVuXG4gICAgICAgIGNvbnN0IGFsbG93ZWQgPSBzaGFsbG93Q29weShhbGxvd2VkVHJhbnNhY3Rpb25LZXlzKTtcbiAgICAgICAgaWYgKGFsbG93RXh0cmEpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGFsbG93RXh0cmEpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWxsb3dFeHRyYVtrZXldKSB7XG4gICAgICAgICAgICAgICAgICAgIGFsbG93ZWRba2V5XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNoZWNrUHJvcGVydGllcyh0cmFuc2FjdGlvbiwgYWxsb3dlZCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgICAgICAvLyBKU09OLVJQQyBub3cgcmVxdWlyZXMgbnVtZXJpYyB2YWx1ZXMgdG8gYmUgXCJxdWFudGl0eVwiIHZhbHVlc1xuICAgICAgICBbXCJjaGFpbklkXCIsIFwiZ2FzTGltaXRcIiwgXCJnYXNQcmljZVwiLCBcInR5cGVcIiwgXCJtYXhGZWVQZXJHYXNcIiwgXCJtYXhQcmlvcml0eUZlZVBlckdhc1wiLCBcIm5vbmNlXCIsIFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBpZiAodHJhbnNhY3Rpb25ba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBoZXhWYWx1ZShCaWdOdW1iZXIuZnJvbSh0cmFuc2FjdGlvbltrZXldKSk7XG4gICAgICAgICAgICBpZiAoa2V5ID09PSBcImdhc0xpbWl0XCIpIHtcbiAgICAgICAgICAgICAgICBrZXkgPSBcImdhc1wiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIFtcImZyb21cIiwgXCJ0b1wiLCBcImRhdGFcIl0uZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBpZiAodHJhbnNhY3Rpb25ba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0W2tleV0gPSBoZXhsaWZ5KHRyYW5zYWN0aW9uW2tleV0pO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHRyYW5zYWN0aW9uLmFjY2Vzc0xpc3QpIHtcbiAgICAgICAgICAgIHJlc3VsdFtcImFjY2Vzc0xpc3RcIl0gPSBhY2Nlc3NMaXN0aWZ5KHRyYW5zYWN0aW9uLmFjY2Vzc0xpc3QpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9anNvbi1ycGMtcHJvdmlkZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQgeyBkZWVwQ29weSwgZGVmaW5lUmVhZE9ubHkgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvcHJvcGVydGllc1wiO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2xvZ2dlclwiO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuL192ZXJzaW9uXCI7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKHZlcnNpb24pO1xuaW1wb3J0IHsgSnNvblJwY1Byb3ZpZGVyIH0gZnJvbSBcIi4vanNvbi1ycGMtcHJvdmlkZXJcIjtcbmxldCBfbmV4dElkID0gMTtcbmZ1bmN0aW9uIGJ1aWxkV2ViM0xlZ2FjeUZldGNoZXIocHJvdmlkZXIsIHNlbmRGdW5jKSB7XG4gICAgY29uc3QgZmV0Y2hlciA9IFwiV2ViM0xlZ2FjeUZldGNoZXJcIjtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG1ldGhvZCwgcGFyYW1zKSB7XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSB7XG4gICAgICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgICAgICAgICAgaWQ6IChfbmV4dElkKyspLFxuICAgICAgICAgICAganNvbnJwYzogXCIyLjBcIlxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5lbWl0KFwiZGVidWdcIiwge1xuICAgICAgICAgICAgICAgIGFjdGlvbjogXCJyZXF1ZXN0XCIsXG4gICAgICAgICAgICAgICAgZmV0Y2hlcixcbiAgICAgICAgICAgICAgICByZXF1ZXN0OiBkZWVwQ29weShyZXF1ZXN0KSxcbiAgICAgICAgICAgICAgICBwcm92aWRlcjogdGhpc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzZW5kRnVuYyhyZXF1ZXN0LCAoZXJyb3IsIHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImRlYnVnXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogXCJyZXNwb25zZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmV0Y2hlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyOiB0aGlzXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiZGVidWdcIiwge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwicmVzcG9uc2VcIixcbiAgICAgICAgICAgICAgICAgICAgZmV0Y2hlcixcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyOiB0aGlzXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKHJlc3BvbnNlLmVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICBlcnJvci5jb2RlID0gcmVzcG9uc2UuZXJyb3IuY29kZTtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IuZGF0YSA9IHJlc3BvbnNlLmVycm9yLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlLnJlc3VsdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGJ1aWxkRWlwMTE5M0ZldGNoZXIocHJvdmlkZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG1ldGhvZCwgcGFyYW1zKSB7XG4gICAgICAgIGlmIChwYXJhbXMgPT0gbnVsbCkge1xuICAgICAgICAgICAgcGFyYW1zID0gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHsgbWV0aG9kLCBwYXJhbXMgfTtcbiAgICAgICAgdGhpcy5lbWl0KFwiZGVidWdcIiwge1xuICAgICAgICAgICAgYWN0aW9uOiBcInJlcXVlc3RcIixcbiAgICAgICAgICAgIGZldGNoZXI6IFwiRWlwMTE5M0ZldGNoZXJcIixcbiAgICAgICAgICAgIHJlcXVlc3Q6IGRlZXBDb3B5KHJlcXVlc3QpLFxuICAgICAgICAgICAgcHJvdmlkZXI6IHRoaXNcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwcm92aWRlci5yZXF1ZXN0KHJlcXVlc3QpLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJkZWJ1Z1wiLCB7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiBcInJlc3BvbnNlXCIsXG4gICAgICAgICAgICAgICAgZmV0Y2hlcjogXCJFaXAxMTkzRmV0Y2hlclwiLFxuICAgICAgICAgICAgICAgIHJlcXVlc3QsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgICAgICAgICAgcHJvdmlkZXI6IHRoaXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZW1pdChcImRlYnVnXCIsIHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IFwicmVzcG9uc2VcIixcbiAgICAgICAgICAgICAgICBmZXRjaGVyOiBcIkVpcDExOTNGZXRjaGVyXCIsXG4gICAgICAgICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgICAgICBwcm92aWRlcjogdGhpc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfSk7XG4gICAgfTtcbn1cbmV4cG9ydCBjbGFzcyBXZWIzUHJvdmlkZXIgZXh0ZW5kcyBKc29uUnBjUHJvdmlkZXIge1xuICAgIGNvbnN0cnVjdG9yKHByb3ZpZGVyLCBuZXR3b3JrKSB7XG4gICAgICAgIGlmIChwcm92aWRlciA9PSBudWxsKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwibWlzc2luZyBwcm92aWRlclwiLCBcInByb3ZpZGVyXCIsIHByb3ZpZGVyKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcGF0aCA9IG51bGw7XG4gICAgICAgIGxldCBqc29uUnBjRmV0Y2hGdW5jID0gbnVsbDtcbiAgICAgICAgbGV0IHN1YnByb3ZpZGVyID0gbnVsbDtcbiAgICAgICAgaWYgKHR5cGVvZiAocHJvdmlkZXIpID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHBhdGggPSBcInVua25vd246XCI7XG4gICAgICAgICAgICBqc29uUnBjRmV0Y2hGdW5jID0gcHJvdmlkZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwYXRoID0gcHJvdmlkZXIuaG9zdCB8fCBwcm92aWRlci5wYXRoIHx8IFwiXCI7XG4gICAgICAgICAgICBpZiAoIXBhdGggJiYgcHJvdmlkZXIuaXNNZXRhTWFzaykge1xuICAgICAgICAgICAgICAgIHBhdGggPSBcIm1ldGFtYXNrXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdWJwcm92aWRlciA9IHByb3ZpZGVyO1xuICAgICAgICAgICAgaWYgKHByb3ZpZGVyLnJlcXVlc3QpIHtcbiAgICAgICAgICAgICAgICBpZiAocGF0aCA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICBwYXRoID0gXCJlaXAtMTE5MzpcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAganNvblJwY0ZldGNoRnVuYyA9IGJ1aWxkRWlwMTE5M0ZldGNoZXIocHJvdmlkZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocHJvdmlkZXIuc2VuZEFzeW5jKSB7XG4gICAgICAgICAgICAgICAganNvblJwY0ZldGNoRnVuYyA9IGJ1aWxkV2ViM0xlZ2FjeUZldGNoZXIocHJvdmlkZXIsIHByb3ZpZGVyLnNlbmRBc3luYy5iaW5kKHByb3ZpZGVyKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwcm92aWRlci5zZW5kKSB7XG4gICAgICAgICAgICAgICAganNvblJwY0ZldGNoRnVuYyA9IGJ1aWxkV2ViM0xlZ2FjeUZldGNoZXIocHJvdmlkZXIsIHByb3ZpZGVyLnNlbmQuYmluZChwcm92aWRlcikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInVuc3VwcG9ydGVkIHByb3ZpZGVyXCIsIFwicHJvdmlkZXJcIiwgcHJvdmlkZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFwYXRoKSB7XG4gICAgICAgICAgICAgICAgcGF0aCA9IFwidW5rbm93bjpcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdXBlcihwYXRoLCBuZXR3b3JrKTtcbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJqc29uUnBjRmV0Y2hGdW5jXCIsIGpzb25ScGNGZXRjaEZ1bmMpO1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcInByb3ZpZGVyXCIsIHN1YnByb3ZpZGVyKTtcbiAgICB9XG4gICAgc2VuZChtZXRob2QsIHBhcmFtcykge1xuICAgICAgICByZXR1cm4gdGhpcy5qc29uUnBjRmV0Y2hGdW5jKG1ldGhvZCwgcGFyYW1zKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD13ZWIzLXByb3ZpZGVyLmpzLm1hcCIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0iLCJpbXBvcnQgb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiLi9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7XG4gIHZhciBrZXksIGk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldO1xuICAgICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiaW1wb3J0IGRlZmluZVByb3BlcnR5IGZyb20gXCIuL2RlZmluZVByb3BlcnR5LmpzXCI7XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcbiAgICBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICAgIH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuICAgIGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7XG4gICAgd3JpdGFibGU6IGZhbHNlXG4gIH0pO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufSIsImltcG9ydCBzZXRQcm90b3R5cGVPZiBmcm9tIFwiLi9zZXRQcm90b3R5cGVPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3ViQ2xhc3MsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gIH0gOiBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgfSwgX3R5cGVvZihvYmopO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59IiwiaW1wb3J0IF90eXBlb2YgZnJvbSBcIi4vdHlwZW9mLmpzXCI7XG5pbXBvcnQgYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCIuL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgIHJldHVybiBjYWxsO1xuICB9IGVsc2UgaWYgKGNhbGwgIT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtcbiAgfVxuXG4gIHJldHVybiBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7XG59IiwiaW1wb3J0IGdldFByb3RvdHlwZU9mIGZyb20gXCIuL2dldFByb3RvdHlwZU9mLmpzXCI7XG5pbXBvcnQgaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IGZyb20gXCIuL2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdC5qc1wiO1xuaW1wb3J0IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSBcIi4vcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHtcbiAgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkge1xuICAgIHZhciBTdXBlciA9IGdldFByb3RvdHlwZU9mKERlcml2ZWQpLFxuICAgICAgICByZXN1bHQ7XG5cbiAgICBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkge1xuICAgICAgdmFyIE5ld1RhcmdldCA9IGdldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yO1xuICAgICAgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpO1xuICB9O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTtcbiAgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTtcbiAgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTtcblxuICB0cnkge1xuICAgIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufSIsImltcG9ydCBfdHlwZW9mIGZyb20gXCIuL3R5cGVvZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3JlZ2VuZXJhdG9yUnVudGltZSgpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIC8qISByZWdlbmVyYXRvci1ydW50aW1lIC0tIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLiAtLSBsaWNlbnNlIChNSVQpOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvYmxvYi9tYWluL0xJQ0VOU0UgKi9cblxuICBfcmVnZW5lcmF0b3JSdW50aW1lID0gZnVuY3Rpb24gX3JlZ2VuZXJhdG9yUnVudGltZSgpIHtcbiAgICByZXR1cm4gZXhwb3J0cztcbiAgfTtcblxuICB2YXIgZXhwb3J0cyA9IHt9LFxuICAgICAgT3AgPSBPYmplY3QucHJvdG90eXBlLFxuICAgICAgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHksXG4gICAgICAkU3ltYm9sID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgPyBTeW1ib2wgOiB7fSxcbiAgICAgIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIixcbiAgICAgIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIixcbiAgICAgIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiBkZWZpbmUob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogITAsXG4gICAgICBjb25maWd1cmFibGU6ICEwLFxuICAgICAgd3JpdGFibGU6ICEwXG4gICAgfSksIG9ialtrZXldO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBkZWZpbmUoe30sIFwiXCIpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZWZpbmUgPSBmdW5jdGlvbiBkZWZpbmUob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yLFxuICAgICAgICBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSksXG4gICAgICAgIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG4gICAgcmV0dXJuIGdlbmVyYXRvci5faW52b2tlID0gZnVuY3Rpb24gKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICAgIHZhciBzdGF0ZSA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtcbiAgICAgICAgaWYgKFwiZXhlY3V0aW5nXCIgPT09IHN0YXRlKSB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuXG4gICAgICAgIGlmIChcImNvbXBsZXRlZFwiID09PSBzdGF0ZSkge1xuICAgICAgICAgIGlmIChcInRocm93XCIgPT09IG1ldGhvZCkgdGhyb3cgYXJnO1xuICAgICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGNvbnRleHQubWV0aG9kID0gbWV0aG9kLCBjb250ZXh0LmFyZyA9IGFyZzs7KSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcblxuICAgICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKFwibmV4dFwiID09PSBjb250ZXh0Lm1ldGhvZCkgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO2Vsc2UgaWYgKFwidGhyb3dcIiA9PT0gY29udGV4dC5tZXRob2QpIHtcbiAgICAgICAgICAgIGlmIChcInN1c3BlbmRlZFN0YXJ0XCIgPT09IHN0YXRlKSB0aHJvdyBzdGF0ZSA9IFwiY29tcGxldGVkXCIsIGNvbnRleHQuYXJnO1xuICAgICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG4gICAgICAgICAgfSBlbHNlIFwicmV0dXJuXCIgPT09IGNvbnRleHQubWV0aG9kICYmIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgICBzdGF0ZSA9IFwiZXhlY3V0aW5nXCI7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKFwibm9ybWFsXCIgPT09IHJlY29yZC50eXBlKSB7XG4gICAgICAgICAgICBpZiAoc3RhdGUgPSBjb250ZXh0LmRvbmUgPyBcImNvbXBsZXRlZFwiIDogXCJzdXNwZW5kZWRZaWVsZFwiLCByZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgXCJ0aHJvd1wiID09PSByZWNvcmQudHlwZSAmJiAoc3RhdGUgPSBcImNvbXBsZXRlZFwiLCBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIiwgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KGlubmVyRm4sIHNlbGYsIGNvbnRleHQpLCBnZW5lcmF0b3I7XG4gIH1cblxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJub3JtYWxcIixcbiAgICAgICAgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwidGhyb3dcIixcbiAgICAgICAgYXJnOiBlcnJcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0cy53cmFwID0gd3JhcDtcbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cblxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIGRlZmluZShJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZixcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJiBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiYgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSAmJiAoSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSk7XG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9IEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcblxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xuICAgICAgZGVmaW5lKHByb3RvdHlwZSwgbWV0aG9kLCBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvciwgUHJvbWlzZUltcGwpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG5cbiAgICAgIGlmIChcInRocm93XCIgIT09IHJlY29yZC50eXBlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnLFxuICAgICAgICAgICAgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIHJldHVybiB2YWx1ZSAmJiBcIm9iamVjdFwiID09IF90eXBlb2YodmFsdWUpICYmIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikgPyBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSkgOiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uICh1bndyYXBwZWQpIHtcbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQsIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICB0aGlzLl9pbnZva2UgPSBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VJbXBsKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID0gcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuXG4gICAgaWYgKHVuZGVmaW5lZCA9PT0gbWV0aG9kKSB7XG4gICAgICBpZiAoY29udGV4dC5kZWxlZ2F0ZSA9IG51bGwsIFwidGhyb3dcIiA9PT0gY29udGV4dC5tZXRob2QpIHtcbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdICYmIChjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCIsIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkLCBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSwgXCJ0aHJvd1wiID09PSBjb250ZXh0Lm1ldGhvZCkpIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIiwgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcbiAgICBpZiAoXCJ0aHJvd1wiID09PSByZWNvcmQudHlwZSkgcmV0dXJuIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiLCBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmcsIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsLCBDb250aW51ZVNlbnRpbmVsO1xuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcbiAgICByZXR1cm4gaW5mbyA/IGluZm8uZG9uZSA/IChjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZSwgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYywgXCJyZXR1cm5cIiAhPT0gY29udGV4dC5tZXRob2QgJiYgKGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCIsIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkKSwgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGwsIENvbnRpbnVlU2VudGluZWwpIDogaW5mbyA6IChjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIiwgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIiksIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsLCBDb250aW51ZVNlbnRpbmVsKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0ge1xuICAgICAgdHJ5TG9jOiBsb2NzWzBdXG4gICAgfTtcbiAgICAxIGluIGxvY3MgJiYgKGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXSksIDIgaW4gbG9jcyAmJiAoZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl0sIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXSksIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCIsIGRlbGV0ZSByZWNvcmQuYXJnLCBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7XG4gICAgICB0cnlMb2M6IFwicm9vdFwiXG4gICAgfV0sIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKSwgdGhpcy5yZXNldCghMCk7XG4gIH1cblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgaXRlcmFibGUubmV4dCkgcmV0dXJuIGl0ZXJhYmxlO1xuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSxcbiAgICAgICAgICAgIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIGZvciAoOyArK2kgPCBpdGVyYWJsZS5sZW5ndGg7KSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSByZXR1cm4gbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldLCBuZXh0LmRvbmUgPSAhMSwgbmV4dDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gbmV4dC52YWx1ZSA9IHVuZGVmaW5lZCwgbmV4dC5kb25lID0gITAsIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5leHQ6IGRvbmVSZXN1bHRcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgIGRvbmU6ICEwXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgZGVmaW5lKEdwLCBcImNvbnN0cnVjdG9yXCIsIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKSwgZGVmaW5lKEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBcImNvbnN0cnVjdG9yXCIsIEdlbmVyYXRvckZ1bmN0aW9uKSwgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkZWZpbmUoR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIpLCBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbiAoZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGdlbkZ1biAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuICEhY3RvciAmJiAoY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHwgXCJHZW5lcmF0b3JGdW5jdGlvblwiID09PSAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpKTtcbiAgfSwgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24gKGdlbkZ1bikge1xuICAgIHJldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSkgOiAoZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBkZWZpbmUoZ2VuRnVuLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKSksIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKSwgZ2VuRnVuO1xuICB9LCBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24gKGFyZykge1xuICAgIHJldHVybiB7XG4gICAgICBfX2F3YWl0OiBhcmdcbiAgICB9O1xuICB9LCBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpLCBkZWZpbmUoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUsIGFzeW5jSXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSksIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3IsIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbiAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QsIFByb21pc2VJbXBsKSB7XG4gICAgdm9pZCAwID09PSBQcm9taXNlSW1wbCAmJiAoUHJvbWlzZUltcGwgPSBQcm9taXNlKTtcbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLCBQcm9taXNlSW1wbCk7XG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKSA/IGl0ZXIgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgIH0pO1xuICB9LCBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApLCBkZWZpbmUoR3AsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvclwiKSwgZGVmaW5lKEdwLCBpdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KSwgZGVmaW5lKEdwLCBcInRvU3RyaW5nXCIsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfSksIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuXG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGtleXMucmV2ZXJzZSgpLCBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgZm9yICg7IGtleXMubGVuZ3RoOykge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHJldHVybiBuZXh0LnZhbHVlID0ga2V5LCBuZXh0LmRvbmUgPSAhMSwgbmV4dDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5leHQuZG9uZSA9ICEwLCBuZXh0O1xuICAgIH07XG4gIH0sIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzLCBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcbiAgICByZXNldDogZnVuY3Rpb24gcmVzZXQoc2tpcFRlbXBSZXNldCkge1xuICAgICAgaWYgKHRoaXMucHJldiA9IDAsIHRoaXMubmV4dCA9IDAsIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQsIHRoaXMuZG9uZSA9ICExLCB0aGlzLmRlbGVnYXRlID0gbnVsbCwgdGhpcy5tZXRob2QgPSBcIm5leHRcIiwgdGhpcy5hcmcgPSB1bmRlZmluZWQsIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpLCAhc2tpcFRlbXBSZXNldCkgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgIFwidFwiID09PSBuYW1lLmNoYXJBdCgwKSAmJiBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJiAhaXNOYU4oK25hbWUuc2xpY2UoMSkpICYmICh0aGlzW25hbWVdID0gdW5kZWZpbmVkKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHN0b3A6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICB0aGlzLmRvbmUgPSAhMDtcbiAgICAgIHZhciByb290UmVjb3JkID0gdGhpcy50cnlFbnRyaWVzWzBdLmNvbXBsZXRpb247XG4gICAgICBpZiAoXCJ0aHJvd1wiID09PSByb290UmVjb3JkLnR5cGUpIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbiBkaXNwYXRjaEV4Y2VwdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcblxuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJldHVybiByZWNvcmQudHlwZSA9IFwidGhyb3dcIiwgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbiwgY29udGV4dC5uZXh0ID0gbG9jLCBjYXVnaHQgJiYgKGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCIsIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkKSwgISFjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldLFxuICAgICAgICAgICAgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgaWYgKFwicm9vdFwiID09PSBlbnRyeS50cnlMb2MpIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKSxcbiAgICAgICAgICAgICAgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCAhMCk7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsICEwKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNGaW5hbGx5KSB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgYWJydXB0OiBmdW5jdGlvbiBhYnJ1cHQodHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJiBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZmluYWxseUVudHJ5ICYmIChcImJyZWFrXCIgPT09IHR5cGUgfHwgXCJjb250aW51ZVwiID09PSB0eXBlKSAmJiBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJiBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MgJiYgKGZpbmFsbHlFbnRyeSA9IG51bGwpO1xuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZXR1cm4gcmVjb3JkLnR5cGUgPSB0eXBlLCByZWNvcmQuYXJnID0gYXJnLCBmaW5hbGx5RW50cnkgPyAodGhpcy5tZXRob2QgPSBcIm5leHRcIiwgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MsIENvbnRpbnVlU2VudGluZWwpIDogdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChcInRocm93XCIgPT09IHJlY29yZC50eXBlKSB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgcmV0dXJuIFwiYnJlYWtcIiA9PT0gcmVjb3JkLnR5cGUgfHwgXCJjb250aW51ZVwiID09PSByZWNvcmQudHlwZSA/IHRoaXMubmV4dCA9IHJlY29yZC5hcmcgOiBcInJldHVyblwiID09PSByZWNvcmQudHlwZSA/ICh0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmcsIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIiwgdGhpcy5uZXh0ID0gXCJlbmRcIikgOiBcIm5vcm1hbFwiID09PSByZWNvcmQudHlwZSAmJiBhZnRlckxvYyAmJiAodGhpcy5uZXh0ID0gYWZ0ZXJMb2MpLCBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG4gICAgZmluaXNoOiBmdW5jdGlvbiBmaW5pc2goZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSByZXR1cm4gdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyksIHJlc2V0VHJ5RW50cnkoZW50cnkpLCBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuICAgIH0sXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbiBfY2F0Y2godHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICAgIGlmIChcInRocm93XCIgPT09IHJlY29yZC50eXBlKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24gZGVsZWdhdGVZaWVsZChpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgcmV0dXJuIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9LCBcIm5leHRcIiA9PT0gdGhpcy5tZXRob2QgJiYgKHRoaXMuYXJnID0gdW5kZWZpbmVkKSwgQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH0sIGV4cG9ydHM7XG59IiwiZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykge1xuICB0cnkge1xuICAgIHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTtcbiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJlamVjdChlcnJvcik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGluZm8uZG9uZSkge1xuICAgIHJlc29sdmUodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXG4gICAgICBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwibmV4dFwiLCB2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIF90aHJvdyhlcnIpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcInRocm93XCIsIGVycik7XG4gICAgICB9XG5cbiAgICAgIF9uZXh0KHVuZGVmaW5lZCk7XG4gICAgfSk7XG4gIH07XG59IiwiaW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3JlZ2VuZXJhdG9yUnVudGltZVwiO1xuaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yXCI7XG5pbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJzsgLy8gTGV0IGNvbXBpbGVyIG5vdCB0byBzZWFyY2ggbW9kdWxlIHVzYWdlXG5cbnZhciBmdWxsQ2xvbmUgPSBfb2JqZWN0U3ByZWFkKHt9LCBSZWFjdERPTSk7XG5cbnZhciB2ZXJzaW9uID0gZnVsbENsb25lLnZlcnNpb24sXG4gICAgcmVhY3RSZW5kZXIgPSBmdWxsQ2xvbmUucmVuZGVyLFxuICAgIHVubW91bnRDb21wb25lbnRBdE5vZGUgPSBmdWxsQ2xvbmUudW5tb3VudENvbXBvbmVudEF0Tm9kZTtcbnZhciBjcmVhdGVSb290O1xuXG50cnkge1xuICB2YXIgbWFpblZlcnNpb24gPSBOdW1iZXIoKHZlcnNpb24gfHwgJycpLnNwbGl0KCcuJylbMF0pO1xuXG4gIGlmIChtYWluVmVyc2lvbiA+PSAxOCkge1xuICAgIGNyZWF0ZVJvb3QgPSBmdWxsQ2xvbmUuY3JlYXRlUm9vdDtcbiAgfVxufSBjYXRjaCAoZSkgey8vIERvIG5vdGhpbmc7XG59XG5cbmZ1bmN0aW9uIHRvZ2dsZVdhcm5pbmcoc2tpcCkge1xuICB2YXIgX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQgPSBmdWxsQ2xvbmUuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ7XG5cbiAgaWYgKF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEICYmIF90eXBlb2YoX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQpID09PSAnb2JqZWN0Jykge1xuICAgIF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IHNraXA7XG4gIH1cbn1cblxudmFyIE1BUksgPSAnX19yY19yZWFjdF9yb290X18nO1xuXG5mdW5jdGlvbiBtb2Rlcm5SZW5kZXIobm9kZSwgY29udGFpbmVyKSB7XG4gIHRvZ2dsZVdhcm5pbmcodHJ1ZSk7XG4gIHZhciByb290ID0gY29udGFpbmVyW01BUktdIHx8IGNyZWF0ZVJvb3QoY29udGFpbmVyKTtcbiAgdG9nZ2xlV2FybmluZyhmYWxzZSk7XG4gIHJvb3QucmVuZGVyKG5vZGUpO1xuICBjb250YWluZXJbTUFSS10gPSByb290O1xufVxuXG5mdW5jdGlvbiBsZWdhY3lSZW5kZXIobm9kZSwgY29udGFpbmVyKSB7XG4gIHJlYWN0UmVuZGVyKG5vZGUsIGNvbnRhaW5lcik7XG59XG4vKiogQHByaXZhdGUgVGVzdCB1c2FnZS4gTm90IHdvcmsgaW4gcHJvZCAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBfcihub2RlLCBjb250YWluZXIpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gbGVnYWN5UmVuZGVyKG5vZGUsIGNvbnRhaW5lcik7XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXIobm9kZSwgY29udGFpbmVyKSB7XG4gIGlmIChjcmVhdGVSb290KSB7XG4gICAgbW9kZXJuUmVuZGVyKG5vZGUsIGNvbnRhaW5lcik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGVnYWN5UmVuZGVyKG5vZGUsIGNvbnRhaW5lcik7XG59IC8vID09PT09PT09PT09PT09PT09PT09PT09PT0gVW5tb3VudCA9PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5mdW5jdGlvbiBtb2Rlcm5Vbm1vdW50KF94KSB7XG4gIHJldHVybiBfbW9kZXJuVW5tb3VudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfbW9kZXJuVW5tb3VudCgpIHtcbiAgX21vZGVyblVubW91bnQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoY29udGFpbmVyKSB7XG4gICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7XG4gICAgICB3aGlsZSAoMSkge1xuICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7XG4gICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdChcInJldHVyblwiLCBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdmFyIF9jb250YWluZXIkTUFSSztcblxuICAgICAgICAgICAgICAoX2NvbnRhaW5lciRNQVJLID0gY29udGFpbmVyW01BUktdKSA9PT0gbnVsbCB8fCBfY29udGFpbmVyJE1BUksgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jb250YWluZXIkTUFSSy51bm1vdW50KCk7XG4gICAgICAgICAgICAgIGRlbGV0ZSBjb250YWluZXJbTUFSS107XG4gICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIF9jYWxsZWUpO1xuICB9KSk7XG4gIHJldHVybiBfbW9kZXJuVW5tb3VudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBsZWdhY3lVbm1vdW50KGNvbnRhaW5lcikge1xuICB1bm1vdW50Q29tcG9uZW50QXROb2RlKGNvbnRhaW5lcik7XG59XG4vKiogQHByaXZhdGUgVGVzdCB1c2FnZS4gTm90IHdvcmsgaW4gcHJvZCAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBfdShjb250YWluZXIpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gbGVnYWN5VW5tb3VudChjb250YWluZXIpO1xuICB9XG59XG5leHBvcnQgZnVuY3Rpb24gdW5tb3VudChfeDIpIHtcbiAgcmV0dXJuIF91bm1vdW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF91bm1vdW50KCkge1xuICBfdW5tb3VudCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoY29udGFpbmVyKSB7XG4gICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHtcbiAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGlmICghKGNyZWF0ZVJvb3QgIT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoXCJyZXR1cm5cIiwgbW9kZXJuVW5tb3VudChjb250YWluZXIpKTtcblxuICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGxlZ2FjeVVubW91bnQoY29udGFpbmVyKTtcblxuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIF9jYWxsZWUyKTtcbiAgfSkpO1xuICByZXR1cm4gX3VubW91bnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYXJyMltpXSA9IGFycltpXTtcbiAgfVxuXG4gIHJldHVybiBhcnIyO1xufSIsImltcG9ydCBhcnJheUxpa2VUb0FycmF5IGZyb20gXCIuL2FycmF5TGlrZVRvQXJyYXkuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn0iLCJpbXBvcnQgYXJyYXlXaXRoSG9sZXMgZnJvbSBcIi4vYXJyYXlXaXRoSG9sZXMuanNcIjtcbmltcG9ydCBpdGVyYWJsZVRvQXJyYXlMaW1pdCBmcm9tIFwiLi9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qc1wiO1xuaW1wb3J0IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IGZyb20gXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzXCI7XG5pbXBvcnQgbm9uSXRlcmFibGVSZXN0IGZyb20gXCIuL25vbkl0ZXJhYmxlUmVzdC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7XG4gIHJldHVybiBhcnJheVdpdGhIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBub25JdGVyYWJsZVJlc3QoKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7XG4gIHZhciBfaSA9IGFyciA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1wiQEBpdGVyYXRvclwiXTtcblxuICBpZiAoX2kgPT0gbnVsbCkgcmV0dXJuO1xuICB2YXIgX2FyciA9IFtdO1xuICB2YXIgX24gPSB0cnVlO1xuICB2YXIgX2QgPSBmYWxzZTtcblxuICB2YXIgX3MsIF9lO1xuXG4gIHRyeSB7XG4gICAgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2QgPSB0cnVlO1xuICAgIF9lID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9hcnI7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2FuVXNlRG9tKCkge1xuICByZXR1cm4gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbn0iLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgY2FuVXNlRE9NIGZyb20gXCJyYy11dGlsL2VzL0RvbS9jYW5Vc2VEb21cIjsgLy8gPT09PT09PT09PT09PT09PT0gVHJhbnNpdGlvbiA9PT09PT09PT09PT09PT09PVxuLy8gRXZlbnQgd3JhcHBlci4gQ29weSBmcm9tIHJlYWN0IHNvdXJjZSBjb2RlXG5cbmZ1bmN0aW9uIG1ha2VQcmVmaXhNYXAoc3R5bGVQcm9wLCBldmVudE5hbWUpIHtcbiAgdmFyIHByZWZpeGVzID0ge307XG4gIHByZWZpeGVzW3N0eWxlUHJvcC50b0xvd2VyQ2FzZSgpXSA9IGV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpO1xuICBwcmVmaXhlc1tcIldlYmtpdFwiLmNvbmNhdChzdHlsZVByb3ApXSA9IFwid2Via2l0XCIuY29uY2F0KGV2ZW50TmFtZSk7XG4gIHByZWZpeGVzW1wiTW96XCIuY29uY2F0KHN0eWxlUHJvcCldID0gXCJtb3pcIi5jb25jYXQoZXZlbnROYW1lKTtcbiAgcHJlZml4ZXNbXCJtc1wiLmNvbmNhdChzdHlsZVByb3ApXSA9IFwiTVNcIi5jb25jYXQoZXZlbnROYW1lKTtcbiAgcHJlZml4ZXNbXCJPXCIuY29uY2F0KHN0eWxlUHJvcCldID0gXCJvXCIuY29uY2F0KGV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpKTtcbiAgcmV0dXJuIHByZWZpeGVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VmVuZG9yUHJlZml4ZXMoZG9tU3VwcG9ydCwgd2luKSB7XG4gIHZhciBwcmVmaXhlcyA9IHtcbiAgICBhbmltYXRpb25lbmQ6IG1ha2VQcmVmaXhNYXAoJ0FuaW1hdGlvbicsICdBbmltYXRpb25FbmQnKSxcbiAgICB0cmFuc2l0aW9uZW5kOiBtYWtlUHJlZml4TWFwKCdUcmFuc2l0aW9uJywgJ1RyYW5zaXRpb25FbmQnKVxuICB9O1xuXG4gIGlmIChkb21TdXBwb3J0KSB7XG4gICAgaWYgKCEoJ0FuaW1hdGlvbkV2ZW50JyBpbiB3aW4pKSB7XG4gICAgICBkZWxldGUgcHJlZml4ZXMuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbjtcbiAgICB9XG5cbiAgICBpZiAoISgnVHJhbnNpdGlvbkV2ZW50JyBpbiB3aW4pKSB7XG4gICAgICBkZWxldGUgcHJlZml4ZXMudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwcmVmaXhlcztcbn1cbnZhciB2ZW5kb3JQcmVmaXhlcyA9IGdldFZlbmRvclByZWZpeGVzKGNhblVzZURPTSgpLCB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHt9KTtcbnZhciBzdHlsZSA9IHt9O1xuXG5pZiAoY2FuVXNlRE9NKCkpIHtcbiAgdmFyIF9kb2N1bWVudCRjcmVhdGVFbGVtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gIHN0eWxlID0gX2RvY3VtZW50JGNyZWF0ZUVsZW1lLnN0eWxlO1xufVxuXG52YXIgcHJlZml4ZWRFdmVudE5hbWVzID0ge307XG5leHBvcnQgZnVuY3Rpb24gZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoZXZlbnROYW1lKSB7XG4gIGlmIChwcmVmaXhlZEV2ZW50TmFtZXNbZXZlbnROYW1lXSkge1xuICAgIHJldHVybiBwcmVmaXhlZEV2ZW50TmFtZXNbZXZlbnROYW1lXTtcbiAgfVxuXG4gIHZhciBwcmVmaXhNYXAgPSB2ZW5kb3JQcmVmaXhlc1tldmVudE5hbWVdO1xuXG4gIGlmIChwcmVmaXhNYXApIHtcbiAgICB2YXIgc3R5bGVQcm9wTGlzdCA9IE9iamVjdC5rZXlzKHByZWZpeE1hcCk7XG4gICAgdmFyIGxlbiA9IHN0eWxlUHJvcExpc3QubGVuZ3RoO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgdmFyIHN0eWxlUHJvcCA9IHN0eWxlUHJvcExpc3RbaV07XG5cbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocHJlZml4TWFwLCBzdHlsZVByb3ApICYmIHN0eWxlUHJvcCBpbiBzdHlsZSkge1xuICAgICAgICBwcmVmaXhlZEV2ZW50TmFtZXNbZXZlbnROYW1lXSA9IHByZWZpeE1hcFtzdHlsZVByb3BdO1xuICAgICAgICByZXR1cm4gcHJlZml4ZWRFdmVudE5hbWVzW2V2ZW50TmFtZV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICcnO1xufVxudmFyIGludGVybmFsQW5pbWF0aW9uRW5kTmFtZSA9IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKCdhbmltYXRpb25lbmQnKTtcbnZhciBpbnRlcm5hbFRyYW5zaXRpb25FbmROYW1lID0gZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoJ3RyYW5zaXRpb25lbmQnKTtcbmV4cG9ydCB2YXIgc3VwcG9ydFRyYW5zaXRpb24gPSAhIShpbnRlcm5hbEFuaW1hdGlvbkVuZE5hbWUgJiYgaW50ZXJuYWxUcmFuc2l0aW9uRW5kTmFtZSk7XG5leHBvcnQgdmFyIGFuaW1hdGlvbkVuZE5hbWUgPSBpbnRlcm5hbEFuaW1hdGlvbkVuZE5hbWUgfHwgJ2FuaW1hdGlvbmVuZCc7XG5leHBvcnQgdmFyIHRyYW5zaXRpb25FbmROYW1lID0gaW50ZXJuYWxUcmFuc2l0aW9uRW5kTmFtZSB8fCAndHJhbnNpdGlvbmVuZCc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbk5hbWUodHJhbnNpdGlvbk5hbWUsIHRyYW5zaXRpb25UeXBlKSB7XG4gIGlmICghdHJhbnNpdGlvbk5hbWUpIHJldHVybiBudWxsO1xuXG4gIGlmIChfdHlwZW9mKHRyYW5zaXRpb25OYW1lKSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgdHlwZSA9IHRyYW5zaXRpb25UeXBlLnJlcGxhY2UoLy1cXHcvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICByZXR1cm4gbWF0Y2hbMV0udG9VcHBlckNhc2UoKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk5hbWVbdHlwZV07XG4gIH1cblxuICByZXR1cm4gXCJcIi5jb25jYXQodHJhbnNpdGlvbk5hbWUsIFwiLVwiKS5jb25jYXQodHJhbnNpdGlvblR5cGUpO1xufSIsImV4cG9ydCB2YXIgU1RBVFVTX05PTkUgPSAnbm9uZSc7XG5leHBvcnQgdmFyIFNUQVRVU19BUFBFQVIgPSAnYXBwZWFyJztcbmV4cG9ydCB2YXIgU1RBVFVTX0VOVEVSID0gJ2VudGVyJztcbmV4cG9ydCB2YXIgU1RBVFVTX0xFQVZFID0gJ2xlYXZlJztcbmV4cG9ydCB2YXIgU1RFUF9OT05FID0gJ25vbmUnO1xuZXhwb3J0IHZhciBTVEVQX1BSRVBBUkUgPSAncHJlcGFyZSc7XG5leHBvcnQgdmFyIFNURVBfU1RBUlQgPSAnc3RhcnQnO1xuZXhwb3J0IHZhciBTVEVQX0FDVElWRSA9ICdhY3RpdmUnO1xuZXhwb3J0IHZhciBTVEVQX0FDVElWQVRFRCA9ICdlbmQnOyIsImltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBTYW1lIGFzIFJlYWN0LnVzZVN0YXRlIGJ1dCBgc2V0U3RhdGVgIGFjY2VwdCBgaWdub3JlRGVzdHJveWAgcGFyYW0gdG8gbm90IHRvIHNldFN0YXRlIGFmdGVyIGRlc3Ryb3llZC5cbiAqIFdlIGRvIG5vdCBtYWtlIHRoaXMgYXV0byBpcyB0byBhdm9pZCByZWFsIG1lbW9yeSBsZWFrLlxuICogRGV2ZWxvcGVyIHNob3VsZCBjb25maXJtIGl0J3Mgc2FmZSB0byBpZ25vcmUgdGhlbXNlbHZlcy5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VTYWZlU3RhdGUoZGVmYXVsdFZhbHVlKSB7XG4gIHZhciBkZXN0cm95UmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZGVmYXVsdFZhbHVlKSxcbiAgICAgIF9SZWFjdCR1c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfUmVhY3QkdXNlU3RhdGUsIDIpLFxuICAgICAgdmFsdWUgPSBfUmVhY3QkdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0VmFsdWUgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgZGVzdHJveVJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGRlc3Ryb3lSZWYuY3VycmVudCA9IHRydWU7XG4gICAgfTtcbiAgfSwgW10pO1xuXG4gIGZ1bmN0aW9uIHNhZmVTZXRTdGF0ZSh1cGRhdGVyLCBpZ25vcmVEZXN0cm95KSB7XG4gICAgaWYgKGlnbm9yZURlc3Ryb3kgJiYgZGVzdHJveVJlZi5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2V0VmFsdWUodXBkYXRlcik7XG4gIH1cblxuICByZXR1cm4gW3ZhbHVlLCBzYWZlU2V0U3RhdGVdO1xufSIsInZhciByYWYgPSBmdW5jdGlvbiByYWYoY2FsbGJhY2spIHtcbiAgcmV0dXJuICtzZXRUaW1lb3V0KGNhbGxiYWNrLCAxNik7XG59O1xuXG52YXIgY2FmID0gZnVuY3Rpb24gY2FmKG51bSkge1xuICByZXR1cm4gY2xlYXJUaW1lb3V0KG51bSk7XG59O1xuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ3JlcXVlc3RBbmltYXRpb25GcmFtZScgaW4gd2luZG93KSB7XG4gIHJhZiA9IGZ1bmN0aW9uIHJhZihjYWxsYmFjaykge1xuICAgIHJldHVybiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNhbGxiYWNrKTtcbiAgfTtcblxuICBjYWYgPSBmdW5jdGlvbiBjYWYoaGFuZGxlKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShoYW5kbGUpO1xuICB9O1xufVxuXG52YXIgcmFmVVVJRCA9IDA7XG52YXIgcmFmSWRzID0gbmV3IE1hcCgpO1xuXG5mdW5jdGlvbiBjbGVhbnVwKGlkKSB7XG4gIHJhZklkcy5kZWxldGUoaWQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB3cmFwcGVyUmFmKGNhbGxiYWNrKSB7XG4gIHZhciB0aW1lcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTtcbiAgcmFmVVVJRCArPSAxO1xuICB2YXIgaWQgPSByYWZVVUlEO1xuXG4gIGZ1bmN0aW9uIGNhbGxSZWYobGVmdFRpbWVzKSB7XG4gICAgaWYgKGxlZnRUaW1lcyA9PT0gMCkge1xuICAgICAgLy8gQ2xlYW4gdXBcbiAgICAgIGNsZWFudXAoaWQpOyAvLyBUcmlnZ2VyXG5cbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE5leHQgcmFmXG4gICAgICB2YXIgcmVhbElkID0gcmFmKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2FsbFJlZihsZWZ0VGltZXMgLSAxKTtcbiAgICAgIH0pOyAvLyBCaW5kIHJlYWwgcmFmIGlkXG5cbiAgICAgIHJhZklkcy5zZXQoaWQsIHJlYWxJZCk7XG4gICAgfVxuICB9XG5cbiAgY2FsbFJlZih0aW1lcyk7XG4gIHJldHVybiBpZDtcbn1cblxud3JhcHBlclJhZi5jYW5jZWwgPSBmdW5jdGlvbiAoaWQpIHtcbiAgdmFyIHJlYWxJZCA9IHJhZklkcy5nZXQoaWQpO1xuICBjbGVhbnVwKHJlYWxJZCk7XG4gIHJldHVybiBjYWYocmVhbElkKTtcbn07IiwiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2FuVXNlRG9tIGZyb20gXCJyYy11dGlsL2VzL0RvbS9jYW5Vc2VEb21cIjsgLy8gSXQncyBzYWZlIHRvIHVzZSBgdXNlTGF5b3V0RWZmZWN0YCBidXQgdGhlIHdhcm5pbmcgaXMgYW5ub3lpbmdcblxudmFyIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgPSBjYW5Vc2VEb20oKSA/IHVzZUxheW91dEVmZmVjdCA6IHVzZUVmZmVjdDtcbmV4cG9ydCBkZWZhdWx0IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3Q7IiwiaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdXNlU3RhdGUgZnJvbSBcInJjLXV0aWwvZXMvaG9va3MvdXNlU3RhdGVcIjtcbmltcG9ydCB7IFNURVBfUFJFUEFSRSwgU1RFUF9BQ1RJVkUsIFNURVBfU1RBUlQsIFNURVBfQUNUSVZBVEVELCBTVEVQX05PTkUgfSBmcm9tICcuLi9pbnRlcmZhY2UnO1xuaW1wb3J0IHVzZU5leHRGcmFtZSBmcm9tICcuL3VzZU5leHRGcmFtZSc7XG5pbXBvcnQgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCBmcm9tICcuL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QnO1xudmFyIFNURVBfUVVFVUUgPSBbU1RFUF9QUkVQQVJFLCBTVEVQX1NUQVJULCBTVEVQX0FDVElWRSwgU1RFUF9BQ1RJVkFURURdO1xuLyoqIFNraXAgY3VycmVudCBzdGVwICovXG5cbmV4cG9ydCB2YXIgU2tpcFN0ZXAgPSBmYWxzZTtcbi8qKiBDdXJyZW50IHN0ZXAgc2hvdWxkIGJlIHVwZGF0ZSBpbiAqL1xuXG5leHBvcnQgdmFyIERvU3RlcCA9IHRydWU7XG5leHBvcnQgZnVuY3Rpb24gaXNBY3RpdmUoc3RlcCkge1xuICByZXR1cm4gc3RlcCA9PT0gU1RFUF9BQ1RJVkUgfHwgc3RlcCA9PT0gU1RFUF9BQ1RJVkFURUQ7XG59XG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gKHN0YXR1cywgY2FsbGJhY2spIHtcbiAgdmFyIF91c2VTdGF0ZSA9IHVzZVN0YXRlKFNURVBfTk9ORSksXG4gICAgICBfdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAyKSxcbiAgICAgIHN0ZXAgPSBfdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0U3RlcCA9IF91c2VTdGF0ZTJbMV07XG5cbiAgdmFyIF91c2VOZXh0RnJhbWUgPSB1c2VOZXh0RnJhbWUoKSxcbiAgICAgIF91c2VOZXh0RnJhbWUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZU5leHRGcmFtZSwgMiksXG4gICAgICBuZXh0RnJhbWUgPSBfdXNlTmV4dEZyYW1lMlswXSxcbiAgICAgIGNhbmNlbE5leHRGcmFtZSA9IF91c2VOZXh0RnJhbWUyWzFdO1xuXG4gIGZ1bmN0aW9uIHN0YXJ0UXVldWUoKSB7XG4gICAgc2V0U3RlcChTVEVQX1BSRVBBUkUsIHRydWUpO1xuICB9XG5cbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHN0ZXAgIT09IFNURVBfTk9ORSAmJiBzdGVwICE9PSBTVEVQX0FDVElWQVRFRCkge1xuICAgICAgdmFyIGluZGV4ID0gU1RFUF9RVUVVRS5pbmRleE9mKHN0ZXApO1xuICAgICAgdmFyIG5leHRTdGVwID0gU1RFUF9RVUVVRVtpbmRleCArIDFdO1xuICAgICAgdmFyIHJlc3VsdCA9IGNhbGxiYWNrKHN0ZXApO1xuXG4gICAgICBpZiAocmVzdWx0ID09PSBTa2lwU3RlcCkge1xuICAgICAgICAvLyBTa2lwIHdoZW4gbm8gbmVlZGVkXG4gICAgICAgIHNldFN0ZXAobmV4dFN0ZXAsIHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRG8gYXMgZnJhbWUgZm9yIHN0ZXAgdXBkYXRlXG4gICAgICAgIG5leHRGcmFtZShmdW5jdGlvbiAoaW5mbykge1xuICAgICAgICAgIGZ1bmN0aW9uIGRvTmV4dCgpIHtcbiAgICAgICAgICAgIC8vIFNraXAgc2luY2UgY3VycmVudCBxdWV1ZSBpcyBvb2RcbiAgICAgICAgICAgIGlmIChpbmZvLmlzQ2FuY2VsZWQoKSkgcmV0dXJuO1xuICAgICAgICAgICAgc2V0U3RlcChuZXh0U3RlcCwgdHJ1ZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgZG9OZXh0KCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIE9ubHkgcHJvbWlzZSBzaG91bGQgYmUgYXN5bmNcbiAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZShyZXN1bHQpLnRoZW4oZG9OZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW3N0YXR1cywgc3RlcF0pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjYW5jZWxOZXh0RnJhbWUoKTtcbiAgICB9O1xuICB9LCBbXSk7XG4gIHJldHVybiBbc3RhcnRRdWV1ZSwgc3RlcF07XG59KTsiLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlUmVmLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdXNlU3RhdGUgZnJvbSBcInJjLXV0aWwvZXMvaG9va3MvdXNlU3RhdGVcIjtcbmltcG9ydCB7IFNUQVRVU19BUFBFQVIsIFNUQVRVU19OT05FLCBTVEFUVVNfTEVBVkUsIFNUQVRVU19FTlRFUiwgU1RFUF9QUkVQQVJFLCBTVEVQX1NUQVJULCBTVEVQX0FDVElWRSB9IGZyb20gJy4uL2ludGVyZmFjZSc7XG5pbXBvcnQgdXNlU3RlcFF1ZXVlLCB7IERvU3RlcCwgU2tpcFN0ZXAsIGlzQWN0aXZlIH0gZnJvbSAnLi91c2VTdGVwUXVldWUnO1xuaW1wb3J0IHVzZURvbU1vdGlvbkV2ZW50cyBmcm9tICcuL3VzZURvbU1vdGlvbkV2ZW50cyc7XG5pbXBvcnQgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCBmcm9tICcuL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlU3RhdHVzKHN1cHBvcnRNb3Rpb24sIHZpc2libGUsIGdldEVsZW1lbnQsIF9yZWYpIHtcbiAgdmFyIF9yZWYkbW90aW9uRW50ZXIgPSBfcmVmLm1vdGlvbkVudGVyLFxuICAgICAgbW90aW9uRW50ZXIgPSBfcmVmJG1vdGlvbkVudGVyID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZiRtb3Rpb25FbnRlcixcbiAgICAgIF9yZWYkbW90aW9uQXBwZWFyID0gX3JlZi5tb3Rpb25BcHBlYXIsXG4gICAgICBtb3Rpb25BcHBlYXIgPSBfcmVmJG1vdGlvbkFwcGVhciA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYkbW90aW9uQXBwZWFyLFxuICAgICAgX3JlZiRtb3Rpb25MZWF2ZSA9IF9yZWYubW90aW9uTGVhdmUsXG4gICAgICBtb3Rpb25MZWF2ZSA9IF9yZWYkbW90aW9uTGVhdmUgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmJG1vdGlvbkxlYXZlLFxuICAgICAgbW90aW9uRGVhZGxpbmUgPSBfcmVmLm1vdGlvbkRlYWRsaW5lLFxuICAgICAgbW90aW9uTGVhdmVJbW1lZGlhdGVseSA9IF9yZWYubW90aW9uTGVhdmVJbW1lZGlhdGVseSxcbiAgICAgIG9uQXBwZWFyUHJlcGFyZSA9IF9yZWYub25BcHBlYXJQcmVwYXJlLFxuICAgICAgb25FbnRlclByZXBhcmUgPSBfcmVmLm9uRW50ZXJQcmVwYXJlLFxuICAgICAgb25MZWF2ZVByZXBhcmUgPSBfcmVmLm9uTGVhdmVQcmVwYXJlLFxuICAgICAgb25BcHBlYXJTdGFydCA9IF9yZWYub25BcHBlYXJTdGFydCxcbiAgICAgIG9uRW50ZXJTdGFydCA9IF9yZWYub25FbnRlclN0YXJ0LFxuICAgICAgb25MZWF2ZVN0YXJ0ID0gX3JlZi5vbkxlYXZlU3RhcnQsXG4gICAgICBvbkFwcGVhckFjdGl2ZSA9IF9yZWYub25BcHBlYXJBY3RpdmUsXG4gICAgICBvbkVudGVyQWN0aXZlID0gX3JlZi5vbkVudGVyQWN0aXZlLFxuICAgICAgb25MZWF2ZUFjdGl2ZSA9IF9yZWYub25MZWF2ZUFjdGl2ZSxcbiAgICAgIG9uQXBwZWFyRW5kID0gX3JlZi5vbkFwcGVhckVuZCxcbiAgICAgIG9uRW50ZXJFbmQgPSBfcmVmLm9uRW50ZXJFbmQsXG4gICAgICBvbkxlYXZlRW5kID0gX3JlZi5vbkxlYXZlRW5kLFxuICAgICAgb25WaXNpYmxlQ2hhbmdlZCA9IF9yZWYub25WaXNpYmxlQ2hhbmdlZDtcblxuICAvLyBVc2VkIGZvciBvdXRlciByZW5kZXIgdXNhZ2UgdG8gYXZvaWQgYHZpc2libGU6IGZhbHNlICYgc3RhdHVzOiBub25lYCB0byByZW5kZXIgbm90aGluZ1xuICB2YXIgX3VzZVN0YXRlID0gdXNlU3RhdGUoKSxcbiAgICAgIF91c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUsIDIpLFxuICAgICAgYXN5bmNWaXNpYmxlID0gX3VzZVN0YXRlMlswXSxcbiAgICAgIHNldEFzeW5jVmlzaWJsZSA9IF91c2VTdGF0ZTJbMV07XG5cbiAgdmFyIF91c2VTdGF0ZTMgPSB1c2VTdGF0ZShTVEFUVVNfTk9ORSksXG4gICAgICBfdXNlU3RhdGU0ID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlMywgMiksXG4gICAgICBzdGF0dXMgPSBfdXNlU3RhdGU0WzBdLFxuICAgICAgc2V0U3RhdHVzID0gX3VzZVN0YXRlNFsxXTtcblxuICB2YXIgX3VzZVN0YXRlNSA9IHVzZVN0YXRlKG51bGwpLFxuICAgICAgX3VzZVN0YXRlNiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZTUsIDIpLFxuICAgICAgc3R5bGUgPSBfdXNlU3RhdGU2WzBdLFxuICAgICAgc2V0U3R5bGUgPSBfdXNlU3RhdGU2WzFdO1xuXG4gIHZhciBtb3VudGVkUmVmID0gdXNlUmVmKGZhbHNlKTtcbiAgdmFyIGRlYWRsaW5lUmVmID0gdXNlUmVmKG51bGwpOyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT0gRG9tIE5vZGUgPT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gZ2V0RG9tRWxlbWVudCgpIHtcbiAgICByZXR1cm4gZ2V0RWxlbWVudCgpO1xuICB9IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09IE1vdGlvbiBFbmQgPT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuXG4gIHZhciBhY3RpdmVSZWYgPSB1c2VSZWYoZmFsc2UpO1xuXG4gIGZ1bmN0aW9uIG9uSW50ZXJuYWxNb3Rpb25FbmQoZXZlbnQpIHtcbiAgICB2YXIgZWxlbWVudCA9IGdldERvbUVsZW1lbnQoKTtcblxuICAgIGlmIChldmVudCAmJiAhZXZlbnQuZGVhZGxpbmUgJiYgZXZlbnQudGFyZ2V0ICE9PSBlbGVtZW50KSB7XG4gICAgICAvLyBldmVudCBleGlzdHNcbiAgICAgIC8vIG5vdCBpbml0aWF0ZWQgYnkgZGVhZGxpbmVcbiAgICAgIC8vIHRyYW5zaXRpb25FbmQgbm90IGZpcmVkIGJ5IGlubmVyIGVsZW1lbnRzXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGN1cnJlbnRBY3RpdmUgPSBhY3RpdmVSZWYuY3VycmVudDtcbiAgICB2YXIgY2FuRW5kO1xuXG4gICAgaWYgKHN0YXR1cyA9PT0gU1RBVFVTX0FQUEVBUiAmJiBjdXJyZW50QWN0aXZlKSB7XG4gICAgICBjYW5FbmQgPSBvbkFwcGVhckVuZCA9PT0gbnVsbCB8fCBvbkFwcGVhckVuZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25BcHBlYXJFbmQoZWxlbWVudCwgZXZlbnQpO1xuICAgIH0gZWxzZSBpZiAoc3RhdHVzID09PSBTVEFUVVNfRU5URVIgJiYgY3VycmVudEFjdGl2ZSkge1xuICAgICAgY2FuRW5kID0gb25FbnRlckVuZCA9PT0gbnVsbCB8fCBvbkVudGVyRW5kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkVudGVyRW5kKGVsZW1lbnQsIGV2ZW50KTtcbiAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gU1RBVFVTX0xFQVZFICYmIGN1cnJlbnRBY3RpdmUpIHtcbiAgICAgIGNhbkVuZCA9IG9uTGVhdmVFbmQgPT09IG51bGwgfHwgb25MZWF2ZUVuZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25MZWF2ZUVuZChlbGVtZW50LCBldmVudCk7XG4gICAgfSAvLyBPbmx5IHVwZGF0ZSBzdGF0dXMgd2hlbiBgY2FuRW5kYCBhbmQgbm90IGRlc3Ryb3llZFxuXG5cbiAgICBpZiAoc3RhdHVzICE9PSBTVEFUVVNfTk9ORSAmJiBjdXJyZW50QWN0aXZlICYmIGNhbkVuZCAhPT0gZmFsc2UpIHtcbiAgICAgIHNldFN0YXR1cyhTVEFUVVNfTk9ORSwgdHJ1ZSk7XG4gICAgICBzZXRTdHlsZShudWxsLCB0cnVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX3VzZURvbU1vdGlvbkV2ZW50cyA9IHVzZURvbU1vdGlvbkV2ZW50cyhvbkludGVybmFsTW90aW9uRW5kKSxcbiAgICAgIF91c2VEb21Nb3Rpb25FdmVudHMyID0gX3NsaWNlZFRvQXJyYXkoX3VzZURvbU1vdGlvbkV2ZW50cywgMSksXG4gICAgICBwYXRjaE1vdGlvbkV2ZW50cyA9IF91c2VEb21Nb3Rpb25FdmVudHMyWzBdOyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBTdGVwID09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cblxuICB2YXIgZXZlbnRIYW5kbGVycyA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHZhciBfcmVmMiwgX3JlZjMsIF9yZWY0O1xuXG4gICAgc3dpdGNoIChzdGF0dXMpIHtcbiAgICAgIGNhc2UgU1RBVFVTX0FQUEVBUjpcbiAgICAgICAgcmV0dXJuIF9yZWYyID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfcmVmMiwgU1RFUF9QUkVQQVJFLCBvbkFwcGVhclByZXBhcmUpLCBfZGVmaW5lUHJvcGVydHkoX3JlZjIsIFNURVBfU1RBUlQsIG9uQXBwZWFyU3RhcnQpLCBfZGVmaW5lUHJvcGVydHkoX3JlZjIsIFNURVBfQUNUSVZFLCBvbkFwcGVhckFjdGl2ZSksIF9yZWYyO1xuXG4gICAgICBjYXNlIFNUQVRVU19FTlRFUjpcbiAgICAgICAgcmV0dXJuIF9yZWYzID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfcmVmMywgU1RFUF9QUkVQQVJFLCBvbkVudGVyUHJlcGFyZSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmMywgU1RFUF9TVEFSVCwgb25FbnRlclN0YXJ0KSwgX2RlZmluZVByb3BlcnR5KF9yZWYzLCBTVEVQX0FDVElWRSwgb25FbnRlckFjdGl2ZSksIF9yZWYzO1xuXG4gICAgICBjYXNlIFNUQVRVU19MRUFWRTpcbiAgICAgICAgcmV0dXJuIF9yZWY0ID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfcmVmNCwgU1RFUF9QUkVQQVJFLCBvbkxlYXZlUHJlcGFyZSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmNCwgU1RFUF9TVEFSVCwgb25MZWF2ZVN0YXJ0KSwgX2RlZmluZVByb3BlcnR5KF9yZWY0LCBTVEVQX0FDVElWRSwgb25MZWF2ZUFjdGl2ZSksIF9yZWY0O1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuICB9LCBbc3RhdHVzXSk7XG5cbiAgdmFyIF91c2VTdGVwUXVldWUgPSB1c2VTdGVwUXVldWUoc3RhdHVzLCBmdW5jdGlvbiAobmV3U3RlcCkge1xuICAgIC8vIE9ubHkgcHJlcGFyZSBzdGVwIGNhbiBiZSBza2lwXG4gICAgaWYgKG5ld1N0ZXAgPT09IFNURVBfUFJFUEFSRSkge1xuICAgICAgdmFyIG9uUHJlcGFyZSA9IGV2ZW50SGFuZGxlcnNbU1RFUF9QUkVQQVJFXTtcblxuICAgICAgaWYgKCFvblByZXBhcmUpIHtcbiAgICAgICAgcmV0dXJuIFNraXBTdGVwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb25QcmVwYXJlKGdldERvbUVsZW1lbnQoKSk7XG4gICAgfSAvLyBSZXN0IHN0ZXAgaXMgc3luYyB1cGRhdGVcblxuXG4gICAgLy8gUmVzdCBzdGVwIGlzIHN5bmMgdXBkYXRlXG4gICAgaWYgKHN0ZXAgaW4gZXZlbnRIYW5kbGVycykge1xuICAgICAgdmFyIF9ldmVudEhhbmRsZXJzJHN0ZXA7XG5cbiAgICAgIHNldFN0eWxlKCgoX2V2ZW50SGFuZGxlcnMkc3RlcCA9IGV2ZW50SGFuZGxlcnNbc3RlcF0pID09PSBudWxsIHx8IF9ldmVudEhhbmRsZXJzJHN0ZXAgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9ldmVudEhhbmRsZXJzJHN0ZXAuY2FsbChldmVudEhhbmRsZXJzLCBnZXREb21FbGVtZW50KCksIG51bGwpKSB8fCBudWxsKTtcbiAgICB9XG5cbiAgICBpZiAoc3RlcCA9PT0gU1RFUF9BQ1RJVkUpIHtcbiAgICAgIC8vIFBhdGNoIGV2ZW50cyB3aGVuIG1vdGlvbiBuZWVkZWRcbiAgICAgIHBhdGNoTW90aW9uRXZlbnRzKGdldERvbUVsZW1lbnQoKSk7XG5cbiAgICAgIGlmIChtb3Rpb25EZWFkbGluZSA+IDApIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KGRlYWRsaW5lUmVmLmN1cnJlbnQpO1xuICAgICAgICBkZWFkbGluZVJlZi5jdXJyZW50ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgb25JbnRlcm5hbE1vdGlvbkVuZCh7XG4gICAgICAgICAgICBkZWFkbGluZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9LCBtb3Rpb25EZWFkbGluZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIERvU3RlcDtcbiAgfSksXG4gICAgICBfdXNlU3RlcFF1ZXVlMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGVwUXVldWUsIDIpLFxuICAgICAgc3RhcnRTdGVwID0gX3VzZVN0ZXBRdWV1ZTJbMF0sXG4gICAgICBzdGVwID0gX3VzZVN0ZXBRdWV1ZTJbMV07XG5cbiAgdmFyIGFjdGl2ZSA9IGlzQWN0aXZlKHN0ZXApO1xuICBhY3RpdmVSZWYuY3VycmVudCA9IGFjdGl2ZTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PSBTdGF0dXMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBVcGRhdGUgd2l0aCBuZXcgc3RhdHVzXG5cbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgc2V0QXN5bmNWaXNpYmxlKHZpc2libGUpO1xuICAgIHZhciBpc01vdW50ZWQgPSBtb3VudGVkUmVmLmN1cnJlbnQ7XG4gICAgbW91bnRlZFJlZi5jdXJyZW50ID0gdHJ1ZTtcblxuICAgIGlmICghc3VwcG9ydE1vdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBuZXh0U3RhdHVzOyAvLyBBcHBlYXJcblxuICAgIGlmICghaXNNb3VudGVkICYmIHZpc2libGUgJiYgbW90aW9uQXBwZWFyKSB7XG4gICAgICBuZXh0U3RhdHVzID0gU1RBVFVTX0FQUEVBUjtcbiAgICB9IC8vIEVudGVyXG5cblxuICAgIGlmIChpc01vdW50ZWQgJiYgdmlzaWJsZSAmJiBtb3Rpb25FbnRlcikge1xuICAgICAgbmV4dFN0YXR1cyA9IFNUQVRVU19FTlRFUjtcbiAgICB9IC8vIExlYXZlXG5cblxuICAgIGlmIChpc01vdW50ZWQgJiYgIXZpc2libGUgJiYgbW90aW9uTGVhdmUgfHwgIWlzTW91bnRlZCAmJiBtb3Rpb25MZWF2ZUltbWVkaWF0ZWx5ICYmICF2aXNpYmxlICYmIG1vdGlvbkxlYXZlKSB7XG4gICAgICBuZXh0U3RhdHVzID0gU1RBVFVTX0xFQVZFO1xuICAgIH0gLy8gVXBkYXRlIHRvIG5leHQgc3RhdHVzXG5cblxuICAgIGlmIChuZXh0U3RhdHVzKSB7XG4gICAgICBzZXRTdGF0dXMobmV4dFN0YXR1cyk7XG4gICAgICBzdGFydFN0ZXAoKTtcbiAgICB9XG4gIH0sIFt2aXNpYmxlXSk7IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT0gRWZmZWN0ID09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gUmVzZXQgd2hlbiBtb3Rpb24gY2hhbmdlZFxuXG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCAvLyBDYW5jZWwgYXBwZWFyXG4gICAgc3RhdHVzID09PSBTVEFUVVNfQVBQRUFSICYmICFtb3Rpb25BcHBlYXIgfHwgLy8gQ2FuY2VsIGVudGVyXG4gICAgc3RhdHVzID09PSBTVEFUVVNfRU5URVIgJiYgIW1vdGlvbkVudGVyIHx8IC8vIENhbmNlbCBsZWF2ZVxuICAgIHN0YXR1cyA9PT0gU1RBVFVTX0xFQVZFICYmICFtb3Rpb25MZWF2ZSkge1xuICAgICAgc2V0U3RhdHVzKFNUQVRVU19OT05FKTtcbiAgICB9XG4gIH0sIFttb3Rpb25BcHBlYXIsIG1vdGlvbkVudGVyLCBtb3Rpb25MZWF2ZV0pO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBtb3VudGVkUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIGNsZWFyVGltZW91dChkZWFkbGluZVJlZi5jdXJyZW50KTtcbiAgICB9O1xuICB9LCBbXSk7IC8vIFRyaWdnZXIgYG9uVmlzaWJsZUNoYW5nZWRgXG5cbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoYXN5bmNWaXNpYmxlICE9PSB1bmRlZmluZWQgJiYgc3RhdHVzID09PSBTVEFUVVNfTk9ORSkge1xuICAgICAgb25WaXNpYmxlQ2hhbmdlZCA9PT0gbnVsbCB8fCBvblZpc2libGVDaGFuZ2VkID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvblZpc2libGVDaGFuZ2VkKGFzeW5jVmlzaWJsZSk7XG4gICAgfVxuICB9LCBbYXN5bmNWaXNpYmxlLCBzdGF0dXNdKTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PSBTdHlsZXMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBtZXJnZWRTdHlsZSA9IHN0eWxlO1xuXG4gIGlmIChldmVudEhhbmRsZXJzW1NURVBfUFJFUEFSRV0gJiYgc3RlcCA9PT0gU1RFUF9TVEFSVCkge1xuICAgIG1lcmdlZFN0eWxlID0gX29iamVjdFNwcmVhZCh7XG4gICAgICB0cmFuc2l0aW9uOiAnbm9uZSdcbiAgICB9LCBtZXJnZWRTdHlsZSk7XG4gIH1cblxuICByZXR1cm4gW3N0YXR1cywgc3RlcCwgbWVyZ2VkU3R5bGUsIGFzeW5jVmlzaWJsZSAhPT0gbnVsbCAmJiBhc3luY1Zpc2libGUgIT09IHZvaWQgMCA/IGFzeW5jVmlzaWJsZSA6IHZpc2libGVdO1xufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGFuaW1hdGlvbkVuZE5hbWUsIHRyYW5zaXRpb25FbmROYW1lIH0gZnJvbSAnLi4vdXRpbC9tb3Rpb24nO1xuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICB2YXIgY2FjaGVFbGVtZW50UmVmID0gdXNlUmVmKCk7IC8vIENhY2hlIGNhbGxiYWNrXG5cbiAgdmFyIGNhbGxiYWNrUmVmID0gdXNlUmVmKGNhbGxiYWNrKTtcbiAgY2FsbGJhY2tSZWYuY3VycmVudCA9IGNhbGxiYWNrOyAvLyBJbnRlcm5hbCBtb3Rpb24gZXZlbnQgaGFuZGxlclxuXG4gIHZhciBvbkludGVybmFsTW90aW9uRW5kID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgY2FsbGJhY2tSZWYuY3VycmVudChldmVudCk7XG4gIH0sIFtdKTsgLy8gUmVtb3ZlIGV2ZW50c1xuXG4gIGZ1bmN0aW9uIHJlbW92ZU1vdGlvbkV2ZW50cyhlbGVtZW50KSB7XG4gICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kTmFtZSwgb25JbnRlcm5hbE1vdGlvbkVuZCk7XG4gICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoYW5pbWF0aW9uRW5kTmFtZSwgb25JbnRlcm5hbE1vdGlvbkVuZCk7XG4gICAgfVxuICB9IC8vIFBhdGNoIGV2ZW50c1xuXG5cbiAgZnVuY3Rpb24gcGF0Y2hNb3Rpb25FdmVudHMoZWxlbWVudCkge1xuICAgIGlmIChjYWNoZUVsZW1lbnRSZWYuY3VycmVudCAmJiBjYWNoZUVsZW1lbnRSZWYuY3VycmVudCAhPT0gZWxlbWVudCkge1xuICAgICAgcmVtb3ZlTW90aW9uRXZlbnRzKGNhY2hlRWxlbWVudFJlZi5jdXJyZW50KTtcbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudCAmJiBlbGVtZW50ICE9PSBjYWNoZUVsZW1lbnRSZWYuY3VycmVudCkge1xuICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FbmROYW1lLCBvbkludGVybmFsTW90aW9uRW5kKTtcbiAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihhbmltYXRpb25FbmROYW1lLCBvbkludGVybmFsTW90aW9uRW5kKTsgLy8gU2F2ZSBhcyBjYWNoZSBpbiBjYXNlIGRvbSByZW1vdmVkIHRyaWdnZXIgYnkgYG1vdGlvbkRlYWRsaW5lYFxuXG4gICAgICBjYWNoZUVsZW1lbnRSZWYuY3VycmVudCA9IGVsZW1lbnQ7XG4gICAgfVxuICB9IC8vIENsZWFuIHVwIHdoZW4gcmVtb3ZlZFxuXG5cbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmVtb3ZlTW90aW9uRXZlbnRzKGNhY2hlRWxlbWVudFJlZi5jdXJyZW50KTtcbiAgICB9O1xuICB9LCBbXSk7XG4gIHJldHVybiBbcGF0Y2hNb3Rpb25FdmVudHMsIHJlbW92ZU1vdGlvbkV2ZW50c107XG59KTsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgcmFmIGZyb20gXCJyYy11dGlsL2VzL3JhZlwiO1xuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uICgpIHtcbiAgdmFyIG5leHRGcmFtZVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcblxuICBmdW5jdGlvbiBjYW5jZWxOZXh0RnJhbWUoKSB7XG4gICAgcmFmLmNhbmNlbChuZXh0RnJhbWVSZWYuY3VycmVudCk7XG4gIH1cblxuICBmdW5jdGlvbiBuZXh0RnJhbWUoY2FsbGJhY2spIHtcbiAgICB2YXIgZGVsYXkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDI7XG4gICAgY2FuY2VsTmV4dEZyYW1lKCk7XG4gICAgdmFyIG5leHRGcmFtZUlkID0gcmFmKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChkZWxheSA8PSAxKSB7XG4gICAgICAgIGNhbGxiYWNrKHtcbiAgICAgICAgICBpc0NhbmNlbGVkOiBmdW5jdGlvbiBpc0NhbmNlbGVkKCkge1xuICAgICAgICAgICAgcmV0dXJuIG5leHRGcmFtZUlkICE9PSBuZXh0RnJhbWVSZWYuY3VycmVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dEZyYW1lKGNhbGxiYWNrLCBkZWxheSAtIDEpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG5leHRGcmFtZVJlZi5jdXJyZW50ID0gbmV4dEZyYW1lSWQ7XG4gIH1cblxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjYW5jZWxOZXh0RnJhbWUoKTtcbiAgICB9O1xuICB9LCBbXSk7XG4gIHJldHVybiBbbmV4dEZyYW1lLCBjYW5jZWxOZXh0RnJhbWVdO1xufSk7IiwiaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c1wiO1xuaW1wb3J0IF9jcmVhdGVTdXBlciBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlU3VwZXJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxudmFyIERvbVdyYXBwZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKERvbVdyYXBwZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoRG9tV3JhcHBlcik7XG5cbiAgZnVuY3Rpb24gRG9tV3JhcHBlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRG9tV3JhcHBlcik7XG5cbiAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRG9tV3JhcHBlciwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBEb21XcmFwcGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnQgZGVmYXVsdCBEb21XcmFwcGVyOyIsImltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5cbi8qIGVzbGludC1kaXNhYmxlIHJlYWN0L2RlZmF1bHQtcHJvcHMtbWF0Y2gtcHJvcC10eXBlcywgcmVhY3Qvbm8tbXVsdGktY29tcCwgcmVhY3QvcHJvcC10eXBlcyAqL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGZpbmRET01Ob2RlIGZyb20gXCJyYy11dGlsL2VzL0RvbS9maW5kRE9NTm9kZVwiO1xuaW1wb3J0IHsgZmlsbFJlZiwgc3VwcG9ydFJlZiB9IGZyb20gXCJyYy11dGlsL2VzL3JlZlwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyBnZXRUcmFuc2l0aW9uTmFtZSwgc3VwcG9ydFRyYW5zaXRpb24gfSBmcm9tICcuL3V0aWwvbW90aW9uJztcbmltcG9ydCB7IFNUQVRVU19OT05FLCBTVEVQX1BSRVBBUkUsIFNURVBfU1RBUlQgfSBmcm9tICcuL2ludGVyZmFjZSc7XG5pbXBvcnQgdXNlU3RhdHVzIGZyb20gJy4vaG9va3MvdXNlU3RhdHVzJztcbmltcG9ydCBEb21XcmFwcGVyIGZyb20gJy4vRG9tV3JhcHBlcic7XG5pbXBvcnQgeyBpc0FjdGl2ZSB9IGZyb20gJy4vaG9va3MvdXNlU3RlcFF1ZXVlJztcbi8qKlxuICogYHRyYW5zaXRpb25TdXBwb3J0YCBpcyB1c2VkIGZvciBub25lIHRyYW5zaXRpb24gdGVzdCBjYXNlLlxuICogRGVmYXVsdCB3ZSB1c2UgYnJvd3NlciB0cmFuc2l0aW9uIGV2ZW50IHN1cHBvcnQgY2hlY2suXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdlbkNTU01vdGlvbihjb25maWcpIHtcbiAgdmFyIHRyYW5zaXRpb25TdXBwb3J0ID0gY29uZmlnO1xuXG4gIGlmIChfdHlwZW9mKGNvbmZpZykgPT09ICdvYmplY3QnKSB7XG4gICAgdHJhbnNpdGlvblN1cHBvcnQgPSBjb25maWcudHJhbnNpdGlvblN1cHBvcnQ7XG4gIH1cblxuICBmdW5jdGlvbiBpc1N1cHBvcnRUcmFuc2l0aW9uKHByb3BzKSB7XG4gICAgcmV0dXJuICEhKHByb3BzLm1vdGlvbk5hbWUgJiYgdHJhbnNpdGlvblN1cHBvcnQpO1xuICB9XG5cbiAgdmFyIENTU01vdGlvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gICAgdmFyIF9wcm9wcyR2aXNpYmxlID0gcHJvcHMudmlzaWJsZSxcbiAgICAgICAgdmlzaWJsZSA9IF9wcm9wcyR2aXNpYmxlID09PSB2b2lkIDAgPyB0cnVlIDogX3Byb3BzJHZpc2libGUsXG4gICAgICAgIF9wcm9wcyRyZW1vdmVPbkxlYXZlID0gcHJvcHMucmVtb3ZlT25MZWF2ZSxcbiAgICAgICAgcmVtb3ZlT25MZWF2ZSA9IF9wcm9wcyRyZW1vdmVPbkxlYXZlID09PSB2b2lkIDAgPyB0cnVlIDogX3Byb3BzJHJlbW92ZU9uTGVhdmUsXG4gICAgICAgIGZvcmNlUmVuZGVyID0gcHJvcHMuZm9yY2VSZW5kZXIsXG4gICAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIG1vdGlvbk5hbWUgPSBwcm9wcy5tb3Rpb25OYW1lLFxuICAgICAgICBsZWF2ZWRDbGFzc05hbWUgPSBwcm9wcy5sZWF2ZWRDbGFzc05hbWUsXG4gICAgICAgIGV2ZW50UHJvcHMgPSBwcm9wcy5ldmVudFByb3BzO1xuICAgIHZhciBzdXBwb3J0TW90aW9uID0gaXNTdXBwb3J0VHJhbnNpdGlvbihwcm9wcyk7IC8vIFJlZiB0byB0aGUgcmVhY3Qgbm9kZSwgaXQgbWF5IGJlIGEgSFRNTEVsZW1lbnRcblxuICAgIHZhciBub2RlUmVmID0gdXNlUmVmKCk7IC8vIFJlZiB0byB0aGUgZG9tIHdyYXBwZXIgaW4gY2FzZSByZWYgY2FuIG5vdCBwYXNzIHRvIEhUTUxFbGVtZW50XG5cbiAgICB2YXIgd3JhcHBlck5vZGVSZWYgPSB1c2VSZWYoKTtcblxuICAgIGZ1bmN0aW9uIGdldERvbUVsZW1lbnQoKSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBIZXJlIHdlJ3JlIGF2b2lkaW5nIGNhbGwgZm9yIGZpbmRET01Ob2RlIHNpbmNlIGl0J3MgZGVwcmVjYXRlZFxuICAgICAgICAvLyBpbiBzdHJpY3QgbW9kZS4gV2UncmUgY2FsbGluZyBpdCBvbmx5IHdoZW4gbm9kZSByZWYgaXMgbm90XG4gICAgICAgIC8vIGFuIGluc3RhbmNlIG9mIERPTSBIVE1MRWxlbWVudC4gT3RoZXJ3aXNlIHVzZVxuICAgICAgICAvLyBmaW5kRE9NTm9kZSBhcyBhIGZpbmFsIHJlc29ydFxuICAgICAgICByZXR1cm4gbm9kZVJlZi5jdXJyZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgPyBub2RlUmVmLmN1cnJlbnQgOiBmaW5kRE9NTm9kZSh3cmFwcGVyTm9kZVJlZi5jdXJyZW50KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gT25seSBoYXBwZW4gd2hlbiBgbW90aW9uRGVhZGxpbmVgIHRyaWdnZXIgYnV0IGVsZW1lbnQgcmVtb3ZlZC5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIF91c2VTdGF0dXMgPSB1c2VTdGF0dXMoc3VwcG9ydE1vdGlvbiwgdmlzaWJsZSwgZ2V0RG9tRWxlbWVudCwgcHJvcHMpLFxuICAgICAgICBfdXNlU3RhdHVzMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0dXMsIDQpLFxuICAgICAgICBzdGF0dXMgPSBfdXNlU3RhdHVzMlswXSxcbiAgICAgICAgc3RhdHVzU3RlcCA9IF91c2VTdGF0dXMyWzFdLFxuICAgICAgICBzdGF0dXNTdHlsZSA9IF91c2VTdGF0dXMyWzJdLFxuICAgICAgICBtZXJnZWRWaXNpYmxlID0gX3VzZVN0YXR1czJbM107IC8vIFJlY29yZCB3aGV0aGVyIGNvbnRlbnQgaGFzIHJlbmRlcmVkXG4gICAgLy8gV2lsbCByZXR1cm4gbnVsbCBmb3IgdW4tcmVuZGVyZWQgZXZlbiB3aGVuIGByZW1vdmVPbkxlYXZlPXtmYWxzZX1gXG5cblxuICAgIHZhciByZW5kZXJlZFJlZiA9IFJlYWN0LnVzZVJlZihtZXJnZWRWaXNpYmxlKTtcblxuICAgIGlmIChtZXJnZWRWaXNpYmxlKSB7XG4gICAgICByZW5kZXJlZFJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICB9IC8vID09PT09PT09PT09PT09PT09PT09PT0gUmVmcyA9PT09PT09PT09PT09PT09PT09PT09XG5cblxuICAgIHZhciBzZXROb2RlUmVmID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIG5vZGVSZWYuY3VycmVudCA9IG5vZGU7XG4gICAgICBmaWxsUmVmKHJlZiwgbm9kZSk7XG4gICAgfSwgW3JlZl0pOyAvLyA9PT09PT09PT09PT09PT09PT09PT0gUmVuZGVyID09PT09PT09PT09PT09PT09PT09PVxuXG4gICAgdmFyIG1vdGlvbkNoaWxkcmVuO1xuXG4gICAgdmFyIG1lcmdlZFByb3BzID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBldmVudFByb3BzKSwge30sIHtcbiAgICAgIHZpc2libGU6IHZpc2libGVcbiAgICB9KTtcblxuICAgIGlmICghY2hpbGRyZW4pIHtcbiAgICAgIC8vIE5vIGNoaWxkcmVuXG4gICAgICBtb3Rpb25DaGlsZHJlbiA9IG51bGw7XG4gICAgfSBlbHNlIGlmIChzdGF0dXMgPT09IFNUQVRVU19OT05FIHx8ICFpc1N1cHBvcnRUcmFuc2l0aW9uKHByb3BzKSkge1xuICAgICAgLy8gU3RhYmxlIGNoaWxkcmVuXG4gICAgICBpZiAobWVyZ2VkVmlzaWJsZSkge1xuICAgICAgICBtb3Rpb25DaGlsZHJlbiA9IGNoaWxkcmVuKF9vYmplY3RTcHJlYWQoe30sIG1lcmdlZFByb3BzKSwgc2V0Tm9kZVJlZik7XG4gICAgICB9IGVsc2UgaWYgKCFyZW1vdmVPbkxlYXZlICYmIHJlbmRlcmVkUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgbW90aW9uQ2hpbGRyZW4gPSBjaGlsZHJlbihfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG1lcmdlZFByb3BzKSwge30sIHtcbiAgICAgICAgICBjbGFzc05hbWU6IGxlYXZlZENsYXNzTmFtZVxuICAgICAgICB9KSwgc2V0Tm9kZVJlZik7XG4gICAgICB9IGVsc2UgaWYgKGZvcmNlUmVuZGVyKSB7XG4gICAgICAgIG1vdGlvbkNoaWxkcmVuID0gY2hpbGRyZW4oX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBtZXJnZWRQcm9wcyksIHt9LCB7XG4gICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSksIHNldE5vZGVSZWYpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbW90aW9uQ2hpbGRyZW4gPSBudWxsO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX2NsYXNzTmFtZXM7XG5cbiAgICAgIC8vIEluIG1vdGlvblxuICAgICAgdmFyIHN0YXR1c1N1ZmZpeDtcblxuICAgICAgaWYgKHN0YXR1c1N0ZXAgPT09IFNURVBfUFJFUEFSRSkge1xuICAgICAgICBzdGF0dXNTdWZmaXggPSAncHJlcGFyZSc7XG4gICAgICB9IGVsc2UgaWYgKGlzQWN0aXZlKHN0YXR1c1N0ZXApKSB7XG4gICAgICAgIHN0YXR1c1N1ZmZpeCA9ICdhY3RpdmUnO1xuICAgICAgfSBlbHNlIGlmIChzdGF0dXNTdGVwID09PSBTVEVQX1NUQVJUKSB7XG4gICAgICAgIHN0YXR1c1N1ZmZpeCA9ICdzdGFydCc7XG4gICAgICB9XG5cbiAgICAgIG1vdGlvbkNoaWxkcmVuID0gY2hpbGRyZW4oX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBtZXJnZWRQcm9wcyksIHt9LCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhnZXRUcmFuc2l0aW9uTmFtZShtb3Rpb25OYW1lLCBzdGF0dXMpLCAoX2NsYXNzTmFtZXMgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBnZXRUcmFuc2l0aW9uTmFtZShtb3Rpb25OYW1lLCBcIlwiLmNvbmNhdChzdGF0dXMsIFwiLVwiKS5jb25jYXQoc3RhdHVzU3VmZml4KSksIHN0YXR1c1N1ZmZpeCksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgbW90aW9uTmFtZSwgdHlwZW9mIG1vdGlvbk5hbWUgPT09ICdzdHJpbmcnKSwgX2NsYXNzTmFtZXMpKSxcbiAgICAgICAgc3R5bGU6IHN0YXR1c1N0eWxlXG4gICAgICB9KSwgc2V0Tm9kZVJlZik7XG4gICAgfSAvLyBBdXRvIGluamVjdCByZWYgaWYgY2hpbGQgbm9kZSBub3QgaGF2ZSBgcmVmYCBwcm9wc1xuXG5cbiAgICBpZiAoIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChtb3Rpb25DaGlsZHJlbikgJiYgc3VwcG9ydFJlZihtb3Rpb25DaGlsZHJlbikpIHtcbiAgICAgIHZhciBfbW90aW9uQ2hpbGRyZW4gPSBtb3Rpb25DaGlsZHJlbixcbiAgICAgICAgICBvcmlnaW5Ob2RlUmVmID0gX21vdGlvbkNoaWxkcmVuLnJlZjtcblxuICAgICAgaWYgKCFvcmlnaW5Ob2RlUmVmKSB7XG4gICAgICAgIG1vdGlvbkNoaWxkcmVuID0gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChtb3Rpb25DaGlsZHJlbiwge1xuICAgICAgICAgIHJlZjogc2V0Tm9kZVJlZlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRG9tV3JhcHBlciwge1xuICAgICAgcmVmOiB3cmFwcGVyTm9kZVJlZlxuICAgIH0sIG1vdGlvbkNoaWxkcmVuKTtcbiAgfSk7XG4gIENTU01vdGlvbi5kaXNwbGF5TmFtZSA9ICdDU1NNb3Rpb24nO1xuICByZXR1cm4gQ1NTTW90aW9uO1xufVxuZXhwb3J0IGRlZmF1bHQgZ2VuQ1NTTW90aW9uKHN1cHBvcnRUcmFuc2l0aW9uKTsiLCJpbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbi8qKlxuICogUmV0dXJuIGlmIGEgbm9kZSBpcyBhIERPTSBub2RlLiBFbHNlIHdpbGwgcmV0dXJuIGJ5IGBmaW5kRE9NTm9kZWBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5kRE9NTm9kZShub2RlKSB7XG4gIGlmIChub2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIHJldHVybiBSZWFjdERPTS5maW5kRE9NTm9kZShub2RlKTtcbn0iLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgeyBpc01lbW8gfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgdXNlTWVtbyBmcm9tICcuL2hvb2tzL3VzZU1lbW8nO1xuZXhwb3J0IGZ1bmN0aW9uIGZpbGxSZWYocmVmLCBub2RlKSB7XG4gIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmVmKG5vZGUpO1xuICB9IGVsc2UgaWYgKF90eXBlb2YocmVmKSA9PT0gJ29iamVjdCcgJiYgcmVmICYmICdjdXJyZW50JyBpbiByZWYpIHtcbiAgICByZWYuY3VycmVudCA9IG5vZGU7XG4gIH1cbn1cbi8qKlxuICogTWVyZ2UgcmVmcyBpbnRvIG9uZSByZWYgZnVuY3Rpb24gdG8gc3VwcG9ydCByZWYgcGFzc2luZy5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY29tcG9zZVJlZigpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHJlZnMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgcmVmc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciByZWZMaXN0ID0gcmVmcy5maWx0ZXIoZnVuY3Rpb24gKHJlZikge1xuICAgIHJldHVybiByZWY7XG4gIH0pO1xuXG4gIGlmIChyZWZMaXN0Lmxlbmd0aCA8PSAxKSB7XG4gICAgcmV0dXJuIHJlZkxpc3RbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICByZWZzLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgICAgZmlsbFJlZihyZWYsIG5vZGUpO1xuICAgIH0pO1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVzZUNvbXBvc2VSZWYoKSB7XG4gIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgcmVmcyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgIHJlZnNbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuXG4gIHJldHVybiB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY29tcG9zZVJlZi5hcHBseSh2b2lkIDAsIHJlZnMpO1xuICB9LCByZWZzLCBmdW5jdGlvbiAocHJldiwgbmV4dCkge1xuICAgIHJldHVybiBwcmV2Lmxlbmd0aCA9PT0gbmV4dC5sZW5ndGggJiYgcHJldi5ldmVyeShmdW5jdGlvbiAocmVmLCBpKSB7XG4gICAgICByZXR1cm4gcmVmID09PSBuZXh0W2ldO1xuICAgIH0pO1xuICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzdXBwb3J0UmVmKG5vZGVPckNvbXBvbmVudCkge1xuICB2YXIgX3R5cGUkcHJvdG90eXBlLCBfbm9kZU9yQ29tcG9uZW50JHByb3Q7XG5cbiAgdmFyIHR5cGUgPSBpc01lbW8obm9kZU9yQ29tcG9uZW50KSA/IG5vZGVPckNvbXBvbmVudC50eXBlLnR5cGUgOiBub2RlT3JDb21wb25lbnQudHlwZTsgLy8gRnVuY3Rpb24gY29tcG9uZW50IG5vZGVcblxuICBpZiAodHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicgJiYgISgoX3R5cGUkcHJvdG90eXBlID0gdHlwZS5wcm90b3R5cGUpID09PSBudWxsIHx8IF90eXBlJHByb3RvdHlwZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3R5cGUkcHJvdG90eXBlLnJlbmRlcikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gQ2xhc3MgY29tcG9uZW50XG5cblxuICBpZiAodHlwZW9mIG5vZGVPckNvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJyAmJiAhKChfbm9kZU9yQ29tcG9uZW50JHByb3QgPSBub2RlT3JDb21wb25lbnQucHJvdG90eXBlKSA9PT0gbnVsbCB8fCBfbm9kZU9yQ29tcG9uZW50JHByb3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9ub2RlT3JDb21wb25lbnQkcHJvdC5yZW5kZXIpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG4vKiBlc2xpbnQtZW5hYmxlICovIiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbmltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmV4cG9ydCB2YXIgU1RBVFVTX0FERCA9ICdhZGQnO1xuZXhwb3J0IHZhciBTVEFUVVNfS0VFUCA9ICdrZWVwJztcbmV4cG9ydCB2YXIgU1RBVFVTX1JFTU9WRSA9ICdyZW1vdmUnO1xuZXhwb3J0IHZhciBTVEFUVVNfUkVNT1ZFRCA9ICdyZW1vdmVkJztcbmV4cG9ydCBmdW5jdGlvbiB3cmFwS2V5VG9PYmplY3Qoa2V5KSB7XG4gIHZhciBrZXlPYmo7XG5cbiAgaWYgKGtleSAmJiBfdHlwZW9mKGtleSkgPT09ICdvYmplY3QnICYmICdrZXknIGluIGtleSkge1xuICAgIGtleU9iaiA9IGtleTtcbiAgfSBlbHNlIHtcbiAgICBrZXlPYmogPSB7XG4gICAgICBrZXk6IGtleVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBrZXlPYmopLCB7fSwge1xuICAgIGtleTogU3RyaW5nKGtleU9iai5rZXkpXG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlS2V5cygpIHtcbiAgdmFyIGtleXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtdO1xuICByZXR1cm4ga2V5cy5tYXAod3JhcEtleVRvT2JqZWN0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkaWZmS2V5cygpIHtcbiAgdmFyIHByZXZLZXlzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbXTtcbiAgdmFyIGN1cnJlbnRLZXlzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBbXTtcbiAgdmFyIGxpc3QgPSBbXTtcbiAgdmFyIGN1cnJlbnRJbmRleCA9IDA7XG4gIHZhciBjdXJyZW50TGVuID0gY3VycmVudEtleXMubGVuZ3RoO1xuICB2YXIgcHJldktleU9iamVjdHMgPSBwYXJzZUtleXMocHJldktleXMpO1xuICB2YXIgY3VycmVudEtleU9iamVjdHMgPSBwYXJzZUtleXMoY3VycmVudEtleXMpOyAvLyBDaGVjayBwcmV2IGtleXMgdG8gaW5zZXJ0IG9yIGtlZXBcblxuICBwcmV2S2V5T2JqZWN0cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXlPYmopIHtcbiAgICB2YXIgaGl0ID0gZmFsc2U7XG5cbiAgICBmb3IgKHZhciBpID0gY3VycmVudEluZGV4OyBpIDwgY3VycmVudExlbjsgaSArPSAxKSB7XG4gICAgICB2YXIgY3VycmVudEtleU9iaiA9IGN1cnJlbnRLZXlPYmplY3RzW2ldO1xuXG4gICAgICBpZiAoY3VycmVudEtleU9iai5rZXkgPT09IGtleU9iai5rZXkpIHtcbiAgICAgICAgLy8gTmV3IGFkZGVkIGtleXMgc2hvdWxkIGFkZCBiZWZvcmUgY3VycmVudCBrZXlcbiAgICAgICAgaWYgKGN1cnJlbnRJbmRleCA8IGkpIHtcbiAgICAgICAgICBsaXN0ID0gbGlzdC5jb25jYXQoY3VycmVudEtleU9iamVjdHMuc2xpY2UoY3VycmVudEluZGV4LCBpKS5tYXAoZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgb2JqKSwge30sIHtcbiAgICAgICAgICAgICAgc3RhdHVzOiBTVEFUVVNfQUREXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KSk7XG4gICAgICAgICAgY3VycmVudEluZGV4ID0gaTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxpc3QucHVzaChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGN1cnJlbnRLZXlPYmopLCB7fSwge1xuICAgICAgICAgIHN0YXR1czogU1RBVFVTX0tFRVBcbiAgICAgICAgfSkpO1xuICAgICAgICBjdXJyZW50SW5kZXggKz0gMTtcbiAgICAgICAgaGl0ID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSAvLyBJZiBub3QgaGl0LCBpdCBtZWFucyBrZXkgaXMgcmVtb3ZlZFxuXG5cbiAgICBpZiAoIWhpdCkge1xuICAgICAgbGlzdC5wdXNoKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwga2V5T2JqKSwge30sIHtcbiAgICAgICAgc3RhdHVzOiBTVEFUVVNfUkVNT1ZFXG4gICAgICB9KSk7XG4gICAgfVxuICB9KTsgLy8gQWRkIHJlc3QgdG8gdGhlIGxpc3RcblxuICBpZiAoY3VycmVudEluZGV4IDwgY3VycmVudExlbikge1xuICAgIGxpc3QgPSBsaXN0LmNvbmNhdChjdXJyZW50S2V5T2JqZWN0cy5zbGljZShjdXJyZW50SW5kZXgpLm1hcChmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBvYmopLCB7fSwge1xuICAgICAgICBzdGF0dXM6IFNUQVRVU19BRERcbiAgICAgIH0pO1xuICAgIH0pKTtcbiAgfVxuICAvKipcbiAgICogTWVyZ2Ugc2FtZSBrZXkgd2hlbiBpdCByZW1vdmUgYW5kIGFkZCBhZ2FpbjpcbiAgICogICAgWzEgLSBhZGQsIDIgLSBrZWVwLCAxIC0gcmVtb3ZlXSAtPiBbMSAtIGtlZXAsIDIgLSBrZWVwXVxuICAgKi9cblxuXG4gIHZhciBrZXlzID0ge307XG4gIGxpc3QuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBrZXkgPSBfcmVmLmtleTtcbiAgICBrZXlzW2tleV0gPSAoa2V5c1trZXldIHx8IDApICsgMTtcbiAgfSk7XG4gIHZhciBkdXBsaWNhdGVkS2V5cyA9IE9iamVjdC5rZXlzKGtleXMpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGtleXNba2V5XSA+IDE7XG4gIH0pO1xuICBkdXBsaWNhdGVkS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChtYXRjaEtleSkge1xuICAgIC8vIFJlbW92ZSBgU1RBVFVTX1JFTU9WRWAgbm9kZS5cbiAgICBsaXN0ID0gbGlzdC5maWx0ZXIoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICB2YXIga2V5ID0gX3JlZjIua2V5LFxuICAgICAgICAgIHN0YXR1cyA9IF9yZWYyLnN0YXR1cztcbiAgICAgIHJldHVybiBrZXkgIT09IG1hdGNoS2V5IHx8IHN0YXR1cyAhPT0gU1RBVFVTX1JFTU9WRTtcbiAgICB9KTsgLy8gVXBkYXRlIGBTVEFUVVNfQUREYCB0byBgU1RBVFVTX0tFRVBgXG5cbiAgICBsaXN0LmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIGlmIChub2RlLmtleSA9PT0gbWF0Y2hLZXkpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIG5vZGUuc3RhdHVzID0gU1RBVFVTX0tFRVA7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gbGlzdDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c1wiO1xuaW1wb3J0IF9jcmVhdGVTdXBlciBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlU3VwZXJcIjtcbnZhciBfZXhjbHVkZWQgPSBbXCJjb21wb25lbnRcIiwgXCJjaGlsZHJlblwiLCBcIm9uVmlzaWJsZUNoYW5nZWRcIiwgXCJvbkFsbFJlbW92ZWRcIl0sXG4gICAgX2V4Y2x1ZGVkMiA9IFtcInN0YXR1c1wiXTtcblxuLyogZXNsaW50IHJlYWN0L3Byb3AtdHlwZXM6IDAgKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBPcmlnaW5DU1NNb3Rpb24gZnJvbSAnLi9DU1NNb3Rpb24nO1xuaW1wb3J0IHsgc3VwcG9ydFRyYW5zaXRpb24gfSBmcm9tICcuL3V0aWwvbW90aW9uJztcbmltcG9ydCB7IFNUQVRVU19BREQsIFNUQVRVU19LRUVQLCBTVEFUVVNfUkVNT1ZFLCBTVEFUVVNfUkVNT1ZFRCwgZGlmZktleXMsIHBhcnNlS2V5cyB9IGZyb20gJy4vdXRpbC9kaWZmJztcbnZhciBNT1RJT05fUFJPUF9OQU1FUyA9IFsnZXZlbnRQcm9wcycsICd2aXNpYmxlJywgJ2NoaWxkcmVuJywgJ21vdGlvbk5hbWUnLCAnbW90aW9uQXBwZWFyJywgJ21vdGlvbkVudGVyJywgJ21vdGlvbkxlYXZlJywgJ21vdGlvbkxlYXZlSW1tZWRpYXRlbHknLCAnbW90aW9uRGVhZGxpbmUnLCAncmVtb3ZlT25MZWF2ZScsICdsZWF2ZWRDbGFzc05hbWUnLCAnb25BcHBlYXJTdGFydCcsICdvbkFwcGVhckFjdGl2ZScsICdvbkFwcGVhckVuZCcsICdvbkVudGVyU3RhcnQnLCAnb25FbnRlckFjdGl2ZScsICdvbkVudGVyRW5kJywgJ29uTGVhdmVTdGFydCcsICdvbkxlYXZlQWN0aXZlJywgJ29uTGVhdmVFbmQnXTtcbi8qKlxuICogR2VuZXJhdGUgYSBDU1NNb3Rpb25MaXN0IGNvbXBvbmVudCB3aXRoIGNvbmZpZ1xuICogQHBhcmFtIHRyYW5zaXRpb25TdXBwb3J0IE5vIG5lZWQgc2luY2UgQ1NTTW90aW9uTGlzdCBubyBsb25nZXIgZGVwZW5kcyBvbiB0cmFuc2l0aW9uIHN1cHBvcnRcbiAqIEBwYXJhbSBDU1NNb3Rpb24gQ1NTTW90aW9uIGNvbXBvbmVudFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5DU1NNb3Rpb25MaXN0KHRyYW5zaXRpb25TdXBwb3J0KSB7XG4gIHZhciBDU1NNb3Rpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IE9yaWdpbkNTU01vdGlvbjtcblxuICB2YXIgQ1NTTW90aW9uTGlzdCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhDU1NNb3Rpb25MaXN0LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoQ1NTTW90aW9uTGlzdCk7XG5cbiAgICBmdW5jdGlvbiBDU1NNb3Rpb25MaXN0KCkge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ1NTTW90aW9uTGlzdCk7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICBfdGhpcyA9IF9zdXBlci5jYWxsLmFwcGx5KF9zdXBlciwgW3RoaXNdLmNvbmNhdChhcmdzKSk7XG4gICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAga2V5RW50aXRpZXM6IFtdXG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5yZW1vdmVLZXkgPSBmdW5jdGlvbiAocmVtb3ZlS2V5KSB7XG4gICAgICAgIHZhciBrZXlFbnRpdGllcyA9IF90aGlzLnN0YXRlLmtleUVudGl0aWVzO1xuICAgICAgICB2YXIgbmV4dEtleUVudGl0aWVzID0ga2V5RW50aXRpZXMubWFwKGZ1bmN0aW9uIChlbnRpdHkpIHtcbiAgICAgICAgICBpZiAoZW50aXR5LmtleSAhPT0gcmVtb3ZlS2V5KSByZXR1cm4gZW50aXR5O1xuICAgICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGVudGl0eSksIHt9LCB7XG4gICAgICAgICAgICBzdGF0dXM6IFNUQVRVU19SRU1PVkVEXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBrZXlFbnRpdGllczogbmV4dEtleUVudGl0aWVzXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBuZXh0S2V5RW50aXRpZXMuZmlsdGVyKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgICAgdmFyIHN0YXR1cyA9IF9yZWYuc3RhdHVzO1xuICAgICAgICAgIHJldHVybiBzdGF0dXMgIT09IFNUQVRVU19SRU1PVkVEO1xuICAgICAgICB9KS5sZW5ndGg7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKENTU01vdGlvbkxpc3QsIFt7XG4gICAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICB2YXIga2V5RW50aXRpZXMgPSB0aGlzLnN0YXRlLmtleUVudGl0aWVzO1xuXG4gICAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICBjb21wb25lbnQgPSBfdGhpcyRwcm9wcy5jb21wb25lbnQsXG4gICAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgICAgX29uVmlzaWJsZUNoYW5nZWQgPSBfdGhpcyRwcm9wcy5vblZpc2libGVDaGFuZ2VkLFxuICAgICAgICAgICAgb25BbGxSZW1vdmVkID0gX3RoaXMkcHJvcHMub25BbGxSZW1vdmVkLFxuICAgICAgICAgICAgcmVzdFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF90aGlzJHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gICAgICAgIHZhciBDb21wb25lbnQgPSBjb21wb25lbnQgfHwgUmVhY3QuRnJhZ21lbnQ7XG4gICAgICAgIHZhciBtb3Rpb25Qcm9wcyA9IHt9O1xuICAgICAgICBNT1RJT05fUFJPUF9OQU1FUy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgICAgbW90aW9uUHJvcHNbcHJvcF0gPSByZXN0UHJvcHNbcHJvcF07XG4gICAgICAgICAgZGVsZXRlIHJlc3RQcm9wc1twcm9wXTtcbiAgICAgICAgfSk7XG4gICAgICAgIGRlbGV0ZSByZXN0UHJvcHMua2V5cztcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgcmVzdFByb3BzLCBrZXlFbnRpdGllcy5tYXAoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICAgICAgdmFyIHN0YXR1cyA9IF9yZWYyLnN0YXR1cyxcbiAgICAgICAgICAgICAgZXZlbnRQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmMiwgX2V4Y2x1ZGVkMik7XG5cbiAgICAgICAgICB2YXIgdmlzaWJsZSA9IHN0YXR1cyA9PT0gU1RBVFVTX0FERCB8fCBzdGF0dXMgPT09IFNUQVRVU19LRUVQO1xuICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDU1NNb3Rpb24sIF9leHRlbmRzKHt9LCBtb3Rpb25Qcm9wcywge1xuICAgICAgICAgICAga2V5OiBldmVudFByb3BzLmtleSxcbiAgICAgICAgICAgIHZpc2libGU6IHZpc2libGUsXG4gICAgICAgICAgICBldmVudFByb3BzOiBldmVudFByb3BzLFxuICAgICAgICAgICAgb25WaXNpYmxlQ2hhbmdlZDogZnVuY3Rpb24gb25WaXNpYmxlQ2hhbmdlZChjaGFuZ2VkVmlzaWJsZSkge1xuICAgICAgICAgICAgICBfb25WaXNpYmxlQ2hhbmdlZCA9PT0gbnVsbCB8fCBfb25WaXNpYmxlQ2hhbmdlZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29uVmlzaWJsZUNoYW5nZWQoY2hhbmdlZFZpc2libGUsIHtcbiAgICAgICAgICAgICAgICBrZXk6IGV2ZW50UHJvcHMua2V5XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGlmICghY2hhbmdlZFZpc2libGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdEtleXNDb3VudCA9IF90aGlzMi5yZW1vdmVLZXkoZXZlbnRQcm9wcy5rZXkpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHJlc3RLZXlzQ291bnQgPT09IDAgJiYgb25BbGxSZW1vdmVkKSB7XG4gICAgICAgICAgICAgICAgICBvbkFsbFJlbW92ZWQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSwgY2hpbGRyZW4pO1xuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfV0sIFt7XG4gICAgICBrZXk6IFwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKF9yZWYzLCBfcmVmNCkge1xuICAgICAgICB2YXIga2V5cyA9IF9yZWYzLmtleXM7XG4gICAgICAgIHZhciBrZXlFbnRpdGllcyA9IF9yZWY0LmtleUVudGl0aWVzO1xuICAgICAgICB2YXIgcGFyc2VkS2V5T2JqZWN0cyA9IHBhcnNlS2V5cyhrZXlzKTtcbiAgICAgICAgdmFyIG1peGVkS2V5RW50aXRpZXMgPSBkaWZmS2V5cyhrZXlFbnRpdGllcywgcGFyc2VkS2V5T2JqZWN0cyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAga2V5RW50aXRpZXM6IG1peGVkS2V5RW50aXRpZXMuZmlsdGVyKGZ1bmN0aW9uIChlbnRpdHkpIHtcbiAgICAgICAgICAgIHZhciBwcmV2RW50aXR5ID0ga2V5RW50aXRpZXMuZmluZChmdW5jdGlvbiAoX3JlZjUpIHtcbiAgICAgICAgICAgICAgdmFyIGtleSA9IF9yZWY1LmtleTtcbiAgICAgICAgICAgICAgcmV0dXJuIGVudGl0eS5rZXkgPT09IGtleTtcbiAgICAgICAgICAgIH0pOyAvLyBSZW1vdmUgaWYgYWxyZWFkeSBtYXJrIGFzIHJlbW92ZWRcblxuICAgICAgICAgICAgaWYgKHByZXZFbnRpdHkgJiYgcHJldkVudGl0eS5zdGF0dXMgPT09IFNUQVRVU19SRU1PVkVEICYmIGVudGl0eS5zdGF0dXMgPT09IFNUQVRVU19SRU1PVkUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgICAgfSAvLyBab21iaWVKOiBSZXR1cm4gdGhlIGNvdW50IG9mIHJlc3Qga2V5cy4gSXQncyBzYWZlIHRvIHJlZmFjdG9yIGlmIG5lZWQgbW9yZSBpbmZvLlxuXG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIENTU01vdGlvbkxpc3Q7XG4gIH0oUmVhY3QuQ29tcG9uZW50KTtcblxuICBDU1NNb3Rpb25MaXN0LmRlZmF1bHRQcm9wcyA9IHtcbiAgICBjb21wb25lbnQ6ICdkaXYnXG4gIH07XG4gIHJldHVybiBDU1NNb3Rpb25MaXN0O1xufVxuZXhwb3J0IGRlZmF1bHQgZ2VuQ1NTTW90aW9uTGlzdChzdXBwb3J0VHJhbnNpdGlvbik7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c1wiO1xuaW1wb3J0IF9jcmVhdGVTdXBlciBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlU3VwZXJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5cbnZhciBOb3RpY2UgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE5vdGljZSwgX0NvbXBvbmVudCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihOb3RpY2UpO1xuXG4gIGZ1bmN0aW9uIE5vdGljZSgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTm90aWNlKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsLmFwcGx5KF9zdXBlciwgW3RoaXNdLmNvbmNhdChhcmdzKSk7XG4gICAgX3RoaXMuY2xvc2VUaW1lciA9IG51bGw7XG5cbiAgICBfdGhpcy5jbG9zZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoZSkge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5jbGVhckNsb3NlVGltZXIoKTtcblxuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgb25DbG9zZSA9IF90aGlzJHByb3BzLm9uQ2xvc2UsXG4gICAgICAgICAgbm90aWNlS2V5ID0gX3RoaXMkcHJvcHMubm90aWNlS2V5O1xuXG4gICAgICBpZiAob25DbG9zZSkge1xuICAgICAgICBvbkNsb3NlKG5vdGljZUtleSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLnN0YXJ0Q2xvc2VUaW1lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5kdXJhdGlvbikge1xuICAgICAgICBfdGhpcy5jbG9zZVRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICAgIH0sIF90aGlzLnByb3BzLmR1cmF0aW9uICogMTAwMCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmNsZWFyQ2xvc2VUaW1lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5jbG9zZVRpbWVyKSB7XG4gICAgICAgIGNsZWFyVGltZW91dChfdGhpcy5jbG9zZVRpbWVyKTtcbiAgICAgICAgX3RoaXMuY2xvc2VUaW1lciA9IG51bGw7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhOb3RpY2UsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5zdGFydENsb3NlVGltZXIoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLmR1cmF0aW9uICE9PSBwcmV2UHJvcHMuZHVyYXRpb24gfHwgdGhpcy5wcm9wcy51cGRhdGVNYXJrICE9PSBwcmV2UHJvcHMudXBkYXRlTWFyayB8fCAvLyBWaXNpYmxlIGFnYWluIG5lZWQgcmVzZXQgdGltZXJcbiAgICAgIHRoaXMucHJvcHMudmlzaWJsZSAhPT0gcHJldlByb3BzLnZpc2libGUgJiYgdGhpcy5wcm9wcy52aXNpYmxlKSB7XG4gICAgICAgIHRoaXMucmVzdGFydENsb3NlVGltZXIoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLmNsZWFyQ2xvc2VUaW1lcigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZXN0YXJ0Q2xvc2VUaW1lclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXN0YXJ0Q2xvc2VUaW1lcigpIHtcbiAgICAgIHRoaXMuY2xlYXJDbG9zZVRpbWVyKCk7XG4gICAgICB0aGlzLnN0YXJ0Q2xvc2VUaW1lcigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHByZWZpeENscyA9IF90aGlzJHByb3BzMi5wcmVmaXhDbHMsXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMyLmNsYXNzTmFtZSxcbiAgICAgICAgICBjbG9zYWJsZSA9IF90aGlzJHByb3BzMi5jbG9zYWJsZSxcbiAgICAgICAgICBjbG9zZUljb24gPSBfdGhpcyRwcm9wczIuY2xvc2VJY29uLFxuICAgICAgICAgIHN0eWxlID0gX3RoaXMkcHJvcHMyLnN0eWxlLFxuICAgICAgICAgIG9uQ2xpY2sgPSBfdGhpcyRwcm9wczIub25DbGljayxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzMi5jaGlsZHJlbixcbiAgICAgICAgICBob2xkZXIgPSBfdGhpcyRwcm9wczIuaG9sZGVyO1xuICAgICAgdmFyIGNvbXBvbmVudENsYXNzID0gXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1ub3RpY2VcIik7XG4gICAgICB2YXIgZGF0YU9yQXJpYUF0dHJpYnV0ZVByb3BzID0gT2JqZWN0LmtleXModGhpcy5wcm9wcykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgICAgICBpZiAoa2V5LnN1YnN0cigwLCA1KSA9PT0gJ2RhdGEtJyB8fCBrZXkuc3Vic3RyKDAsIDUpID09PSAnYXJpYS0nIHx8IGtleSA9PT0gJ3JvbGUnKSB7XG4gICAgICAgICAgYWNjW2tleV0gPSBfdGhpczIucHJvcHNba2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9LCB7fSk7XG4gICAgICB2YXIgbm9kZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNvbXBvbmVudENsYXNzLCBjbGFzc05hbWUsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgXCJcIi5jb25jYXQoY29tcG9uZW50Q2xhc3MsIFwiLWNsb3NhYmxlXCIpLCBjbG9zYWJsZSkpLFxuICAgICAgICBzdHlsZTogc3R5bGUsXG4gICAgICAgIG9uTW91c2VFbnRlcjogdGhpcy5jbGVhckNsb3NlVGltZXIsXG4gICAgICAgIG9uTW91c2VMZWF2ZTogdGhpcy5zdGFydENsb3NlVGltZXIsXG4gICAgICAgIG9uQ2xpY2s6IG9uQ2xpY2tcbiAgICAgIH0sIGRhdGFPckFyaWFBdHRyaWJ1dGVQcm9wcyksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChjb21wb25lbnRDbGFzcywgXCItY29udGVudFwiKVxuICAgICAgfSwgY2hpbGRyZW4pLCBjbG9zYWJsZSA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCB7XG4gICAgICAgIHRhYkluZGV4OiAwLFxuICAgICAgICBvbkNsaWNrOiB0aGlzLmNsb3NlLFxuICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KGNvbXBvbmVudENsYXNzLCBcIi1jbG9zZVwiKVxuICAgICAgfSwgY2xvc2VJY29uIHx8IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQoY29tcG9uZW50Q2xhc3MsIFwiLWNsb3NlLXhcIilcbiAgICAgIH0pKSA6IG51bGwpO1xuXG4gICAgICBpZiAoaG9sZGVyKSB7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3RET00uY3JlYXRlUG9ydGFsKG5vZGUsIGhvbGRlcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBOb3RpY2U7XG59KENvbXBvbmVudCk7XG5cbk5vdGljZS5kZWZhdWx0UHJvcHMgPSB7XG4gIG9uQ2xvc2U6IGZ1bmN0aW9uIG9uQ2xvc2UoKSB7fSxcbiAgZHVyYXRpb246IDEuNVxufTtcbmV4cG9ydCB7IE5vdGljZSBhcyBkZWZhdWx0IH07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGl0ZXJbU3ltYm9sLml0ZXJhdG9yXSAhPSBudWxsIHx8IGl0ZXJbXCJAQGl0ZXJhdG9yXCJdICE9IG51bGwpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufSIsImltcG9ydCBhcnJheVdpdGhvdXRIb2xlcyBmcm9tIFwiLi9hcnJheVdpdGhvdXRIb2xlcy5qc1wiO1xuaW1wb3J0IGl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi9pdGVyYWJsZVRvQXJyYXkuanNcIjtcbmltcG9ydCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qc1wiO1xuaW1wb3J0IG5vbkl0ZXJhYmxlU3ByZWFkIGZyb20gXCIuL25vbkl0ZXJhYmxlU3ByZWFkLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBhcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgbm9uSXRlcmFibGVTcHJlYWQoKTtcbn0iLCJpbXBvcnQgYXJyYXlMaWtlVG9BcnJheSBmcm9tIFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KGFycik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn0iLCJpbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBOb3RpY2UgZnJvbSAnLi9Ob3RpY2UnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbkluc3RhbmNlKSB7XG4gIHZhciBjcmVhdGVkUmVmID0gUmVhY3QudXNlUmVmKHt9KTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoW10pLFxuICAgICAgX1JlYWN0JHVzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF9SZWFjdCR1c2VTdGF0ZSwgMiksXG4gICAgICBlbGVtZW50cyA9IF9SZWFjdCR1c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRFbGVtZW50cyA9IF9SZWFjdCR1c2VTdGF0ZTJbMV07XG5cbiAgZnVuY3Rpb24gbm90aWZ5KG5vdGljZVByb3BzKSB7XG4gICAgdmFyIGZpcnN0TW91bnQgPSB0cnVlO1xuICAgIG5vdGlmaWNhdGlvbkluc3RhbmNlLmFkZChub3RpY2VQcm9wcywgZnVuY3Rpb24gKGRpdiwgcHJvcHMpIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wcy5rZXk7XG5cbiAgICAgIGlmIChkaXYgJiYgKCFjcmVhdGVkUmVmLmN1cnJlbnRba2V5XSB8fCBmaXJzdE1vdW50KSkge1xuICAgICAgICB2YXIgbm90aWNlRWxlID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTm90aWNlLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgICBob2xkZXI6IGRpdlxuICAgICAgICB9KSk7XG4gICAgICAgIGNyZWF0ZWRSZWYuY3VycmVudFtrZXldID0gbm90aWNlRWxlO1xuICAgICAgICBzZXRFbGVtZW50cyhmdW5jdGlvbiAob3JpZ2luRWxlbWVudHMpIHtcbiAgICAgICAgICB2YXIgaW5kZXggPSBvcmlnaW5FbGVtZW50cy5maW5kSW5kZXgoZnVuY3Rpb24gKGVsZSkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZS5rZXkgPT09IHByb3BzLmtleTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KG9yaWdpbkVsZW1lbnRzKSwgW25vdGljZUVsZV0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBjbG9uZUxpc3QgPSBfdG9Db25zdW1hYmxlQXJyYXkob3JpZ2luRWxlbWVudHMpO1xuXG4gICAgICAgICAgY2xvbmVMaXN0W2luZGV4XSA9IG5vdGljZUVsZTtcbiAgICAgICAgICByZXR1cm4gY2xvbmVMaXN0O1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZmlyc3RNb3VudCA9IGZhbHNlO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIFtub3RpZnksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBlbGVtZW50cyldO1xufSIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzXCI7XG5pbXBvcnQgX2NyZWF0ZVN1cGVyIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVTdXBlclwiO1xudmFyIF9leGNsdWRlZCA9IFtcImdldENvbnRhaW5lclwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgdW5tb3VudCB9IGZyb20gXCJyYy11dGlsL2VzL1JlYWN0L3JlbmRlclwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyBDU1NNb3Rpb25MaXN0IH0gZnJvbSAncmMtbW90aW9uJztcbmltcG9ydCBOb3RpY2UgZnJvbSAnLi9Ob3RpY2UnO1xuaW1wb3J0IF91c2VOb3RpZmljYXRpb24gZnJvbSAnLi91c2VOb3RpZmljYXRpb24nO1xudmFyIHNlZWQgPSAwO1xudmFyIG5vdyA9IERhdGUubm93KCk7XG5cbmZ1bmN0aW9uIGdldFV1aWQoKSB7XG4gIHZhciBpZCA9IHNlZWQ7XG4gIHNlZWQgKz0gMTtcbiAgcmV0dXJuIFwicmNOb3RpZmljYXRpb25fXCIuY29uY2F0KG5vdywgXCJfXCIpLmNvbmNhdChpZCk7XG59XG5cbnZhciBOb3RpZmljYXRpb24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE5vdGlmaWNhdGlvbiwgX0NvbXBvbmVudCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihOb3RpZmljYXRpb24pO1xuXG4gIGZ1bmN0aW9uIE5vdGlmaWNhdGlvbigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTm90aWZpY2F0aW9uKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsLmFwcGx5KF9zdXBlciwgW3RoaXNdLmNvbmNhdChhcmdzKSk7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBub3RpY2VzOiBbXVxuICAgIH07XG4gICAgX3RoaXMuaG9va1JlZnMgPSBuZXcgTWFwKCk7XG5cbiAgICBfdGhpcy5hZGQgPSBmdW5jdGlvbiAob3JpZ2luTm90aWNlLCBob2xkZXJDYWxsYmFjaykge1xuICAgICAgdmFyIGtleSA9IG9yaWdpbk5vdGljZS5rZXkgfHwgZ2V0VXVpZCgpO1xuXG4gICAgICB2YXIgbm90aWNlID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBvcmlnaW5Ob3RpY2UpLCB7fSwge1xuICAgICAgICBrZXk6IGtleVxuICAgICAgfSk7XG5cbiAgICAgIHZhciBtYXhDb3VudCA9IF90aGlzLnByb3BzLm1heENvdW50O1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAocHJldmlvdXNTdGF0ZSkge1xuICAgICAgICB2YXIgbm90aWNlcyA9IHByZXZpb3VzU3RhdGUubm90aWNlcztcbiAgICAgICAgdmFyIG5vdGljZUluZGV4ID0gbm90aWNlcy5tYXAoZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICByZXR1cm4gdi5ub3RpY2Uua2V5O1xuICAgICAgICB9KS5pbmRleE9mKGtleSk7XG4gICAgICAgIHZhciB1cGRhdGVkTm90aWNlcyA9IG5vdGljZXMuY29uY2F0KCk7XG5cbiAgICAgICAgaWYgKG5vdGljZUluZGV4ICE9PSAtMSkge1xuICAgICAgICAgIHVwZGF0ZWROb3RpY2VzLnNwbGljZShub3RpY2VJbmRleCwgMSwge1xuICAgICAgICAgICAgbm90aWNlOiBub3RpY2UsXG4gICAgICAgICAgICBob2xkZXJDYWxsYmFjazogaG9sZGVyQ2FsbGJhY2tcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAobWF4Q291bnQgJiYgbm90aWNlcy5sZW5ndGggPj0gbWF4Q291bnQpIHtcbiAgICAgICAgICAgIC8vIFhYWCwgdXNlIGtleSBvZiBmaXJzdCBpdGVtIHRvIHVwZGF0ZSBuZXcgYWRkZWQgKGxldCBSZWFjdCB0byBtb3ZlIGV4c2l0aW5nXG4gICAgICAgICAgICAvLyBpbnN0ZWFkIG9mIHJlbW92ZSBhbmQgbW91bnQpLiBTYW1lIGtleSB3YXMgdXNlZCBiZWZvcmUgZm9yIGJvdGggYSkgZXh0ZXJuYWxcbiAgICAgICAgICAgIC8vIG1hbnVhbCBjb250cm9sIGFuZCBiKSBpbnRlcm5hbCByZWFjdCAna2V5JyBwcm9wICwgd2hpY2ggaXMgbm90IHRoYXQgZ29vZC5cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICAgICAgLy8gem9tYmllSjogTm90IGtub3cgd2h5IHVzZSBgdXBkYXRlS2V5YC4gVGhpcyBtYWtlcyBOb3RpY2UgaW5maW5pdGUgbG9vcCBpbiBqZXN0LlxuICAgICAgICAgICAgLy8gQ2hhbmdlIHRvIGB1cGRhdGVNYXJrYCBmb3IgY29tcGFyZSBpbnN0ZWFkLlxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LWNvbXBvbmVudC9ub3RpZmljYXRpb24vY29tbWl0LzMyMjk5ZTZiZTM5NmY5NDA0MGJmYTgyNTE3ZWVhOTQwZGI5NDdlY2VcbiAgICAgICAgICAgIG5vdGljZS5rZXkgPSB1cGRhdGVkTm90aWNlc1swXS5ub3RpY2Uua2V5O1xuICAgICAgICAgICAgbm90aWNlLnVwZGF0ZU1hcmsgPSBnZXRVdWlkKCk7IC8vIHpvbWJpZUo6IFRoYXQncyB3aHkuIFVzZXIgbWF5IGNsb3NlIGJ5IGtleSBkaXJlY3RseS5cbiAgICAgICAgICAgIC8vIFdlIG5lZWQgcmVjb3JkIHRoaXMgYnV0IG5vdCByZS1yZW5kZXIgdG8gYXZvaWQgdXBwZXIgaXNzdWVcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1jb21wb25lbnQvbm90aWZpY2F0aW9uL2lzc3Vlcy8xMjlcblxuICAgICAgICAgICAgbm90aWNlLnVzZXJQYXNzS2V5ID0ga2V5O1xuICAgICAgICAgICAgdXBkYXRlZE5vdGljZXMuc2hpZnQoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB1cGRhdGVkTm90aWNlcy5wdXNoKHtcbiAgICAgICAgICAgIG5vdGljZTogbm90aWNlLFxuICAgICAgICAgICAgaG9sZGVyQ2FsbGJhY2s6IGhvbGRlckNhbGxiYWNrXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG5vdGljZXM6IHVwZGF0ZWROb3RpY2VzXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMucmVtb3ZlID0gZnVuY3Rpb24gKHJlbW92ZUtleSkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgdmFyIG5vdGljZXMgPSBfcmVmLm5vdGljZXM7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbm90aWNlczogbm90aWNlcy5maWx0ZXIoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICAgICAgICB2YXIgX3JlZjIkbm90aWNlID0gX3JlZjIubm90aWNlLFxuICAgICAgICAgICAgICAgIGtleSA9IF9yZWYyJG5vdGljZS5rZXksXG4gICAgICAgICAgICAgICAgdXNlclBhc3NLZXkgPSBfcmVmMiRub3RpY2UudXNlclBhc3NLZXk7XG4gICAgICAgICAgICB2YXIgbWVyZ2VkS2V5ID0gdXNlclBhc3NLZXkgfHwga2V5O1xuICAgICAgICAgICAgcmV0dXJuIG1lcmdlZEtleSAhPT0gcmVtb3ZlS2V5O1xuICAgICAgICAgIH0pXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMubm90aWNlUHJvcHNNYXAgPSB7fTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTm90aWZpY2F0aW9uLCBbe1xuICAgIGtleTogXCJnZXRUcmFuc2l0aW9uTmFtZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUcmFuc2l0aW9uTmFtZSgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgcHJlZml4Q2xzID0gX3RoaXMkcHJvcHMucHJlZml4Q2xzLFxuICAgICAgICAgIGFuaW1hdGlvbiA9IF90aGlzJHByb3BzLmFuaW1hdGlvbjtcbiAgICAgIHZhciB0cmFuc2l0aW9uTmFtZSA9IHRoaXMucHJvcHMudHJhbnNpdGlvbk5hbWU7XG5cbiAgICAgIGlmICghdHJhbnNpdGlvbk5hbWUgJiYgYW5pbWF0aW9uKSB7XG4gICAgICAgIHRyYW5zaXRpb25OYW1lID0gXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1cIikuY29uY2F0KGFuaW1hdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cmFuc2l0aW9uTmFtZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgbm90aWNlcyA9IHRoaXMuc3RhdGUubm90aWNlcztcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHByZWZpeENscyA9IF90aGlzJHByb3BzMi5wcmVmaXhDbHMsXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMyLmNsYXNzTmFtZSxcbiAgICAgICAgICBjbG9zZUljb24gPSBfdGhpcyRwcm9wczIuY2xvc2VJY29uLFxuICAgICAgICAgIHN0eWxlID0gX3RoaXMkcHJvcHMyLnN0eWxlO1xuICAgICAgdmFyIG5vdGljZUtleXMgPSBbXTtcbiAgICAgIG5vdGljZXMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjMsIGluZGV4KSB7XG4gICAgICAgIHZhciBub3RpY2UgPSBfcmVmMy5ub3RpY2UsXG4gICAgICAgICAgICBob2xkZXJDYWxsYmFjayA9IF9yZWYzLmhvbGRlckNhbGxiYWNrO1xuICAgICAgICB2YXIgdXBkYXRlTWFyayA9IGluZGV4ID09PSBub3RpY2VzLmxlbmd0aCAtIDEgPyBub3RpY2UudXBkYXRlTWFyayA6IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIGtleSA9IG5vdGljZS5rZXksXG4gICAgICAgICAgICB1c2VyUGFzc0tleSA9IG5vdGljZS51c2VyUGFzc0tleTtcblxuICAgICAgICB2YXIgbm90aWNlUHJvcHMgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7XG4gICAgICAgICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMsXG4gICAgICAgICAgY2xvc2VJY29uOiBjbG9zZUljb25cbiAgICAgICAgfSwgbm90aWNlKSwgbm90aWNlLnByb3BzKSwge30sIHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBub3RpY2VLZXk6IHVzZXJQYXNzS2V5IHx8IGtleSxcbiAgICAgICAgICB1cGRhdGVNYXJrOiB1cGRhdGVNYXJrLFxuICAgICAgICAgIG9uQ2xvc2U6IGZ1bmN0aW9uIG9uQ2xvc2Uobm90aWNlS2V5KSB7XG4gICAgICAgICAgICB2YXIgX25vdGljZSRvbkNsb3NlO1xuXG4gICAgICAgICAgICBfdGhpczIucmVtb3ZlKG5vdGljZUtleSk7XG5cbiAgICAgICAgICAgIChfbm90aWNlJG9uQ2xvc2UgPSBub3RpY2Uub25DbG9zZSkgPT09IG51bGwgfHwgX25vdGljZSRvbkNsb3NlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfbm90aWNlJG9uQ2xvc2UuY2FsbChub3RpY2UpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgb25DbGljazogbm90aWNlLm9uQ2xpY2ssXG4gICAgICAgICAgY2hpbGRyZW46IG5vdGljZS5jb250ZW50XG4gICAgICAgIH0pOyAvLyBHaXZlIHRvIG1vdGlvblxuXG5cbiAgICAgICAgbm90aWNlS2V5cy5wdXNoKGtleSk7XG4gICAgICAgIF90aGlzMi5ub3RpY2VQcm9wc01hcFtrZXldID0ge1xuICAgICAgICAgIHByb3BzOiBub3RpY2VQcm9wcyxcbiAgICAgICAgICBob2xkZXJDYWxsYmFjazogaG9sZGVyQ2FsbGJhY2tcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKHByZWZpeENscywgY2xhc3NOYW1lKSxcbiAgICAgICAgc3R5bGU6IHN0eWxlXG4gICAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDU1NNb3Rpb25MaXN0LCB7XG4gICAgICAgIGtleXM6IG5vdGljZUtleXMsXG4gICAgICAgIG1vdGlvbk5hbWU6IHRoaXMuZ2V0VHJhbnNpdGlvbk5hbWUoKSxcbiAgICAgICAgb25WaXNpYmxlQ2hhbmdlZDogZnVuY3Rpb24gb25WaXNpYmxlQ2hhbmdlZChjaGFuZ2VkVmlzaWJsZSwgX3JlZjQpIHtcbiAgICAgICAgICB2YXIga2V5ID0gX3JlZjQua2V5O1xuXG4gICAgICAgICAgaWYgKCFjaGFuZ2VkVmlzaWJsZSkge1xuICAgICAgICAgICAgZGVsZXRlIF90aGlzMi5ub3RpY2VQcm9wc01hcFtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwgZnVuY3Rpb24gKF9yZWY1KSB7XG4gICAgICAgIHZhciBrZXkgPSBfcmVmNS5rZXksXG4gICAgICAgICAgICBtb3Rpb25DbGFzc05hbWUgPSBfcmVmNS5jbGFzc05hbWUsXG4gICAgICAgICAgICBtb3Rpb25TdHlsZSA9IF9yZWY1LnN0eWxlLFxuICAgICAgICAgICAgdmlzaWJsZSA9IF9yZWY1LnZpc2libGU7XG4gICAgICAgIHZhciBfdGhpczIkbm90aWNlUHJvcHNNYXAgPSBfdGhpczIubm90aWNlUHJvcHNNYXBba2V5XSxcbiAgICAgICAgICAgIG5vdGljZVByb3BzID0gX3RoaXMyJG5vdGljZVByb3BzTWFwLnByb3BzLFxuICAgICAgICAgICAgaG9sZGVyQ2FsbGJhY2sgPSBfdGhpczIkbm90aWNlUHJvcHNNYXAuaG9sZGVyQ2FsbGJhY2s7XG5cbiAgICAgICAgaWYgKGhvbGRlckNhbGxiYWNrKSB7XG4gICAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKG1vdGlvbkNsYXNzTmFtZSwgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1ob29rLWhvbGRlclwiKSksXG4gICAgICAgICAgICBzdHlsZTogX29iamVjdFNwcmVhZCh7fSwgbW90aW9uU3R5bGUpLFxuICAgICAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYoZGl2KSB7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChkaXYpIHtcbiAgICAgICAgICAgICAgICBfdGhpczIuaG9va1JlZnMuc2V0KGtleSwgZGl2KTtcblxuICAgICAgICAgICAgICAgIGhvbGRlckNhbGxiYWNrKGRpdiwgbm90aWNlUHJvcHMpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF90aGlzMi5ob29rUmVmcy5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE5vdGljZSwgX2V4dGVuZHMoe30sIG5vdGljZVByb3BzLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKG1vdGlvbkNsYXNzTmFtZSwgbm90aWNlUHJvcHMgPT09IG51bGwgfHwgbm90aWNlUHJvcHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5vdGljZVByb3BzLmNsYXNzTmFtZSksXG4gICAgICAgICAgc3R5bGU6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgbW90aW9uU3R5bGUpLCBub3RpY2VQcm9wcyA9PT0gbnVsbCB8fCBub3RpY2VQcm9wcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogbm90aWNlUHJvcHMuc3R5bGUpLFxuICAgICAgICAgIHZpc2libGU6IHZpc2libGVcbiAgICAgICAgfSkpO1xuICAgICAgfSkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBOb3RpZmljYXRpb247XG59KENvbXBvbmVudCk7XG5cbk5vdGlmaWNhdGlvbi5uZXdJbnN0YW5jZSA9IHZvaWQgMDtcbk5vdGlmaWNhdGlvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIHByZWZpeENsczogJ3JjLW5vdGlmaWNhdGlvbicsXG4gIGFuaW1hdGlvbjogJ2ZhZGUnLFxuICBzdHlsZToge1xuICAgIHRvcDogNjUsXG4gICAgbGVmdDogJzUwJSdcbiAgfVxufTtcblxuTm90aWZpY2F0aW9uLm5ld0luc3RhbmNlID0gZnVuY3Rpb24gbmV3Tm90aWZpY2F0aW9uSW5zdGFuY2UocHJvcGVydGllcywgY2FsbGJhY2spIHtcbiAgdmFyIF9yZWY2ID0gcHJvcGVydGllcyB8fCB7fSxcbiAgICAgIGdldENvbnRhaW5lciA9IF9yZWY2LmdldENvbnRhaW5lcixcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWY2LCBfZXhjbHVkZWQpO1xuXG4gIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICBpZiAoZ2V0Q29udGFpbmVyKSB7XG4gICAgdmFyIHJvb3QgPSBnZXRDb250YWluZXIoKTtcbiAgICByb290LmFwcGVuZENoaWxkKGRpdik7XG4gIH0gZWxzZSB7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkaXYpO1xuICB9XG5cbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIHJlZihub3RpZmljYXRpb24pIHtcbiAgICBpZiAoY2FsbGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2FsbGVkID0gdHJ1ZTtcbiAgICBjYWxsYmFjayh7XG4gICAgICBub3RpY2U6IGZ1bmN0aW9uIG5vdGljZShub3RpY2VQcm9wcykge1xuICAgICAgICBub3RpZmljYXRpb24uYWRkKG5vdGljZVByb3BzKTtcbiAgICAgIH0sXG4gICAgICByZW1vdmVOb3RpY2U6IGZ1bmN0aW9uIHJlbW92ZU5vdGljZShrZXkpIHtcbiAgICAgICAgbm90aWZpY2F0aW9uLnJlbW92ZShrZXkpO1xuICAgICAgfSxcbiAgICAgIGNvbXBvbmVudDogbm90aWZpY2F0aW9uLFxuICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgdW5tb3VudChkaXYpO1xuXG4gICAgICAgIGlmIChkaXYucGFyZW50Tm9kZSkge1xuICAgICAgICAgIGRpdi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGRpdik7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyBIb29rc1xuICAgICAgdXNlTm90aWZpY2F0aW9uOiBmdW5jdGlvbiB1c2VOb3RpZmljYXRpb24oKSB7XG4gICAgICAgIHJldHVybiBfdXNlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbik7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gLy8gT25seSB1c2VkIGZvciB0ZXN0IGNhc2UgdXNhZ2VcblxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Rlc3QnICYmIHByb3BlcnRpZXMuVEVTVF9SRU5ERVIpIHtcbiAgICBwcm9wZXJ0aWVzLlRFU1RfUkVOREVSKCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChOb3RpZmljYXRpb24sIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgcmVmOiByZWZcbiAgICB9KSkpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHJlbmRlciggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTm90aWZpY2F0aW9uLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICByZWY6IHJlZlxuICB9KSksIGRpdik7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBOb3RpZmljYXRpb247IiwiaW1wb3J0IE5vdGlmaWNhdGlvbiBmcm9tICcuL05vdGlmaWNhdGlvbic7XG5leHBvcnQgZGVmYXVsdCBOb3RpZmljYXRpb247IiwiLy8gVGhpcyBpY29uIGZpbGUgaXMgZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkuXG52YXIgQ2xvc2VPdXRsaW5lZCA9IHsgXCJpY29uXCI6IHsgXCJ0YWdcIjogXCJzdmdcIiwgXCJhdHRyc1wiOiB7IFwidmlld0JveFwiOiBcIjY0IDY0IDg5NiA4OTZcIiwgXCJmb2N1c2FibGVcIjogXCJmYWxzZVwiIH0sIFwiY2hpbGRyZW5cIjogW3sgXCJ0YWdcIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNNTYzLjggNTEybDI2Mi41LTMxMi45YzQuNC01LjIuNy0xMy4xLTYuMS0xMy4xaC03OS44Yy00LjcgMC05LjIgMi4xLTEyLjMgNS43TDUxMS42IDQ0OS44IDI5NS4xIDE5MS43Yy0zLTMuNi03LjUtNS43LTEyLjMtNS43SDIwM2MtNi44IDAtMTAuNSA3LjktNi4xIDEzLjFMNDU5LjQgNTEyIDE5Ni45IDgyNC45QTcuOTUgNy45NSAwIDAwMjAzIDgzOGg3OS44YzQuNyAwIDkuMi0yLjEgMTIuMy01LjdsMjE2LjUtMjU4LjEgMjE2LjUgMjU4LjFjMyAzLjYgNy41IDUuNyAxMi4zIDUuN2g3OS44YzYuOCAwIDEwLjUtNy45IDYuMS0xMy4xTDU2My44IDUxMnpcIiB9IH1dIH0sIFwibmFtZVwiOiBcImNsb3NlXCIsIFwidGhlbWVcIjogXCJvdXRsaW5lZFwiIH07XG5leHBvcnQgZGVmYXVsdCBDbG9zZU91dGxpbmVkO1xuIiwiaW1wb3J0IHsgY3JlYXRlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbnZhciBJY29uQ29udGV4dCA9IC8qI19fUFVSRV9fKi9jcmVhdGVDb250ZXh0KHt9KTtcbmV4cG9ydCBkZWZhdWx0IEljb25Db250ZXh0OyIsIi8qKlxuICogVGFrZSBpbnB1dCBmcm9tIFswLCBuXSBhbmQgcmV0dXJuIGl0IGFzIFswLCAxXVxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gYm91bmQwMShuLCBtYXgpIHtcbiAgICBpZiAoaXNPbmVQb2ludFplcm8obikpIHtcbiAgICAgICAgbiA9ICcxMDAlJztcbiAgICB9XG4gICAgdmFyIGlzUGVyY2VudCA9IGlzUGVyY2VudGFnZShuKTtcbiAgICBuID0gbWF4ID09PSAzNjAgPyBuIDogTWF0aC5taW4obWF4LCBNYXRoLm1heCgwLCBwYXJzZUZsb2F0KG4pKSk7XG4gICAgLy8gQXV0b21hdGljYWxseSBjb252ZXJ0IHBlcmNlbnRhZ2UgaW50byBudW1iZXJcbiAgICBpZiAoaXNQZXJjZW50KSB7XG4gICAgICAgIG4gPSBwYXJzZUludChTdHJpbmcobiAqIG1heCksIDEwKSAvIDEwMDtcbiAgICB9XG4gICAgLy8gSGFuZGxlIGZsb2F0aW5nIHBvaW50IHJvdW5kaW5nIGVycm9yc1xuICAgIGlmIChNYXRoLmFicyhuIC0gbWF4KSA8IDAuMDAwMDAxKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICAvLyBDb252ZXJ0IGludG8gWzAsIDFdIHJhbmdlIGlmIGl0IGlzbid0IGFscmVhZHlcbiAgICBpZiAobWF4ID09PSAzNjApIHtcbiAgICAgICAgLy8gSWYgbiBpcyBhIGh1ZSBnaXZlbiBpbiBkZWdyZWVzLFxuICAgICAgICAvLyB3cmFwIGFyb3VuZCBvdXQtb2YtcmFuZ2UgdmFsdWVzIGludG8gWzAsIDM2MF0gcmFuZ2VcbiAgICAgICAgLy8gdGhlbiBjb252ZXJ0IGludG8gWzAsIDFdLlxuICAgICAgICBuID0gKG4gPCAwID8gKG4gJSBtYXgpICsgbWF4IDogbiAlIG1heCkgLyBwYXJzZUZsb2F0KFN0cmluZyhtYXgpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIElmIG4gbm90IGEgaHVlIGdpdmVuIGluIGRlZ3JlZXNcbiAgICAgICAgLy8gQ29udmVydCBpbnRvIFswLCAxXSByYW5nZSBpZiBpdCBpc24ndCBhbHJlYWR5LlxuICAgICAgICBuID0gKG4gJSBtYXgpIC8gcGFyc2VGbG9hdChTdHJpbmcobWF4KSk7XG4gICAgfVxuICAgIHJldHVybiBuO1xufVxuLyoqXG4gKiBGb3JjZSBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDFcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsYW1wMDEodmFsKSB7XG4gICAgcmV0dXJuIE1hdGgubWluKDEsIE1hdGgubWF4KDAsIHZhbCkpO1xufVxuLyoqXG4gKiBOZWVkIHRvIGhhbmRsZSAxLjAgYXMgMTAwJSwgc2luY2Ugb25jZSBpdCBpcyBhIG51bWJlciwgdGhlcmUgaXMgbm8gZGlmZmVyZW5jZSBiZXR3ZWVuIGl0IGFuZCAxXG4gKiA8aHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy83NDIyMDcyL2phdmFzY3JpcHQtaG93LXRvLWRldGVjdC1udW1iZXItYXMtYS1kZWNpbWFsLWluY2x1ZGluZy0xLTA+XG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc09uZVBvaW50WmVybyhuKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBuID09PSAnc3RyaW5nJyAmJiBuLmluZGV4T2YoJy4nKSAhPT0gLTEgJiYgcGFyc2VGbG9hdChuKSA9PT0gMTtcbn1cbi8qKlxuICogQ2hlY2sgdG8gc2VlIGlmIHN0cmluZyBwYXNzZWQgaW4gaXMgYSBwZXJjZW50YWdlXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1BlcmNlbnRhZ2Uobikge1xuICAgIHJldHVybiB0eXBlb2YgbiA9PT0gJ3N0cmluZycgJiYgbi5pbmRleE9mKCclJykgIT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm4gYSB2YWxpZCBhbHBoYSB2YWx1ZSBbMCwxXSB3aXRoIGFsbCBpbnZhbGlkIHZhbHVlcyBiZWluZyBzZXQgdG8gMVxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gYm91bmRBbHBoYShhKSB7XG4gICAgYSA9IHBhcnNlRmxvYXQoYSk7XG4gICAgaWYgKGlzTmFOKGEpIHx8IGEgPCAwIHx8IGEgPiAxKSB7XG4gICAgICAgIGEgPSAxO1xuICAgIH1cbiAgICByZXR1cm4gYTtcbn1cbi8qKlxuICogUmVwbGFjZSBhIGRlY2ltYWwgd2l0aCBpdCdzIHBlcmNlbnRhZ2UgdmFsdWVcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRUb1BlcmNlbnRhZ2Uobikge1xuICAgIGlmIChuIDw9IDEpIHtcbiAgICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KE51bWJlcihuKSAqIDEwMCwgXCIlXCIpO1xuICAgIH1cbiAgICByZXR1cm4gbjtcbn1cbi8qKlxuICogRm9yY2UgYSBoZXggdmFsdWUgdG8gaGF2ZSAyIGNoYXJhY3RlcnNcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhZDIoYykge1xuICAgIHJldHVybiBjLmxlbmd0aCA9PT0gMSA/ICcwJyArIGMgOiBTdHJpbmcoYyk7XG59XG4iLCJpbXBvcnQgeyBib3VuZDAxLCBwYWQyIH0gZnJvbSAnLi91dGlsJztcbi8vIGByZ2JUb0hzbGAsIGByZ2JUb0hzdmAsIGBoc2xUb1JnYmAsIGBoc3ZUb1JnYmAgbW9kaWZpZWQgZnJvbTpcbi8vIDxodHRwOi8vbWppamFja3Nvbi5jb20vMjAwOC8wMi9yZ2ItdG8taHNsLWFuZC1yZ2ItdG8taHN2LWNvbG9yLW1vZGVsLWNvbnZlcnNpb24tYWxnb3JpdGhtcy1pbi1qYXZhc2NyaXB0PlxuLyoqXG4gKiBIYW5kbGUgYm91bmRzIC8gcGVyY2VudGFnZSBjaGVja2luZyB0byBjb25mb3JtIHRvIENTUyBjb2xvciBzcGVjXG4gKiA8aHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1jb2xvci8+XG4gKiAqQXNzdW1lczoqIHIsIGcsIGIgaW4gWzAsIDI1NV0gb3IgWzAsIDFdXG4gKiAqUmV0dXJuczoqIHsgciwgZywgYiB9IGluIFswLCAyNTVdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZ2JUb1JnYihyLCBnLCBiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcjogYm91bmQwMShyLCAyNTUpICogMjU1LFxuICAgICAgICBnOiBib3VuZDAxKGcsIDI1NSkgKiAyNTUsXG4gICAgICAgIGI6IGJvdW5kMDEoYiwgMjU1KSAqIDI1NSxcbiAgICB9O1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhbiBSR0IgY29sb3IgdmFsdWUgdG8gSFNMLlxuICogKkFzc3VtZXM6KiByLCBnLCBhbmQgYiBhcmUgY29udGFpbmVkIGluIFswLCAyNTVdIG9yIFswLCAxXVxuICogKlJldHVybnM6KiB7IGgsIHMsIGwgfSBpbiBbMCwxXVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmdiVG9Ic2wociwgZywgYikge1xuICAgIHIgPSBib3VuZDAxKHIsIDI1NSk7XG4gICAgZyA9IGJvdW5kMDEoZywgMjU1KTtcbiAgICBiID0gYm91bmQwMShiLCAyNTUpO1xuICAgIHZhciBtYXggPSBNYXRoLm1heChyLCBnLCBiKTtcbiAgICB2YXIgbWluID0gTWF0aC5taW4ociwgZywgYik7XG4gICAgdmFyIGggPSAwO1xuICAgIHZhciBzID0gMDtcbiAgICB2YXIgbCA9IChtYXggKyBtaW4pIC8gMjtcbiAgICBpZiAobWF4ID09PSBtaW4pIHtcbiAgICAgICAgcyA9IDA7XG4gICAgICAgIGggPSAwOyAvLyBhY2hyb21hdGljXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgZCA9IG1heCAtIG1pbjtcbiAgICAgICAgcyA9IGwgPiAwLjUgPyBkIC8gKDIgLSBtYXggLSBtaW4pIDogZCAvIChtYXggKyBtaW4pO1xuICAgICAgICBzd2l0Y2ggKG1heCkge1xuICAgICAgICAgICAgY2FzZSByOlxuICAgICAgICAgICAgICAgIGggPSAoZyAtIGIpIC8gZCArIChnIDwgYiA/IDYgOiAwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZzpcbiAgICAgICAgICAgICAgICBoID0gKGIgLSByKSAvIGQgKyAyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBiOlxuICAgICAgICAgICAgICAgIGggPSAociAtIGcpIC8gZCArIDQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGggLz0gNjtcbiAgICB9XG4gICAgcmV0dXJuIHsgaDogaCwgczogcywgbDogbCB9O1xufVxuZnVuY3Rpb24gaHVlMnJnYihwLCBxLCB0KSB7XG4gICAgaWYgKHQgPCAwKSB7XG4gICAgICAgIHQgKz0gMTtcbiAgICB9XG4gICAgaWYgKHQgPiAxKSB7XG4gICAgICAgIHQgLT0gMTtcbiAgICB9XG4gICAgaWYgKHQgPCAxIC8gNikge1xuICAgICAgICByZXR1cm4gcCArIChxIC0gcCkgKiAoNiAqIHQpO1xuICAgIH1cbiAgICBpZiAodCA8IDEgLyAyKSB7XG4gICAgICAgIHJldHVybiBxO1xuICAgIH1cbiAgICBpZiAodCA8IDIgLyAzKSB7XG4gICAgICAgIHJldHVybiBwICsgKHEgLSBwKSAqICgyIC8gMyAtIHQpICogNjtcbiAgICB9XG4gICAgcmV0dXJuIHA7XG59XG4vKipcbiAqIENvbnZlcnRzIGFuIEhTTCBjb2xvciB2YWx1ZSB0byBSR0IuXG4gKlxuICogKkFzc3VtZXM6KiBoIGlzIGNvbnRhaW5lZCBpbiBbMCwgMV0gb3IgWzAsIDM2MF0gYW5kIHMgYW5kIGwgYXJlIGNvbnRhaW5lZCBbMCwgMV0gb3IgWzAsIDEwMF1cbiAqICpSZXR1cm5zOiogeyByLCBnLCBiIH0gaW4gdGhlIHNldCBbMCwgMjU1XVxuICovXG5leHBvcnQgZnVuY3Rpb24gaHNsVG9SZ2IoaCwgcywgbCkge1xuICAgIHZhciByO1xuICAgIHZhciBnO1xuICAgIHZhciBiO1xuICAgIGggPSBib3VuZDAxKGgsIDM2MCk7XG4gICAgcyA9IGJvdW5kMDEocywgMTAwKTtcbiAgICBsID0gYm91bmQwMShsLCAxMDApO1xuICAgIGlmIChzID09PSAwKSB7XG4gICAgICAgIC8vIGFjaHJvbWF0aWNcbiAgICAgICAgZyA9IGw7XG4gICAgICAgIGIgPSBsO1xuICAgICAgICByID0gbDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBxID0gbCA8IDAuNSA/IGwgKiAoMSArIHMpIDogbCArIHMgLSBsICogcztcbiAgICAgICAgdmFyIHAgPSAyICogbCAtIHE7XG4gICAgICAgIHIgPSBodWUycmdiKHAsIHEsIGggKyAxIC8gMyk7XG4gICAgICAgIGcgPSBodWUycmdiKHAsIHEsIGgpO1xuICAgICAgICBiID0gaHVlMnJnYihwLCBxLCBoIC0gMSAvIDMpO1xuICAgIH1cbiAgICByZXR1cm4geyByOiByICogMjU1LCBnOiBnICogMjU1LCBiOiBiICogMjU1IH07XG59XG4vKipcbiAqIENvbnZlcnRzIGFuIFJHQiBjb2xvciB2YWx1ZSB0byBIU1ZcbiAqXG4gKiAqQXNzdW1lczoqIHIsIGcsIGFuZCBiIGFyZSBjb250YWluZWQgaW4gdGhlIHNldCBbMCwgMjU1XSBvciBbMCwgMV1cbiAqICpSZXR1cm5zOiogeyBoLCBzLCB2IH0gaW4gWzAsMV1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJnYlRvSHN2KHIsIGcsIGIpIHtcbiAgICByID0gYm91bmQwMShyLCAyNTUpO1xuICAgIGcgPSBib3VuZDAxKGcsIDI1NSk7XG4gICAgYiA9IGJvdW5kMDEoYiwgMjU1KTtcbiAgICB2YXIgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG4gICAgdmFyIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuICAgIHZhciBoID0gMDtcbiAgICB2YXIgdiA9IG1heDtcbiAgICB2YXIgZCA9IG1heCAtIG1pbjtcbiAgICB2YXIgcyA9IG1heCA9PT0gMCA/IDAgOiBkIC8gbWF4O1xuICAgIGlmIChtYXggPT09IG1pbikge1xuICAgICAgICBoID0gMDsgLy8gYWNocm9tYXRpY1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc3dpdGNoIChtYXgpIHtcbiAgICAgICAgICAgIGNhc2UgcjpcbiAgICAgICAgICAgICAgICBoID0gKGcgLSBiKSAvIGQgKyAoZyA8IGIgPyA2IDogMCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGc6XG4gICAgICAgICAgICAgICAgaCA9IChiIC0gcikgLyBkICsgMjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgYjpcbiAgICAgICAgICAgICAgICBoID0gKHIgLSBnKSAvIGQgKyA0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBoIC89IDY7XG4gICAgfVxuICAgIHJldHVybiB7IGg6IGgsIHM6IHMsIHY6IHYgfTtcbn1cbi8qKlxuICogQ29udmVydHMgYW4gSFNWIGNvbG9yIHZhbHVlIHRvIFJHQi5cbiAqXG4gKiAqQXNzdW1lczoqIGggaXMgY29udGFpbmVkIGluIFswLCAxXSBvciBbMCwgMzYwXSBhbmQgcyBhbmQgdiBhcmUgY29udGFpbmVkIGluIFswLCAxXSBvciBbMCwgMTAwXVxuICogKlJldHVybnM6KiB7IHIsIGcsIGIgfSBpbiB0aGUgc2V0IFswLCAyNTVdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoc3ZUb1JnYihoLCBzLCB2KSB7XG4gICAgaCA9IGJvdW5kMDEoaCwgMzYwKSAqIDY7XG4gICAgcyA9IGJvdW5kMDEocywgMTAwKTtcbiAgICB2ID0gYm91bmQwMSh2LCAxMDApO1xuICAgIHZhciBpID0gTWF0aC5mbG9vcihoKTtcbiAgICB2YXIgZiA9IGggLSBpO1xuICAgIHZhciBwID0gdiAqICgxIC0gcyk7XG4gICAgdmFyIHEgPSB2ICogKDEgLSBmICogcyk7XG4gICAgdmFyIHQgPSB2ICogKDEgLSAoMSAtIGYpICogcyk7XG4gICAgdmFyIG1vZCA9IGkgJSA2O1xuICAgIHZhciByID0gW3YsIHEsIHAsIHAsIHQsIHZdW21vZF07XG4gICAgdmFyIGcgPSBbdCwgdiwgdiwgcSwgcCwgcF1bbW9kXTtcbiAgICB2YXIgYiA9IFtwLCBwLCB0LCB2LCB2LCBxXVttb2RdO1xuICAgIHJldHVybiB7IHI6IHIgKiAyNTUsIGc6IGcgKiAyNTUsIGI6IGIgKiAyNTUgfTtcbn1cbi8qKlxuICogQ29udmVydHMgYW4gUkdCIGNvbG9yIHRvIGhleFxuICpcbiAqIEFzc3VtZXMgciwgZywgYW5kIGIgYXJlIGNvbnRhaW5lZCBpbiB0aGUgc2V0IFswLCAyNTVdXG4gKiBSZXR1cm5zIGEgMyBvciA2IGNoYXJhY3RlciBoZXhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJnYlRvSGV4KHIsIGcsIGIsIGFsbG93M0NoYXIpIHtcbiAgICB2YXIgaGV4ID0gW1xuICAgICAgICBwYWQyKE1hdGgucm91bmQocikudG9TdHJpbmcoMTYpKSxcbiAgICAgICAgcGFkMihNYXRoLnJvdW5kKGcpLnRvU3RyaW5nKDE2KSksXG4gICAgICAgIHBhZDIoTWF0aC5yb3VuZChiKS50b1N0cmluZygxNikpLFxuICAgIF07XG4gICAgLy8gUmV0dXJuIGEgMyBjaGFyYWN0ZXIgaGV4IGlmIHBvc3NpYmxlXG4gICAgaWYgKGFsbG93M0NoYXIgJiZcbiAgICAgICAgaGV4WzBdLnN0YXJ0c1dpdGgoaGV4WzBdLmNoYXJBdCgxKSkgJiZcbiAgICAgICAgaGV4WzFdLnN0YXJ0c1dpdGgoaGV4WzFdLmNoYXJBdCgxKSkgJiZcbiAgICAgICAgaGV4WzJdLnN0YXJ0c1dpdGgoaGV4WzJdLmNoYXJBdCgxKSkpIHtcbiAgICAgICAgcmV0dXJuIGhleFswXS5jaGFyQXQoMCkgKyBoZXhbMV0uY2hhckF0KDApICsgaGV4WzJdLmNoYXJBdCgwKTtcbiAgICB9XG4gICAgcmV0dXJuIGhleC5qb2luKCcnKTtcbn1cbi8qKlxuICogQ29udmVydHMgYW4gUkdCQSBjb2xvciBwbHVzIGFscGhhIHRyYW5zcGFyZW5jeSB0byBoZXhcbiAqXG4gKiBBc3N1bWVzIHIsIGcsIGIgYXJlIGNvbnRhaW5lZCBpbiB0aGUgc2V0IFswLCAyNTVdIGFuZFxuICogYSBpbiBbMCwgMV0uIFJldHVybnMgYSA0IG9yIDggY2hhcmFjdGVyIHJnYmEgaGV4XG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtcGFyYW1zXG5leHBvcnQgZnVuY3Rpb24gcmdiYVRvSGV4KHIsIGcsIGIsIGEsIGFsbG93NENoYXIpIHtcbiAgICB2YXIgaGV4ID0gW1xuICAgICAgICBwYWQyKE1hdGgucm91bmQocikudG9TdHJpbmcoMTYpKSxcbiAgICAgICAgcGFkMihNYXRoLnJvdW5kKGcpLnRvU3RyaW5nKDE2KSksXG4gICAgICAgIHBhZDIoTWF0aC5yb3VuZChiKS50b1N0cmluZygxNikpLFxuICAgICAgICBwYWQyKGNvbnZlcnREZWNpbWFsVG9IZXgoYSkpLFxuICAgIF07XG4gICAgLy8gUmV0dXJuIGEgNCBjaGFyYWN0ZXIgaGV4IGlmIHBvc3NpYmxlXG4gICAgaWYgKGFsbG93NENoYXIgJiZcbiAgICAgICAgaGV4WzBdLnN0YXJ0c1dpdGgoaGV4WzBdLmNoYXJBdCgxKSkgJiZcbiAgICAgICAgaGV4WzFdLnN0YXJ0c1dpdGgoaGV4WzFdLmNoYXJBdCgxKSkgJiZcbiAgICAgICAgaGV4WzJdLnN0YXJ0c1dpdGgoaGV4WzJdLmNoYXJBdCgxKSkgJiZcbiAgICAgICAgaGV4WzNdLnN0YXJ0c1dpdGgoaGV4WzNdLmNoYXJBdCgxKSkpIHtcbiAgICAgICAgcmV0dXJuIGhleFswXS5jaGFyQXQoMCkgKyBoZXhbMV0uY2hhckF0KDApICsgaGV4WzJdLmNoYXJBdCgwKSArIGhleFszXS5jaGFyQXQoMCk7XG4gICAgfVxuICAgIHJldHVybiBoZXguam9pbignJyk7XG59XG4vKipcbiAqIENvbnZlcnRzIGFuIFJHQkEgY29sb3IgdG8gYW4gQVJHQiBIZXg4IHN0cmluZ1xuICogUmFyZWx5IHVzZWQsIGJ1dCByZXF1aXJlZCBmb3IgXCJ0b0ZpbHRlcigpXCJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJnYmFUb0FyZ2JIZXgociwgZywgYiwgYSkge1xuICAgIHZhciBoZXggPSBbXG4gICAgICAgIHBhZDIoY29udmVydERlY2ltYWxUb0hleChhKSksXG4gICAgICAgIHBhZDIoTWF0aC5yb3VuZChyKS50b1N0cmluZygxNikpLFxuICAgICAgICBwYWQyKE1hdGgucm91bmQoZykudG9TdHJpbmcoMTYpKSxcbiAgICAgICAgcGFkMihNYXRoLnJvdW5kKGIpLnRvU3RyaW5nKDE2KSksXG4gICAgXTtcbiAgICByZXR1cm4gaGV4LmpvaW4oJycpO1xufVxuLyoqIENvbnZlcnRzIGEgZGVjaW1hbCB0byBhIGhleCB2YWx1ZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnREZWNpbWFsVG9IZXgoZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKHBhcnNlRmxvYXQoZCkgKiAyNTUpLnRvU3RyaW5nKDE2KTtcbn1cbi8qKiBDb252ZXJ0cyBhIGhleCB2YWx1ZSB0byBhIGRlY2ltYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0SGV4VG9EZWNpbWFsKGgpIHtcbiAgICByZXR1cm4gcGFyc2VJbnRGcm9tSGV4KGgpIC8gMjU1O1xufVxuLyoqIFBhcnNlIGEgYmFzZS0xNiBoZXggdmFsdWUgaW50byBhIGJhc2UtMTAgaW50ZWdlciAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSW50RnJvbUhleCh2YWwpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQodmFsLCAxNik7XG59XG5leHBvcnQgZnVuY3Rpb24gbnVtYmVySW5wdXRUb09iamVjdChjb2xvcikge1xuICAgIHJldHVybiB7XG4gICAgICAgIHI6IGNvbG9yID4+IDE2LFxuICAgICAgICBnOiAoY29sb3IgJiAweGZmMDApID4+IDgsXG4gICAgICAgIGI6IGNvbG9yICYgMHhmZixcbiAgICB9O1xufVxuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2JhaGFtYXMxMC9jc3MtY29sb3ItbmFtZXMvYmxvYi9tYXN0ZXIvY3NzLWNvbG9yLW5hbWVzLmpzb25cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgdmFyIG5hbWVzID0ge1xuICAgIGFsaWNlYmx1ZTogJyNmMGY4ZmYnLFxuICAgIGFudGlxdWV3aGl0ZTogJyNmYWViZDcnLFxuICAgIGFxdWE6ICcjMDBmZmZmJyxcbiAgICBhcXVhbWFyaW5lOiAnIzdmZmZkNCcsXG4gICAgYXp1cmU6ICcjZjBmZmZmJyxcbiAgICBiZWlnZTogJyNmNWY1ZGMnLFxuICAgIGJpc3F1ZTogJyNmZmU0YzQnLFxuICAgIGJsYWNrOiAnIzAwMDAwMCcsXG4gICAgYmxhbmNoZWRhbG1vbmQ6ICcjZmZlYmNkJyxcbiAgICBibHVlOiAnIzAwMDBmZicsXG4gICAgYmx1ZXZpb2xldDogJyM4YTJiZTInLFxuICAgIGJyb3duOiAnI2E1MmEyYScsXG4gICAgYnVybHl3b29kOiAnI2RlYjg4NycsXG4gICAgY2FkZXRibHVlOiAnIzVmOWVhMCcsXG4gICAgY2hhcnRyZXVzZTogJyM3ZmZmMDAnLFxuICAgIGNob2NvbGF0ZTogJyNkMjY5MWUnLFxuICAgIGNvcmFsOiAnI2ZmN2Y1MCcsXG4gICAgY29ybmZsb3dlcmJsdWU6ICcjNjQ5NWVkJyxcbiAgICBjb3Juc2lsazogJyNmZmY4ZGMnLFxuICAgIGNyaW1zb246ICcjZGMxNDNjJyxcbiAgICBjeWFuOiAnIzAwZmZmZicsXG4gICAgZGFya2JsdWU6ICcjMDAwMDhiJyxcbiAgICBkYXJrY3lhbjogJyMwMDhiOGInLFxuICAgIGRhcmtnb2xkZW5yb2Q6ICcjYjg4NjBiJyxcbiAgICBkYXJrZ3JheTogJyNhOWE5YTknLFxuICAgIGRhcmtncmVlbjogJyMwMDY0MDAnLFxuICAgIGRhcmtncmV5OiAnI2E5YTlhOScsXG4gICAgZGFya2toYWtpOiAnI2JkYjc2YicsXG4gICAgZGFya21hZ2VudGE6ICcjOGIwMDhiJyxcbiAgICBkYXJrb2xpdmVncmVlbjogJyM1NTZiMmYnLFxuICAgIGRhcmtvcmFuZ2U6ICcjZmY4YzAwJyxcbiAgICBkYXJrb3JjaGlkOiAnIzk5MzJjYycsXG4gICAgZGFya3JlZDogJyM4YjAwMDAnLFxuICAgIGRhcmtzYWxtb246ICcjZTk5NjdhJyxcbiAgICBkYXJrc2VhZ3JlZW46ICcjOGZiYzhmJyxcbiAgICBkYXJrc2xhdGVibHVlOiAnIzQ4M2Q4YicsXG4gICAgZGFya3NsYXRlZ3JheTogJyMyZjRmNGYnLFxuICAgIGRhcmtzbGF0ZWdyZXk6ICcjMmY0ZjRmJyxcbiAgICBkYXJrdHVycXVvaXNlOiAnIzAwY2VkMScsXG4gICAgZGFya3Zpb2xldDogJyM5NDAwZDMnLFxuICAgIGRlZXBwaW5rOiAnI2ZmMTQ5MycsXG4gICAgZGVlcHNreWJsdWU6ICcjMDBiZmZmJyxcbiAgICBkaW1ncmF5OiAnIzY5Njk2OScsXG4gICAgZGltZ3JleTogJyM2OTY5NjknLFxuICAgIGRvZGdlcmJsdWU6ICcjMWU5MGZmJyxcbiAgICBmaXJlYnJpY2s6ICcjYjIyMjIyJyxcbiAgICBmbG9yYWx3aGl0ZTogJyNmZmZhZjAnLFxuICAgIGZvcmVzdGdyZWVuOiAnIzIyOGIyMicsXG4gICAgZnVjaHNpYTogJyNmZjAwZmYnLFxuICAgIGdhaW5zYm9ybzogJyNkY2RjZGMnLFxuICAgIGdob3N0d2hpdGU6ICcjZjhmOGZmJyxcbiAgICBnb2xkZW5yb2Q6ICcjZGFhNTIwJyxcbiAgICBnb2xkOiAnI2ZmZDcwMCcsXG4gICAgZ3JheTogJyM4MDgwODAnLFxuICAgIGdyZWVuOiAnIzAwODAwMCcsXG4gICAgZ3JlZW55ZWxsb3c6ICcjYWRmZjJmJyxcbiAgICBncmV5OiAnIzgwODA4MCcsXG4gICAgaG9uZXlkZXc6ICcjZjBmZmYwJyxcbiAgICBob3RwaW5rOiAnI2ZmNjliNCcsXG4gICAgaW5kaWFucmVkOiAnI2NkNWM1YycsXG4gICAgaW5kaWdvOiAnIzRiMDA4MicsXG4gICAgaXZvcnk6ICcjZmZmZmYwJyxcbiAgICBraGFraTogJyNmMGU2OGMnLFxuICAgIGxhdmVuZGVyYmx1c2g6ICcjZmZmMGY1JyxcbiAgICBsYXZlbmRlcjogJyNlNmU2ZmEnLFxuICAgIGxhd25ncmVlbjogJyM3Y2ZjMDAnLFxuICAgIGxlbW9uY2hpZmZvbjogJyNmZmZhY2QnLFxuICAgIGxpZ2h0Ymx1ZTogJyNhZGQ4ZTYnLFxuICAgIGxpZ2h0Y29yYWw6ICcjZjA4MDgwJyxcbiAgICBsaWdodGN5YW46ICcjZTBmZmZmJyxcbiAgICBsaWdodGdvbGRlbnJvZHllbGxvdzogJyNmYWZhZDInLFxuICAgIGxpZ2h0Z3JheTogJyNkM2QzZDMnLFxuICAgIGxpZ2h0Z3JlZW46ICcjOTBlZTkwJyxcbiAgICBsaWdodGdyZXk6ICcjZDNkM2QzJyxcbiAgICBsaWdodHBpbms6ICcjZmZiNmMxJyxcbiAgICBsaWdodHNhbG1vbjogJyNmZmEwN2EnLFxuICAgIGxpZ2h0c2VhZ3JlZW46ICcjMjBiMmFhJyxcbiAgICBsaWdodHNreWJsdWU6ICcjODdjZWZhJyxcbiAgICBsaWdodHNsYXRlZ3JheTogJyM3Nzg4OTknLFxuICAgIGxpZ2h0c2xhdGVncmV5OiAnIzc3ODg5OScsXG4gICAgbGlnaHRzdGVlbGJsdWU6ICcjYjBjNGRlJyxcbiAgICBsaWdodHllbGxvdzogJyNmZmZmZTAnLFxuICAgIGxpbWU6ICcjMDBmZjAwJyxcbiAgICBsaW1lZ3JlZW46ICcjMzJjZDMyJyxcbiAgICBsaW5lbjogJyNmYWYwZTYnLFxuICAgIG1hZ2VudGE6ICcjZmYwMGZmJyxcbiAgICBtYXJvb246ICcjODAwMDAwJyxcbiAgICBtZWRpdW1hcXVhbWFyaW5lOiAnIzY2Y2RhYScsXG4gICAgbWVkaXVtYmx1ZTogJyMwMDAwY2QnLFxuICAgIG1lZGl1bW9yY2hpZDogJyNiYTU1ZDMnLFxuICAgIG1lZGl1bXB1cnBsZTogJyM5MzcwZGInLFxuICAgIG1lZGl1bXNlYWdyZWVuOiAnIzNjYjM3MScsXG4gICAgbWVkaXVtc2xhdGVibHVlOiAnIzdiNjhlZScsXG4gICAgbWVkaXVtc3ByaW5nZ3JlZW46ICcjMDBmYTlhJyxcbiAgICBtZWRpdW10dXJxdW9pc2U6ICcjNDhkMWNjJyxcbiAgICBtZWRpdW12aW9sZXRyZWQ6ICcjYzcxNTg1JyxcbiAgICBtaWRuaWdodGJsdWU6ICcjMTkxOTcwJyxcbiAgICBtaW50Y3JlYW06ICcjZjVmZmZhJyxcbiAgICBtaXN0eXJvc2U6ICcjZmZlNGUxJyxcbiAgICBtb2NjYXNpbjogJyNmZmU0YjUnLFxuICAgIG5hdmFqb3doaXRlOiAnI2ZmZGVhZCcsXG4gICAgbmF2eTogJyMwMDAwODAnLFxuICAgIG9sZGxhY2U6ICcjZmRmNWU2JyxcbiAgICBvbGl2ZTogJyM4MDgwMDAnLFxuICAgIG9saXZlZHJhYjogJyM2YjhlMjMnLFxuICAgIG9yYW5nZTogJyNmZmE1MDAnLFxuICAgIG9yYW5nZXJlZDogJyNmZjQ1MDAnLFxuICAgIG9yY2hpZDogJyNkYTcwZDYnLFxuICAgIHBhbGVnb2xkZW5yb2Q6ICcjZWVlOGFhJyxcbiAgICBwYWxlZ3JlZW46ICcjOThmYjk4JyxcbiAgICBwYWxldHVycXVvaXNlOiAnI2FmZWVlZScsXG4gICAgcGFsZXZpb2xldHJlZDogJyNkYjcwOTMnLFxuICAgIHBhcGF5YXdoaXA6ICcjZmZlZmQ1JyxcbiAgICBwZWFjaHB1ZmY6ICcjZmZkYWI5JyxcbiAgICBwZXJ1OiAnI2NkODUzZicsXG4gICAgcGluazogJyNmZmMwY2InLFxuICAgIHBsdW06ICcjZGRhMGRkJyxcbiAgICBwb3dkZXJibHVlOiAnI2IwZTBlNicsXG4gICAgcHVycGxlOiAnIzgwMDA4MCcsXG4gICAgcmViZWNjYXB1cnBsZTogJyM2NjMzOTknLFxuICAgIHJlZDogJyNmZjAwMDAnLFxuICAgIHJvc3licm93bjogJyNiYzhmOGYnLFxuICAgIHJveWFsYmx1ZTogJyM0MTY5ZTEnLFxuICAgIHNhZGRsZWJyb3duOiAnIzhiNDUxMycsXG4gICAgc2FsbW9uOiAnI2ZhODA3MicsXG4gICAgc2FuZHlicm93bjogJyNmNGE0NjAnLFxuICAgIHNlYWdyZWVuOiAnIzJlOGI1NycsXG4gICAgc2Vhc2hlbGw6ICcjZmZmNWVlJyxcbiAgICBzaWVubmE6ICcjYTA1MjJkJyxcbiAgICBzaWx2ZXI6ICcjYzBjMGMwJyxcbiAgICBza3libHVlOiAnIzg3Y2VlYicsXG4gICAgc2xhdGVibHVlOiAnIzZhNWFjZCcsXG4gICAgc2xhdGVncmF5OiAnIzcwODA5MCcsXG4gICAgc2xhdGVncmV5OiAnIzcwODA5MCcsXG4gICAgc25vdzogJyNmZmZhZmEnLFxuICAgIHNwcmluZ2dyZWVuOiAnIzAwZmY3ZicsXG4gICAgc3RlZWxibHVlOiAnIzQ2ODJiNCcsXG4gICAgdGFuOiAnI2QyYjQ4YycsXG4gICAgdGVhbDogJyMwMDgwODAnLFxuICAgIHRoaXN0bGU6ICcjZDhiZmQ4JyxcbiAgICB0b21hdG86ICcjZmY2MzQ3JyxcbiAgICB0dXJxdW9pc2U6ICcjNDBlMGQwJyxcbiAgICB2aW9sZXQ6ICcjZWU4MmVlJyxcbiAgICB3aGVhdDogJyNmNWRlYjMnLFxuICAgIHdoaXRlOiAnI2ZmZmZmZicsXG4gICAgd2hpdGVzbW9rZTogJyNmNWY1ZjUnLFxuICAgIHllbGxvdzogJyNmZmZmMDAnLFxuICAgIHllbGxvd2dyZWVuOiAnIzlhY2QzMicsXG59O1xuIiwiaW1wb3J0IHsgY29udmVydEhleFRvRGVjaW1hbCwgaHNsVG9SZ2IsIGhzdlRvUmdiLCBwYXJzZUludEZyb21IZXgsIHJnYlRvUmdiIH0gZnJvbSAnLi9jb252ZXJzaW9uJztcbmltcG9ydCB7IG5hbWVzIH0gZnJvbSAnLi9jc3MtY29sb3ItbmFtZXMnO1xuaW1wb3J0IHsgYm91bmRBbHBoYSwgY29udmVydFRvUGVyY2VudGFnZSB9IGZyb20gJy4vdXRpbCc7XG4vKipcbiAqIEdpdmVuIGEgc3RyaW5nIG9yIG9iamVjdCwgY29udmVydCB0aGF0IGlucHV0IHRvIFJHQlxuICpcbiAqIFBvc3NpYmxlIHN0cmluZyBpbnB1dHM6XG4gKiBgYGBcbiAqIFwicmVkXCJcbiAqIFwiI2YwMFwiIG9yIFwiZjAwXCJcbiAqIFwiI2ZmMDAwMFwiIG9yIFwiZmYwMDAwXCJcbiAqIFwiI2ZmMDAwMDAwXCIgb3IgXCJmZjAwMDAwMFwiXG4gKiBcInJnYiAyNTUgMCAwXCIgb3IgXCJyZ2IgKDI1NSwgMCwgMClcIlxuICogXCJyZ2IgMS4wIDAgMFwiIG9yIFwicmdiICgxLCAwLCAwKVwiXG4gKiBcInJnYmEgKDI1NSwgMCwgMCwgMSlcIiBvciBcInJnYmEgMjU1LCAwLCAwLCAxXCJcbiAqIFwicmdiYSAoMS4wLCAwLCAwLCAxKVwiIG9yIFwicmdiYSAxLjAsIDAsIDAsIDFcIlxuICogXCJoc2woMCwgMTAwJSwgNTAlKVwiIG9yIFwiaHNsIDAgMTAwJSA1MCVcIlxuICogXCJoc2xhKDAsIDEwMCUsIDUwJSwgMSlcIiBvciBcImhzbGEgMCAxMDAlIDUwJSwgMVwiXG4gKiBcImhzdigwLCAxMDAlLCAxMDAlKVwiIG9yIFwiaHN2IDAgMTAwJSAxMDAlXCJcbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5wdXRUb1JHQihjb2xvcikge1xuICAgIHZhciByZ2IgPSB7IHI6IDAsIGc6IDAsIGI6IDAgfTtcbiAgICB2YXIgYSA9IDE7XG4gICAgdmFyIHMgPSBudWxsO1xuICAgIHZhciB2ID0gbnVsbDtcbiAgICB2YXIgbCA9IG51bGw7XG4gICAgdmFyIG9rID0gZmFsc2U7XG4gICAgdmFyIGZvcm1hdCA9IGZhbHNlO1xuICAgIGlmICh0eXBlb2YgY29sb3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbG9yID0gc3RyaW5nSW5wdXRUb09iamVjdChjb2xvcik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29sb3IgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGlmIChpc1ZhbGlkQ1NTVW5pdChjb2xvci5yKSAmJiBpc1ZhbGlkQ1NTVW5pdChjb2xvci5nKSAmJiBpc1ZhbGlkQ1NTVW5pdChjb2xvci5iKSkge1xuICAgICAgICAgICAgcmdiID0gcmdiVG9SZ2IoY29sb3IuciwgY29sb3IuZywgY29sb3IuYik7XG4gICAgICAgICAgICBvayA9IHRydWU7XG4gICAgICAgICAgICBmb3JtYXQgPSBTdHJpbmcoY29sb3Iucikuc3Vic3RyKC0xKSA9PT0gJyUnID8gJ3ByZ2InIDogJ3JnYic7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNWYWxpZENTU1VuaXQoY29sb3IuaCkgJiYgaXNWYWxpZENTU1VuaXQoY29sb3IucykgJiYgaXNWYWxpZENTU1VuaXQoY29sb3IudikpIHtcbiAgICAgICAgICAgIHMgPSBjb252ZXJ0VG9QZXJjZW50YWdlKGNvbG9yLnMpO1xuICAgICAgICAgICAgdiA9IGNvbnZlcnRUb1BlcmNlbnRhZ2UoY29sb3Iudik7XG4gICAgICAgICAgICByZ2IgPSBoc3ZUb1JnYihjb2xvci5oLCBzLCB2KTtcbiAgICAgICAgICAgIG9rID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvcm1hdCA9ICdoc3YnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzVmFsaWRDU1NVbml0KGNvbG9yLmgpICYmIGlzVmFsaWRDU1NVbml0KGNvbG9yLnMpICYmIGlzVmFsaWRDU1NVbml0KGNvbG9yLmwpKSB7XG4gICAgICAgICAgICBzID0gY29udmVydFRvUGVyY2VudGFnZShjb2xvci5zKTtcbiAgICAgICAgICAgIGwgPSBjb252ZXJ0VG9QZXJjZW50YWdlKGNvbG9yLmwpO1xuICAgICAgICAgICAgcmdiID0gaHNsVG9SZ2IoY29sb3IuaCwgcywgbCk7XG4gICAgICAgICAgICBvayA9IHRydWU7XG4gICAgICAgICAgICBmb3JtYXQgPSAnaHNsJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbG9yLCAnYScpKSB7XG4gICAgICAgICAgICBhID0gY29sb3IuYTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhID0gYm91bmRBbHBoYShhKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBvazogb2ssXG4gICAgICAgIGZvcm1hdDogY29sb3IuZm9ybWF0IHx8IGZvcm1hdCxcbiAgICAgICAgcjogTWF0aC5taW4oMjU1LCBNYXRoLm1heChyZ2IuciwgMCkpLFxuICAgICAgICBnOiBNYXRoLm1pbigyNTUsIE1hdGgubWF4KHJnYi5nLCAwKSksXG4gICAgICAgIGI6IE1hdGgubWluKDI1NSwgTWF0aC5tYXgocmdiLmIsIDApKSxcbiAgICAgICAgYTogYSxcbiAgICB9O1xufVxuLy8gPGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtdmFsdWVzLyNpbnRlZ2Vycz5cbnZhciBDU1NfSU5URUdFUiA9ICdbLVxcXFwrXT9cXFxcZCslPyc7XG4vLyA8aHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy12YWx1ZXMvI251bWJlci12YWx1ZT5cbnZhciBDU1NfTlVNQkVSID0gJ1stXFxcXCtdP1xcXFxkKlxcXFwuXFxcXGQrJT8nO1xuLy8gQWxsb3cgcG9zaXRpdmUvbmVnYXRpdmUgaW50ZWdlci9udW1iZXIuICBEb24ndCBjYXB0dXJlIHRoZSBlaXRoZXIvb3IsIGp1c3QgdGhlIGVudGlyZSBvdXRjb21lLlxudmFyIENTU19VTklUID0gXCIoPzpcIi5jb25jYXQoQ1NTX05VTUJFUiwgXCIpfCg/OlwiKS5jb25jYXQoQ1NTX0lOVEVHRVIsIFwiKVwiKTtcbi8vIEFjdHVhbCBtYXRjaGluZy5cbi8vIFBhcmVudGhlc2VzIGFuZCBjb21tYXMgYXJlIG9wdGlvbmFsLCBidXQgbm90IHJlcXVpcmVkLlxuLy8gV2hpdGVzcGFjZSBjYW4gdGFrZSB0aGUgcGxhY2Ugb2YgY29tbWFzIG9yIG9wZW5pbmcgcGFyZW5cbnZhciBQRVJNSVNTSVZFX01BVENIMyA9IFwiW1xcXFxzfFxcXFwoXSsoXCIuY29uY2F0KENTU19VTklULCBcIilbLHxcXFxcc10rKFwiKS5jb25jYXQoQ1NTX1VOSVQsIFwiKVssfFxcXFxzXSsoXCIpLmNvbmNhdChDU1NfVU5JVCwgXCIpXFxcXHMqXFxcXCk/XCIpO1xudmFyIFBFUk1JU1NJVkVfTUFUQ0g0ID0gXCJbXFxcXHN8XFxcXChdKyhcIi5jb25jYXQoQ1NTX1VOSVQsIFwiKVssfFxcXFxzXSsoXCIpLmNvbmNhdChDU1NfVU5JVCwgXCIpWyx8XFxcXHNdKyhcIikuY29uY2F0KENTU19VTklULCBcIilbLHxcXFxcc10rKFwiKS5jb25jYXQoQ1NTX1VOSVQsIFwiKVxcXFxzKlxcXFwpP1wiKTtcbnZhciBtYXRjaGVycyA9IHtcbiAgICBDU1NfVU5JVDogbmV3IFJlZ0V4cChDU1NfVU5JVCksXG4gICAgcmdiOiBuZXcgUmVnRXhwKCdyZ2InICsgUEVSTUlTU0lWRV9NQVRDSDMpLFxuICAgIHJnYmE6IG5ldyBSZWdFeHAoJ3JnYmEnICsgUEVSTUlTU0lWRV9NQVRDSDQpLFxuICAgIGhzbDogbmV3IFJlZ0V4cCgnaHNsJyArIFBFUk1JU1NJVkVfTUFUQ0gzKSxcbiAgICBoc2xhOiBuZXcgUmVnRXhwKCdoc2xhJyArIFBFUk1JU1NJVkVfTUFUQ0g0KSxcbiAgICBoc3Y6IG5ldyBSZWdFeHAoJ2hzdicgKyBQRVJNSVNTSVZFX01BVENIMyksXG4gICAgaHN2YTogbmV3IFJlZ0V4cCgnaHN2YScgKyBQRVJNSVNTSVZFX01BVENINCksXG4gICAgaGV4MzogL14jPyhbMC05YS1mQS1GXXsxfSkoWzAtOWEtZkEtRl17MX0pKFswLTlhLWZBLUZdezF9KSQvLFxuICAgIGhleDY6IC9eIz8oWzAtOWEtZkEtRl17Mn0pKFswLTlhLWZBLUZdezJ9KShbMC05YS1mQS1GXXsyfSkkLyxcbiAgICBoZXg0OiAvXiM/KFswLTlhLWZBLUZdezF9KShbMC05YS1mQS1GXXsxfSkoWzAtOWEtZkEtRl17MX0pKFswLTlhLWZBLUZdezF9KSQvLFxuICAgIGhleDg6IC9eIz8oWzAtOWEtZkEtRl17Mn0pKFswLTlhLWZBLUZdezJ9KShbMC05YS1mQS1GXXsyfSkoWzAtOWEtZkEtRl17Mn0pJC8sXG59O1xuLyoqXG4gKiBQZXJtaXNzaXZlIHN0cmluZyBwYXJzaW5nLiAgVGFrZSBpbiBhIG51bWJlciBvZiBmb3JtYXRzLCBhbmQgb3V0cHV0IGFuIG9iamVjdFxuICogYmFzZWQgb24gZGV0ZWN0ZWQgZm9ybWF0LiAgUmV0dXJucyBgeyByLCBnLCBiIH1gIG9yIGB7IGgsIHMsIGwgfWAgb3IgYHsgaCwgcywgdn1gXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdJbnB1dFRvT2JqZWN0KGNvbG9yKSB7XG4gICAgY29sb3IgPSBjb2xvci50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoY29sb3IubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIG5hbWVkID0gZmFsc2U7XG4gICAgaWYgKG5hbWVzW2NvbG9yXSkge1xuICAgICAgICBjb2xvciA9IG5hbWVzW2NvbG9yXTtcbiAgICAgICAgbmFtZWQgPSB0cnVlO1xuICAgIH1cbiAgICBlbHNlIGlmIChjb2xvciA9PT0gJ3RyYW5zcGFyZW50Jykge1xuICAgICAgICByZXR1cm4geyByOiAwLCBnOiAwLCBiOiAwLCBhOiAwLCBmb3JtYXQ6ICduYW1lJyB9O1xuICAgIH1cbiAgICAvLyBUcnkgdG8gbWF0Y2ggc3RyaW5nIGlucHV0IHVzaW5nIHJlZ3VsYXIgZXhwcmVzc2lvbnMuXG4gICAgLy8gS2VlcCBtb3N0IG9mIHRoZSBudW1iZXIgYm91bmRpbmcgb3V0IG9mIHRoaXMgZnVuY3Rpb24gLSBkb24ndCB3b3JyeSBhYm91dCBbMCwxXSBvciBbMCwxMDBdIG9yIFswLDM2MF1cbiAgICAvLyBKdXN0IHJldHVybiBhbiBvYmplY3QgYW5kIGxldCB0aGUgY29udmVyc2lvbiBmdW5jdGlvbnMgaGFuZGxlIHRoYXQuXG4gICAgLy8gVGhpcyB3YXkgdGhlIHJlc3VsdCB3aWxsIGJlIHRoZSBzYW1lIHdoZXRoZXIgdGhlIHRpbnljb2xvciBpcyBpbml0aWFsaXplZCB3aXRoIHN0cmluZyBvciBvYmplY3QuXG4gICAgdmFyIG1hdGNoID0gbWF0Y2hlcnMucmdiLmV4ZWMoY29sb3IpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgICByZXR1cm4geyByOiBtYXRjaFsxXSwgZzogbWF0Y2hbMl0sIGI6IG1hdGNoWzNdIH07XG4gICAgfVxuICAgIG1hdGNoID0gbWF0Y2hlcnMucmdiYS5leGVjKGNvbG9yKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIHsgcjogbWF0Y2hbMV0sIGc6IG1hdGNoWzJdLCBiOiBtYXRjaFszXSwgYTogbWF0Y2hbNF0gfTtcbiAgICB9XG4gICAgbWF0Y2ggPSBtYXRjaGVycy5oc2wuZXhlYyhjb2xvcik7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIHJldHVybiB7IGg6IG1hdGNoWzFdLCBzOiBtYXRjaFsyXSwgbDogbWF0Y2hbM10gfTtcbiAgICB9XG4gICAgbWF0Y2ggPSBtYXRjaGVycy5oc2xhLmV4ZWMoY29sb3IpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgICByZXR1cm4geyBoOiBtYXRjaFsxXSwgczogbWF0Y2hbMl0sIGw6IG1hdGNoWzNdLCBhOiBtYXRjaFs0XSB9O1xuICAgIH1cbiAgICBtYXRjaCA9IG1hdGNoZXJzLmhzdi5leGVjKGNvbG9yKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIHsgaDogbWF0Y2hbMV0sIHM6IG1hdGNoWzJdLCB2OiBtYXRjaFszXSB9O1xuICAgIH1cbiAgICBtYXRjaCA9IG1hdGNoZXJzLmhzdmEuZXhlYyhjb2xvcik7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIHJldHVybiB7IGg6IG1hdGNoWzFdLCBzOiBtYXRjaFsyXSwgdjogbWF0Y2hbM10sIGE6IG1hdGNoWzRdIH07XG4gICAgfVxuICAgIG1hdGNoID0gbWF0Y2hlcnMuaGV4OC5leGVjKGNvbG9yKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHI6IHBhcnNlSW50RnJvbUhleChtYXRjaFsxXSksXG4gICAgICAgICAgICBnOiBwYXJzZUludEZyb21IZXgobWF0Y2hbMl0pLFxuICAgICAgICAgICAgYjogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzNdKSxcbiAgICAgICAgICAgIGE6IGNvbnZlcnRIZXhUb0RlY2ltYWwobWF0Y2hbNF0pLFxuICAgICAgICAgICAgZm9ybWF0OiBuYW1lZCA/ICduYW1lJyA6ICdoZXg4JyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgbWF0Y2ggPSBtYXRjaGVycy5oZXg2LmV4ZWMoY29sb3IpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcjogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzFdKSxcbiAgICAgICAgICAgIGc6IHBhcnNlSW50RnJvbUhleChtYXRjaFsyXSksXG4gICAgICAgICAgICBiOiBwYXJzZUludEZyb21IZXgobWF0Y2hbM10pLFxuICAgICAgICAgICAgZm9ybWF0OiBuYW1lZCA/ICduYW1lJyA6ICdoZXgnLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBtYXRjaCA9IG1hdGNoZXJzLmhleDQuZXhlYyhjb2xvcik7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByOiBwYXJzZUludEZyb21IZXgobWF0Y2hbMV0gKyBtYXRjaFsxXSksXG4gICAgICAgICAgICBnOiBwYXJzZUludEZyb21IZXgobWF0Y2hbMl0gKyBtYXRjaFsyXSksXG4gICAgICAgICAgICBiOiBwYXJzZUludEZyb21IZXgobWF0Y2hbM10gKyBtYXRjaFszXSksXG4gICAgICAgICAgICBhOiBjb252ZXJ0SGV4VG9EZWNpbWFsKG1hdGNoWzRdICsgbWF0Y2hbNF0pLFxuICAgICAgICAgICAgZm9ybWF0OiBuYW1lZCA/ICduYW1lJyA6ICdoZXg4JyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgbWF0Y2ggPSBtYXRjaGVycy5oZXgzLmV4ZWMoY29sb3IpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcjogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzFdICsgbWF0Y2hbMV0pLFxuICAgICAgICAgICAgZzogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzJdICsgbWF0Y2hbMl0pLFxuICAgICAgICAgICAgYjogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzNdICsgbWF0Y2hbM10pLFxuICAgICAgICAgICAgZm9ybWF0OiBuYW1lZCA/ICduYW1lJyA6ICdoZXgnLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIENoZWNrIHRvIHNlZSBpZiBpdCBsb29rcyBsaWtlIGEgQ1NTIHVuaXRcbiAqIChzZWUgYG1hdGNoZXJzYCBhYm92ZSBmb3IgZGVmaW5pdGlvbikuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkQ1NTVW5pdChjb2xvcikge1xuICAgIHJldHVybiBCb29sZWFuKG1hdGNoZXJzLkNTU19VTklULmV4ZWMoU3RyaW5nKGNvbG9yKSkpO1xufVxuIiwiaW1wb3J0IHsgaW5wdXRUb1JHQiwgcmdiVG9IZXgsIHJnYlRvSHN2IH0gZnJvbSAnQGN0cmwvdGlueWNvbG9yJztcblxudmFyIGh1ZVN0ZXAgPSAyOyAvLyDoibLnm7jpmLbmoq9cblxudmFyIHNhdHVyYXRpb25TdGVwID0gMC4xNjsgLy8g6aWx5ZKM5bqm6Zi25qKv77yM5rWF6Imy6YOo5YiGXG5cbnZhciBzYXR1cmF0aW9uU3RlcDIgPSAwLjA1OyAvLyDppbHlkozluqbpmLbmoq/vvIzmt7HoibLpg6jliIZcblxudmFyIGJyaWdodG5lc3NTdGVwMSA9IDAuMDU7IC8vIOS6ruW6pumYtuair++8jOa1heiJsumDqOWIhlxuXG52YXIgYnJpZ2h0bmVzc1N0ZXAyID0gMC4xNTsgLy8g5Lqu5bqm6Zi25qKv77yM5rex6Imy6YOo5YiGXG5cbnZhciBsaWdodENvbG9yQ291bnQgPSA1OyAvLyDmtYXoibLmlbDph4/vvIzkuLvoibLkuIpcblxudmFyIGRhcmtDb2xvckNvdW50ID0gNDsgLy8g5rex6Imy5pWw6YeP77yM5Li76Imy5LiLXG4vLyDmmpfoibLkuLvpopjpopzoibLmmKDlsITlhbPns7vooahcblxudmFyIGRhcmtDb2xvck1hcCA9IFt7XG4gIGluZGV4OiA3LFxuICBvcGFjaXR5OiAwLjE1XG59LCB7XG4gIGluZGV4OiA2LFxuICBvcGFjaXR5OiAwLjI1XG59LCB7XG4gIGluZGV4OiA1LFxuICBvcGFjaXR5OiAwLjNcbn0sIHtcbiAgaW5kZXg6IDUsXG4gIG9wYWNpdHk6IDAuNDVcbn0sIHtcbiAgaW5kZXg6IDUsXG4gIG9wYWNpdHk6IDAuNjVcbn0sIHtcbiAgaW5kZXg6IDUsXG4gIG9wYWNpdHk6IDAuODVcbn0sIHtcbiAgaW5kZXg6IDQsXG4gIG9wYWNpdHk6IDAuOVxufSwge1xuICBpbmRleDogMyxcbiAgb3BhY2l0eTogMC45NVxufSwge1xuICBpbmRleDogMixcbiAgb3BhY2l0eTogMC45N1xufSwge1xuICBpbmRleDogMSxcbiAgb3BhY2l0eTogMC45OFxufV07IC8vIFdyYXBwZXIgZnVuY3Rpb24gcG9ydGVkIGZyb20gVGlueUNvbG9yLnByb3RvdHlwZS50b0hzdlxuLy8gS2VlcCBpdCBoZXJlIGJlY2F1c2Ugb2YgYGhzdi5oICogMzYwYFxuXG5mdW5jdGlvbiB0b0hzdihfcmVmKSB7XG4gIHZhciByID0gX3JlZi5yLFxuICAgICAgZyA9IF9yZWYuZyxcbiAgICAgIGIgPSBfcmVmLmI7XG4gIHZhciBoc3YgPSByZ2JUb0hzdihyLCBnLCBiKTtcbiAgcmV0dXJuIHtcbiAgICBoOiBoc3YuaCAqIDM2MCxcbiAgICBzOiBoc3YucyxcbiAgICB2OiBoc3YudlxuICB9O1xufSAvLyBXcmFwcGVyIGZ1bmN0aW9uIHBvcnRlZCBmcm9tIFRpbnlDb2xvci5wcm90b3R5cGUudG9IZXhTdHJpbmdcbi8vIEtlZXAgaXQgaGVyZSBiZWNhdXNlIG9mIHRoZSBwcmVmaXggYCNgXG5cblxuZnVuY3Rpb24gdG9IZXgoX3JlZjIpIHtcbiAgdmFyIHIgPSBfcmVmMi5yLFxuICAgICAgZyA9IF9yZWYyLmcsXG4gICAgICBiID0gX3JlZjIuYjtcbiAgcmV0dXJuIFwiI1wiLmNvbmNhdChyZ2JUb0hleChyLCBnLCBiLCBmYWxzZSkpO1xufSAvLyBXcmFwcGVyIGZ1bmN0aW9uIHBvcnRlZCBmcm9tIFRpbnlDb2xvci5wcm90b3R5cGUubWl4LCBub3QgdHJlZXNoYWthYmxlLlxuLy8gQW1vdW50IGluIHJhbmdlIFswLCAxXVxuLy8gQXNzdW1lIGNvbG9yMSAmIGNvbG9yMiBoYXMgbm8gYWxwaGEsIHNpbmNlIHRoZSBmb2xsb3dpbmcgc3JjIGNvZGUgZGlkIHNvLlxuXG5cbmZ1bmN0aW9uIG1peChyZ2IxLCByZ2IyLCBhbW91bnQpIHtcbiAgdmFyIHAgPSBhbW91bnQgLyAxMDA7XG4gIHZhciByZ2IgPSB7XG4gICAgcjogKHJnYjIuciAtIHJnYjEucikgKiBwICsgcmdiMS5yLFxuICAgIGc6IChyZ2IyLmcgLSByZ2IxLmcpICogcCArIHJnYjEuZyxcbiAgICBiOiAocmdiMi5iIC0gcmdiMS5iKSAqIHAgKyByZ2IxLmJcbiAgfTtcbiAgcmV0dXJuIHJnYjtcbn1cblxuZnVuY3Rpb24gZ2V0SHVlKGhzdiwgaSwgbGlnaHQpIHtcbiAgdmFyIGh1ZTsgLy8g5qC55o2u6Imy55u45LiN5ZCM77yM6Imy55u46L2s5ZCR5LiN5ZCMXG5cbiAgaWYgKE1hdGgucm91bmQoaHN2LmgpID49IDYwICYmIE1hdGgucm91bmQoaHN2LmgpIDw9IDI0MCkge1xuICAgIGh1ZSA9IGxpZ2h0ID8gTWF0aC5yb3VuZChoc3YuaCkgLSBodWVTdGVwICogaSA6IE1hdGgucm91bmQoaHN2LmgpICsgaHVlU3RlcCAqIGk7XG4gIH0gZWxzZSB7XG4gICAgaHVlID0gbGlnaHQgPyBNYXRoLnJvdW5kKGhzdi5oKSArIGh1ZVN0ZXAgKiBpIDogTWF0aC5yb3VuZChoc3YuaCkgLSBodWVTdGVwICogaTtcbiAgfVxuXG4gIGlmIChodWUgPCAwKSB7XG4gICAgaHVlICs9IDM2MDtcbiAgfSBlbHNlIGlmIChodWUgPj0gMzYwKSB7XG4gICAgaHVlIC09IDM2MDtcbiAgfVxuXG4gIHJldHVybiBodWU7XG59XG5cbmZ1bmN0aW9uIGdldFNhdHVyYXRpb24oaHN2LCBpLCBsaWdodCkge1xuICAvLyBncmV5IGNvbG9yIGRvbid0IGNoYW5nZSBzYXR1cmF0aW9uXG4gIGlmIChoc3YuaCA9PT0gMCAmJiBoc3YucyA9PT0gMCkge1xuICAgIHJldHVybiBoc3YucztcbiAgfVxuXG4gIHZhciBzYXR1cmF0aW9uO1xuXG4gIGlmIChsaWdodCkge1xuICAgIHNhdHVyYXRpb24gPSBoc3YucyAtIHNhdHVyYXRpb25TdGVwICogaTtcbiAgfSBlbHNlIGlmIChpID09PSBkYXJrQ29sb3JDb3VudCkge1xuICAgIHNhdHVyYXRpb24gPSBoc3YucyArIHNhdHVyYXRpb25TdGVwO1xuICB9IGVsc2Uge1xuICAgIHNhdHVyYXRpb24gPSBoc3YucyArIHNhdHVyYXRpb25TdGVwMiAqIGk7XG4gIH0gLy8g6L6555WM5YC85L+u5q2jXG5cblxuICBpZiAoc2F0dXJhdGlvbiA+IDEpIHtcbiAgICBzYXR1cmF0aW9uID0gMTtcbiAgfSAvLyDnrKzkuIDmoLznmoQgcyDpmZDliLblnKggMC4wNi0wLjEg5LmL6Ze0XG5cblxuICBpZiAobGlnaHQgJiYgaSA9PT0gbGlnaHRDb2xvckNvdW50ICYmIHNhdHVyYXRpb24gPiAwLjEpIHtcbiAgICBzYXR1cmF0aW9uID0gMC4xO1xuICB9XG5cbiAgaWYgKHNhdHVyYXRpb24gPCAwLjA2KSB7XG4gICAgc2F0dXJhdGlvbiA9IDAuMDY7XG4gIH1cblxuICByZXR1cm4gTnVtYmVyKHNhdHVyYXRpb24udG9GaXhlZCgyKSk7XG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlKGhzdiwgaSwgbGlnaHQpIHtcbiAgdmFyIHZhbHVlO1xuXG4gIGlmIChsaWdodCkge1xuICAgIHZhbHVlID0gaHN2LnYgKyBicmlnaHRuZXNzU3RlcDEgKiBpO1xuICB9IGVsc2Uge1xuICAgIHZhbHVlID0gaHN2LnYgLSBicmlnaHRuZXNzU3RlcDIgKiBpO1xuICB9XG5cbiAgaWYgKHZhbHVlID4gMSkge1xuICAgIHZhbHVlID0gMTtcbiAgfVxuXG4gIHJldHVybiBOdW1iZXIodmFsdWUudG9GaXhlZCgyKSk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlKGNvbG9yKSB7XG4gIHZhciBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgdmFyIHBhdHRlcm5zID0gW107XG4gIHZhciBwQ29sb3IgPSBpbnB1dFRvUkdCKGNvbG9yKTtcblxuICBmb3IgKHZhciBpID0gbGlnaHRDb2xvckNvdW50OyBpID4gMDsgaSAtPSAxKSB7XG4gICAgdmFyIGhzdiA9IHRvSHN2KHBDb2xvcik7XG4gICAgdmFyIGNvbG9yU3RyaW5nID0gdG9IZXgoaW5wdXRUb1JHQih7XG4gICAgICBoOiBnZXRIdWUoaHN2LCBpLCB0cnVlKSxcbiAgICAgIHM6IGdldFNhdHVyYXRpb24oaHN2LCBpLCB0cnVlKSxcbiAgICAgIHY6IGdldFZhbHVlKGhzdiwgaSwgdHJ1ZSlcbiAgICB9KSk7XG4gICAgcGF0dGVybnMucHVzaChjb2xvclN0cmluZyk7XG4gIH1cblxuICBwYXR0ZXJucy5wdXNoKHRvSGV4KHBDb2xvcikpO1xuXG4gIGZvciAodmFyIF9pID0gMTsgX2kgPD0gZGFya0NvbG9yQ291bnQ7IF9pICs9IDEpIHtcbiAgICB2YXIgX2hzdiA9IHRvSHN2KHBDb2xvcik7XG5cbiAgICB2YXIgX2NvbG9yU3RyaW5nID0gdG9IZXgoaW5wdXRUb1JHQih7XG4gICAgICBoOiBnZXRIdWUoX2hzdiwgX2kpLFxuICAgICAgczogZ2V0U2F0dXJhdGlvbihfaHN2LCBfaSksXG4gICAgICB2OiBnZXRWYWx1ZShfaHN2LCBfaSlcbiAgICB9KSk7XG5cbiAgICBwYXR0ZXJucy5wdXNoKF9jb2xvclN0cmluZyk7XG4gIH0gLy8gZGFyayB0aGVtZSBwYXR0ZXJuc1xuXG5cbiAgaWYgKG9wdHMudGhlbWUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiBkYXJrQ29sb3JNYXAubWFwKGZ1bmN0aW9uIChfcmVmMykge1xuICAgICAgdmFyIGluZGV4ID0gX3JlZjMuaW5kZXgsXG4gICAgICAgICAgb3BhY2l0eSA9IF9yZWYzLm9wYWNpdHk7XG4gICAgICB2YXIgZGFya0NvbG9yU3RyaW5nID0gdG9IZXgobWl4KGlucHV0VG9SR0Iob3B0cy5iYWNrZ3JvdW5kQ29sb3IgfHwgJyMxNDE0MTQnKSwgaW5wdXRUb1JHQihwYXR0ZXJuc1tpbmRleF0pLCBvcGFjaXR5ICogMTAwKSk7XG4gICAgICByZXR1cm4gZGFya0NvbG9yU3RyaW5nO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHBhdHRlcm5zO1xufVxuXG52YXIgcHJlc2V0UHJpbWFyeUNvbG9ycyA9IHtcbiAgcmVkOiAnI0Y1MjIyRCcsXG4gIHZvbGNhbm86ICcjRkE1NDFDJyxcbiAgb3JhbmdlOiAnI0ZBOEMxNicsXG4gIGdvbGQ6ICcjRkFBRDE0JyxcbiAgeWVsbG93OiAnI0ZBREIxNCcsXG4gIGxpbWU6ICcjQTBEOTExJyxcbiAgZ3JlZW46ICcjNTJDNDFBJyxcbiAgY3lhbjogJyMxM0MyQzInLFxuICBibHVlOiAnIzE4OTBGRicsXG4gIGdlZWtibHVlOiAnIzJGNTRFQicsXG4gIHB1cnBsZTogJyM3MjJFRDEnLFxuICBtYWdlbnRhOiAnI0VCMkY5NicsXG4gIGdyZXk6ICcjNjY2NjY2J1xufTtcbnZhciBwcmVzZXRQYWxldHRlcyA9IHt9O1xudmFyIHByZXNldERhcmtQYWxldHRlcyA9IHt9O1xuT2JqZWN0LmtleXMocHJlc2V0UHJpbWFyeUNvbG9ycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIHByZXNldFBhbGV0dGVzW2tleV0gPSBnZW5lcmF0ZShwcmVzZXRQcmltYXJ5Q29sb3JzW2tleV0pO1xuICBwcmVzZXRQYWxldHRlc1trZXldLnByaW1hcnkgPSBwcmVzZXRQYWxldHRlc1trZXldWzVdOyAvLyBkYXJrIHByZXNldFBhbGV0dGVzXG5cbiAgcHJlc2V0RGFya1BhbGV0dGVzW2tleV0gPSBnZW5lcmF0ZShwcmVzZXRQcmltYXJ5Q29sb3JzW2tleV0sIHtcbiAgICB0aGVtZTogJ2RhcmsnLFxuICAgIGJhY2tncm91bmRDb2xvcjogJyMxNDE0MTQnXG4gIH0pO1xuICBwcmVzZXREYXJrUGFsZXR0ZXNba2V5XS5wcmltYXJ5ID0gcHJlc2V0RGFya1BhbGV0dGVzW2tleV1bNV07XG59KTtcbnZhciByZWQgPSBwcmVzZXRQYWxldHRlcy5yZWQ7XG52YXIgdm9sY2FubyA9IHByZXNldFBhbGV0dGVzLnZvbGNhbm87XG52YXIgZ29sZCA9IHByZXNldFBhbGV0dGVzLmdvbGQ7XG52YXIgb3JhbmdlID0gcHJlc2V0UGFsZXR0ZXMub3JhbmdlO1xudmFyIHllbGxvdyA9IHByZXNldFBhbGV0dGVzLnllbGxvdztcbnZhciBsaW1lID0gcHJlc2V0UGFsZXR0ZXMubGltZTtcbnZhciBncmVlbiA9IHByZXNldFBhbGV0dGVzLmdyZWVuO1xudmFyIGN5YW4gPSBwcmVzZXRQYWxldHRlcy5jeWFuO1xudmFyIGJsdWUgPSBwcmVzZXRQYWxldHRlcy5ibHVlO1xudmFyIGdlZWtibHVlID0gcHJlc2V0UGFsZXR0ZXMuZ2Vla2JsdWU7XG52YXIgcHVycGxlID0gcHJlc2V0UGFsZXR0ZXMucHVycGxlO1xudmFyIG1hZ2VudGEgPSBwcmVzZXRQYWxldHRlcy5tYWdlbnRhO1xudmFyIGdyZXkgPSBwcmVzZXRQYWxldHRlcy5ncmV5O1xuXG5leHBvcnQgeyBibHVlLCBjeWFuLCBnZWVrYmx1ZSwgZ2VuZXJhdGUsIGdvbGQsIGdyZWVuLCBncmV5LCBsaW1lLCBtYWdlbnRhLCBvcmFuZ2UsIHByZXNldERhcmtQYWxldHRlcywgcHJlc2V0UGFsZXR0ZXMsIHByZXNldFByaW1hcnlDb2xvcnMsIHB1cnBsZSwgcmVkLCB2b2xjYW5vLCB5ZWxsb3cgfTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbnZhciB3YXJuZWQgPSB7fTtcbmV4cG9ydCBmdW5jdGlvbiB3YXJuaW5nKHZhbGlkLCBtZXNzYWdlKSB7XG4gIC8vIFN1cHBvcnQgdWdsaWZ5XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF2YWxpZCAmJiBjb25zb2xlICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiV2FybmluZzogXCIuY29uY2F0KG1lc3NhZ2UpKTtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIG5vdGUodmFsaWQsIG1lc3NhZ2UpIHtcbiAgLy8gU3VwcG9ydCB1Z2xpZnlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXZhbGlkICYmIGNvbnNvbGUgIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnNvbGUud2FybihcIk5vdGU6IFwiLmNvbmNhdChtZXNzYWdlKSk7XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiByZXNldFdhcm5lZCgpIHtcbiAgd2FybmVkID0ge307XG59XG5leHBvcnQgZnVuY3Rpb24gY2FsbChtZXRob2QsIHZhbGlkLCBtZXNzYWdlKSB7XG4gIGlmICghdmFsaWQgJiYgIXdhcm5lZFttZXNzYWdlXSkge1xuICAgIG1ldGhvZChmYWxzZSwgbWVzc2FnZSk7XG4gICAgd2FybmVkW21lc3NhZ2VdID0gdHJ1ZTtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHdhcm5pbmdPbmNlKHZhbGlkLCBtZXNzYWdlKSB7XG4gIGNhbGwod2FybmluZywgdmFsaWQsIG1lc3NhZ2UpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG5vdGVPbmNlKHZhbGlkLCBtZXNzYWdlKSB7XG4gIGNhbGwobm90ZSwgdmFsaWQsIG1lc3NhZ2UpO1xufVxuZXhwb3J0IGRlZmF1bHQgd2FybmluZ09uY2U7XG4vKiBlc2xpbnQtZW5hYmxlICovIiwiaW1wb3J0IGNhblVzZURvbSBmcm9tICcuL2NhblVzZURvbSc7XG52YXIgTUFSS19LRVkgPSBcInJjLXV0aWwta2V5XCI7XG5cbmZ1bmN0aW9uIGdldE1hcmsoKSB7XG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcbiAgICAgIG1hcmsgPSBfcmVmLm1hcms7XG5cbiAgaWYgKG1hcmspIHtcbiAgICByZXR1cm4gbWFyay5zdGFydHNXaXRoKCdkYXRhLScpID8gbWFyayA6IFwiZGF0YS1cIi5jb25jYXQobWFyayk7XG4gIH1cblxuICByZXR1cm4gTUFSS19LRVk7XG59XG5cbmZ1bmN0aW9uIGdldENvbnRhaW5lcihvcHRpb24pIHtcbiAgaWYgKG9wdGlvbi5hdHRhY2hUbykge1xuICAgIHJldHVybiBvcHRpb24uYXR0YWNoVG87XG4gIH1cblxuICB2YXIgaGVhZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWQnKTtcbiAgcmV0dXJuIGhlYWQgfHwgZG9jdW1lbnQuYm9keTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluamVjdENTUyhjc3MpIHtcbiAgdmFyIF9vcHRpb24kY3NwO1xuXG4gIHZhciBvcHRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gIGlmICghY2FuVXNlRG9tKCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBzdHlsZU5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuXG4gIGlmICgoX29wdGlvbiRjc3AgPSBvcHRpb24uY3NwKSA9PT0gbnVsbCB8fCBfb3B0aW9uJGNzcCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbiRjc3Aubm9uY2UpIHtcbiAgICB2YXIgX29wdGlvbiRjc3AyO1xuXG4gICAgc3R5bGVOb2RlLm5vbmNlID0gKF9vcHRpb24kY3NwMiA9IG9wdGlvbi5jc3ApID09PSBudWxsIHx8IF9vcHRpb24kY3NwMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbiRjc3AyLm5vbmNlO1xuICB9XG5cbiAgc3R5bGVOb2RlLmlubmVySFRNTCA9IGNzcztcbiAgdmFyIGNvbnRhaW5lciA9IGdldENvbnRhaW5lcihvcHRpb24pO1xuICB2YXIgZmlyc3RDaGlsZCA9IGNvbnRhaW5lci5maXJzdENoaWxkO1xuXG4gIGlmIChvcHRpb24ucHJlcGVuZCAmJiBjb250YWluZXIucHJlcGVuZCkge1xuICAgIC8vIFVzZSBgcHJlcGVuZGAgZmlyc3RcbiAgICBjb250YWluZXIucHJlcGVuZChzdHlsZU5vZGUpO1xuICB9IGVsc2UgaWYgKG9wdGlvbi5wcmVwZW5kICYmIGZpcnN0Q2hpbGQpIHtcbiAgICAvLyBGYWxsYmFjayB0byBgaW5zZXJ0QmVmb3JlYCBsaWtlIElFIG5vdCBzdXBwb3J0IGBwcmVwZW5kYFxuICAgIGNvbnRhaW5lci5pbnNlcnRCZWZvcmUoc3R5bGVOb2RlLCBmaXJzdENoaWxkKTtcbiAgfSBlbHNlIHtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoc3R5bGVOb2RlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZU5vZGU7XG59XG52YXIgY29udGFpbmVyQ2FjaGUgPSBuZXcgTWFwKCk7XG5cbmZ1bmN0aW9uIGZpbmRFeGlzdE5vZGUoa2V5KSB7XG4gIHZhciBvcHRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICB2YXIgY29udGFpbmVyID0gZ2V0Q29udGFpbmVyKG9wdGlvbik7XG4gIHJldHVybiBBcnJheS5mcm9tKGNvbnRhaW5lckNhY2hlLmdldChjb250YWluZXIpLmNoaWxkcmVuKS5maW5kKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUudGFnTmFtZSA9PT0gJ1NUWUxFJyAmJiBub2RlLmdldEF0dHJpYnV0ZShnZXRNYXJrKG9wdGlvbikpID09PSBrZXk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlQ1NTKGtleSkge1xuICB2YXIgX2V4aXN0Tm9kZSRwYXJlbnROb2RlO1xuXG4gIHZhciBvcHRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICB2YXIgZXhpc3ROb2RlID0gZmluZEV4aXN0Tm9kZShrZXksIG9wdGlvbik7XG4gIGV4aXN0Tm9kZSA9PT0gbnVsbCB8fCBleGlzdE5vZGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZXhpc3ROb2RlJHBhcmVudE5vZGUgPSBleGlzdE5vZGUucGFyZW50Tm9kZSkgPT09IG51bGwgfHwgX2V4aXN0Tm9kZSRwYXJlbnROb2RlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZXhpc3ROb2RlJHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZXhpc3ROb2RlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVDU1MoY3NzLCBrZXkpIHtcbiAgdmFyIG9wdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gIHZhciBjb250YWluZXIgPSBnZXRDb250YWluZXIob3B0aW9uKTsgLy8gR2V0IHJlYWwgcGFyZW50XG5cbiAgaWYgKCFjb250YWluZXJDYWNoZS5oYXMoY29udGFpbmVyKSkge1xuICAgIHZhciBwbGFjZWhvbGRlclN0eWxlID0gaW5qZWN0Q1NTKCcnLCBvcHRpb24pO1xuICAgIHZhciBwYXJlbnROb2RlID0gcGxhY2Vob2xkZXJTdHlsZS5wYXJlbnROb2RlO1xuICAgIGNvbnRhaW5lckNhY2hlLnNldChjb250YWluZXIsIHBhcmVudE5vZGUpO1xuICAgIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocGxhY2Vob2xkZXJTdHlsZSk7XG4gIH1cblxuICB2YXIgZXhpc3ROb2RlID0gZmluZEV4aXN0Tm9kZShrZXksIG9wdGlvbik7XG5cbiAgaWYgKGV4aXN0Tm9kZSkge1xuICAgIHZhciBfb3B0aW9uJGNzcDMsIF9vcHRpb24kY3NwNDtcblxuICAgIGlmICgoKF9vcHRpb24kY3NwMyA9IG9wdGlvbi5jc3ApID09PSBudWxsIHx8IF9vcHRpb24kY3NwMyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbiRjc3AzLm5vbmNlKSAmJiBleGlzdE5vZGUubm9uY2UgIT09ICgoX29wdGlvbiRjc3A0ID0gb3B0aW9uLmNzcCkgPT09IG51bGwgfHwgX29wdGlvbiRjc3A0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9uJGNzcDQubm9uY2UpKSB7XG4gICAgICB2YXIgX29wdGlvbiRjc3A1O1xuXG4gICAgICBleGlzdE5vZGUubm9uY2UgPSAoX29wdGlvbiRjc3A1ID0gb3B0aW9uLmNzcCkgPT09IG51bGwgfHwgX29wdGlvbiRjc3A1ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9uJGNzcDUubm9uY2U7XG4gICAgfVxuXG4gICAgaWYgKGV4aXN0Tm9kZS5pbm5lckhUTUwgIT09IGNzcykge1xuICAgICAgZXhpc3ROb2RlLmlubmVySFRNTCA9IGNzcztcbiAgICB9XG5cbiAgICByZXR1cm4gZXhpc3ROb2RlO1xuICB9XG5cbiAgdmFyIG5ld05vZGUgPSBpbmplY3RDU1MoY3NzLCBvcHRpb24pO1xuICBuZXdOb2RlLnNldEF0dHJpYnV0ZShnZXRNYXJrKG9wdGlvbiksIGtleSk7XG4gIHJldHVybiBuZXdOb2RlO1xufSIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG5pbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgeyBnZW5lcmF0ZSBhcyBnZW5lcmF0ZUNvbG9yIH0gZnJvbSAnQGFudC1kZXNpZ24vY29sb3JzJztcbmltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0LCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgd2FybiBmcm9tIFwicmMtdXRpbC9lcy93YXJuaW5nXCI7XG5pbXBvcnQgeyB1cGRhdGVDU1MgfSBmcm9tIFwicmMtdXRpbC9lcy9Eb20vZHluYW1pY0NTU1wiO1xuaW1wb3J0IEljb25Db250ZXh0IGZyb20gJy4vY29tcG9uZW50cy9Db250ZXh0JztcbmV4cG9ydCBmdW5jdGlvbiB3YXJuaW5nKHZhbGlkLCBtZXNzYWdlKSB7XG4gIHdhcm4odmFsaWQsIFwiW0BhbnQtZGVzaWduL2ljb25zXSBcIi5jb25jYXQobWVzc2FnZSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzSWNvbkRlZmluaXRpb24odGFyZ2V0KSB7XG4gIHJldHVybiBfdHlwZW9mKHRhcmdldCkgPT09ICdvYmplY3QnICYmIHR5cGVvZiB0YXJnZXQubmFtZSA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIHRhcmdldC50aGVtZSA9PT0gJ3N0cmluZycgJiYgKF90eXBlb2YodGFyZ2V0Lmljb24pID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgdGFyZ2V0Lmljb24gPT09ICdmdW5jdGlvbicpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZUF0dHJzKCkge1xuICB2YXIgYXR0cnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICByZXR1cm4gT2JqZWN0LmtleXMoYXR0cnMpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICB2YXIgdmFsID0gYXR0cnNba2V5XTtcblxuICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICBjYXNlICdjbGFzcyc6XG4gICAgICAgIGFjYy5jbGFzc05hbWUgPSB2YWw7XG4gICAgICAgIGRlbGV0ZSBhY2MuY2xhc3M7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBhY2Nba2V5XSA9IHZhbDtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGUobm9kZSwga2V5LCByb290UHJvcHMpIHtcbiAgaWYgKCFyb290UHJvcHMpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQobm9kZS50YWcsIF9vYmplY3RTcHJlYWQoe1xuICAgICAga2V5OiBrZXlcbiAgICB9LCBub3JtYWxpemVBdHRycyhub2RlLmF0dHJzKSksIChub2RlLmNoaWxkcmVuIHx8IFtdKS5tYXAoZnVuY3Rpb24gKGNoaWxkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIGdlbmVyYXRlKGNoaWxkLCBcIlwiLmNvbmNhdChrZXksIFwiLVwiKS5jb25jYXQobm9kZS50YWcsIFwiLVwiKS5jb25jYXQoaW5kZXgpKTtcbiAgICB9KSk7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQobm9kZS50YWcsIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7XG4gICAga2V5OiBrZXlcbiAgfSwgbm9ybWFsaXplQXR0cnMobm9kZS5hdHRycykpLCByb290UHJvcHMpLCAobm9kZS5jaGlsZHJlbiB8fCBbXSkubWFwKGZ1bmN0aW9uIChjaGlsZCwgaW5kZXgpIHtcbiAgICByZXR1cm4gZ2VuZXJhdGUoY2hpbGQsIFwiXCIuY29uY2F0KGtleSwgXCItXCIpLmNvbmNhdChub2RlLnRhZywgXCItXCIpLmNvbmNhdChpbmRleCkpO1xuICB9KSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0U2Vjb25kYXJ5Q29sb3IocHJpbWFyeUNvbG9yKSB7XG4gIC8vIGNob29zZSB0aGUgc2Vjb25kIGNvbG9yXG4gIHJldHVybiBnZW5lcmF0ZUNvbG9yKHByaW1hcnlDb2xvcilbMF07XG59XG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplVHdvVG9uZUNvbG9ycyh0d29Ub25lQ29sb3IpIHtcbiAgaWYgKCF0d29Ub25lQ29sb3IpIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICByZXR1cm4gQXJyYXkuaXNBcnJheSh0d29Ub25lQ29sb3IpID8gdHdvVG9uZUNvbG9yIDogW3R3b1RvbmVDb2xvcl07XG59IC8vIFRoZXNlIHByb3BzIG1ha2Ugc3VyZSB0aGF0IHRoZSBTVkcgYmVoYXZpb3VycyBsaWtlIGdlbmVyYWwgdGV4dC5cbi8vIFJlZmVyZW5jZTogaHR0cHM6Ly9ibG9nLnByb3RvdHlwci5pby9hbGlnbi1zdmctaWNvbnMtdG8tdGV4dC1hbmQtc2F5LWdvb2RieWUtdG8tZm9udC1pY29ucy1kNDRiM2Q3YjI2YjRcblxuZXhwb3J0IHZhciBzdmdCYXNlUHJvcHMgPSB7XG4gIHdpZHRoOiAnMWVtJyxcbiAgaGVpZ2h0OiAnMWVtJyxcbiAgZmlsbDogJ2N1cnJlbnRDb2xvcicsXG4gICdhcmlhLWhpZGRlbic6ICd0cnVlJyxcbiAgZm9jdXNhYmxlOiAnZmFsc2UnXG59O1xuZXhwb3J0IHZhciBpY29uU3R5bGVzID0gXCJcXG4uYW50aWNvbiB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBjb2xvcjogaW5oZXJpdDtcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGxpbmUtaGVpZ2h0OiAwO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XFxuICB2ZXJ0aWNhbC1hbGlnbjogLTAuMTI1ZW07XFxuICB0ZXh0LXJlbmRlcmluZzogb3B0aW1pemVMZWdpYmlsaXR5O1xcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XFxuICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xcbn1cXG5cXG4uYW50aWNvbiA+ICoge1xcbiAgbGluZS1oZWlnaHQ6IDE7XFxufVxcblxcbi5hbnRpY29uIHN2ZyB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcblxcbi5hbnRpY29uOjpiZWZvcmUge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLmFudGljb24gLmFudGljb24taWNvbiB7XFxuICBkaXNwbGF5OiBibG9jaztcXG59XFxuXFxuLmFudGljb25bdGFiaW5kZXhdIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLmFudGljb24tc3Bpbjo6YmVmb3JlLFxcbi5hbnRpY29uLXNwaW4ge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgLXdlYmtpdC1hbmltYXRpb246IGxvYWRpbmdDaXJjbGUgMXMgaW5maW5pdGUgbGluZWFyO1xcbiAgYW5pbWF0aW9uOiBsb2FkaW5nQ2lyY2xlIDFzIGluZmluaXRlIGxpbmVhcjtcXG59XFxuXFxuQC13ZWJraXQta2V5ZnJhbWVzIGxvYWRpbmdDaXJjbGUge1xcbiAgMTAwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcXG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcXG4gIH1cXG59XFxuXFxuQGtleWZyYW1lcyBsb2FkaW5nQ2lyY2xlIHtcXG4gIDEwMCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxuICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxuICB9XFxufVxcblwiO1xuZXhwb3J0IHZhciB1c2VJbnNlcnRTdHlsZXMgPSBmdW5jdGlvbiB1c2VJbnNlcnRTdHlsZXMoKSB7XG4gIHZhciBzdHlsZVN0ciA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogaWNvblN0eWxlcztcblxuICB2YXIgX3VzZUNvbnRleHQgPSB1c2VDb250ZXh0KEljb25Db250ZXh0KSxcbiAgICAgIGNzcCA9IF91c2VDb250ZXh0LmNzcDtcblxuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHVwZGF0ZUNTUyhzdHlsZVN0ciwgJ0BhbnQtZGVzaWduLWljb25zJywge1xuICAgICAgcHJlcGVuZDogdHJ1ZSxcbiAgICAgIGNzcDogY3NwXG4gICAgfSk7XG4gIH0sIFtdKTtcbn07IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG52YXIgX2V4Y2x1ZGVkID0gW1wiaWNvblwiLCBcImNsYXNzTmFtZVwiLCBcIm9uQ2xpY2tcIiwgXCJzdHlsZVwiLCBcInByaW1hcnlDb2xvclwiLCBcInNlY29uZGFyeUNvbG9yXCJdO1xuaW1wb3J0IHsgZ2VuZXJhdGUsIGdldFNlY29uZGFyeUNvbG9yLCBpc0ljb25EZWZpbml0aW9uLCB3YXJuaW5nLCB1c2VJbnNlcnRTdHlsZXMgfSBmcm9tICcuLi91dGlscyc7XG52YXIgdHdvVG9uZUNvbG9yUGFsZXR0ZSA9IHtcbiAgcHJpbWFyeUNvbG9yOiAnIzMzMycsXG4gIHNlY29uZGFyeUNvbG9yOiAnI0U2RTZFNicsXG4gIGNhbGN1bGF0ZWQ6IGZhbHNlXG59O1xuXG5mdW5jdGlvbiBzZXRUd29Ub25lQ29sb3JzKF9yZWYpIHtcbiAgdmFyIHByaW1hcnlDb2xvciA9IF9yZWYucHJpbWFyeUNvbG9yLFxuICAgICAgc2Vjb25kYXJ5Q29sb3IgPSBfcmVmLnNlY29uZGFyeUNvbG9yO1xuICB0d29Ub25lQ29sb3JQYWxldHRlLnByaW1hcnlDb2xvciA9IHByaW1hcnlDb2xvcjtcbiAgdHdvVG9uZUNvbG9yUGFsZXR0ZS5zZWNvbmRhcnlDb2xvciA9IHNlY29uZGFyeUNvbG9yIHx8IGdldFNlY29uZGFyeUNvbG9yKHByaW1hcnlDb2xvcik7XG4gIHR3b1RvbmVDb2xvclBhbGV0dGUuY2FsY3VsYXRlZCA9ICEhc2Vjb25kYXJ5Q29sb3I7XG59XG5cbmZ1bmN0aW9uIGdldFR3b1RvbmVDb2xvcnMoKSB7XG4gIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCB0d29Ub25lQ29sb3JQYWxldHRlKTtcbn1cblxudmFyIEljb25CYXNlID0gZnVuY3Rpb24gSWNvbkJhc2UocHJvcHMpIHtcbiAgdmFyIGljb24gPSBwcm9wcy5pY29uLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgb25DbGljayA9IHByb3BzLm9uQ2xpY2ssXG4gICAgICBzdHlsZSA9IHByb3BzLnN0eWxlLFxuICAgICAgcHJpbWFyeUNvbG9yID0gcHJvcHMucHJpbWFyeUNvbG9yLFxuICAgICAgc2Vjb25kYXJ5Q29sb3IgPSBwcm9wcy5zZWNvbmRhcnlDb2xvcixcbiAgICAgIHJlc3RQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICB2YXIgY29sb3JzID0gdHdvVG9uZUNvbG9yUGFsZXR0ZTtcblxuICBpZiAocHJpbWFyeUNvbG9yKSB7XG4gICAgY29sb3JzID0ge1xuICAgICAgcHJpbWFyeUNvbG9yOiBwcmltYXJ5Q29sb3IsXG4gICAgICBzZWNvbmRhcnlDb2xvcjogc2Vjb25kYXJ5Q29sb3IgfHwgZ2V0U2Vjb25kYXJ5Q29sb3IocHJpbWFyeUNvbG9yKVxuICAgIH07XG4gIH1cblxuICB1c2VJbnNlcnRTdHlsZXMoKTtcbiAgd2FybmluZyhpc0ljb25EZWZpbml0aW9uKGljb24pLCBcImljb24gc2hvdWxkIGJlIGljb24gZGVmaW5pdG9uLCBidXQgZ290IFwiLmNvbmNhdChpY29uKSk7XG5cbiAgaWYgKCFpc0ljb25EZWZpbml0aW9uKGljb24pKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgdGFyZ2V0ID0gaWNvbjtcblxuICBpZiAodGFyZ2V0ICYmIHR5cGVvZiB0YXJnZXQuaWNvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRhcmdldCA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgdGFyZ2V0KSwge30sIHtcbiAgICAgIGljb246IHRhcmdldC5pY29uKGNvbG9ycy5wcmltYXJ5Q29sb3IsIGNvbG9ycy5zZWNvbmRhcnlDb2xvcilcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBnZW5lcmF0ZSh0YXJnZXQuaWNvbiwgXCJzdmctXCIuY29uY2F0KHRhcmdldC5uYW1lKSwgX29iamVjdFNwcmVhZCh7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgb25DbGljazogb25DbGljayxcbiAgICBzdHlsZTogc3R5bGUsXG4gICAgJ2RhdGEtaWNvbic6IHRhcmdldC5uYW1lLFxuICAgIHdpZHRoOiAnMWVtJyxcbiAgICBoZWlnaHQ6ICcxZW0nLFxuICAgIGZpbGw6ICdjdXJyZW50Q29sb3InLFxuICAgICdhcmlhLWhpZGRlbic6ICd0cnVlJ1xuICB9LCByZXN0UHJvcHMpKTtcbn07XG5cbkljb25CYXNlLmRpc3BsYXlOYW1lID0gJ0ljb25SZWFjdCc7XG5JY29uQmFzZS5nZXRUd29Ub25lQ29sb3JzID0gZ2V0VHdvVG9uZUNvbG9ycztcbkljb25CYXNlLnNldFR3b1RvbmVDb2xvcnMgPSBzZXRUd29Ub25lQ29sb3JzO1xuZXhwb3J0IGRlZmF1bHQgSWNvbkJhc2U7IiwiaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgUmVhY3RJY29uIGZyb20gJy4vSWNvbkJhc2UnO1xuaW1wb3J0IHsgbm9ybWFsaXplVHdvVG9uZUNvbG9ycyB9IGZyb20gJy4uL3V0aWxzJztcbmV4cG9ydCBmdW5jdGlvbiBzZXRUd29Ub25lQ29sb3IodHdvVG9uZUNvbG9yKSB7XG4gIHZhciBfbm9ybWFsaXplVHdvVG9uZUNvbG8gPSBub3JtYWxpemVUd29Ub25lQ29sb3JzKHR3b1RvbmVDb2xvciksXG4gICAgICBfbm9ybWFsaXplVHdvVG9uZUNvbG8yID0gX3NsaWNlZFRvQXJyYXkoX25vcm1hbGl6ZVR3b1RvbmVDb2xvLCAyKSxcbiAgICAgIHByaW1hcnlDb2xvciA9IF9ub3JtYWxpemVUd29Ub25lQ29sbzJbMF0sXG4gICAgICBzZWNvbmRhcnlDb2xvciA9IF9ub3JtYWxpemVUd29Ub25lQ29sbzJbMV07XG5cbiAgcmV0dXJuIFJlYWN0SWNvbi5zZXRUd29Ub25lQ29sb3JzKHtcbiAgICBwcmltYXJ5Q29sb3I6IHByaW1hcnlDb2xvcixcbiAgICBzZWNvbmRhcnlDb2xvcjogc2Vjb25kYXJ5Q29sb3JcbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0VHdvVG9uZUNvbG9yKCkge1xuICB2YXIgY29sb3JzID0gUmVhY3RJY29uLmdldFR3b1RvbmVDb2xvcnMoKTtcblxuICBpZiAoIWNvbG9ycy5jYWxjdWxhdGVkKSB7XG4gICAgcmV0dXJuIGNvbG9ycy5wcmltYXJ5Q29sb3I7XG4gIH1cblxuICByZXR1cm4gW2NvbG9ycy5wcmltYXJ5Q29sb3IsIGNvbG9ycy5zZWNvbmRhcnlDb2xvcl07XG59IiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbmltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG52YXIgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiaWNvblwiLCBcInNwaW5cIiwgXCJyb3RhdGVcIiwgXCJ0YWJJbmRleFwiLCBcIm9uQ2xpY2tcIiwgXCJ0d29Ub25lQ29sb3JcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBDb250ZXh0IGZyb20gJy4vQ29udGV4dCc7XG5pbXBvcnQgUmVhY3RJY29uIGZyb20gJy4vSWNvbkJhc2UnO1xuaW1wb3J0IHsgZ2V0VHdvVG9uZUNvbG9yLCBzZXRUd29Ub25lQ29sb3IgfSBmcm9tICcuL3R3b1RvbmVQcmltYXJ5Q29sb3InO1xuaW1wb3J0IHsgbm9ybWFsaXplVHdvVG9uZUNvbG9ycyB9IGZyb20gJy4uL3V0aWxzJzsgLy8gSW5pdGlhbCBzZXR0aW5nXG4vLyBzaG91bGQgbW92ZSBpdCB0byBhbnRkIG1haW4gcmVwbz9cblxuc2V0VHdvVG9uZUNvbG9yKCcjMTg5MGZmJyk7XG52YXIgSWNvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gIHZhciBfY2xhc3NOYW1lcztcblxuICB2YXIgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgaWNvbiA9IHByb3BzLmljb24sXG4gICAgICBzcGluID0gcHJvcHMuc3BpbixcbiAgICAgIHJvdGF0ZSA9IHByb3BzLnJvdGF0ZSxcbiAgICAgIHRhYkluZGV4ID0gcHJvcHMudGFiSW5kZXgsXG4gICAgICBvbkNsaWNrID0gcHJvcHMub25DbGljayxcbiAgICAgIHR3b1RvbmVDb2xvciA9IHByb3BzLnR3b1RvbmVDb2xvcixcbiAgICAgIHJlc3RQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICB2YXIgX1JlYWN0JHVzZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KENvbnRleHQpLFxuICAgICAgX1JlYWN0JHVzZUNvbnRleHQkcHJlID0gX1JlYWN0JHVzZUNvbnRleHQucHJlZml4Q2xzLFxuICAgICAgcHJlZml4Q2xzID0gX1JlYWN0JHVzZUNvbnRleHQkcHJlID09PSB2b2lkIDAgPyAnYW50aWNvbicgOiBfUmVhY3QkdXNlQ29udGV4dCRwcmU7XG5cbiAgdmFyIGNsYXNzU3RyaW5nID0gY2xhc3NOYW1lcyhwcmVmaXhDbHMsIChfY2xhc3NOYW1lcyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdChpY29uLm5hbWUpLCAhIWljb24ubmFtZSksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1zcGluXCIpLCAhIXNwaW4gfHwgaWNvbi5uYW1lID09PSAnbG9hZGluZycpLCBfY2xhc3NOYW1lcyksIGNsYXNzTmFtZSk7XG4gIHZhciBpY29uVGFiSW5kZXggPSB0YWJJbmRleDtcblxuICBpZiAoaWNvblRhYkluZGV4ID09PSB1bmRlZmluZWQgJiYgb25DbGljaykge1xuICAgIGljb25UYWJJbmRleCA9IC0xO1xuICB9XG5cbiAgdmFyIHN2Z1N0eWxlID0gcm90YXRlID8ge1xuICAgIG1zVHJhbnNmb3JtOiBcInJvdGF0ZShcIi5jb25jYXQocm90YXRlLCBcImRlZylcIiksXG4gICAgdHJhbnNmb3JtOiBcInJvdGF0ZShcIi5jb25jYXQocm90YXRlLCBcImRlZylcIilcbiAgfSA6IHVuZGVmaW5lZDtcblxuICB2YXIgX25vcm1hbGl6ZVR3b1RvbmVDb2xvID0gbm9ybWFsaXplVHdvVG9uZUNvbG9ycyh0d29Ub25lQ29sb3IpLFxuICAgICAgX25vcm1hbGl6ZVR3b1RvbmVDb2xvMiA9IF9zbGljZWRUb0FycmF5KF9ub3JtYWxpemVUd29Ub25lQ29sbywgMiksXG4gICAgICBwcmltYXJ5Q29sb3IgPSBfbm9ybWFsaXplVHdvVG9uZUNvbG8yWzBdLFxuICAgICAgc2Vjb25kYXJ5Q29sb3IgPSBfbm9ybWFsaXplVHdvVG9uZUNvbG8yWzFdO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHtcbiAgICByb2xlOiBcImltZ1wiLFxuICAgIFwiYXJpYS1sYWJlbFwiOiBpY29uLm5hbWVcbiAgfSwgcmVzdFByb3BzKSwge30sIHtcbiAgICByZWY6IHJlZixcbiAgICB0YWJJbmRleDogaWNvblRhYkluZGV4LFxuICAgIG9uQ2xpY2s6IG9uQ2xpY2ssXG4gICAgY2xhc3NOYW1lOiBjbGFzc1N0cmluZ1xuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3RJY29uLCB7XG4gICAgaWNvbjogaWNvbixcbiAgICBwcmltYXJ5Q29sb3I6IHByaW1hcnlDb2xvcixcbiAgICBzZWNvbmRhcnlDb2xvcjogc2Vjb25kYXJ5Q29sb3IsXG4gICAgc3R5bGU6IHN2Z1N0eWxlXG4gIH0pKTtcbn0pO1xuSWNvbi5kaXNwbGF5TmFtZSA9ICdBbnRkSWNvbic7XG5JY29uLmdldFR3b1RvbmVDb2xvciA9IGdldFR3b1RvbmVDb2xvcjtcbkljb24uc2V0VHdvVG9uZUNvbG9yID0gc2V0VHdvVG9uZUNvbG9yO1xuZXhwb3J0IGRlZmF1bHQgSWNvbjsiLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuLy8gR0VORVJBVEUgQlkgLi9zY3JpcHRzL2dlbmVyYXRlLnRzXG4vLyBET04gTk9UIEVESVQgSVQgTUFOVUFMTFlcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBDbG9zZU91dGxpbmVkU3ZnIGZyb20gXCJAYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL0Nsb3NlT3V0bGluZWRcIjtcbmltcG9ydCBBbnRkSWNvbiBmcm9tICcuLi9jb21wb25lbnRzL0FudGRJY29uJztcblxudmFyIENsb3NlT3V0bGluZWQgPSBmdW5jdGlvbiBDbG9zZU91dGxpbmVkKHByb3BzLCByZWYpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEFudGRJY29uLCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHByb3BzKSwge30sIHtcbiAgICByZWY6IHJlZixcbiAgICBpY29uOiBDbG9zZU91dGxpbmVkU3ZnXG4gIH0pKTtcbn07XG5cbkNsb3NlT3V0bGluZWQuZGlzcGxheU5hbWUgPSAnQ2xvc2VPdXRsaW5lZCc7XG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihDbG9zZU91dGxpbmVkKTsiLCIvLyBUaGlzIGljb24gZmlsZSBpcyBnZW5lcmF0ZWQgYXV0b21hdGljYWxseS5cbnZhciBDaGVja0NpcmNsZU91dGxpbmVkID0geyBcImljb25cIjogeyBcInRhZ1wiOiBcInN2Z1wiLCBcImF0dHJzXCI6IHsgXCJ2aWV3Qm94XCI6IFwiNjQgNjQgODk2IDg5NlwiLCBcImZvY3VzYWJsZVwiOiBcImZhbHNlXCIgfSwgXCJjaGlsZHJlblwiOiBbeyBcInRhZ1wiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk02OTkgMzUzaC00Ni45Yy0xMC4yIDAtMTkuOSA0LjktMjUuOSAxMy4zTDQ2OSA1ODQuM2wtNzEuMi05OC44Yy02LTguMy0xNS42LTEzLjMtMjUuOS0xMy4zSDMyNWMtNi41IDAtMTAuMyA3LjQtNi41IDEyLjdsMTI0LjYgMTcyLjhhMzEuOCAzMS44IDAgMDA1MS43IDBsMjEwLjYtMjkyYzMuOS01LjMuMS0xMi43LTYuNC0xMi43elwiIH0gfSwgeyBcInRhZ1wiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk01MTIgNjRDMjY0LjYgNjQgNjQgMjY0LjYgNjQgNTEyczIwMC42IDQ0OCA0NDggNDQ4IDQ0OC0yMDAuNiA0NDgtNDQ4Uzc1OS40IDY0IDUxMiA2NHptMCA4MjBjLTIwNS40IDAtMzcyLTE2Ni42LTM3Mi0zNzJzMTY2LjYtMzcyIDM3Mi0zNzIgMzcyIDE2Ni42IDM3MiAzNzItMTY2LjYgMzcyLTM3MiAzNzJ6XCIgfSB9XSB9LCBcIm5hbWVcIjogXCJjaGVjay1jaXJjbGVcIiwgXCJ0aGVtZVwiOiBcIm91dGxpbmVkXCIgfTtcbmV4cG9ydCBkZWZhdWx0IENoZWNrQ2lyY2xlT3V0bGluZWQ7XG4iLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuLy8gR0VORVJBVEUgQlkgLi9zY3JpcHRzL2dlbmVyYXRlLnRzXG4vLyBET04gTk9UIEVESVQgSVQgTUFOVUFMTFlcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBDaGVja0NpcmNsZU91dGxpbmVkU3ZnIGZyb20gXCJAYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL0NoZWNrQ2lyY2xlT3V0bGluZWRcIjtcbmltcG9ydCBBbnRkSWNvbiBmcm9tICcuLi9jb21wb25lbnRzL0FudGRJY29uJztcblxudmFyIENoZWNrQ2lyY2xlT3V0bGluZWQgPSBmdW5jdGlvbiBDaGVja0NpcmNsZU91dGxpbmVkKHByb3BzLCByZWYpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEFudGRJY29uLCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHByb3BzKSwge30sIHtcbiAgICByZWY6IHJlZixcbiAgICBpY29uOiBDaGVja0NpcmNsZU91dGxpbmVkU3ZnXG4gIH0pKTtcbn07XG5cbkNoZWNrQ2lyY2xlT3V0bGluZWQuZGlzcGxheU5hbWUgPSAnQ2hlY2tDaXJjbGVPdXRsaW5lZCc7XG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihDaGVja0NpcmNsZU91dGxpbmVkKTsiLCIvLyBUaGlzIGljb24gZmlsZSBpcyBnZW5lcmF0ZWQgYXV0b21hdGljYWxseS5cbnZhciBDbG9zZUNpcmNsZU91dGxpbmVkID0geyBcImljb25cIjogeyBcInRhZ1wiOiBcInN2Z1wiLCBcImF0dHJzXCI6IHsgXCJ2aWV3Qm94XCI6IFwiNjQgNjQgODk2IDg5NlwiLCBcImZvY3VzYWJsZVwiOiBcImZhbHNlXCIgfSwgXCJjaGlsZHJlblwiOiBbeyBcInRhZ1wiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk02ODUuNCAzNTQuOGMwLTQuNC0zLjYtOC04LThsLTY2IC4zTDUxMiA0NjUuNmwtOTkuMy0xMTguNC02Ni4xLS4zYy00LjQgMC04IDMuNS04IDggMCAxLjkuNyAzLjcgMS45IDUuMmwxMzAuMSAxNTVMMzQwLjUgNjcwYTguMzIgOC4zMiAwIDAwLTEuOSA1LjJjMCA0LjQgMy42IDggOCA4bDY2LjEtLjNMNTEyIDU2NC40bDk5LjMgMTE4LjQgNjYgLjNjNC40IDAgOC0zLjUgOC04IDAtMS45LS43LTMuNy0xLjktNS4yTDU1My41IDUxNWwxMzAuMS0xNTVjMS4yLTEuNCAxLjgtMy4zIDEuOC01LjJ6XCIgfSB9LCB7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTUxMiA2NUMyNjQuNiA2NSA2NCAyNjUuNiA2NCA1MTNzMjAwLjYgNDQ4IDQ0OCA0NDggNDQ4LTIwMC42IDQ0OC00NDhTNzU5LjQgNjUgNTEyIDY1em0wIDgyMGMtMjA1LjQgMC0zNzItMTY2LjYtMzcyLTM3MnMxNjYuNi0zNzIgMzcyLTM3MiAzNzIgMTY2LjYgMzcyIDM3Mi0xNjYuNiAzNzItMzcyIDM3MnpcIiB9IH1dIH0sIFwibmFtZVwiOiBcImNsb3NlLWNpcmNsZVwiLCBcInRoZW1lXCI6IFwib3V0bGluZWRcIiB9O1xuZXhwb3J0IGRlZmF1bHQgQ2xvc2VDaXJjbGVPdXRsaW5lZDtcbiIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG4vLyBHRU5FUkFURSBCWSAuL3NjcmlwdHMvZ2VuZXJhdGUudHNcbi8vIERPTiBOT1QgRURJVCBJVCBNQU5VQUxMWVxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IENsb3NlQ2lyY2xlT3V0bGluZWRTdmcgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zLXN2Zy9lcy9hc24vQ2xvc2VDaXJjbGVPdXRsaW5lZFwiO1xuaW1wb3J0IEFudGRJY29uIGZyb20gJy4uL2NvbXBvbmVudHMvQW50ZEljb24nO1xuXG52YXIgQ2xvc2VDaXJjbGVPdXRsaW5lZCA9IGZ1bmN0aW9uIENsb3NlQ2lyY2xlT3V0bGluZWQocHJvcHMsIHJlZikge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQW50ZEljb24sIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcHJvcHMpLCB7fSwge1xuICAgIHJlZjogcmVmLFxuICAgIGljb246IENsb3NlQ2lyY2xlT3V0bGluZWRTdmdcbiAgfSkpO1xufTtcblxuQ2xvc2VDaXJjbGVPdXRsaW5lZC5kaXNwbGF5TmFtZSA9ICdDbG9zZUNpcmNsZU91dGxpbmVkJztcbmV4cG9ydCBkZWZhdWx0IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKENsb3NlQ2lyY2xlT3V0bGluZWQpOyIsIi8vIFRoaXMgaWNvbiBmaWxlIGlzIGdlbmVyYXRlZCBhdXRvbWF0aWNhbGx5LlxudmFyIEV4Y2xhbWF0aW9uQ2lyY2xlT3V0bGluZWQgPSB7IFwiaWNvblwiOiB7IFwidGFnXCI6IFwic3ZnXCIsIFwiYXR0cnNcIjogeyBcInZpZXdCb3hcIjogXCI2NCA2NCA4OTYgODk2XCIsIFwiZm9jdXNhYmxlXCI6IFwiZmFsc2VcIiB9LCBcImNoaWxkcmVuXCI6IFt7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTUxMiA2NEMyNjQuNiA2NCA2NCAyNjQuNiA2NCA1MTJzMjAwLjYgNDQ4IDQ0OCA0NDggNDQ4LTIwMC42IDQ0OC00NDhTNzU5LjQgNjQgNTEyIDY0em0wIDgyMGMtMjA1LjQgMC0zNzItMTY2LjYtMzcyLTM3MnMxNjYuNi0zNzIgMzcyLTM3MiAzNzIgMTY2LjYgMzcyIDM3Mi0xNjYuNiAzNzItMzcyIDM3MnpcIiB9IH0sIHsgXCJ0YWdcIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNNDY0IDY4OGE0OCA0OCAwIDEwOTYgMCA0OCA0OCAwIDEwLTk2IDB6bTI0LTExMmg0OGM0LjQgMCA4LTMuNiA4LThWMjk2YzAtNC40LTMuNi04LTgtOGgtNDhjLTQuNCAwLTggMy42LTggOHYyNzJjMCA0LjQgMy42IDggOCA4elwiIH0gfV0gfSwgXCJuYW1lXCI6IFwiZXhjbGFtYXRpb24tY2lyY2xlXCIsIFwidGhlbWVcIjogXCJvdXRsaW5lZFwiIH07XG5leHBvcnQgZGVmYXVsdCBFeGNsYW1hdGlvbkNpcmNsZU91dGxpbmVkO1xuIiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbi8vIEdFTkVSQVRFIEJZIC4vc2NyaXB0cy9nZW5lcmF0ZS50c1xuLy8gRE9OIE5PVCBFRElUIElUIE1BTlVBTExZXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRXhjbGFtYXRpb25DaXJjbGVPdXRsaW5lZFN2ZyBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9FeGNsYW1hdGlvbkNpcmNsZU91dGxpbmVkXCI7XG5pbXBvcnQgQW50ZEljb24gZnJvbSAnLi4vY29tcG9uZW50cy9BbnRkSWNvbic7XG5cbnZhciBFeGNsYW1hdGlvbkNpcmNsZU91dGxpbmVkID0gZnVuY3Rpb24gRXhjbGFtYXRpb25DaXJjbGVPdXRsaW5lZChwcm9wcywgcmVmKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBbnRkSWNvbiwgX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBwcm9wcyksIHt9LCB7XG4gICAgcmVmOiByZWYsXG4gICAgaWNvbjogRXhjbGFtYXRpb25DaXJjbGVPdXRsaW5lZFN2Z1xuICB9KSk7XG59O1xuXG5FeGNsYW1hdGlvbkNpcmNsZU91dGxpbmVkLmRpc3BsYXlOYW1lID0gJ0V4Y2xhbWF0aW9uQ2lyY2xlT3V0bGluZWQnO1xuZXhwb3J0IGRlZmF1bHQgLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoRXhjbGFtYXRpb25DaXJjbGVPdXRsaW5lZCk7IiwiLy8gVGhpcyBpY29uIGZpbGUgaXMgZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkuXG52YXIgSW5mb0NpcmNsZU91dGxpbmVkID0geyBcImljb25cIjogeyBcInRhZ1wiOiBcInN2Z1wiLCBcImF0dHJzXCI6IHsgXCJ2aWV3Qm94XCI6IFwiNjQgNjQgODk2IDg5NlwiLCBcImZvY3VzYWJsZVwiOiBcImZhbHNlXCIgfSwgXCJjaGlsZHJlblwiOiBbeyBcInRhZ1wiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk01MTIgNjRDMjY0LjYgNjQgNjQgMjY0LjYgNjQgNTEyczIwMC42IDQ0OCA0NDggNDQ4IDQ0OC0yMDAuNiA0NDgtNDQ4Uzc1OS40IDY0IDUxMiA2NHptMCA4MjBjLTIwNS40IDAtMzcyLTE2Ni42LTM3Mi0zNzJzMTY2LjYtMzcyIDM3Mi0zNzIgMzcyIDE2Ni42IDM3MiAzNzItMTY2LjYgMzcyLTM3MiAzNzJ6XCIgfSB9LCB7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTQ2NCAzMzZhNDggNDggMCAxMDk2IDAgNDggNDggMCAxMC05NiAwem03MiAxMTJoLTQ4Yy00LjQgMC04IDMuNi04IDh2MjcyYzAgNC40IDMuNiA4IDggOGg0OGM0LjQgMCA4LTMuNiA4LThWNDU2YzAtNC40LTMuNi04LTgtOHpcIiB9IH1dIH0sIFwibmFtZVwiOiBcImluZm8tY2lyY2xlXCIsIFwidGhlbWVcIjogXCJvdXRsaW5lZFwiIH07XG5leHBvcnQgZGVmYXVsdCBJbmZvQ2lyY2xlT3V0bGluZWQ7XG4iLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuLy8gR0VORVJBVEUgQlkgLi9zY3JpcHRzL2dlbmVyYXRlLnRzXG4vLyBET04gTk9UIEVESVQgSVQgTUFOVUFMTFlcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbmZvQ2lyY2xlT3V0bGluZWRTdmcgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zLXN2Zy9lcy9hc24vSW5mb0NpcmNsZU91dGxpbmVkXCI7XG5pbXBvcnQgQW50ZEljb24gZnJvbSAnLi4vY29tcG9uZW50cy9BbnRkSWNvbic7XG5cbnZhciBJbmZvQ2lyY2xlT3V0bGluZWQgPSBmdW5jdGlvbiBJbmZvQ2lyY2xlT3V0bGluZWQocHJvcHMsIHJlZikge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQW50ZEljb24sIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcHJvcHMpLCB7fSwge1xuICAgIHJlZjogcmVmLFxuICAgIGljb246IEluZm9DaXJjbGVPdXRsaW5lZFN2Z1xuICB9KSk7XG59O1xuXG5JbmZvQ2lyY2xlT3V0bGluZWQuZGlzcGxheU5hbWUgPSAnSW5mb0NpcmNsZU91dGxpbmVkJztcbmV4cG9ydCBkZWZhdWx0IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKEluZm9DaXJjbGVPdXRsaW5lZCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbnZhciBkZWZhdWx0R2V0UHJlZml4Q2xzID0gZnVuY3Rpb24gZGVmYXVsdEdldFByZWZpeENscyhzdWZmaXhDbHMsIGN1c3RvbWl6ZVByZWZpeENscykge1xuICBpZiAoY3VzdG9taXplUHJlZml4Q2xzKSByZXR1cm4gY3VzdG9taXplUHJlZml4Q2xzO1xuICByZXR1cm4gc3VmZml4Q2xzID8gXCJhbnQtXCIuY29uY2F0KHN1ZmZpeENscykgOiAnYW50Jztcbn07IC8vIHpvbWJpZUo6IPCfmqggRG8gbm90IHBhc3MgYGRlZmF1bHRSZW5kZXJFbXB0eWAgaGVyZSBzaW5jZSBpdCB3aWxsIGNhc2UgY2lyY3VsYXIgZGVwZW5kZW5jeS5cblxuXG5leHBvcnQgdmFyIENvbmZpZ0NvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCh7XG4gIC8vIFdlIHByb3ZpZGUgYSBkZWZhdWx0IGZ1bmN0aW9uIGZvciBDb250ZXh0IHdpdGhvdXQgcHJvdmlkZXJcbiAgZ2V0UHJlZml4Q2xzOiBkZWZhdWx0R2V0UHJlZml4Q2xzXG59KTtcbmV4cG9ydCB2YXIgQ29uZmlnQ29uc3VtZXIgPSBDb25maWdDb250ZXh0LkNvbnN1bWVyO1xuLyoqIEBkZXByZWNhdGVkIFVzZSBob29rcyBpbnN0ZWFkLiBUaGlzIGlzIGEgbGVnYWN5IGZ1bmN0aW9uICovXG5cbmV4cG9ydCBmdW5jdGlvbiB3aXRoQ29uZmlnQ29uc3VtZXIoY29uZmlnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3aXRoQ29uZmlnQ29uc3VtZXJGdW5jKENvbXBvbmVudCkge1xuICAgIC8vIFdyYXAgd2l0aCBDb25maWdDb25zdW1lci4gU2luY2Ugd2UgbmVlZCBjb21wYXRpYmxlIHdpdGggcmVhY3QgMTUsIGJlIGNhcmUgd2hlbiB1c2luZyByZWYgbWV0aG9kc1xuICAgIHZhciBTRkMgPSBmdW5jdGlvbiBTRkMocHJvcHMpIHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb25maWdDb25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbmZpZ1Byb3BzKSB7XG4gICAgICAgIHZhciBiYXNpY1ByZWZpeENscyA9IGNvbmZpZy5wcmVmaXhDbHM7XG4gICAgICAgIHZhciBnZXRQcmVmaXhDbHMgPSBjb25maWdQcm9wcy5nZXRQcmVmaXhDbHM7XG4gICAgICAgIHZhciBjdXN0b21pemVQcmVmaXhDbHMgPSBwcm9wcy5wcmVmaXhDbHM7XG4gICAgICAgIHZhciBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoYmFzaWNQcmVmaXhDbHMsIGN1c3RvbWl6ZVByZWZpeENscyk7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBjb25maWdQcm9wcywgcHJvcHMsIHtcbiAgICAgICAgICBwcmVmaXhDbHM6IHByZWZpeENsc1xuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgdmFyIGNvbnMgPSBDb21wb25lbnQuY29uc3RydWN0b3I7XG4gICAgdmFyIG5hbWUgPSBjb25zICYmIGNvbnMuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG4gICAgU0ZDLmRpc3BsYXlOYW1lID0gXCJ3aXRoQ29uZmlnQ29uc3VtZXIoXCIuY29uY2F0KG5hbWUsIFwiKVwiKTtcbiAgICByZXR1cm4gU0ZDO1xuICB9O1xufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc0ZyYWdtZW50IH0gZnJvbSAncmVhY3QtaXMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9BcnJheShjaGlsZHJlbikge1xuICB2YXIgb3B0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgdmFyIHJldCA9IFtdO1xuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAoKGNoaWxkID09PSB1bmRlZmluZWQgfHwgY2hpbGQgPT09IG51bGwpICYmICFvcHRpb24ua2VlcEVtcHR5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGQpKSB7XG4gICAgICByZXQgPSByZXQuY29uY2F0KHRvQXJyYXkoY2hpbGQpKTtcbiAgICB9IGVsc2UgaWYgKGlzRnJhZ21lbnQoY2hpbGQpICYmIGNoaWxkLnByb3BzKSB7XG4gICAgICByZXQgPSByZXQuY29uY2F0KHRvQXJyYXkoY2hpbGQucHJvcHMuY2hpbGRyZW4sIG9wdGlvbikpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXQucHVzaChjaGlsZCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJldDtcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwicmMtdXRpbC9lcy93YXJuaW5nXCI7XG5leHBvcnQgdmFyIEhPT0tfTUFSSyA9ICdSQ19GT1JNX0lOVEVSTkFMX0hPT0tTJzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcblxudmFyIHdhcm5pbmdGdW5jID0gZnVuY3Rpb24gd2FybmluZ0Z1bmMoKSB7XG4gIHdhcm5pbmcoZmFsc2UsICdDYW4gbm90IGZpbmQgRm9ybUNvbnRleHQuIFBsZWFzZSBtYWtlIHN1cmUgeW91IHdyYXAgRmllbGQgdW5kZXIgRm9ybS4nKTtcbn07XG5cbnZhciBDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoe1xuICBnZXRGaWVsZFZhbHVlOiB3YXJuaW5nRnVuYyxcbiAgZ2V0RmllbGRzVmFsdWU6IHdhcm5pbmdGdW5jLFxuICBnZXRGaWVsZEVycm9yOiB3YXJuaW5nRnVuYyxcbiAgZ2V0RmllbGRXYXJuaW5nOiB3YXJuaW5nRnVuYyxcbiAgZ2V0RmllbGRzRXJyb3I6IHdhcm5pbmdGdW5jLFxuICBpc0ZpZWxkc1RvdWNoZWQ6IHdhcm5pbmdGdW5jLFxuICBpc0ZpZWxkVG91Y2hlZDogd2FybmluZ0Z1bmMsXG4gIGlzRmllbGRWYWxpZGF0aW5nOiB3YXJuaW5nRnVuYyxcbiAgaXNGaWVsZHNWYWxpZGF0aW5nOiB3YXJuaW5nRnVuYyxcbiAgcmVzZXRGaWVsZHM6IHdhcm5pbmdGdW5jLFxuICBzZXRGaWVsZHM6IHdhcm5pbmdGdW5jLFxuICBzZXRGaWVsZHNWYWx1ZTogd2FybmluZ0Z1bmMsXG4gIHZhbGlkYXRlRmllbGRzOiB3YXJuaW5nRnVuYyxcbiAgc3VibWl0OiB3YXJuaW5nRnVuYyxcbiAgZ2V0SW50ZXJuYWxIb29rczogZnVuY3Rpb24gZ2V0SW50ZXJuYWxIb29rcygpIHtcbiAgICB3YXJuaW5nRnVuYygpO1xuICAgIHJldHVybiB7XG4gICAgICBkaXNwYXRjaDogd2FybmluZ0Z1bmMsXG4gICAgICBpbml0RW50aXR5VmFsdWU6IHdhcm5pbmdGdW5jLFxuICAgICAgcmVnaXN0ZXJGaWVsZDogd2FybmluZ0Z1bmMsXG4gICAgICB1c2VTdWJzY3JpYmU6IHdhcm5pbmdGdW5jLFxuICAgICAgc2V0SW5pdGlhbFZhbHVlczogd2FybmluZ0Z1bmMsXG4gICAgICBkZXN0cm95Rm9ybTogd2FybmluZ0Z1bmMsXG4gICAgICBzZXRDYWxsYmFja3M6IHdhcm5pbmdGdW5jLFxuICAgICAgcmVnaXN0ZXJXYXRjaDogd2FybmluZ0Z1bmMsXG4gICAgICBnZXRGaWVsZHM6IHdhcm5pbmdGdW5jLFxuICAgICAgc2V0VmFsaWRhdGVNZXNzYWdlczogd2FybmluZ0Z1bmMsXG4gICAgICBzZXRQcmVzZXJ2ZTogd2FybmluZ0Z1bmMsXG4gICAgICBnZXRJbml0aWFsVmFsdWU6IHdhcm5pbmdGdW5jXG4gICAgfTtcbiAgfVxufSk7XG5leHBvcnQgZGVmYXVsdCBDb250ZXh0OyIsImV4cG9ydCBmdW5jdGlvbiB0b0FycmF5KHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbdmFsdWVdO1xufSIsImZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuXG4gIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7XG4gIH07XG4gIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XG59XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHtcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlO1xuICBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlO1xuICBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlO1xuXG4gIHRyeSB7XG4gICAgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykge1xuICBpZiAoX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpKSB7XG4gICAgX2NvbnN0cnVjdCA9IFJlZmxlY3QuY29uc3RydWN0LmJpbmQoKTtcbiAgfSBlbHNlIHtcbiAgICBfY29uc3RydWN0ID0gZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7XG4gICAgICB2YXIgYSA9IFtudWxsXTtcbiAgICAgIGEucHVzaC5hcHBseShhLCBhcmdzKTtcbiAgICAgIHZhciBDb25zdHJ1Y3RvciA9IEZ1bmN0aW9uLmJpbmQuYXBwbHkoUGFyZW50LCBhKTtcbiAgICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDb25zdHJ1Y3RvcigpO1xuICAgICAgaWYgKENsYXNzKSBfc2V0UHJvdG90eXBlT2YoaW5zdGFuY2UsIENsYXNzLnByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfY29uc3RydWN0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZUZ1bmN0aW9uKGZuKSB7XG4gIHJldHVybiBGdW5jdGlvbi50b1N0cmluZy5jYWxsKGZuKS5pbmRleE9mKFwiW25hdGl2ZSBjb2RlXVwiKSAhPT0gLTE7XG59XG5cbmZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHtcbiAgdmFyIF9jYWNoZSA9IHR5cGVvZiBNYXAgPT09IFwiZnVuY3Rpb25cIiA/IG5ldyBNYXAoKSA6IHVuZGVmaW5lZDtcblxuICBfd3JhcE5hdGl2ZVN1cGVyID0gZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykge1xuICAgIGlmIChDbGFzcyA9PT0gbnVsbCB8fCAhX2lzTmF0aXZlRnVuY3Rpb24oQ2xhc3MpKSByZXR1cm4gQ2xhc3M7XG5cbiAgICBpZiAodHlwZW9mIENsYXNzICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIF9jYWNoZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgaWYgKF9jYWNoZS5oYXMoQ2xhc3MpKSByZXR1cm4gX2NhY2hlLmdldChDbGFzcyk7XG5cbiAgICAgIF9jYWNoZS5zZXQoQ2xhc3MsIFdyYXBwZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIFdyYXBwZXIoKSB7XG4gICAgICByZXR1cm4gX2NvbnN0cnVjdChDbGFzcywgYXJndW1lbnRzLCBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3IpO1xuICAgIH1cblxuICAgIFdyYXBwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBXcmFwcGVyLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBfc2V0UHJvdG90eXBlT2YoV3JhcHBlciwgQ2xhc3MpO1xuICB9O1xuXG4gIHJldHVybiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKTtcbn1cblxuLyogZXNsaW50IG5vLWNvbnNvbGU6MCAqL1xudmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkaiVdL2c7XG52YXIgd2FybmluZyA9IGZ1bmN0aW9uIHdhcm5pbmcoKSB7fTsgLy8gZG9uJ3QgcHJpbnQgd2FybmluZyBtZXNzYWdlIHdoZW4gaW4gcHJvZHVjdGlvbiBlbnYgb3Igbm9kZSBydW50aW1lXG5cbmlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5lbnYgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gIHdhcm5pbmcgPSBmdW5jdGlvbiB3YXJuaW5nKHR5cGUsIGVycm9ycykge1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZS53YXJuICYmIHR5cGVvZiBBU1lOQ19WQUxJREFUT1JfTk9fV0FSTklORyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmIChlcnJvcnMuZXZlcnkoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBlID09PSAnc3RyaW5nJztcbiAgICAgIH0pKSB7XG4gICAgICAgIGNvbnNvbGUud2Fybih0eXBlLCBlcnJvcnMpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY29udmVydEZpZWxkc0Vycm9yKGVycm9ycykge1xuICBpZiAoIWVycm9ycyB8fCAhZXJyb3JzLmxlbmd0aCkgcmV0dXJuIG51bGw7XG4gIHZhciBmaWVsZHMgPSB7fTtcbiAgZXJyb3JzLmZvckVhY2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgdmFyIGZpZWxkID0gZXJyb3IuZmllbGQ7XG4gICAgZmllbGRzW2ZpZWxkXSA9IGZpZWxkc1tmaWVsZF0gfHwgW107XG4gICAgZmllbGRzW2ZpZWxkXS5wdXNoKGVycm9yKTtcbiAgfSk7XG4gIHJldHVybiBmaWVsZHM7XG59XG5mdW5jdGlvbiBmb3JtYXQodGVtcGxhdGUpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIGkgPSAwO1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG5cbiAgaWYgKHR5cGVvZiB0ZW1wbGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB0ZW1wbGF0ZS5hcHBseShudWxsLCBhcmdzKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdGVtcGxhdGUgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIHN0ciA9IHRlbXBsYXRlLnJlcGxhY2UoZm9ybWF0UmVnRXhwLCBmdW5jdGlvbiAoeCkge1xuICAgICAgaWYgKHggPT09ICclJScpIHtcbiAgICAgICAgcmV0dXJuICclJztcbiAgICAgIH1cblxuICAgICAgaWYgKGkgPj0gbGVuKSB7XG4gICAgICAgIHJldHVybiB4O1xuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKHgpIHtcbiAgICAgICAgY2FzZSAnJXMnOlxuICAgICAgICAgIHJldHVybiBTdHJpbmcoYXJnc1tpKytdKTtcblxuICAgICAgICBjYXNlICclZCc6XG4gICAgICAgICAgcmV0dXJuIE51bWJlcihhcmdzW2krK10pO1xuXG4gICAgICAgIGNhc2UgJyVqJzpcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFyZ3NbaSsrXSk7XG4gICAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgICAgcmV0dXJuICdbQ2lyY3VsYXJdJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiB4O1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzdHI7XG4gIH1cblxuICByZXR1cm4gdGVtcGxhdGU7XG59XG5cbmZ1bmN0aW9uIGlzTmF0aXZlU3RyaW5nVHlwZSh0eXBlKSB7XG4gIHJldHVybiB0eXBlID09PSAnc3RyaW5nJyB8fCB0eXBlID09PSAndXJsJyB8fCB0eXBlID09PSAnaGV4JyB8fCB0eXBlID09PSAnZW1haWwnIHx8IHR5cGUgPT09ICdkYXRlJyB8fCB0eXBlID09PSAncGF0dGVybic7XG59XG5cbmZ1bmN0aW9uIGlzRW1wdHlWYWx1ZSh2YWx1ZSwgdHlwZSkge1xuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGUgPT09ICdhcnJheScgJiYgQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgIXZhbHVlLmxlbmd0aCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGlzTmF0aXZlU3RyaW5nVHlwZSh0eXBlKSAmJiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmICF2YWx1ZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBhc3luY1BhcmFsbGVsQXJyYXkoYXJyLCBmdW5jLCBjYWxsYmFjaykge1xuICB2YXIgcmVzdWx0cyA9IFtdO1xuICB2YXIgdG90YWwgPSAwO1xuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aDtcblxuICBmdW5jdGlvbiBjb3VudChlcnJvcnMpIHtcbiAgICByZXN1bHRzLnB1c2guYXBwbHkocmVzdWx0cywgZXJyb3JzIHx8IFtdKTtcbiAgICB0b3RhbCsrO1xuXG4gICAgaWYgKHRvdGFsID09PSBhcnJMZW5ndGgpIHtcbiAgICAgIGNhbGxiYWNrKHJlc3VsdHMpO1xuICAgIH1cbiAgfVxuXG4gIGFyci5mb3JFYWNoKGZ1bmN0aW9uIChhKSB7XG4gICAgZnVuYyhhLCBjb3VudCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhc3luY1NlcmlhbEFycmF5KGFyciwgZnVuYywgY2FsbGJhY2spIHtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGg7XG5cbiAgZnVuY3Rpb24gbmV4dChlcnJvcnMpIHtcbiAgICBpZiAoZXJyb3JzICYmIGVycm9ycy5sZW5ndGgpIHtcbiAgICAgIGNhbGxiYWNrKGVycm9ycyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG9yaWdpbmFsID0gaW5kZXg7XG4gICAgaW5kZXggPSBpbmRleCArIDE7XG5cbiAgICBpZiAob3JpZ2luYWwgPCBhcnJMZW5ndGgpIHtcbiAgICAgIGZ1bmMoYXJyW29yaWdpbmFsXSwgbmV4dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKFtdKTtcbiAgICB9XG4gIH1cblxuICBuZXh0KFtdKTtcbn1cblxuZnVuY3Rpb24gZmxhdHRlbk9iakFycihvYmpBcnIpIHtcbiAgdmFyIHJldCA9IFtdO1xuICBPYmplY3Qua2V5cyhvYmpBcnIpLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICByZXQucHVzaC5hcHBseShyZXQsIG9iakFycltrXSB8fCBbXSk7XG4gIH0pO1xuICByZXR1cm4gcmV0O1xufVxuXG52YXIgQXN5bmNWYWxpZGF0aW9uRXJyb3IgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9FcnJvcikge1xuICBfaW5oZXJpdHNMb29zZShBc3luY1ZhbGlkYXRpb25FcnJvciwgX0Vycm9yKTtcblxuICBmdW5jdGlvbiBBc3luY1ZhbGlkYXRpb25FcnJvcihlcnJvcnMsIGZpZWxkcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0Vycm9yLmNhbGwodGhpcywgJ0FzeW5jIFZhbGlkYXRpb24gRXJyb3InKSB8fCB0aGlzO1xuICAgIF90aGlzLmVycm9ycyA9IGVycm9ycztcbiAgICBfdGhpcy5maWVsZHMgPSBmaWVsZHM7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgcmV0dXJuIEFzeW5jVmFsaWRhdGlvbkVycm9yO1xufSggLyojX19QVVJFX18qL193cmFwTmF0aXZlU3VwZXIoRXJyb3IpKTtcbmZ1bmN0aW9uIGFzeW5jTWFwKG9iakFyciwgb3B0aW9uLCBmdW5jLCBjYWxsYmFjaywgc291cmNlKSB7XG4gIGlmIChvcHRpb24uZmlyc3QpIHtcbiAgICB2YXIgX3BlbmRpbmcgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgbmV4dCA9IGZ1bmN0aW9uIG5leHQoZXJyb3JzKSB7XG4gICAgICAgIGNhbGxiYWNrKGVycm9ycyk7XG4gICAgICAgIHJldHVybiBlcnJvcnMubGVuZ3RoID8gcmVqZWN0KG5ldyBBc3luY1ZhbGlkYXRpb25FcnJvcihlcnJvcnMsIGNvbnZlcnRGaWVsZHNFcnJvcihlcnJvcnMpKSkgOiByZXNvbHZlKHNvdXJjZSk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgZmxhdHRlbkFyciA9IGZsYXR0ZW5PYmpBcnIob2JqQXJyKTtcbiAgICAgIGFzeW5jU2VyaWFsQXJyYXkoZmxhdHRlbkFyciwgZnVuYywgbmV4dCk7XG4gICAgfSk7XG5cbiAgICBfcGVuZGluZ1tcImNhdGNoXCJdKGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gZTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfcGVuZGluZztcbiAgfVxuXG4gIHZhciBmaXJzdEZpZWxkcyA9IG9wdGlvbi5maXJzdEZpZWxkcyA9PT0gdHJ1ZSA/IE9iamVjdC5rZXlzKG9iakFycikgOiBvcHRpb24uZmlyc3RGaWVsZHMgfHwgW107XG4gIHZhciBvYmpBcnJLZXlzID0gT2JqZWN0LmtleXMob2JqQXJyKTtcbiAgdmFyIG9iakFyckxlbmd0aCA9IG9iakFycktleXMubGVuZ3RoO1xuICB2YXIgdG90YWwgPSAwO1xuICB2YXIgcmVzdWx0cyA9IFtdO1xuICB2YXIgcGVuZGluZyA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgbmV4dCA9IGZ1bmN0aW9uIG5leHQoZXJyb3JzKSB7XG4gICAgICByZXN1bHRzLnB1c2guYXBwbHkocmVzdWx0cywgZXJyb3JzKTtcbiAgICAgIHRvdGFsKys7XG5cbiAgICAgIGlmICh0b3RhbCA9PT0gb2JqQXJyTGVuZ3RoKSB7XG4gICAgICAgIGNhbGxiYWNrKHJlc3VsdHMpO1xuICAgICAgICByZXR1cm4gcmVzdWx0cy5sZW5ndGggPyByZWplY3QobmV3IEFzeW5jVmFsaWRhdGlvbkVycm9yKHJlc3VsdHMsIGNvbnZlcnRGaWVsZHNFcnJvcihyZXN1bHRzKSkpIDogcmVzb2x2ZShzb3VyY2UpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoIW9iakFycktleXMubGVuZ3RoKSB7XG4gICAgICBjYWxsYmFjayhyZXN1bHRzKTtcbiAgICAgIHJlc29sdmUoc291cmNlKTtcbiAgICB9XG5cbiAgICBvYmpBcnJLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgdmFyIGFyciA9IG9iakFycltrZXldO1xuXG4gICAgICBpZiAoZmlyc3RGaWVsZHMuaW5kZXhPZihrZXkpICE9PSAtMSkge1xuICAgICAgICBhc3luY1NlcmlhbEFycmF5KGFyciwgZnVuYywgbmV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhc3luY1BhcmFsbGVsQXJyYXkoYXJyLCBmdW5jLCBuZXh0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIHBlbmRpbmdbXCJjYXRjaFwiXShmdW5jdGlvbiAoZSkge1xuICAgIHJldHVybiBlO1xuICB9KTtcbiAgcmV0dXJuIHBlbmRpbmc7XG59XG5cbmZ1bmN0aW9uIGlzRXJyb3JPYmoob2JqKSB7XG4gIHJldHVybiAhIShvYmogJiYgb2JqLm1lc3NhZ2UgIT09IHVuZGVmaW5lZCk7XG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlKHZhbHVlLCBwYXRoKSB7XG4gIHZhciB2ID0gdmFsdWU7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHYgPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdjtcbiAgICB9XG5cbiAgICB2ID0gdltwYXRoW2ldXTtcbiAgfVxuXG4gIHJldHVybiB2O1xufVxuXG5mdW5jdGlvbiBjb21wbGVtZW50RXJyb3IocnVsZSwgc291cmNlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAob2UpIHtcbiAgICB2YXIgZmllbGRWYWx1ZTtcblxuICAgIGlmIChydWxlLmZ1bGxGaWVsZHMpIHtcbiAgICAgIGZpZWxkVmFsdWUgPSBnZXRWYWx1ZShzb3VyY2UsIHJ1bGUuZnVsbEZpZWxkcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZpZWxkVmFsdWUgPSBzb3VyY2Vbb2UuZmllbGQgfHwgcnVsZS5mdWxsRmllbGRdO1xuICAgIH1cblxuICAgIGlmIChpc0Vycm9yT2JqKG9lKSkge1xuICAgICAgb2UuZmllbGQgPSBvZS5maWVsZCB8fCBydWxlLmZ1bGxGaWVsZDtcbiAgICAgIG9lLmZpZWxkVmFsdWUgPSBmaWVsZFZhbHVlO1xuICAgICAgcmV0dXJuIG9lO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBtZXNzYWdlOiB0eXBlb2Ygb2UgPT09ICdmdW5jdGlvbicgPyBvZSgpIDogb2UsXG4gICAgICBmaWVsZFZhbHVlOiBmaWVsZFZhbHVlLFxuICAgICAgZmllbGQ6IG9lLmZpZWxkIHx8IHJ1bGUuZnVsbEZpZWxkXG4gICAgfTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGRlZXBNZXJnZSh0YXJnZXQsIHNvdXJjZSkge1xuICBpZiAoc291cmNlKSB7XG4gICAgZm9yICh2YXIgcyBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChzb3VyY2UuaGFzT3duUHJvcGVydHkocykpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gc291cmNlW3NdO1xuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHR5cGVvZiB0YXJnZXRbc10gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgdGFyZ2V0W3NdID0gX2V4dGVuZHMoe30sIHRhcmdldFtzXSwgdmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhcmdldFtzXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxudmFyIHJlcXVpcmVkJDEgPSBmdW5jdGlvbiByZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMsIHR5cGUpIHtcbiAgaWYgKHJ1bGUucmVxdWlyZWQgJiYgKCFzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCkgfHwgaXNFbXB0eVZhbHVlKHZhbHVlLCB0eXBlIHx8IHJ1bGUudHlwZSkpKSB7XG4gICAgZXJyb3JzLnB1c2goZm9ybWF0KG9wdGlvbnMubWVzc2FnZXMucmVxdWlyZWQsIHJ1bGUuZnVsbEZpZWxkKSk7XG4gIH1cbn07XG5cbi8qKlxuICogIFJ1bGUgZm9yIHZhbGlkYXRpbmcgd2hpdGVzcGFjZS5cbiAqXG4gKiAgQHBhcmFtIHJ1bGUgVGhlIHZhbGlkYXRpb24gcnVsZS5cbiAqICBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBmaWVsZCBvbiB0aGUgc291cmNlIG9iamVjdC5cbiAqICBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IGJlaW5nIHZhbGlkYXRlZC5cbiAqICBAcGFyYW0gZXJyb3JzIEFuIGFycmF5IG9mIGVycm9ycyB0aGF0IHRoaXMgcnVsZSBtYXkgYWRkXG4gKiAgdmFsaWRhdGlvbiBlcnJvcnMgdG8uXG4gKiAgQHBhcmFtIG9wdGlvbnMgVGhlIHZhbGlkYXRpb24gb3B0aW9ucy5cbiAqICBAcGFyYW0gb3B0aW9ucy5tZXNzYWdlcyBUaGUgdmFsaWRhdGlvbiBtZXNzYWdlcy5cbiAqL1xuXG52YXIgd2hpdGVzcGFjZSA9IGZ1bmN0aW9uIHdoaXRlc3BhY2UocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKSB7XG4gIGlmICgvXlxccyskLy50ZXN0KHZhbHVlKSB8fCB2YWx1ZSA9PT0gJycpIHtcbiAgICBlcnJvcnMucHVzaChmb3JtYXQob3B0aW9ucy5tZXNzYWdlcy53aGl0ZXNwYWNlLCBydWxlLmZ1bGxGaWVsZCkpO1xuICB9XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20va2V2dmEvdXJsLXJlZ2V4L2Jsb2IvbWFzdGVyL2luZGV4LmpzXG52YXIgdXJsUmVnO1xudmFyIGdldFVybFJlZ2V4ID0gKGZ1bmN0aW9uICgpIHtcbiAgaWYgKHVybFJlZykge1xuICAgIHJldHVybiB1cmxSZWc7XG4gIH1cblxuICB2YXIgd29yZCA9ICdbYS1mQS1GXFxcXGQ6XSc7XG5cbiAgdmFyIGIgPSBmdW5jdGlvbiBiKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gb3B0aW9ucyAmJiBvcHRpb25zLmluY2x1ZGVCb3VuZGFyaWVzID8gXCIoPzooPzw9XFxcXHN8XikoPz1cIiArIHdvcmQgKyBcIil8KD88PVwiICsgd29yZCArIFwiKSg/PVxcXFxzfCQpKVwiIDogJyc7XG4gIH07XG5cbiAgdmFyIHY0ID0gJyg/OjI1WzAtNV18MlswLTRdXFxcXGR8MVxcXFxkXFxcXGR8WzEtOV1cXFxcZHxcXFxcZCkoPzpcXFxcLig/OjI1WzAtNV18MlswLTRdXFxcXGR8MVxcXFxkXFxcXGR8WzEtOV1cXFxcZHxcXFxcZCkpezN9JztcbiAgdmFyIHY2c2VnID0gJ1thLWZBLUZcXFxcZF17MSw0fSc7XG4gIHZhciB2NiA9IChcIlxcbig/Olxcbig/OlwiICsgdjZzZWcgKyBcIjopezd9KD86XCIgKyB2NnNlZyArIFwifDopfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDE6MjozOjQ6NTo2Ojc6OiAgMToyOjM6NDo1OjY6Nzo4XFxuKD86XCIgKyB2NnNlZyArIFwiOil7Nn0oPzpcIiArIHY0ICsgXCJ8OlwiICsgdjZzZWcgKyBcInw6KXwgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDE6MjozOjQ6NTo2OjogICAgMToyOjM6NDo1OjY6OjggICAxOjI6Mzo0OjU6Njo6OCAgMToyOjM6NDo1OjY6OjEuMi4zLjRcXG4oPzpcIiArIHY2c2VnICsgXCI6KXs1fSg/OjpcIiArIHY0ICsgXCJ8KD86OlwiICsgdjZzZWcgKyBcIil7MSwyfXw6KXwgICAgICAgICAgICAgICAgICAgLy8gMToyOjM6NDo1OjogICAgICAxOjI6Mzo0OjU6Ojc6OCAgIDE6MjozOjQ6NTo6OCAgICAxOjI6Mzo0OjU6Ojc6MS4yLjMuNFxcbig/OlwiICsgdjZzZWcgKyBcIjopezR9KD86KD86OlwiICsgdjZzZWcgKyBcIil7MCwxfTpcIiArIHY0ICsgXCJ8KD86OlwiICsgdjZzZWcgKyBcIil7MSwzfXw6KXwgLy8gMToyOjM6NDo6ICAgICAgICAxOjI6Mzo0Ojo2Ojc6OCAgIDE6MjozOjQ6OjggICAgICAxOjI6Mzo0Ojo2Ojc6MS4yLjMuNFxcbig/OlwiICsgdjZzZWcgKyBcIjopezN9KD86KD86OlwiICsgdjZzZWcgKyBcIil7MCwyfTpcIiArIHY0ICsgXCJ8KD86OlwiICsgdjZzZWcgKyBcIil7MSw0fXw6KXwgLy8gMToyOjM6OiAgICAgICAgICAxOjI6Mzo6NTo2Ojc6OCAgIDE6MjozOjo4ICAgICAgICAxOjI6Mzo6NTo2Ojc6MS4yLjMuNFxcbig/OlwiICsgdjZzZWcgKyBcIjopezJ9KD86KD86OlwiICsgdjZzZWcgKyBcIil7MCwzfTpcIiArIHY0ICsgXCJ8KD86OlwiICsgdjZzZWcgKyBcIil7MSw1fXw6KXwgLy8gMToyOjogICAgICAgICAgICAxOjI6OjQ6NTo2Ojc6OCAgIDE6Mjo6OCAgICAgICAgICAxOjI6OjQ6NTo2Ojc6MS4yLjMuNFxcbig/OlwiICsgdjZzZWcgKyBcIjopezF9KD86KD86OlwiICsgdjZzZWcgKyBcIil7MCw0fTpcIiArIHY0ICsgXCJ8KD86OlwiICsgdjZzZWcgKyBcIil7MSw2fXw6KXwgLy8gMTo6ICAgICAgICAgICAgICAxOjozOjQ6NTo2Ojc6OCAgIDE6OjggICAgICAgICAgICAxOjozOjQ6NTo2Ojc6MS4yLjMuNFxcbig/OjooPzooPzo6XCIgKyB2NnNlZyArIFwiKXswLDV9OlwiICsgdjQgKyBcInwoPzo6XCIgKyB2NnNlZyArIFwiKXsxLDd9fDopKSAgICAgICAgICAgICAvLyA6OjI6Mzo0OjU6Njo3OjggIDo6MjozOjQ6NTo2Ojc6OCAgOjo4ICAgICAgICAgICAgIDo6MS4yLjMuNFxcbikoPzolWzAtOWEtekEtWl17MSx9KT8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAlZXRoMCAgICAgICAgICAgICUxXFxuXCIpLnJlcGxhY2UoL1xccypcXC9cXC8uKiQvZ20sICcnKS5yZXBsYWNlKC9cXG4vZywgJycpLnRyaW0oKTsgLy8gUHJlLWNvbXBpbGUgb25seSB0aGUgZXhhY3QgcmVnZXhlcyBiZWNhdXNlIGFkZGluZyBhIGdsb2JhbCBmbGFnIG1ha2UgcmVnZXhlcyBzdGF0ZWZ1bFxuXG4gIHZhciB2NDZFeGFjdCA9IG5ldyBSZWdFeHAoXCIoPzpeXCIgKyB2NCArIFwiJCl8KD86XlwiICsgdjYgKyBcIiQpXCIpO1xuICB2YXIgdjRleGFjdCA9IG5ldyBSZWdFeHAoXCJeXCIgKyB2NCArIFwiJFwiKTtcbiAgdmFyIHY2ZXhhY3QgPSBuZXcgUmVnRXhwKFwiXlwiICsgdjYgKyBcIiRcIik7XG5cbiAgdmFyIGlwID0gZnVuY3Rpb24gaXAob3B0aW9ucykge1xuICAgIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMuZXhhY3QgPyB2NDZFeGFjdCA6IG5ldyBSZWdFeHAoXCIoPzpcIiArIGIob3B0aW9ucykgKyB2NCArIGIob3B0aW9ucykgKyBcIil8KD86XCIgKyBiKG9wdGlvbnMpICsgdjYgKyBiKG9wdGlvbnMpICsgXCIpXCIsICdnJyk7XG4gIH07XG5cbiAgaXAudjQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMuZXhhY3QgPyB2NGV4YWN0IDogbmV3IFJlZ0V4cChcIlwiICsgYihvcHRpb25zKSArIHY0ICsgYihvcHRpb25zKSwgJ2cnKTtcbiAgfTtcblxuICBpcC52NiA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMgJiYgb3B0aW9ucy5leGFjdCA/IHY2ZXhhY3QgOiBuZXcgUmVnRXhwKFwiXCIgKyBiKG9wdGlvbnMpICsgdjYgKyBiKG9wdGlvbnMpLCAnZycpO1xuICB9O1xuXG4gIHZhciBwcm90b2NvbCA9IFwiKD86KD86W2Etel0rOik/Ly8pXCI7XG4gIHZhciBhdXRoID0gJyg/OlxcXFxTKyg/OjpcXFxcUyopP0ApPyc7XG4gIHZhciBpcHY0ID0gaXAudjQoKS5zb3VyY2U7XG4gIHZhciBpcHY2ID0gaXAudjYoKS5zb3VyY2U7XG4gIHZhciBob3N0ID0gXCIoPzooPzpbYS16XFxcXHUwMGExLVxcXFx1ZmZmZjAtOV1bLV9dKikqW2EtelxcXFx1MDBhMS1cXFxcdWZmZmYwLTldKylcIjtcbiAgdmFyIGRvbWFpbiA9IFwiKD86XFxcXC4oPzpbYS16XFxcXHUwMGExLVxcXFx1ZmZmZjAtOV0tKikqW2EtelxcXFx1MDBhMS1cXFxcdWZmZmYwLTldKykqXCI7XG4gIHZhciB0bGQgPSBcIig/OlxcXFwuKD86W2EtelxcXFx1MDBhMS1cXFxcdWZmZmZdezIsfSkpXCI7XG4gIHZhciBwb3J0ID0gJyg/OjpcXFxcZHsyLDV9KT8nO1xuICB2YXIgcGF0aCA9ICcoPzpbLz8jXVteXFxcXHNcIl0qKT8nO1xuICB2YXIgcmVnZXggPSBcIig/OlwiICsgcHJvdG9jb2wgKyBcInx3d3dcXFxcLilcIiArIGF1dGggKyBcIig/OmxvY2FsaG9zdHxcIiArIGlwdjQgKyBcInxcIiArIGlwdjYgKyBcInxcIiArIGhvc3QgKyBkb21haW4gKyB0bGQgKyBcIilcIiArIHBvcnQgKyBwYXRoO1xuICB1cmxSZWcgPSBuZXcgUmVnRXhwKFwiKD86XlwiICsgcmVnZXggKyBcIiQpXCIsICdpJyk7XG4gIHJldHVybiB1cmxSZWc7XG59KTtcblxuLyogZXNsaW50IG1heC1sZW46MCAqL1xuXG52YXIgcGF0dGVybiQyID0ge1xuICAvLyBodHRwOi8vZW1haWxyZWdleC5jb20vXG4gIGVtYWlsOiAvXigoW148PigpXFxbXFxdXFxcXC4sOzpcXHNAXCJdKyhcXC5bXjw+KClcXFtcXF1cXFxcLiw7Olxcc0BcIl0rKSopfChcIi4rXCIpKUAoKFxcW1swLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31dKXwoKFthLXpBLVpcXC0wLTlcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdK1xcLikrW2EtekEtWlxcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl17Mix9KSkkLyxcbiAgLy8gdXJsOiBuZXcgUmVnRXhwKFxuICAvLyAgICdeKD8hbWFpbHRvOikoPzooPzpodHRwfGh0dHBzfGZ0cCk6Ly98Ly8pKD86XFxcXFMrKD86OlxcXFxTKik/QCk/KD86KD86KD86WzEtOV1cXFxcZD98MVxcXFxkXFxcXGR8MlswMV1cXFxcZHwyMlswLTNdKSg/OlxcXFwuKD86MT9cXFxcZHsxLDJ9fDJbMC00XVxcXFxkfDI1WzAtNV0pKXsyfSg/OlxcXFwuKD86WzAtOV1cXFxcZD98MVxcXFxkXFxcXGR8MlswLTRdXFxcXGR8MjVbMC00XSkpfCg/Oig/OlthLXpcXFxcdTAwYTEtXFxcXHVmZmZmMC05XSstKikqW2EtelxcXFx1MDBhMS1cXFxcdWZmZmYwLTldKykoPzpcXFxcLig/OlthLXpcXFxcdTAwYTEtXFxcXHVmZmZmMC05XSstKikqW2EtelxcXFx1MDBhMS1cXFxcdWZmZmYwLTldKykqKD86XFxcXC4oPzpbYS16XFxcXHUwMGExLVxcXFx1ZmZmZl17Mix9KSkpfGxvY2FsaG9zdCkoPzo6XFxcXGR7Miw1fSk/KD86KC98XFxcXD98IylbXlxcXFxzXSopPyQnLFxuICAvLyAgICdpJyxcbiAgLy8gKSxcbiAgaGV4OiAvXiM/KFthLWYwLTldezZ9fFthLWYwLTldezN9KSQvaVxufTtcbnZhciB0eXBlcyA9IHtcbiAgaW50ZWdlcjogZnVuY3Rpb24gaW50ZWdlcih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlcy5udW1iZXIodmFsdWUpICYmIHBhcnNlSW50KHZhbHVlLCAxMCkgPT09IHZhbHVlO1xuICB9LFxuICBcImZsb2F0XCI6IGZ1bmN0aW9uIGZsb2F0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVzLm51bWJlcih2YWx1ZSkgJiYgIXR5cGVzLmludGVnZXIodmFsdWUpO1xuICB9LFxuICBhcnJheTogZnVuY3Rpb24gYXJyYXkodmFsdWUpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG4gIH0sXG4gIHJlZ2V4cDogZnVuY3Rpb24gcmVnZXhwKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgcmV0dXJuICEhbmV3IFJlZ0V4cCh2YWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSxcbiAgZGF0ZTogZnVuY3Rpb24gZGF0ZSh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUuZ2V0VGltZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsdWUuZ2V0TW9udGggPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbHVlLmdldFllYXIgPT09ICdmdW5jdGlvbicgJiYgIWlzTmFOKHZhbHVlLmdldFRpbWUoKSk7XG4gIH0sXG4gIG51bWJlcjogZnVuY3Rpb24gbnVtYmVyKHZhbHVlKSB7XG4gICAgaWYgKGlzTmFOKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInO1xuICB9LFxuICBvYmplY3Q6IGZ1bmN0aW9uIG9iamVjdCh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmICF0eXBlcy5hcnJheSh2YWx1ZSk7XG4gIH0sXG4gIG1ldGhvZDogZnVuY3Rpb24gbWV0aG9kKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgfSxcbiAgZW1haWw6IGZ1bmN0aW9uIGVtYWlsKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUubGVuZ3RoIDw9IDMyMCAmJiAhIXZhbHVlLm1hdGNoKHBhdHRlcm4kMi5lbWFpbCk7XG4gIH0sXG4gIHVybDogZnVuY3Rpb24gdXJsKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUubGVuZ3RoIDw9IDIwNDggJiYgISF2YWx1ZS5tYXRjaChnZXRVcmxSZWdleCgpKTtcbiAgfSxcbiAgaGV4OiBmdW5jdGlvbiBoZXgodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAhIXZhbHVlLm1hdGNoKHBhdHRlcm4kMi5oZXgpO1xuICB9XG59O1xuXG52YXIgdHlwZSQxID0gZnVuY3Rpb24gdHlwZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpIHtcbiAgaWYgKHJ1bGUucmVxdWlyZWQgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJlcXVpcmVkJDEocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgY3VzdG9tID0gWydpbnRlZ2VyJywgJ2Zsb2F0JywgJ2FycmF5JywgJ3JlZ2V4cCcsICdvYmplY3QnLCAnbWV0aG9kJywgJ2VtYWlsJywgJ251bWJlcicsICdkYXRlJywgJ3VybCcsICdoZXgnXTtcbiAgdmFyIHJ1bGVUeXBlID0gcnVsZS50eXBlO1xuXG4gIGlmIChjdXN0b20uaW5kZXhPZihydWxlVHlwZSkgPiAtMSkge1xuICAgIGlmICghdHlwZXNbcnVsZVR5cGVdKHZhbHVlKSkge1xuICAgICAgZXJyb3JzLnB1c2goZm9ybWF0KG9wdGlvbnMubWVzc2FnZXMudHlwZXNbcnVsZVR5cGVdLCBydWxlLmZ1bGxGaWVsZCwgcnVsZS50eXBlKSk7XG4gICAgfSAvLyBzdHJhaWdodCB0eXBlb2YgY2hlY2tcblxuICB9IGVsc2UgaWYgKHJ1bGVUeXBlICYmIHR5cGVvZiB2YWx1ZSAhPT0gcnVsZS50eXBlKSB7XG4gICAgZXJyb3JzLnB1c2goZm9ybWF0KG9wdGlvbnMubWVzc2FnZXMudHlwZXNbcnVsZVR5cGVdLCBydWxlLmZ1bGxGaWVsZCwgcnVsZS50eXBlKSk7XG4gIH1cbn07XG5cbnZhciByYW5nZSA9IGZ1bmN0aW9uIHJhbmdlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucykge1xuICB2YXIgbGVuID0gdHlwZW9mIHJ1bGUubGVuID09PSAnbnVtYmVyJztcbiAgdmFyIG1pbiA9IHR5cGVvZiBydWxlLm1pbiA9PT0gJ251bWJlcic7XG4gIHZhciBtYXggPSB0eXBlb2YgcnVsZS5tYXggPT09ICdudW1iZXInOyAvLyDmraPliJnljLnphY3noIHngrnojIPlm7Tku45VKzAxMDAwMOS4gOebtOWIsFUrMTBGRkZG55qE5paH5a2X77yI6KGl5YWF5bmz6Z2iU3VwcGxlbWVudGFyeSBQbGFuZe+8iVxuXG4gIHZhciBzcFJlZ2V4cCA9IC9bXFx1RDgwMC1cXHVEQkZGXVtcXHVEQzAwLVxcdURGRkZdL2c7XG4gIHZhciB2YWwgPSB2YWx1ZTtcbiAgdmFyIGtleSA9IG51bGw7XG4gIHZhciBudW0gPSB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInO1xuICB2YXIgc3RyID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcbiAgdmFyIGFyciA9IEFycmF5LmlzQXJyYXkodmFsdWUpO1xuXG4gIGlmIChudW0pIHtcbiAgICBrZXkgPSAnbnVtYmVyJztcbiAgfSBlbHNlIGlmIChzdHIpIHtcbiAgICBrZXkgPSAnc3RyaW5nJztcbiAgfSBlbHNlIGlmIChhcnIpIHtcbiAgICBrZXkgPSAnYXJyYXknO1xuICB9IC8vIGlmIHRoZSB2YWx1ZSBpcyBub3Qgb2YgYSBzdXBwb3J0ZWQgdHlwZSBmb3IgcmFuZ2UgdmFsaWRhdGlvblxuICAvLyB0aGUgdmFsaWRhdGlvbiBydWxlIHJ1bGUgc2hvdWxkIHVzZSB0aGVcbiAgLy8gdHlwZSBwcm9wZXJ0eSB0byBhbHNvIHRlc3QgZm9yIGEgcGFydGljdWxhciB0eXBlXG5cblxuICBpZiAoIWtleSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChhcnIpIHtcbiAgICB2YWwgPSB2YWx1ZS5sZW5ndGg7XG4gIH1cblxuICBpZiAoc3RyKSB7XG4gICAgLy8g5aSE55CG56CB54K55aSn5LqOVSswMTAwMDDnmoTmloflrZdsZW5ndGjlsZ7mgKfkuI3lh4bnoa7nmoRidWfvvIzlpoJcIvCgrrfwoK638KCut1wiLmxlbmdodCAhPT0gM1xuICAgIHZhbCA9IHZhbHVlLnJlcGxhY2Uoc3BSZWdleHAsICdfJykubGVuZ3RoO1xuICB9XG5cbiAgaWYgKGxlbikge1xuICAgIGlmICh2YWwgIT09IHJ1bGUubGVuKSB7XG4gICAgICBlcnJvcnMucHVzaChmb3JtYXQob3B0aW9ucy5tZXNzYWdlc1trZXldLmxlbiwgcnVsZS5mdWxsRmllbGQsIHJ1bGUubGVuKSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKG1pbiAmJiAhbWF4ICYmIHZhbCA8IHJ1bGUubWluKSB7XG4gICAgZXJyb3JzLnB1c2goZm9ybWF0KG9wdGlvbnMubWVzc2FnZXNba2V5XS5taW4sIHJ1bGUuZnVsbEZpZWxkLCBydWxlLm1pbikpO1xuICB9IGVsc2UgaWYgKG1heCAmJiAhbWluICYmIHZhbCA+IHJ1bGUubWF4KSB7XG4gICAgZXJyb3JzLnB1c2goZm9ybWF0KG9wdGlvbnMubWVzc2FnZXNba2V5XS5tYXgsIHJ1bGUuZnVsbEZpZWxkLCBydWxlLm1heCkpO1xuICB9IGVsc2UgaWYgKG1pbiAmJiBtYXggJiYgKHZhbCA8IHJ1bGUubWluIHx8IHZhbCA+IHJ1bGUubWF4KSkge1xuICAgIGVycm9ycy5wdXNoKGZvcm1hdChvcHRpb25zLm1lc3NhZ2VzW2tleV0ucmFuZ2UsIHJ1bGUuZnVsbEZpZWxkLCBydWxlLm1pbiwgcnVsZS5tYXgpKTtcbiAgfVxufTtcblxudmFyIEVOVU0kMSA9ICdlbnVtJztcblxudmFyIGVudW1lcmFibGUkMSA9IGZ1bmN0aW9uIGVudW1lcmFibGUocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKSB7XG4gIHJ1bGVbRU5VTSQxXSA9IEFycmF5LmlzQXJyYXkocnVsZVtFTlVNJDFdKSA/IHJ1bGVbRU5VTSQxXSA6IFtdO1xuXG4gIGlmIChydWxlW0VOVU0kMV0uaW5kZXhPZih2YWx1ZSkgPT09IC0xKSB7XG4gICAgZXJyb3JzLnB1c2goZm9ybWF0KG9wdGlvbnMubWVzc2FnZXNbRU5VTSQxXSwgcnVsZS5mdWxsRmllbGQsIHJ1bGVbRU5VTSQxXS5qb2luKCcsICcpKSk7XG4gIH1cbn07XG5cbnZhciBwYXR0ZXJuJDEgPSBmdW5jdGlvbiBwYXR0ZXJuKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucykge1xuICBpZiAocnVsZS5wYXR0ZXJuKSB7XG4gICAgaWYgKHJ1bGUucGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgLy8gaWYgYSBSZWdFeHAgaW5zdGFuY2UgaXMgcGFzc2VkLCByZXNldCBgbGFzdEluZGV4YCBpbiBjYXNlIGl0cyBgZ2xvYmFsYFxuICAgICAgLy8gZmxhZyBpcyBhY2NpZGVudGFsbHkgc2V0IHRvIGB0cnVlYCwgd2hpY2ggaW4gYSB2YWxpZGF0aW9uIHNjZW5hcmlvXG4gICAgICAvLyBpcyBub3QgbmVjZXNzYXJ5IGFuZCB0aGUgcmVzdWx0IG1pZ2h0IGJlIG1pc2xlYWRpbmdcbiAgICAgIHJ1bGUucGF0dGVybi5sYXN0SW5kZXggPSAwO1xuXG4gICAgICBpZiAoIXJ1bGUucGF0dGVybi50ZXN0KHZhbHVlKSkge1xuICAgICAgICBlcnJvcnMucHVzaChmb3JtYXQob3B0aW9ucy5tZXNzYWdlcy5wYXR0ZXJuLm1pc21hdGNoLCBydWxlLmZ1bGxGaWVsZCwgdmFsdWUsIHJ1bGUucGF0dGVybikpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHJ1bGUucGF0dGVybiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciBfcGF0dGVybiA9IG5ldyBSZWdFeHAocnVsZS5wYXR0ZXJuKTtcblxuICAgICAgaWYgKCFfcGF0dGVybi50ZXN0KHZhbHVlKSkge1xuICAgICAgICBlcnJvcnMucHVzaChmb3JtYXQob3B0aW9ucy5tZXNzYWdlcy5wYXR0ZXJuLm1pc21hdGNoLCBydWxlLmZ1bGxGaWVsZCwgdmFsdWUsIHJ1bGUucGF0dGVybikpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxudmFyIHJ1bGVzID0ge1xuICByZXF1aXJlZDogcmVxdWlyZWQkMSxcbiAgd2hpdGVzcGFjZTogd2hpdGVzcGFjZSxcbiAgdHlwZTogdHlwZSQxLFxuICByYW5nZTogcmFuZ2UsXG4gIFwiZW51bVwiOiBlbnVtZXJhYmxlJDEsXG4gIHBhdHRlcm46IHBhdHRlcm4kMVxufTtcblxudmFyIHN0cmluZyA9IGZ1bmN0aW9uIHN0cmluZyhydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB2YWxpZGF0ZSA9IHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpO1xuXG4gIGlmICh2YWxpZGF0ZSkge1xuICAgIGlmIChpc0VtcHR5VmFsdWUodmFsdWUsICdzdHJpbmcnKSAmJiAhcnVsZS5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgcnVsZXMucmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zLCAnc3RyaW5nJyk7XG5cbiAgICBpZiAoIWlzRW1wdHlWYWx1ZSh2YWx1ZSwgJ3N0cmluZycpKSB7XG4gICAgICBydWxlcy50eXBlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgICBydWxlcy5yYW5nZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgICAgcnVsZXMucGF0dGVybihydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuXG4gICAgICBpZiAocnVsZS53aGl0ZXNwYWNlID09PSB0cnVlKSB7XG4gICAgICAgIHJ1bGVzLndoaXRlc3BhY2UocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjYWxsYmFjayhlcnJvcnMpO1xufTtcblxudmFyIG1ldGhvZCA9IGZ1bmN0aW9uIG1ldGhvZChydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB2YWxpZGF0ZSA9IHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpO1xuXG4gIGlmICh2YWxpZGF0ZSkge1xuICAgIGlmIChpc0VtcHR5VmFsdWUodmFsdWUpICYmICFydWxlLnJlcXVpcmVkKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuXG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJ1bGVzLnR5cGUocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBjYWxsYmFjayhlcnJvcnMpO1xufTtcblxudmFyIG51bWJlciA9IGZ1bmN0aW9uIG51bWJlcihydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB2YWxpZGF0ZSA9IHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpO1xuXG4gIGlmICh2YWxpZGF0ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gJycpIHtcbiAgICAgIHZhbHVlID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmIChpc0VtcHR5VmFsdWUodmFsdWUpICYmICFydWxlLnJlcXVpcmVkKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuXG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJ1bGVzLnR5cGUocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICAgIHJ1bGVzLnJhbmdlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgY2FsbGJhY2soZXJyb3JzKTtcbn07XG5cbnZhciBfYm9vbGVhbiA9IGZ1bmN0aW9uIF9ib29sZWFuKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaywgc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHZhbGlkYXRlID0gcnVsZS5yZXF1aXJlZCB8fCAhcnVsZS5yZXF1aXJlZCAmJiBzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCk7XG5cbiAgaWYgKHZhbGlkYXRlKSB7XG4gICAgaWYgKGlzRW1wdHlWYWx1ZSh2YWx1ZSkgJiYgIXJ1bGUucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG5cbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcnVsZXMudHlwZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9ycyk7XG59O1xuXG52YXIgcmVnZXhwID0gZnVuY3Rpb24gcmVnZXhwKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaywgc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHZhbGlkYXRlID0gcnVsZS5yZXF1aXJlZCB8fCAhcnVsZS5yZXF1aXJlZCAmJiBzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCk7XG5cbiAgaWYgKHZhbGlkYXRlKSB7XG4gICAgaWYgKGlzRW1wdHlWYWx1ZSh2YWx1ZSkgJiYgIXJ1bGUucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG5cbiAgICBpZiAoIWlzRW1wdHlWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIHJ1bGVzLnR5cGUocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBjYWxsYmFjayhlcnJvcnMpO1xufTtcblxudmFyIGludGVnZXIgPSBmdW5jdGlvbiBpbnRlZ2VyKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaywgc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHZhbGlkYXRlID0gcnVsZS5yZXF1aXJlZCB8fCAhcnVsZS5yZXF1aXJlZCAmJiBzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCk7XG5cbiAgaWYgKHZhbGlkYXRlKSB7XG4gICAgaWYgKGlzRW1wdHlWYWx1ZSh2YWx1ZSkgJiYgIXJ1bGUucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG5cbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcnVsZXMudHlwZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgICAgcnVsZXMucmFuZ2UocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBjYWxsYmFjayhlcnJvcnMpO1xufTtcblxudmFyIGZsb2F0Rm4gPSBmdW5jdGlvbiBmbG9hdEZuKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaywgc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHZhbGlkYXRlID0gcnVsZS5yZXF1aXJlZCB8fCAhcnVsZS5yZXF1aXJlZCAmJiBzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCk7XG5cbiAgaWYgKHZhbGlkYXRlKSB7XG4gICAgaWYgKGlzRW1wdHlWYWx1ZSh2YWx1ZSkgJiYgIXJ1bGUucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG5cbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcnVsZXMudHlwZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgICAgcnVsZXMucmFuZ2UocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBjYWxsYmFjayhlcnJvcnMpO1xufTtcblxudmFyIGFycmF5ID0gZnVuY3Rpb24gYXJyYXkocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdmFsaWRhdGUgPSBydWxlLnJlcXVpcmVkIHx8ICFydWxlLnJlcXVpcmVkICYmIHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShydWxlLmZpZWxkKTtcblxuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAoKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwpICYmICFydWxlLnJlcXVpcmVkKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMsICdhcnJheScpO1xuXG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwpIHtcbiAgICAgIHJ1bGVzLnR5cGUocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICAgIHJ1bGVzLnJhbmdlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgY2FsbGJhY2soZXJyb3JzKTtcbn07XG5cbnZhciBvYmplY3QgPSBmdW5jdGlvbiBvYmplY3QocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdmFsaWRhdGUgPSBydWxlLnJlcXVpcmVkIHx8ICFydWxlLnJlcXVpcmVkICYmIHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShydWxlLmZpZWxkKTtcblxuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAoaXNFbXB0eVZhbHVlKHZhbHVlKSAmJiAhcnVsZS5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgcnVsZXMucmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcblxuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBydWxlcy50eXBlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgY2FsbGJhY2soZXJyb3JzKTtcbn07XG5cbnZhciBFTlVNID0gJ2VudW0nO1xuXG52YXIgZW51bWVyYWJsZSA9IGZ1bmN0aW9uIGVudW1lcmFibGUocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdmFsaWRhdGUgPSBydWxlLnJlcXVpcmVkIHx8ICFydWxlLnJlcXVpcmVkICYmIHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShydWxlLmZpZWxkKTtcblxuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAoaXNFbXB0eVZhbHVlKHZhbHVlKSAmJiAhcnVsZS5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgcnVsZXMucmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcblxuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBydWxlc1tFTlVNXShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9ycyk7XG59O1xuXG52YXIgcGF0dGVybiA9IGZ1bmN0aW9uIHBhdHRlcm4ocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdmFsaWRhdGUgPSBydWxlLnJlcXVpcmVkIHx8ICFydWxlLnJlcXVpcmVkICYmIHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShydWxlLmZpZWxkKTtcblxuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAoaXNFbXB0eVZhbHVlKHZhbHVlLCAnc3RyaW5nJykgJiYgIXJ1bGUucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG5cbiAgICBpZiAoIWlzRW1wdHlWYWx1ZSh2YWx1ZSwgJ3N0cmluZycpKSB7XG4gICAgICBydWxlcy5wYXR0ZXJuKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgY2FsbGJhY2soZXJyb3JzKTtcbn07XG5cbnZhciBkYXRlID0gZnVuY3Rpb24gZGF0ZShydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICAvLyBjb25zb2xlLmxvZygnaW50ZWdlciBydWxlIGNhbGxlZCAlaicsIHJ1bGUpO1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB2YWxpZGF0ZSA9IHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpOyAvLyBjb25zb2xlLmxvZygndmFsaWRhdGUgb24gJXMgdmFsdWUnLCB2YWx1ZSk7XG5cbiAgaWYgKHZhbGlkYXRlKSB7XG4gICAgaWYgKGlzRW1wdHlWYWx1ZSh2YWx1ZSwgJ2RhdGUnKSAmJiAhcnVsZS5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgcnVsZXMucmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcblxuICAgIGlmICghaXNFbXB0eVZhbHVlKHZhbHVlLCAnZGF0ZScpKSB7XG4gICAgICB2YXIgZGF0ZU9iamVjdDtcblxuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICBkYXRlT2JqZWN0ID0gdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRlT2JqZWN0ID0gbmV3IERhdGUodmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBydWxlcy50eXBlKHJ1bGUsIGRhdGVPYmplY3QsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcblxuICAgICAgaWYgKGRhdGVPYmplY3QpIHtcbiAgICAgICAgcnVsZXMucmFuZ2UocnVsZSwgZGF0ZU9iamVjdC5nZXRUaW1lKCksIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjYWxsYmFjayhlcnJvcnMpO1xufTtcblxudmFyIHJlcXVpcmVkID0gZnVuY3Rpb24gcmVxdWlyZWQocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdHlwZSA9IEFycmF5LmlzQXJyYXkodmFsdWUpID8gJ2FycmF5JyA6IHR5cGVvZiB2YWx1ZTtcbiAgcnVsZXMucmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zLCB0eXBlKTtcbiAgY2FsbGJhY2soZXJyb3JzKTtcbn07XG5cbnZhciB0eXBlID0gZnVuY3Rpb24gdHlwZShydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgcnVsZVR5cGUgPSBydWxlLnR5cGU7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHZhbGlkYXRlID0gcnVsZS5yZXF1aXJlZCB8fCAhcnVsZS5yZXF1aXJlZCAmJiBzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCk7XG5cbiAgaWYgKHZhbGlkYXRlKSB7XG4gICAgaWYgKGlzRW1wdHlWYWx1ZSh2YWx1ZSwgcnVsZVR5cGUpICYmICFydWxlLnJlcXVpcmVkKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMsIHJ1bGVUeXBlKTtcblxuICAgIGlmICghaXNFbXB0eVZhbHVlKHZhbHVlLCBydWxlVHlwZSkpIHtcbiAgICAgIHJ1bGVzLnR5cGUocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBjYWxsYmFjayhlcnJvcnMpO1xufTtcblxudmFyIGFueSA9IGZ1bmN0aW9uIGFueShydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB2YWxpZGF0ZSA9IHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpO1xuXG4gIGlmICh2YWxpZGF0ZSkge1xuICAgIGlmIChpc0VtcHR5VmFsdWUodmFsdWUpICYmICFydWxlLnJlcXVpcmVkKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICB9XG5cbiAgY2FsbGJhY2soZXJyb3JzKTtcbn07XG5cbnZhciB2YWxpZGF0b3JzID0ge1xuICBzdHJpbmc6IHN0cmluZyxcbiAgbWV0aG9kOiBtZXRob2QsXG4gIG51bWJlcjogbnVtYmVyLFxuICBcImJvb2xlYW5cIjogX2Jvb2xlYW4sXG4gIHJlZ2V4cDogcmVnZXhwLFxuICBpbnRlZ2VyOiBpbnRlZ2VyLFxuICBcImZsb2F0XCI6IGZsb2F0Rm4sXG4gIGFycmF5OiBhcnJheSxcbiAgb2JqZWN0OiBvYmplY3QsXG4gIFwiZW51bVwiOiBlbnVtZXJhYmxlLFxuICBwYXR0ZXJuOiBwYXR0ZXJuLFxuICBkYXRlOiBkYXRlLFxuICB1cmw6IHR5cGUsXG4gIGhleDogdHlwZSxcbiAgZW1haWw6IHR5cGUsXG4gIHJlcXVpcmVkOiByZXF1aXJlZCxcbiAgYW55OiBhbnlcbn07XG5cbmZ1bmN0aW9uIG5ld01lc3NhZ2VzKCkge1xuICByZXR1cm4ge1xuICAgIFwiZGVmYXVsdFwiOiAnVmFsaWRhdGlvbiBlcnJvciBvbiBmaWVsZCAlcycsXG4gICAgcmVxdWlyZWQ6ICclcyBpcyByZXF1aXJlZCcsXG4gICAgXCJlbnVtXCI6ICclcyBtdXN0IGJlIG9uZSBvZiAlcycsXG4gICAgd2hpdGVzcGFjZTogJyVzIGNhbm5vdCBiZSBlbXB0eScsXG4gICAgZGF0ZToge1xuICAgICAgZm9ybWF0OiAnJXMgZGF0ZSAlcyBpcyBpbnZhbGlkIGZvciBmb3JtYXQgJXMnLFxuICAgICAgcGFyc2U6ICclcyBkYXRlIGNvdWxkIG5vdCBiZSBwYXJzZWQsICVzIGlzIGludmFsaWQgJyxcbiAgICAgIGludmFsaWQ6ICclcyBkYXRlICVzIGlzIGludmFsaWQnXG4gICAgfSxcbiAgICB0eXBlczoge1xuICAgICAgc3RyaW5nOiAnJXMgaXMgbm90IGEgJXMnLFxuICAgICAgbWV0aG9kOiAnJXMgaXMgbm90IGEgJXMgKGZ1bmN0aW9uKScsXG4gICAgICBhcnJheTogJyVzIGlzIG5vdCBhbiAlcycsXG4gICAgICBvYmplY3Q6ICclcyBpcyBub3QgYW4gJXMnLFxuICAgICAgbnVtYmVyOiAnJXMgaXMgbm90IGEgJXMnLFxuICAgICAgZGF0ZTogJyVzIGlzIG5vdCBhICVzJyxcbiAgICAgIFwiYm9vbGVhblwiOiAnJXMgaXMgbm90IGEgJXMnLFxuICAgICAgaW50ZWdlcjogJyVzIGlzIG5vdCBhbiAlcycsXG4gICAgICBcImZsb2F0XCI6ICclcyBpcyBub3QgYSAlcycsXG4gICAgICByZWdleHA6ICclcyBpcyBub3QgYSB2YWxpZCAlcycsXG4gICAgICBlbWFpbDogJyVzIGlzIG5vdCBhIHZhbGlkICVzJyxcbiAgICAgIHVybDogJyVzIGlzIG5vdCBhIHZhbGlkICVzJyxcbiAgICAgIGhleDogJyVzIGlzIG5vdCBhIHZhbGlkICVzJ1xuICAgIH0sXG4gICAgc3RyaW5nOiB7XG4gICAgICBsZW46ICclcyBtdXN0IGJlIGV4YWN0bHkgJXMgY2hhcmFjdGVycycsXG4gICAgICBtaW46ICclcyBtdXN0IGJlIGF0IGxlYXN0ICVzIGNoYXJhY3RlcnMnLFxuICAgICAgbWF4OiAnJXMgY2Fubm90IGJlIGxvbmdlciB0aGFuICVzIGNoYXJhY3RlcnMnLFxuICAgICAgcmFuZ2U6ICclcyBtdXN0IGJlIGJldHdlZW4gJXMgYW5kICVzIGNoYXJhY3RlcnMnXG4gICAgfSxcbiAgICBudW1iZXI6IHtcbiAgICAgIGxlbjogJyVzIG11c3QgZXF1YWwgJXMnLFxuICAgICAgbWluOiAnJXMgY2Fubm90IGJlIGxlc3MgdGhhbiAlcycsXG4gICAgICBtYXg6ICclcyBjYW5ub3QgYmUgZ3JlYXRlciB0aGFuICVzJyxcbiAgICAgIHJhbmdlOiAnJXMgbXVzdCBiZSBiZXR3ZWVuICVzIGFuZCAlcydcbiAgICB9LFxuICAgIGFycmF5OiB7XG4gICAgICBsZW46ICclcyBtdXN0IGJlIGV4YWN0bHkgJXMgaW4gbGVuZ3RoJyxcbiAgICAgIG1pbjogJyVzIGNhbm5vdCBiZSBsZXNzIHRoYW4gJXMgaW4gbGVuZ3RoJyxcbiAgICAgIG1heDogJyVzIGNhbm5vdCBiZSBncmVhdGVyIHRoYW4gJXMgaW4gbGVuZ3RoJyxcbiAgICAgIHJhbmdlOiAnJXMgbXVzdCBiZSBiZXR3ZWVuICVzIGFuZCAlcyBpbiBsZW5ndGgnXG4gICAgfSxcbiAgICBwYXR0ZXJuOiB7XG4gICAgICBtaXNtYXRjaDogJyVzIHZhbHVlICVzIGRvZXMgbm90IG1hdGNoIHBhdHRlcm4gJXMnXG4gICAgfSxcbiAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgICB2YXIgY2xvbmVkID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzKSk7XG4gICAgICBjbG9uZWQuY2xvbmUgPSB0aGlzLmNsb25lO1xuICAgICAgcmV0dXJuIGNsb25lZDtcbiAgICB9XG4gIH07XG59XG52YXIgbWVzc2FnZXMgPSBuZXdNZXNzYWdlcygpO1xuXG4vKipcbiAqICBFbmNhcHN1bGF0ZXMgYSB2YWxpZGF0aW9uIHNjaGVtYS5cbiAqXG4gKiAgQHBhcmFtIGRlc2NyaXB0b3IgQW4gb2JqZWN0IGRlY2xhcmluZyB2YWxpZGF0aW9uIHJ1bGVzXG4gKiAgZm9yIHRoaXMgc2NoZW1hLlxuICovXG5cbnZhciBTY2hlbWEgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09IFN0YXRpYyA9PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PSBJbnN0YW5jZSA9PT09PT09PT09PT09PT09PT09PT09PT1cbiAgZnVuY3Rpb24gU2NoZW1hKGRlc2NyaXB0b3IpIHtcbiAgICB0aGlzLnJ1bGVzID0gbnVsbDtcbiAgICB0aGlzLl9tZXNzYWdlcyA9IG1lc3NhZ2VzO1xuICAgIHRoaXMuZGVmaW5lKGRlc2NyaXB0b3IpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFNjaGVtYS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmRlZmluZSA9IGZ1bmN0aW9uIGRlZmluZShydWxlcykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoIXJ1bGVzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBjb25maWd1cmUgYSBzY2hlbWEgd2l0aCBubyBydWxlcycpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcnVsZXMgIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkocnVsZXMpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1J1bGVzIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKHJ1bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB2YXIgaXRlbSA9IHJ1bGVzW25hbWVdO1xuICAgICAgX3RoaXMucnVsZXNbbmFtZV0gPSBBcnJheS5pc0FycmF5KGl0ZW0pID8gaXRlbSA6IFtpdGVtXTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ubWVzc2FnZXMgPSBmdW5jdGlvbiBtZXNzYWdlcyhfbWVzc2FnZXMpIHtcbiAgICBpZiAoX21lc3NhZ2VzKSB7XG4gICAgICB0aGlzLl9tZXNzYWdlcyA9IGRlZXBNZXJnZShuZXdNZXNzYWdlcygpLCBfbWVzc2FnZXMpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9tZXNzYWdlcztcbiAgfTtcblxuICBfcHJvdG8udmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZShzb3VyY2VfLCBvLCBvYykge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgaWYgKG8gPT09IHZvaWQgMCkge1xuICAgICAgbyA9IHt9O1xuICAgIH1cblxuICAgIGlmIChvYyA9PT0gdm9pZCAwKSB7XG4gICAgICBvYyA9IGZ1bmN0aW9uIG9jKCkge307XG4gICAgfVxuXG4gICAgdmFyIHNvdXJjZSA9IHNvdXJjZV87XG4gICAgdmFyIG9wdGlvbnMgPSBvO1xuICAgIHZhciBjYWxsYmFjayA9IG9jO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnJ1bGVzIHx8IE9iamVjdC5rZXlzKHRoaXMucnVsZXMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIHNvdXJjZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoc291cmNlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wbGV0ZShyZXN1bHRzKSB7XG4gICAgICB2YXIgZXJyb3JzID0gW107XG4gICAgICB2YXIgZmllbGRzID0ge307XG5cbiAgICAgIGZ1bmN0aW9uIGFkZChlKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGUpKSB7XG4gICAgICAgICAgdmFyIF9lcnJvcnM7XG5cbiAgICAgICAgICBlcnJvcnMgPSAoX2Vycm9ycyA9IGVycm9ycykuY29uY2F0LmFwcGx5KF9lcnJvcnMsIGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVycm9ycy5wdXNoKGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBhZGQocmVzdWx0c1tpXSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICBjYWxsYmFjayhudWxsLCBzb3VyY2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmllbGRzID0gY29udmVydEZpZWxkc0Vycm9yKGVycm9ycyk7XG4gICAgICAgIGNhbGxiYWNrKGVycm9ycywgZmllbGRzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5tZXNzYWdlcykge1xuICAgICAgdmFyIG1lc3NhZ2VzJDEgPSB0aGlzLm1lc3NhZ2VzKCk7XG5cbiAgICAgIGlmIChtZXNzYWdlcyQxID09PSBtZXNzYWdlcykge1xuICAgICAgICBtZXNzYWdlcyQxID0gbmV3TWVzc2FnZXMoKTtcbiAgICAgIH1cblxuICAgICAgZGVlcE1lcmdlKG1lc3NhZ2VzJDEsIG9wdGlvbnMubWVzc2FnZXMpO1xuICAgICAgb3B0aW9ucy5tZXNzYWdlcyA9IG1lc3NhZ2VzJDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdGlvbnMubWVzc2FnZXMgPSB0aGlzLm1lc3NhZ2VzKCk7XG4gICAgfVxuXG4gICAgdmFyIHNlcmllcyA9IHt9O1xuICAgIHZhciBrZXlzID0gb3B0aW9ucy5rZXlzIHx8IE9iamVjdC5rZXlzKHRoaXMucnVsZXMpO1xuICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoeikge1xuICAgICAgdmFyIGFyciA9IF90aGlzMi5ydWxlc1t6XTtcbiAgICAgIHZhciB2YWx1ZSA9IHNvdXJjZVt6XTtcbiAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7XG4gICAgICAgIHZhciBydWxlID0gcjtcblxuICAgICAgICBpZiAodHlwZW9mIHJ1bGUudHJhbnNmb3JtID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgaWYgKHNvdXJjZSA9PT0gc291cmNlXykge1xuICAgICAgICAgICAgc291cmNlID0gX2V4dGVuZHMoe30sIHNvdXJjZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFsdWUgPSBzb3VyY2Vbel0gPSBydWxlLnRyYW5zZm9ybSh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHJ1bGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBydWxlID0ge1xuICAgICAgICAgICAgdmFsaWRhdG9yOiBydWxlXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBydWxlID0gX2V4dGVuZHMoe30sIHJ1bGUpO1xuICAgICAgICB9IC8vIEZpbGwgdmFsaWRhdG9yLiBTa2lwIGlmIG5vdGhpbmcgbmVlZCB0byB2YWxpZGF0ZVxuXG5cbiAgICAgICAgcnVsZS52YWxpZGF0b3IgPSBfdGhpczIuZ2V0VmFsaWRhdGlvbk1ldGhvZChydWxlKTtcblxuICAgICAgICBpZiAoIXJ1bGUudmFsaWRhdG9yKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcnVsZS5maWVsZCA9IHo7XG4gICAgICAgIHJ1bGUuZnVsbEZpZWxkID0gcnVsZS5mdWxsRmllbGQgfHwgejtcbiAgICAgICAgcnVsZS50eXBlID0gX3RoaXMyLmdldFR5cGUocnVsZSk7XG4gICAgICAgIHNlcmllc1t6XSA9IHNlcmllc1t6XSB8fCBbXTtcbiAgICAgICAgc2VyaWVzW3pdLnB1c2goe1xuICAgICAgICAgIHJ1bGU6IHJ1bGUsXG4gICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICAgIGZpZWxkOiB6XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdmFyIGVycm9yRmllbGRzID0ge307XG4gICAgcmV0dXJuIGFzeW5jTWFwKHNlcmllcywgb3B0aW9ucywgZnVuY3Rpb24gKGRhdGEsIGRvSXQpIHtcbiAgICAgIHZhciBydWxlID0gZGF0YS5ydWxlO1xuICAgICAgdmFyIGRlZXAgPSAocnVsZS50eXBlID09PSAnb2JqZWN0JyB8fCBydWxlLnR5cGUgPT09ICdhcnJheScpICYmICh0eXBlb2YgcnVsZS5maWVsZHMgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBydWxlLmRlZmF1bHRGaWVsZCA9PT0gJ29iamVjdCcpO1xuICAgICAgZGVlcCA9IGRlZXAgJiYgKHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgZGF0YS52YWx1ZSk7XG4gICAgICBydWxlLmZpZWxkID0gZGF0YS5maWVsZDtcblxuICAgICAgZnVuY3Rpb24gYWRkRnVsbEZpZWxkKGtleSwgc2NoZW1hKSB7XG4gICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc2NoZW1hLCB7XG4gICAgICAgICAgZnVsbEZpZWxkOiBydWxlLmZ1bGxGaWVsZCArIFwiLlwiICsga2V5LFxuICAgICAgICAgIGZ1bGxGaWVsZHM6IHJ1bGUuZnVsbEZpZWxkcyA/IFtdLmNvbmNhdChydWxlLmZ1bGxGaWVsZHMsIFtrZXldKSA6IFtrZXldXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjYihlKSB7XG4gICAgICAgIGlmIChlID09PSB2b2lkIDApIHtcbiAgICAgICAgICBlID0gW107XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZXJyb3JMaXN0ID0gQXJyYXkuaXNBcnJheShlKSA/IGUgOiBbZV07XG5cbiAgICAgICAgaWYgKCFvcHRpb25zLnN1cHByZXNzV2FybmluZyAmJiBlcnJvckxpc3QubGVuZ3RoKSB7XG4gICAgICAgICAgU2NoZW1hLndhcm5pbmcoJ2FzeW5jLXZhbGlkYXRvcjonLCBlcnJvckxpc3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVycm9yTGlzdC5sZW5ndGggJiYgcnVsZS5tZXNzYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBlcnJvckxpc3QgPSBbXS5jb25jYXQocnVsZS5tZXNzYWdlKTtcbiAgICAgICAgfSAvLyBGaWxsIGVycm9yIGluZm9cblxuXG4gICAgICAgIHZhciBmaWxsZWRFcnJvcnMgPSBlcnJvckxpc3QubWFwKGNvbXBsZW1lbnRFcnJvcihydWxlLCBzb3VyY2UpKTtcblxuICAgICAgICBpZiAob3B0aW9ucy5maXJzdCAmJiBmaWxsZWRFcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgZXJyb3JGaWVsZHNbcnVsZS5maWVsZF0gPSAxO1xuICAgICAgICAgIHJldHVybiBkb0l0KGZpbGxlZEVycm9ycyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWRlZXApIHtcbiAgICAgICAgICBkb0l0KGZpbGxlZEVycm9ycyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gaWYgcnVsZSBpcyByZXF1aXJlZCBidXQgdGhlIHRhcmdldCBvYmplY3RcbiAgICAgICAgICAvLyBkb2VzIG5vdCBleGlzdCBmYWlsIGF0IHRoZSBydWxlIGxldmVsIGFuZCBkb24ndFxuICAgICAgICAgIC8vIGdvIGRlZXBlclxuICAgICAgICAgIGlmIChydWxlLnJlcXVpcmVkICYmICFkYXRhLnZhbHVlKSB7XG4gICAgICAgICAgICBpZiAocnVsZS5tZXNzYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgZmlsbGVkRXJyb3JzID0gW10uY29uY2F0KHJ1bGUubWVzc2FnZSkubWFwKGNvbXBsZW1lbnRFcnJvcihydWxlLCBzb3VyY2UpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5lcnJvcikge1xuICAgICAgICAgICAgICBmaWxsZWRFcnJvcnMgPSBbb3B0aW9ucy5lcnJvcihydWxlLCBmb3JtYXQob3B0aW9ucy5tZXNzYWdlcy5yZXF1aXJlZCwgcnVsZS5maWVsZCkpXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGRvSXQoZmlsbGVkRXJyb3JzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgZmllbGRzU2NoZW1hID0ge307XG5cbiAgICAgICAgICBpZiAocnVsZS5kZWZhdWx0RmllbGQpIHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGRhdGEudmFsdWUpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgIGZpZWxkc1NjaGVtYVtrZXldID0gcnVsZS5kZWZhdWx0RmllbGQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmaWVsZHNTY2hlbWEgPSBfZXh0ZW5kcyh7fSwgZmllbGRzU2NoZW1hLCBkYXRhLnJ1bGUuZmllbGRzKTtcbiAgICAgICAgICB2YXIgcGFyZWRGaWVsZHNTY2hlbWEgPSB7fTtcbiAgICAgICAgICBPYmplY3Qua2V5cyhmaWVsZHNTY2hlbWEpLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgICAgICB2YXIgZmllbGRTY2hlbWEgPSBmaWVsZHNTY2hlbWFbZmllbGRdO1xuICAgICAgICAgICAgdmFyIGZpZWxkU2NoZW1hTGlzdCA9IEFycmF5LmlzQXJyYXkoZmllbGRTY2hlbWEpID8gZmllbGRTY2hlbWEgOiBbZmllbGRTY2hlbWFdO1xuICAgICAgICAgICAgcGFyZWRGaWVsZHNTY2hlbWFbZmllbGRdID0gZmllbGRTY2hlbWFMaXN0Lm1hcChhZGRGdWxsRmllbGQuYmluZChudWxsLCBmaWVsZCkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhciBzY2hlbWEgPSBuZXcgU2NoZW1hKHBhcmVkRmllbGRzU2NoZW1hKTtcbiAgICAgICAgICBzY2hlbWEubWVzc2FnZXMob3B0aW9ucy5tZXNzYWdlcyk7XG5cbiAgICAgICAgICBpZiAoZGF0YS5ydWxlLm9wdGlvbnMpIHtcbiAgICAgICAgICAgIGRhdGEucnVsZS5vcHRpb25zLm1lc3NhZ2VzID0gb3B0aW9ucy5tZXNzYWdlcztcbiAgICAgICAgICAgIGRhdGEucnVsZS5vcHRpb25zLmVycm9yID0gb3B0aW9ucy5lcnJvcjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzY2hlbWEudmFsaWRhdGUoZGF0YS52YWx1ZSwgZGF0YS5ydWxlLm9wdGlvbnMgfHwgb3B0aW9ucywgZnVuY3Rpb24gKGVycnMpIHtcbiAgICAgICAgICAgIHZhciBmaW5hbEVycm9ycyA9IFtdO1xuXG4gICAgICAgICAgICBpZiAoZmlsbGVkRXJyb3JzICYmIGZpbGxlZEVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgZmluYWxFcnJvcnMucHVzaC5hcHBseShmaW5hbEVycm9ycywgZmlsbGVkRXJyb3JzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGVycnMgJiYgZXJycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgZmluYWxFcnJvcnMucHVzaC5hcHBseShmaW5hbEVycm9ycywgZXJycyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRvSXQoZmluYWxFcnJvcnMubGVuZ3RoID8gZmluYWxFcnJvcnMgOiBudWxsKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgcmVzO1xuXG4gICAgICBpZiAocnVsZS5hc3luY1ZhbGlkYXRvcikge1xuICAgICAgICByZXMgPSBydWxlLmFzeW5jVmFsaWRhdG9yKHJ1bGUsIGRhdGEudmFsdWUsIGNiLCBkYXRhLnNvdXJjZSwgb3B0aW9ucyk7XG4gICAgICB9IGVsc2UgaWYgKHJ1bGUudmFsaWRhdG9yKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmVzID0gcnVsZS52YWxpZGF0b3IocnVsZSwgZGF0YS52YWx1ZSwgY2IsIGRhdGEuc291cmNlLCBvcHRpb25zKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yID09IG51bGwgPyB2b2lkIDAgOiBjb25zb2xlLmVycm9yKGVycm9yKTsgLy8gcmV0aHJvdyB0byByZXBvcnQgZXJyb3JcblxuICAgICAgICAgIGlmICghb3B0aW9ucy5zdXBwcmVzc1ZhbGlkYXRvckVycm9yKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjYihlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZXMgPT09IHRydWUpIHtcbiAgICAgICAgICBjYigpO1xuICAgICAgICB9IGVsc2UgaWYgKHJlcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBjYih0eXBlb2YgcnVsZS5tZXNzYWdlID09PSAnZnVuY3Rpb24nID8gcnVsZS5tZXNzYWdlKHJ1bGUuZnVsbEZpZWxkIHx8IHJ1bGUuZmllbGQpIDogcnVsZS5tZXNzYWdlIHx8IChydWxlLmZ1bGxGaWVsZCB8fCBydWxlLmZpZWxkKSArIFwiIGZhaWxzXCIpO1xuICAgICAgICB9IGVsc2UgaWYgKHJlcyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgY2IocmVzKTtcbiAgICAgICAgfSBlbHNlIGlmIChyZXMgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgIGNiKHJlcy5tZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocmVzICYmIHJlcy50aGVuKSB7XG4gICAgICAgIHJlcy50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gY2IoKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICByZXR1cm4gY2IoZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIGZ1bmN0aW9uIChyZXN1bHRzKSB7XG4gICAgICBjb21wbGV0ZShyZXN1bHRzKTtcbiAgICB9LCBzb3VyY2UpO1xuICB9O1xuXG4gIF9wcm90by5nZXRUeXBlID0gZnVuY3Rpb24gZ2V0VHlwZShydWxlKSB7XG4gICAgaWYgKHJ1bGUudHlwZSA9PT0gdW5kZWZpbmVkICYmIHJ1bGUucGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgcnVsZS50eXBlID0gJ3BhdHRlcm4nO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcnVsZS52YWxpZGF0b3IgIT09ICdmdW5jdGlvbicgJiYgcnVsZS50eXBlICYmICF2YWxpZGF0b3JzLmhhc093blByb3BlcnR5KHJ1bGUudHlwZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXQoJ1Vua25vd24gcnVsZSB0eXBlICVzJywgcnVsZS50eXBlKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJ1bGUudHlwZSB8fCAnc3RyaW5nJztcbiAgfTtcblxuICBfcHJvdG8uZ2V0VmFsaWRhdGlvbk1ldGhvZCA9IGZ1bmN0aW9uIGdldFZhbGlkYXRpb25NZXRob2QocnVsZSkge1xuICAgIGlmICh0eXBlb2YgcnVsZS52YWxpZGF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBydWxlLnZhbGlkYXRvcjtcbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHJ1bGUpO1xuICAgIHZhciBtZXNzYWdlSW5kZXggPSBrZXlzLmluZGV4T2YoJ21lc3NhZ2UnKTtcblxuICAgIGlmIChtZXNzYWdlSW5kZXggIT09IC0xKSB7XG4gICAgICBrZXlzLnNwbGljZShtZXNzYWdlSW5kZXgsIDEpO1xuICAgIH1cblxuICAgIGlmIChrZXlzLmxlbmd0aCA9PT0gMSAmJiBrZXlzWzBdID09PSAncmVxdWlyZWQnKSB7XG4gICAgICByZXR1cm4gdmFsaWRhdG9ycy5yZXF1aXJlZDtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdG9yc1t0aGlzLmdldFR5cGUocnVsZSldIHx8IHVuZGVmaW5lZDtcbiAgfTtcblxuICByZXR1cm4gU2NoZW1hO1xufSgpO1xuXG5TY2hlbWEucmVnaXN0ZXIgPSBmdW5jdGlvbiByZWdpc3Rlcih0eXBlLCB2YWxpZGF0b3IpIHtcbiAgaWYgKHR5cGVvZiB2YWxpZGF0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCByZWdpc3RlciBhIHZhbGlkYXRvciBieSB0eXBlLCB2YWxpZGF0b3IgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgfVxuXG4gIHZhbGlkYXRvcnNbdHlwZV0gPSB2YWxpZGF0b3I7XG59O1xuXG5TY2hlbWEud2FybmluZyA9IHdhcm5pbmc7XG5TY2hlbWEubWVzc2FnZXMgPSBtZXNzYWdlcztcblNjaGVtYS52YWxpZGF0b3JzID0gdmFsaWRhdG9ycztcblxuZXhwb3J0IHsgU2NoZW1hIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIiwidmFyIHR5cGVUZW1wbGF0ZSA9IFwiJyR7bmFtZX0nIGlzIG5vdCBhIHZhbGlkICR7dHlwZX1cIjtcbmV4cG9ydCB2YXIgZGVmYXVsdFZhbGlkYXRlTWVzc2FnZXMgPSB7XG4gIGRlZmF1bHQ6IFwiVmFsaWRhdGlvbiBlcnJvciBvbiBmaWVsZCAnJHtuYW1lfSdcIixcbiAgcmVxdWlyZWQ6IFwiJyR7bmFtZX0nIGlzIHJlcXVpcmVkXCIsXG4gIGVudW06IFwiJyR7bmFtZX0nIG11c3QgYmUgb25lIG9mIFske2VudW19XVwiLFxuICB3aGl0ZXNwYWNlOiBcIicke25hbWV9JyBjYW5ub3QgYmUgZW1wdHlcIixcbiAgZGF0ZToge1xuICAgIGZvcm1hdDogXCInJHtuYW1lfScgaXMgaW52YWxpZCBmb3IgZm9ybWF0IGRhdGVcIixcbiAgICBwYXJzZTogXCInJHtuYW1lfScgY291bGQgbm90IGJlIHBhcnNlZCBhcyBkYXRlXCIsXG4gICAgaW52YWxpZDogXCInJHtuYW1lfScgaXMgaW52YWxpZCBkYXRlXCJcbiAgfSxcbiAgdHlwZXM6IHtcbiAgICBzdHJpbmc6IHR5cGVUZW1wbGF0ZSxcbiAgICBtZXRob2Q6IHR5cGVUZW1wbGF0ZSxcbiAgICBhcnJheTogdHlwZVRlbXBsYXRlLFxuICAgIG9iamVjdDogdHlwZVRlbXBsYXRlLFxuICAgIG51bWJlcjogdHlwZVRlbXBsYXRlLFxuICAgIGRhdGU6IHR5cGVUZW1wbGF0ZSxcbiAgICBib29sZWFuOiB0eXBlVGVtcGxhdGUsXG4gICAgaW50ZWdlcjogdHlwZVRlbXBsYXRlLFxuICAgIGZsb2F0OiB0eXBlVGVtcGxhdGUsXG4gICAgcmVnZXhwOiB0eXBlVGVtcGxhdGUsXG4gICAgZW1haWw6IHR5cGVUZW1wbGF0ZSxcbiAgICB1cmw6IHR5cGVUZW1wbGF0ZSxcbiAgICBoZXg6IHR5cGVUZW1wbGF0ZVxuICB9LFxuICBzdHJpbmc6IHtcbiAgICBsZW46IFwiJyR7bmFtZX0nIG11c3QgYmUgZXhhY3RseSAke2xlbn0gY2hhcmFjdGVyc1wiLFxuICAgIG1pbjogXCInJHtuYW1lfScgbXVzdCBiZSBhdCBsZWFzdCAke21pbn0gY2hhcmFjdGVyc1wiLFxuICAgIG1heDogXCInJHtuYW1lfScgY2Fubm90IGJlIGxvbmdlciB0aGFuICR7bWF4fSBjaGFyYWN0ZXJzXCIsXG4gICAgcmFuZ2U6IFwiJyR7bmFtZX0nIG11c3QgYmUgYmV0d2VlbiAke21pbn0gYW5kICR7bWF4fSBjaGFyYWN0ZXJzXCJcbiAgfSxcbiAgbnVtYmVyOiB7XG4gICAgbGVuOiBcIicke25hbWV9JyBtdXN0IGVxdWFsICR7bGVufVwiLFxuICAgIG1pbjogXCInJHtuYW1lfScgY2Fubm90IGJlIGxlc3MgdGhhbiAke21pbn1cIixcbiAgICBtYXg6IFwiJyR7bmFtZX0nIGNhbm5vdCBiZSBncmVhdGVyIHRoYW4gJHttYXh9XCIsXG4gICAgcmFuZ2U6IFwiJyR7bmFtZX0nIG11c3QgYmUgYmV0d2VlbiAke21pbn0gYW5kICR7bWF4fVwiXG4gIH0sXG4gIGFycmF5OiB7XG4gICAgbGVuOiBcIicke25hbWV9JyBtdXN0IGJlIGV4YWN0bHkgJHtsZW59IGluIGxlbmd0aFwiLFxuICAgIG1pbjogXCInJHtuYW1lfScgY2Fubm90IGJlIGxlc3MgdGhhbiAke21pbn0gaW4gbGVuZ3RoXCIsXG4gICAgbWF4OiBcIicke25hbWV9JyBjYW5ub3QgYmUgZ3JlYXRlciB0aGFuICR7bWF4fSBpbiBsZW5ndGhcIixcbiAgICByYW5nZTogXCInJHtuYW1lfScgbXVzdCBiZSBiZXR3ZWVuICR7bWlufSBhbmQgJHttYXh9IGluIGxlbmd0aFwiXG4gIH0sXG4gIHBhdHRlcm46IHtcbiAgICBtaXNtYXRjaDogXCInJHtuYW1lfScgZG9lcyBub3QgbWF0Y2ggcGF0dGVybiAke3BhdHRlcm59XCJcbiAgfVxufTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXQoZW50aXR5LCBwYXRoKSB7XG4gIHZhciBjdXJyZW50ID0gZW50aXR5O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChjdXJyZW50ID09PSBudWxsIHx8IGN1cnJlbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBjdXJyZW50ID0gY3VycmVudFtwYXRoW2ldXTtcbiAgfVxuXG4gIHJldHVybiBjdXJyZW50O1xufSIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG5pbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheVwiO1xuaW1wb3J0IF90b0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0FycmF5XCI7XG5pbXBvcnQgZ2V0IGZyb20gJy4vZ2V0JztcblxuZnVuY3Rpb24gaW50ZXJuYWxTZXQoZW50aXR5LCBwYXRocywgdmFsdWUsIHJlbW92ZUlmVW5kZWZpbmVkKSB7XG4gIGlmICghcGF0aHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgdmFyIF9wYXRocyA9IF90b0FycmF5KHBhdGhzKSxcbiAgICAgIHBhdGggPSBfcGF0aHNbMF0sXG4gICAgICByZXN0UGF0aCA9IF9wYXRocy5zbGljZSgxKTtcblxuICB2YXIgY2xvbmU7XG5cbiAgaWYgKCFlbnRpdHkgJiYgdHlwZW9mIHBhdGggPT09ICdudW1iZXInKSB7XG4gICAgY2xvbmUgPSBbXTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGVudGl0eSkpIHtcbiAgICBjbG9uZSA9IF90b0NvbnN1bWFibGVBcnJheShlbnRpdHkpO1xuICB9IGVsc2Uge1xuICAgIGNsb25lID0gX29iamVjdFNwcmVhZCh7fSwgZW50aXR5KTtcbiAgfSAvLyBEZWxldGUgcHJvcCBpZiBgcmVtb3ZlSWZVbmRlZmluZWRgIGFuZCB2YWx1ZSBpcyB1bmRlZmluZWRcblxuXG4gIGlmIChyZW1vdmVJZlVuZGVmaW5lZCAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIHJlc3RQYXRoLmxlbmd0aCA9PT0gMSkge1xuICAgIGRlbGV0ZSBjbG9uZVtwYXRoXVtyZXN0UGF0aFswXV07XG4gIH0gZWxzZSB7XG4gICAgY2xvbmVbcGF0aF0gPSBpbnRlcm5hbFNldChjbG9uZVtwYXRoXSwgcmVzdFBhdGgsIHZhbHVlLCByZW1vdmVJZlVuZGVmaW5lZCk7XG4gIH1cblxuICByZXR1cm4gY2xvbmU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldChlbnRpdHksIHBhdGhzLCB2YWx1ZSkge1xuICB2YXIgcmVtb3ZlSWZVbmRlZmluZWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IGZhbHNlO1xuXG4gIC8vIERvIG5vdGhpbmcgaWYgYHJlbW92ZUlmVW5kZWZpbmVkYCBhbmQgcGFyZW50IG9iamVjdCBub3QgZXhpc3RcbiAgaWYgKHBhdGhzLmxlbmd0aCAmJiByZW1vdmVJZlVuZGVmaW5lZCAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICFnZXQoZW50aXR5LCBwYXRocy5zbGljZSgwLCAtMSkpKSB7XG4gICAgcmV0dXJuIGVudGl0eTtcbiAgfVxuXG4gIHJldHVybiBpbnRlcm5hbFNldChlbnRpdHksIHBhdGhzLCB2YWx1ZSwgcmVtb3ZlSWZVbmRlZmluZWQpO1xufSIsImltcG9ydCBhcnJheVdpdGhIb2xlcyBmcm9tIFwiLi9hcnJheVdpdGhIb2xlcy5qc1wiO1xuaW1wb3J0IGl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi9pdGVyYWJsZVRvQXJyYXkuanNcIjtcbmltcG9ydCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qc1wiO1xuaW1wb3J0IG5vbkl0ZXJhYmxlUmVzdCBmcm9tIFwiLi9ub25JdGVyYWJsZVJlc3QuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90b0FycmF5KGFycikge1xuICByZXR1cm4gYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IG5vbkl0ZXJhYmxlUmVzdCgpO1xufSIsImltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcblxuZnVuY3Rpb24gY2xvbmVEZWVwKHZhbCkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgcmV0dXJuIGNsb25lQXJyYXlEZWVwKHZhbCk7XG4gIH0gZWxzZSBpZiAoX3R5cGVvZih2YWwpID09PSAnb2JqZWN0JyAmJiB2YWwgIT09IG51bGwpIHtcbiAgICByZXR1cm4gY2xvbmVPYmplY3REZWVwKHZhbCk7XG4gIH1cblxuICByZXR1cm4gdmFsO1xufVxuXG5mdW5jdGlvbiBjbG9uZU9iamVjdERlZXAodmFsKSB7XG4gIGlmIChPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsKSA9PT0gT2JqZWN0LnByb3RvdHlwZSkge1xuICAgIHZhciByZXMgPSB7fTtcblxuICAgIGZvciAodmFyIGtleSBpbiB2YWwpIHtcbiAgICAgIHJlc1trZXldID0gY2xvbmVEZWVwKHZhbFtrZXldKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiAgcmV0dXJuIHZhbDtcbn1cblxuZnVuY3Rpb24gY2xvbmVBcnJheURlZXAodmFsKSB7XG4gIHJldHVybiB2YWwubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgcmV0dXJuIGNsb25lRGVlcChpdGVtKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsb25lRGVlcDsiLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXlcIjtcbmltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmltcG9ydCBnZXQgZnJvbSBcInJjLXV0aWwvZXMvdXRpbHMvZ2V0XCI7XG5pbXBvcnQgc2V0IGZyb20gXCJyYy11dGlsL2VzL3V0aWxzL3NldFwiO1xuaW1wb3J0IHsgdG9BcnJheSB9IGZyb20gJy4vdHlwZVV0aWwnO1xuaW1wb3J0IGNsb25lRGVlcCBmcm9tICcuLi91dGlscy9jbG9uZURlZXAnO1xuLyoqXG4gKiBDb252ZXJ0IG5hbWUgdG8gaW50ZXJuYWwgc3VwcG9ydGVkIGZvcm1hdC5cbiAqIFRoaXMgZnVuY3Rpb24gc2hvdWxkIGtlZXAgc2luY2Ugd2Ugc3RpbGwgdGhpbmtpbmcgaWYgbmVlZCBzdXBwb3J0IGxpa2UgYGEuYi5jYCBmb3JtYXQuXG4gKiAnYScgPT4gWydhJ11cbiAqIDEyMyA9PiBbMTIzXVxuICogWydhJywgMTIzXSA9PiBbJ2EnLCAxMjNdXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE5hbWVQYXRoKHBhdGgpIHtcbiAgcmV0dXJuIHRvQXJyYXkocGF0aCk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFsdWUoc3RvcmUsIG5hbWVQYXRoKSB7XG4gIHZhciB2YWx1ZSA9IGdldChzdG9yZSwgbmFtZVBhdGgpO1xuICByZXR1cm4gdmFsdWU7XG59XG5leHBvcnQgZnVuY3Rpb24gc2V0VmFsdWUoc3RvcmUsIG5hbWVQYXRoLCB2YWx1ZSkge1xuICB2YXIgcmVtb3ZlSWZVbmRlZmluZWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IGZhbHNlO1xuICB2YXIgbmV3U3RvcmUgPSBzZXQoc3RvcmUsIG5hbWVQYXRoLCB2YWx1ZSwgcmVtb3ZlSWZVbmRlZmluZWQpO1xuICByZXR1cm4gbmV3U3RvcmU7XG59XG5leHBvcnQgZnVuY3Rpb24gY2xvbmVCeU5hbWVQYXRoTGlzdChzdG9yZSwgbmFtZVBhdGhMaXN0KSB7XG4gIHZhciBuZXdTdG9yZSA9IHt9O1xuICBuYW1lUGF0aExpc3QuZm9yRWFjaChmdW5jdGlvbiAobmFtZVBhdGgpIHtcbiAgICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShzdG9yZSwgbmFtZVBhdGgpO1xuICAgIG5ld1N0b3JlID0gc2V0VmFsdWUobmV3U3RvcmUsIG5hbWVQYXRoLCB2YWx1ZSk7XG4gIH0pO1xuICByZXR1cm4gbmV3U3RvcmU7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udGFpbnNOYW1lUGF0aChuYW1lUGF0aExpc3QsIG5hbWVQYXRoKSB7XG4gIHJldHVybiBuYW1lUGF0aExpc3QgJiYgbmFtZVBhdGhMaXN0LnNvbWUoZnVuY3Rpb24gKHBhdGgpIHtcbiAgICByZXR1cm4gbWF0Y2hOYW1lUGF0aChwYXRoLCBuYW1lUGF0aCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdChvYmopIHtcbiAgcmV0dXJuIF90eXBlb2Yob2JqKSA9PT0gJ29iamVjdCcgJiYgb2JqICE9PSBudWxsICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBPYmplY3QucHJvdG90eXBlO1xufVxuLyoqXG4gKiBDb3B5IHZhbHVlcyBpbnRvIHN0b3JlIGFuZCByZXR1cm4gYSBuZXcgdmFsdWVzIG9iamVjdFxuICogKHsgYTogMSwgYjogeyBjOiAyIH0gfSwgeyBhOiA0LCBiOiB7IGQ6IDUgfSB9KSA9PiB7IGE6IDQsIGI6IHsgYzogMiwgZDogNSB9IH1cbiAqL1xuXG5cbmZ1bmN0aW9uIGludGVybmFsU2V0VmFsdWVzKHN0b3JlLCB2YWx1ZXMpIHtcbiAgdmFyIG5ld1N0b3JlID0gQXJyYXkuaXNBcnJheShzdG9yZSkgPyBfdG9Db25zdW1hYmxlQXJyYXkoc3RvcmUpIDogX29iamVjdFNwcmVhZCh7fSwgc3RvcmUpO1xuXG4gIGlmICghdmFsdWVzKSB7XG4gICAgcmV0dXJuIG5ld1N0b3JlO1xuICB9XG5cbiAgT2JqZWN0LmtleXModmFsdWVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcHJldlZhbHVlID0gbmV3U3RvcmVba2V5XTtcbiAgICB2YXIgdmFsdWUgPSB2YWx1ZXNba2V5XTsgLy8gSWYgYm90aCBhcmUgb2JqZWN0IChidXQgdGFyZ2V0IGlzIG5vdCBhcnJheSksIHdlIHVzZSByZWN1cnNpb24gdG8gc2V0IGRlZXAgdmFsdWVcblxuICAgIHZhciByZWN1cnNpdmUgPSBpc09iamVjdChwcmV2VmFsdWUpICYmIGlzT2JqZWN0KHZhbHVlKTtcbiAgICBuZXdTdG9yZVtrZXldID0gcmVjdXJzaXZlID8gaW50ZXJuYWxTZXRWYWx1ZXMocHJldlZhbHVlLCB2YWx1ZSB8fCB7fSkgOiBjbG9uZURlZXAodmFsdWUpOyAvLyBDbG9uZSBkZWVwIGZvciBhcnJheXNcbiAgfSk7XG4gIHJldHVybiBuZXdTdG9yZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldFZhbHVlcyhzdG9yZSkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcmVzdFZhbHVlcyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgcmVzdFZhbHVlc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gcmVzdFZhbHVlcy5yZWR1Y2UoZnVuY3Rpb24gKGN1cnJlbnQsIG5ld1N0b3JlKSB7XG4gICAgcmV0dXJuIGludGVybmFsU2V0VmFsdWVzKGN1cnJlbnQsIG5ld1N0b3JlKTtcbiAgfSwgc3RvcmUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoTmFtZVBhdGgobmFtZVBhdGgsIGNoYW5nZWROYW1lUGF0aCkge1xuICBpZiAoIW5hbWVQYXRoIHx8ICFjaGFuZ2VkTmFtZVBhdGggfHwgbmFtZVBhdGgubGVuZ3RoICE9PSBjaGFuZ2VkTmFtZVBhdGgubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIG5hbWVQYXRoLmV2ZXJ5KGZ1bmN0aW9uIChuYW1lVW5pdCwgaSkge1xuICAgIHJldHVybiBjaGFuZ2VkTmFtZVBhdGhbaV0gPT09IG5hbWVVbml0O1xuICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1NpbWlsYXIoc291cmNlLCB0YXJnZXQpIHtcbiAgaWYgKHNvdXJjZSA9PT0gdGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoIXNvdXJjZSAmJiB0YXJnZXQgfHwgc291cmNlICYmICF0YXJnZXQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoIXNvdXJjZSB8fCAhdGFyZ2V0IHx8IF90eXBlb2Yoc291cmNlKSAhPT0gJ29iamVjdCcgfHwgX3R5cGVvZih0YXJnZXQpICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIHRhcmdldEtleXMgPSBPYmplY3Qua2V5cyh0YXJnZXQpO1xuICB2YXIga2V5cyA9IG5ldyBTZXQoW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShzb3VyY2VLZXlzKSwgX3RvQ29uc3VtYWJsZUFycmF5KHRhcmdldEtleXMpKSk7XG4gIHJldHVybiBfdG9Db25zdW1hYmxlQXJyYXkoa2V5cykuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBzb3VyY2VWYWx1ZSA9IHNvdXJjZVtrZXldO1xuICAgIHZhciB0YXJnZXRWYWx1ZSA9IHRhcmdldFtrZXldO1xuXG4gICAgaWYgKHR5cGVvZiBzb3VyY2VWYWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdGFyZ2V0VmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBzb3VyY2VWYWx1ZSA9PT0gdGFyZ2V0VmFsdWU7XG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRHZXRWYWx1ZUZyb21FdmVudCh2YWx1ZVByb3BOYW1lKSB7XG4gIHZhciBldmVudCA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXTtcblxuICBpZiAoZXZlbnQgJiYgZXZlbnQudGFyZ2V0ICYmIF90eXBlb2YoZXZlbnQudGFyZ2V0KSA9PT0gJ29iamVjdCcgJiYgdmFsdWVQcm9wTmFtZSBpbiBldmVudC50YXJnZXQpIHtcbiAgICByZXR1cm4gZXZlbnQudGFyZ2V0W3ZhbHVlUHJvcE5hbWVdO1xuICB9XG5cbiAgcmV0dXJuIGV2ZW50O1xufVxuLyoqXG4gKiBNb3ZlcyBhbiBhcnJheSBpdGVtIGZyb20gb25lIHBvc2l0aW9uIGluIGFuIGFycmF5IHRvIGFub3RoZXIuXG4gKlxuICogTm90ZTogVGhpcyBpcyBhIHB1cmUgZnVuY3Rpb24gc28gYSBuZXcgYXJyYXkgd2lsbCBiZSByZXR1cm5lZCwgaW5zdGVhZFxuICogb2YgYWx0ZXJpbmcgdGhlIGFycmF5IGFyZ3VtZW50LlxuICpcbiAqIEBwYXJhbSBhcnJheSAgICAgICAgIEFycmF5IGluIHdoaWNoIHRvIG1vdmUgYW4gaXRlbS4gICAgICAgICAocmVxdWlyZWQpXG4gKiBAcGFyYW0gbW92ZUluZGV4ICAgICBUaGUgaW5kZXggb2YgdGhlIGl0ZW0gdG8gbW92ZS4gICAgICAgICAgKHJlcXVpcmVkKVxuICogQHBhcmFtIHRvSW5kZXggICAgICAgVGhlIGluZGV4IHRvIG1vdmUgaXRlbSBhdCBtb3ZlSW5kZXggdG8uIChyZXF1aXJlZClcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbW92ZShhcnJheSwgbW92ZUluZGV4LCB0b0luZGV4KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgaWYgKG1vdmVJbmRleCA8IDAgfHwgbW92ZUluZGV4ID49IGxlbmd0aCB8fCB0b0luZGV4IDwgMCB8fCB0b0luZGV4ID49IGxlbmd0aCkge1xuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIHZhciBpdGVtID0gYXJyYXlbbW92ZUluZGV4XTtcbiAgdmFyIGRpZmYgPSBtb3ZlSW5kZXggLSB0b0luZGV4O1xuXG4gIGlmIChkaWZmID4gMCkge1xuICAgIC8vIG1vdmUgbGVmdFxuICAgIHJldHVybiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGFycmF5LnNsaWNlKDAsIHRvSW5kZXgpKSwgW2l0ZW1dLCBfdG9Db25zdW1hYmxlQXJyYXkoYXJyYXkuc2xpY2UodG9JbmRleCwgbW92ZUluZGV4KSksIF90b0NvbnN1bWFibGVBcnJheShhcnJheS5zbGljZShtb3ZlSW5kZXggKyAxLCBsZW5ndGgpKSk7XG4gIH1cblxuICBpZiAoZGlmZiA8IDApIHtcbiAgICAvLyBtb3ZlIHJpZ2h0XG4gICAgcmV0dXJuIFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoYXJyYXkuc2xpY2UoMCwgbW92ZUluZGV4KSksIF90b0NvbnN1bWFibGVBcnJheShhcnJheS5zbGljZShtb3ZlSW5kZXggKyAxLCB0b0luZGV4ICsgMSkpLCBbaXRlbV0sIF90b0NvbnN1bWFibGVBcnJheShhcnJheS5zbGljZSh0b0luZGV4ICsgMSwgbGVuZ3RoKSkpO1xuICB9XG5cbiAgcmV0dXJuIGFycmF5O1xufSIsImltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5XCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3JlZ2VuZXJhdG9yUnVudGltZVwiO1xuaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvclwiO1xuaW1wb3J0IFJhd0FzeW5jVmFsaWRhdG9yIGZyb20gJ2FzeW5jLXZhbGlkYXRvcic7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwicmMtdXRpbC9lcy93YXJuaW5nXCI7XG5pbXBvcnQgeyBkZWZhdWx0VmFsaWRhdGVNZXNzYWdlcyB9IGZyb20gJy4vbWVzc2FnZXMnO1xuaW1wb3J0IHsgc2V0VmFsdWVzIH0gZnJvbSAnLi92YWx1ZVV0aWwnOyAvLyBSZW1vdmUgaW5jb3JyZWN0IG9yaWdpbmFsIHRzIGRlZmluZVxuXG52YXIgQXN5bmNWYWxpZGF0b3IgPSBSYXdBc3luY1ZhbGlkYXRvcjtcbi8qKlxuICogUmVwbGFjZSB3aXRoIHRlbXBsYXRlLlxuICogICBgSSdtICR7bmFtZX1gICsgeyBuYW1lOiAnYmFtYm9vJyB9ID0gSSdtIGJhbWJvb1xuICovXG5cbmZ1bmN0aW9uIHJlcGxhY2VNZXNzYWdlKHRlbXBsYXRlLCBrdikge1xuICByZXR1cm4gdGVtcGxhdGUucmVwbGFjZSgvXFwkXFx7XFx3K1xcfS9nLCBmdW5jdGlvbiAoc3RyKSB7XG4gICAgdmFyIGtleSA9IHN0ci5zbGljZSgyLCAtMSk7XG4gICAgcmV0dXJuIGt2W2tleV07XG4gIH0pO1xufVxuXG52YXIgQ09ERV9MT0dJQ19FUlJPUiA9ICdDT0RFX0xPR0lDX0VSUk9SJztcblxuZnVuY3Rpb24gdmFsaWRhdGVSdWxlKF94LCBfeDIsIF94MywgX3g0LCBfeDUpIHtcbiAgcmV0dXJuIF92YWxpZGF0ZVJ1bGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cbi8qKlxuICogV2UgdXNlIGBhc3luYy12YWxpZGF0b3JgIHRvIHZhbGlkYXRlIHRoZSB2YWx1ZS5cbiAqIEJ1dCBvbmx5IGNoZWNrIG9uZSB2YWx1ZSBpbiBhIHRpbWUgdG8gYXZvaWQgbmFtZVBhdGggdmFsaWRhdGUgaXNzdWUuXG4gKi9cblxuXG5mdW5jdGlvbiBfdmFsaWRhdGVSdWxlKCkge1xuICBfdmFsaWRhdGVSdWxlID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlMihuYW1lLCB2YWx1ZSwgcnVsZSwgb3B0aW9ucywgbWVzc2FnZVZhcmlhYmxlcykge1xuICAgIHZhciBjbG9uZVJ1bGUsIG9yaWdpblZhbGlkYXRvciwgc3ViUnVsZUZpZWxkLCB2YWxpZGF0b3IsIG1lc3NhZ2VzLCByZXN1bHQsIHN1YlJlc3VsdHMsIGt2LCBmaWxsVmFyaWFibGVSZXN1bHQ7XG4gICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHtcbiAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGNsb25lUnVsZSA9IF9vYmplY3RTcHJlYWQoe30sIHJ1bGUpOyAvLyBCdWcgb2YgYGFzeW5jLXZhbGlkYXRvcmBcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1jb21wb25lbnQvZmllbGQtZm9ybS9pc3N1ZXMvMzE2XG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtY29tcG9uZW50L2ZpZWxkLWZvcm0vaXNzdWVzLzMxM1xuXG4gICAgICAgICAgICBkZWxldGUgY2xvbmVSdWxlLnJ1bGVJbmRleDtcblxuICAgICAgICAgICAgaWYgKGNsb25lUnVsZS52YWxpZGF0b3IpIHtcbiAgICAgICAgICAgICAgb3JpZ2luVmFsaWRhdG9yID0gY2xvbmVSdWxlLnZhbGlkYXRvcjtcblxuICAgICAgICAgICAgICBjbG9uZVJ1bGUudmFsaWRhdG9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luVmFsaWRhdG9yLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoQ09ERV9MT0dJQ19FUlJPUik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSAvLyBXZSBzaG91bGQgc3BlY2lhbCBoYW5kbGUgYXJyYXkgdmFsaWRhdGVcblxuXG4gICAgICAgICAgICBzdWJSdWxlRmllbGQgPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAoY2xvbmVSdWxlICYmIGNsb25lUnVsZS50eXBlID09PSAnYXJyYXknICYmIGNsb25lUnVsZS5kZWZhdWx0RmllbGQpIHtcbiAgICAgICAgICAgICAgc3ViUnVsZUZpZWxkID0gY2xvbmVSdWxlLmRlZmF1bHRGaWVsZDtcbiAgICAgICAgICAgICAgZGVsZXRlIGNsb25lUnVsZS5kZWZhdWx0RmllbGQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhbGlkYXRvciA9IG5ldyBBc3luY1ZhbGlkYXRvcihfZGVmaW5lUHJvcGVydHkoe30sIG5hbWUsIFtjbG9uZVJ1bGVdKSk7XG4gICAgICAgICAgICBtZXNzYWdlcyA9IHNldFZhbHVlcyh7fSwgZGVmYXVsdFZhbGlkYXRlTWVzc2FnZXMsIG9wdGlvbnMudmFsaWRhdGVNZXNzYWdlcyk7XG4gICAgICAgICAgICB2YWxpZGF0b3IubWVzc2FnZXMobWVzc2FnZXMpO1xuICAgICAgICAgICAgcmVzdWx0ID0gW107XG4gICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDk7XG4gICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDEyO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWxpZGF0b3IudmFsaWRhdGUoX2RlZmluZVByb3BlcnR5KHt9LCBuYW1lLCB2YWx1ZSksIF9vYmplY3RTcHJlYWQoe30sIG9wdGlvbnMpKSk7XG5cbiAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxNztcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAxNDpcbiAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMTQ7XG4gICAgICAgICAgICBfY29udGV4dDIudDAgPSBfY29udGV4dDJbXCJjYXRjaFwiXSg5KTtcblxuICAgICAgICAgICAgaWYgKF9jb250ZXh0Mi50MC5lcnJvcnMpIHtcbiAgICAgICAgICAgICAgcmVzdWx0ID0gX2NvbnRleHQyLnQwLmVycm9ycy5tYXAoZnVuY3Rpb24gKF9yZWY0LCBpbmRleCkge1xuICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gX3JlZjQubWVzc2FnZTtcbiAgICAgICAgICAgICAgICB2YXIgbWVyZ2VkTWVzc2FnZSA9IG1lc3NhZ2UgPT09IENPREVfTE9HSUNfRVJST1IgPyBtZXNzYWdlcy5kZWZhdWx0IDogbWVzc2FnZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KG1lcmdlZE1lc3NhZ2UpID9cbiAgICAgICAgICAgICAgICAvKiNfX1BVUkVfXyovXG4gICAgICAgICAgICAgICAgLy8gV3JhcCBSZWFjdE5vZGUgd2l0aCBga2V5YFxuICAgICAgICAgICAgICAgIFJlYWN0LmNsb25lRWxlbWVudChtZXJnZWRNZXNzYWdlLCB7XG4gICAgICAgICAgICAgICAgICBrZXk6IFwiZXJyb3JfXCIuY29uY2F0KGluZGV4KVxuICAgICAgICAgICAgICAgIH0pIDogbWVyZ2VkTWVzc2FnZTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICBjYXNlIDE3OlxuICAgICAgICAgICAgaWYgKCEoIXJlc3VsdC5sZW5ndGggJiYgc3ViUnVsZUZpZWxkKSkge1xuICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDIyO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyMDtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbCh2YWx1ZS5tYXAoZnVuY3Rpb24gKHN1YlZhbHVlLCBpKSB7XG4gICAgICAgICAgICAgIHJldHVybiB2YWxpZGF0ZVJ1bGUoXCJcIi5jb25jYXQobmFtZSwgXCIuXCIpLmNvbmNhdChpKSwgc3ViVmFsdWUsIHN1YlJ1bGVGaWVsZCwgb3B0aW9ucywgbWVzc2FnZVZhcmlhYmxlcyk7XG4gICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICBjYXNlIDIwOlxuICAgICAgICAgICAgc3ViUmVzdWx0cyA9IF9jb250ZXh0Mi5zZW50O1xuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoXCJyZXR1cm5cIiwgc3ViUmVzdWx0cy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGVycm9ycykge1xuICAgICAgICAgICAgICByZXR1cm4gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShwcmV2KSwgX3RvQ29uc3VtYWJsZUFycmF5KGVycm9ycykpO1xuICAgICAgICAgICAgfSwgW10pKTtcblxuICAgICAgICAgIGNhc2UgMjI6XG4gICAgICAgICAgICAvLyBSZXBsYWNlIG1lc3NhZ2Ugd2l0aCB2YXJpYWJsZXNcbiAgICAgICAgICAgIGt2ID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBydWxlKSwge30sIHtcbiAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgZW51bTogKHJ1bGUuZW51bSB8fCBbXSkuam9pbignLCAnKVxuICAgICAgICAgICAgfSwgbWVzc2FnZVZhcmlhYmxlcyk7XG4gICAgICAgICAgICBmaWxsVmFyaWFibGVSZXN1bHQgPSByZXN1bHQubWFwKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIGVycm9yID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXBsYWNlTWVzc2FnZShlcnJvciwga3YpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdChcInJldHVyblwiLCBmaWxsVmFyaWFibGVSZXN1bHQpO1xuXG4gICAgICAgICAgY2FzZSAyNTpcbiAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIF9jYWxsZWUyLCBudWxsLCBbWzksIDE0XV0pO1xuICB9KSk7XG4gIHJldHVybiBfdmFsaWRhdGVSdWxlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVJ1bGVzKG5hbWVQYXRoLCB2YWx1ZSwgcnVsZXMsIG9wdGlvbnMsIHZhbGlkYXRlRmlyc3QsIG1lc3NhZ2VWYXJpYWJsZXMpIHtcbiAgdmFyIG5hbWUgPSBuYW1lUGF0aC5qb2luKCcuJyk7IC8vIEZpbGwgcnVsZSB3aXRoIGNvbnRleHRcblxuICB2YXIgZmlsbGVkUnVsZXMgPSBydWxlcy5tYXAoZnVuY3Rpb24gKGN1cnJlbnRSdWxlLCBydWxlSW5kZXgpIHtcbiAgICB2YXIgb3JpZ2luVmFsaWRhdG9yRnVuYyA9IGN1cnJlbnRSdWxlLnZhbGlkYXRvcjtcblxuICAgIHZhciBjbG9uZVJ1bGUgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGN1cnJlbnRSdWxlKSwge30sIHtcbiAgICAgIHJ1bGVJbmRleDogcnVsZUluZGV4XG4gICAgfSk7IC8vIFJlcGxhY2UgdmFsaWRhdG9yIGlmIG5lZWRlZFxuXG5cbiAgICBpZiAob3JpZ2luVmFsaWRhdG9yRnVuYykge1xuICAgICAgY2xvbmVSdWxlLnZhbGlkYXRvciA9IGZ1bmN0aW9uIChydWxlLCB2YWwsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBoYXNQcm9taXNlID0gZmFsc2U7IC8vIFdyYXAgY2FsbGJhY2sgb25seSBhY2NlcHQgd2hlbiBwcm9taXNlIG5vdCBwcm92aWRlZFxuXG4gICAgICAgIHZhciB3cmFwcGVkQ2FsbGJhY2sgPSBmdW5jdGlvbiB3cmFwcGVkQ2FsbGJhY2soKSB7XG4gICAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFdhaXQgYSB0aWNrIHRvIG1ha2Ugc3VyZSByZXR1cm4gdHlwZSBpcyBhIHByb21pc2VcbiAgICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHdhcm5pbmcoIWhhc1Byb21pc2UsICdZb3VyIHZhbGlkYXRvciBmdW5jdGlvbiBoYXMgYWxyZWFkeSByZXR1cm4gYSBwcm9taXNlLiBgY2FsbGJhY2tgIHdpbGwgYmUgaWdub3JlZC4nKTtcblxuICAgICAgICAgICAgaWYgKCFoYXNQcm9taXNlKSB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07IC8vIEdldCBwcm9taXNlXG5cblxuICAgICAgICB2YXIgcHJvbWlzZSA9IG9yaWdpblZhbGlkYXRvckZ1bmMocnVsZSwgdmFsLCB3cmFwcGVkQ2FsbGJhY2spO1xuICAgICAgICBoYXNQcm9taXNlID0gcHJvbWlzZSAmJiB0eXBlb2YgcHJvbWlzZS50aGVuID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBwcm9taXNlLmNhdGNoID09PSAnZnVuY3Rpb24nO1xuICAgICAgICAvKipcbiAgICAgICAgICogMS4gVXNlIHByb21pc2UgYXMgdGhlIGZpcnN0IHByaW9yaXR5LlxuICAgICAgICAgKiAyLiBJZiBwcm9taXNlIG5vdCBleGlzdCwgdXNlIGNhbGxiYWNrIHdpdGggd2FybmluZyBpbnN0ZWFkXG4gICAgICAgICAqL1xuXG4gICAgICAgIHdhcm5pbmcoaGFzUHJvbWlzZSwgJ2BjYWxsYmFja2AgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHJldHVybiBhIHByb21pc2UgaW5zdGVhZC4nKTtcblxuICAgICAgICBpZiAoaGFzUHJvbWlzZSkge1xuICAgICAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVyciB8fCAnICcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBjbG9uZVJ1bGU7XG4gIH0pLnNvcnQoZnVuY3Rpb24gKF9yZWYsIF9yZWYyKSB7XG4gICAgdmFyIHcxID0gX3JlZi53YXJuaW5nT25seSxcbiAgICAgICAgaTEgPSBfcmVmLnJ1bGVJbmRleDtcbiAgICB2YXIgdzIgPSBfcmVmMi53YXJuaW5nT25seSxcbiAgICAgICAgaTIgPSBfcmVmMi5ydWxlSW5kZXg7XG5cbiAgICBpZiAoISF3MSA9PT0gISF3Mikge1xuICAgICAgLy8gTGV0IGtlZXAgb3JpZ2luIG9yZGVyXG4gICAgICByZXR1cm4gaTEgLSBpMjtcbiAgICB9XG5cbiAgICBpZiAodzEpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cblxuICAgIHJldHVybiAtMTtcbiAgfSk7IC8vIERvIHZhbGlkYXRlIHJ1bGVzXG5cbiAgdmFyIHN1bW1hcnlQcm9taXNlO1xuXG4gIGlmICh2YWxpZGF0ZUZpcnN0ID09PSB0cnVlKSB7XG4gICAgLy8gPj4+Pj4gVmFsaWRhdGUgYnkgc2VyaWFsaXphdGlvblxuICAgIHN1bW1hcnlQcm9taXNlID0gbmV3IFByb21pc2UoIC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3JlZjMgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciBpLCBydWxlLCBlcnJvcnM7XG4gICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkge1xuICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBpID0gMDtcblxuICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgaWYgKCEoaSA8IGZpbGxlZFJ1bGVzLmxlbmd0aCkpIHtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJ1bGUgPSBmaWxsZWRSdWxlc1tpXTtcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsaWRhdGVSdWxlKG5hbWUsIHZhbHVlLCBydWxlLCBvcHRpb25zLCBtZXNzYWdlVmFyaWFibGVzKTtcblxuICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgZXJyb3JzID0gX2NvbnRleHQuc2VudDtcblxuICAgICAgICAgICAgICAgIGlmICghZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZWplY3QoW3tcbiAgICAgICAgICAgICAgICAgIGVycm9yczogZXJyb3JzLFxuICAgICAgICAgICAgICAgICAgcnVsZTogcnVsZVxuICAgICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KFwicmV0dXJuXCIpO1xuXG4gICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZW5hYmxlICovXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShbXSk7XG5cbiAgICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfY2FsbGVlKTtcbiAgICAgIH0pKTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChfeDYsIF94Nykge1xuICAgICAgICByZXR1cm4gX3JlZjMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfSgpKTtcbiAgfSBlbHNlIHtcbiAgICAvLyA+Pj4+PiBWYWxpZGF0ZSBieSBwYXJhbGxlbFxuICAgIHZhciBydWxlUHJvbWlzZXMgPSBmaWxsZWRSdWxlcy5tYXAoZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICAgIHJldHVybiB2YWxpZGF0ZVJ1bGUobmFtZSwgdmFsdWUsIHJ1bGUsIG9wdGlvbnMsIG1lc3NhZ2VWYXJpYWJsZXMpLnRoZW4oZnVuY3Rpb24gKGVycm9ycykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGVycm9yczogZXJyb3JzLFxuICAgICAgICAgIHJ1bGU6IHJ1bGVcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHN1bW1hcnlQcm9taXNlID0gKHZhbGlkYXRlRmlyc3QgPyBmaW5pc2hPbkZpcnN0RmFpbGVkKHJ1bGVQcm9taXNlcykgOiBmaW5pc2hPbkFsbEZhaWxlZChydWxlUHJvbWlzZXMpKS50aGVuKGZ1bmN0aW9uIChlcnJvcnMpIHtcbiAgICAgIC8vIEFsd2F5cyBjaGFuZ2UgdG8gcmVqZWN0aW9uIGZvciBGaWVsZCB0byBjYXRjaFxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9ycyk7XG4gICAgfSk7XG4gIH0gLy8gSW50ZXJuYWwgY2F0Y2ggZXJyb3IgdG8gYXZvaWQgY29uc29sZSBlcnJvciBsb2cuXG5cblxuICBzdW1tYXJ5UHJvbWlzZS5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgIHJldHVybiBlO1xuICB9KTtcbiAgcmV0dXJuIHN1bW1hcnlQcm9taXNlO1xufVxuXG5mdW5jdGlvbiBmaW5pc2hPbkFsbEZhaWxlZChfeDgpIHtcbiAgcmV0dXJuIF9maW5pc2hPbkFsbEZhaWxlZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfZmluaXNoT25BbGxGYWlsZWQoKSB7XG4gIF9maW5pc2hPbkFsbEZhaWxlZCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMocnVsZVByb21pc2VzKSB7XG4gICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHtcbiAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KFwicmV0dXJuXCIsIFByb21pc2UuYWxsKHJ1bGVQcm9taXNlcykudGhlbihmdW5jdGlvbiAoZXJyb3JzTGlzdCkge1xuICAgICAgICAgICAgICB2YXIgX3JlZjU7XG5cbiAgICAgICAgICAgICAgdmFyIGVycm9ycyA9IChfcmVmNSA9IFtdKS5jb25jYXQuYXBwbHkoX3JlZjUsIF90b0NvbnN1bWFibGVBcnJheShlcnJvcnNMaXN0KSk7XG5cbiAgICAgICAgICAgICAgcmV0dXJuIGVycm9ycztcbiAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIF9jYWxsZWUzKTtcbiAgfSkpO1xuICByZXR1cm4gX2ZpbmlzaE9uQWxsRmFpbGVkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGZpbmlzaE9uRmlyc3RGYWlsZWQoX3g5KSB7XG4gIHJldHVybiBfZmluaXNoT25GaXJzdEZhaWxlZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfZmluaXNoT25GaXJzdEZhaWxlZCgpIHtcbiAgX2ZpbmlzaE9uRmlyc3RGYWlsZWQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KHJ1bGVQcm9taXNlcykge1xuICAgIHZhciBjb3VudDtcbiAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkge1xuICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7XG4gICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY291bnQgPSAwO1xuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5hYnJ1cHQoXCJyZXR1cm5cIiwgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgcnVsZVByb21pc2VzLmZvckVhY2goZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgICAgICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJ1bGVFcnJvcikge1xuICAgICAgICAgICAgICAgICAgaWYgKHJ1bGVFcnJvci5lcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoW3J1bGVFcnJvcl0pO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBjb3VudCArPSAxO1xuXG4gICAgICAgICAgICAgICAgICBpZiAoY291bnQgPT09IHJ1bGVQcm9taXNlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShbXSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgX2NhbGxlZTQpO1xuICB9KSk7XG4gIHJldHVybiBfZmluaXNoT25GaXJzdEZhaWxlZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXlcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNcIjtcbmltcG9ydCBfY3JlYXRlU3VwZXIgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZVN1cGVyXCI7XG52YXIgX2V4Y2x1ZGVkID0gW1wibmFtZVwiXTtcbmltcG9ydCB0b0NoaWxkcmVuQXJyYXkgZnJvbSBcInJjLXV0aWwvZXMvQ2hpbGRyZW4vdG9BcnJheVwiO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSBcInJjLXV0aWwvZXMvd2FybmluZ1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEZpZWxkQ29udGV4dCwgeyBIT09LX01BUksgfSBmcm9tICcuL0ZpZWxkQ29udGV4dCc7XG5pbXBvcnQgeyB0b0FycmF5IH0gZnJvbSAnLi91dGlscy90eXBlVXRpbCc7XG5pbXBvcnQgeyB2YWxpZGF0ZVJ1bGVzIH0gZnJvbSAnLi91dGlscy92YWxpZGF0ZVV0aWwnO1xuaW1wb3J0IHsgY29udGFpbnNOYW1lUGF0aCwgZGVmYXVsdEdldFZhbHVlRnJvbUV2ZW50LCBnZXROYW1lUGF0aCwgZ2V0VmFsdWUgfSBmcm9tICcuL3V0aWxzL3ZhbHVlVXRpbCc7XG52YXIgRU1QVFlfRVJST1JTID0gW107XG5cbmZ1bmN0aW9uIHJlcXVpcmVVcGRhdGUoc2hvdWxkVXBkYXRlLCBwcmV2LCBuZXh0LCBwcmV2VmFsdWUsIG5leHRWYWx1ZSwgaW5mbykge1xuICBpZiAodHlwZW9mIHNob3VsZFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBzaG91bGRVcGRhdGUocHJldiwgbmV4dCwgJ3NvdXJjZScgaW4gaW5mbyA/IHtcbiAgICAgIHNvdXJjZTogaW5mby5zb3VyY2VcbiAgICB9IDoge30pO1xuICB9XG5cbiAgcmV0dXJuIHByZXZWYWx1ZSAhPT0gbmV4dFZhbHVlO1xufSAvLyBXZSB1c2UgQ2xhc3MgaW5zdGVhZCBvZiBIb29rcyBoZXJlIHNpbmNlIGl0IHdpbGwgY29zdCBtdWNoIGNvZGUgYnkgdXNpbmcgSG9va3MuXG5cblxudmFyIEZpZWxkID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhGaWVsZCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihGaWVsZCk7XG5cbiAgLyoqXG4gICAqIEZvbGxvdyBzdGF0ZSBzaG91bGQgbm90IG1hbmFnZW1lbnQgaW4gU3RhdGUgc2luY2UgaXQgd2lsbCBhc3luYyB1cGRhdGUgYnkgUmVhY3QuXG4gICAqIFRoaXMgbWFrZXMgZmlyc3QgcmVuZGVyIG9mIGZvcm0gY2FuIG5vdCBnZXQgY29ycmVjdCBzdGF0ZSB2YWx1ZS5cbiAgICovXG5cbiAgLyoqXG4gICAqIE1hcmsgd2hlbiB0b3VjaGVkICYgdmFsaWRhdGVkLiBDdXJyZW50bHkgb25seSB1c2VkIGZvciBgZGVwZW5kZW5jaWVzYC5cbiAgICogTm90ZSB0aGF0IHdlIGRvIG5vdCB0aGluayBmaWVsZCB3aXRoIGBpbml0aWFsVmFsdWVgIGlzIGRpcnR5XG4gICAqIGJ1dCB0aGlzIHdpbGwgYmUgYnkgYGlzRmllbGREaXJ0eWAgZnVuYy5cbiAgICovXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBTdWJzY3JpcHRpb25zID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICBmdW5jdGlvbiBGaWVsZChwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGaWVsZCk7XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKTsgLy8gUmVnaXN0ZXIgb24gaW5pdFxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICByZXNldENvdW50OiAwXG4gICAgfTtcbiAgICBfdGhpcy5jYW5jZWxSZWdpc3RlckZ1bmMgPSBudWxsO1xuICAgIF90aGlzLm1vdW50ZWQgPSBmYWxzZTtcbiAgICBfdGhpcy50b3VjaGVkID0gZmFsc2U7XG4gICAgX3RoaXMuZGlydHkgPSBmYWxzZTtcbiAgICBfdGhpcy52YWxpZGF0ZVByb21pc2UgPSBudWxsO1xuICAgIF90aGlzLnByZXZWYWxpZGF0aW5nID0gdm9pZCAwO1xuICAgIF90aGlzLmVycm9ycyA9IEVNUFRZX0VSUk9SUztcbiAgICBfdGhpcy53YXJuaW5ncyA9IEVNUFRZX0VSUk9SUztcblxuICAgIF90aGlzLmNhbmNlbFJlZ2lzdGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgcHJlc2VydmUgPSBfdGhpcyRwcm9wcy5wcmVzZXJ2ZSxcbiAgICAgICAgICBpc0xpc3RGaWVsZCA9IF90aGlzJHByb3BzLmlzTGlzdEZpZWxkLFxuICAgICAgICAgIG5hbWUgPSBfdGhpcyRwcm9wcy5uYW1lO1xuXG4gICAgICBpZiAoX3RoaXMuY2FuY2VsUmVnaXN0ZXJGdW5jKSB7XG4gICAgICAgIF90aGlzLmNhbmNlbFJlZ2lzdGVyRnVuYyhpc0xpc3RGaWVsZCwgcHJlc2VydmUsIGdldE5hbWVQYXRoKG5hbWUpKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuY2FuY2VsUmVnaXN0ZXJGdW5jID0gbnVsbDtcbiAgICB9O1xuXG4gICAgX3RoaXMuZ2V0TmFtZVBhdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgbmFtZSA9IF90aGlzJHByb3BzMi5uYW1lLFxuICAgICAgICAgIGZpZWxkQ29udGV4dCA9IF90aGlzJHByb3BzMi5maWVsZENvbnRleHQ7XG4gICAgICB2YXIgX2ZpZWxkQ29udGV4dCRwcmVmaXhOID0gZmllbGRDb250ZXh0LnByZWZpeE5hbWUsXG4gICAgICAgICAgcHJlZml4TmFtZSA9IF9maWVsZENvbnRleHQkcHJlZml4TiA9PT0gdm9pZCAwID8gW10gOiBfZmllbGRDb250ZXh0JHByZWZpeE47XG4gICAgICByZXR1cm4gbmFtZSAhPT0gdW5kZWZpbmVkID8gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShwcmVmaXhOYW1lKSwgX3RvQ29uc3VtYWJsZUFycmF5KG5hbWUpKSA6IFtdO1xuICAgIH07XG5cbiAgICBfdGhpcy5nZXRSdWxlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBfdGhpcyRwcm9wczMkcnVsZXMgPSBfdGhpcyRwcm9wczMucnVsZXMsXG4gICAgICAgICAgcnVsZXMgPSBfdGhpcyRwcm9wczMkcnVsZXMgPT09IHZvaWQgMCA/IFtdIDogX3RoaXMkcHJvcHMzJHJ1bGVzLFxuICAgICAgICAgIGZpZWxkQ29udGV4dCA9IF90aGlzJHByb3BzMy5maWVsZENvbnRleHQ7XG4gICAgICByZXR1cm4gcnVsZXMubWFwKGZ1bmN0aW9uIChydWxlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcnVsZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBydWxlKGZpZWxkQ29udGV4dCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcnVsZTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5yZWZyZXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFfdGhpcy5tb3VudGVkKSByZXR1cm47XG4gICAgICAvKipcbiAgICAgICAqIENsZWFuIHVwIGN1cnJlbnQgbm9kZS5cbiAgICAgICAqL1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICB2YXIgcmVzZXRDb3VudCA9IF9yZWYucmVzZXRDb3VudDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICByZXNldENvdW50OiByZXNldENvdW50ICsgMVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLnRyaWdnZXJNZXRhRXZlbnQgPSBmdW5jdGlvbiAoZGVzdHJveSkge1xuICAgICAgdmFyIG9uTWV0YUNoYW5nZSA9IF90aGlzLnByb3BzLm9uTWV0YUNoYW5nZTtcbiAgICAgIG9uTWV0YUNoYW5nZSA9PT0gbnVsbCB8fCBvbk1ldGFDaGFuZ2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uTWV0YUNoYW5nZShfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIF90aGlzLmdldE1ldGEoKSksIHt9LCB7XG4gICAgICAgIGRlc3Ryb3k6IGRlc3Ryb3lcbiAgICAgIH0pKTtcbiAgICB9O1xuXG4gICAgX3RoaXMub25TdG9yZUNoYW5nZSA9IGZ1bmN0aW9uIChwcmV2U3RvcmUsIG5hbWVQYXRoTGlzdCwgaW5mbykge1xuICAgICAgdmFyIF90aGlzJHByb3BzNCA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIHNob3VsZFVwZGF0ZSA9IF90aGlzJHByb3BzNC5zaG91bGRVcGRhdGUsXG4gICAgICAgICAgX3RoaXMkcHJvcHM0JGRlcGVuZGVuID0gX3RoaXMkcHJvcHM0LmRlcGVuZGVuY2llcyxcbiAgICAgICAgICBkZXBlbmRlbmNpZXMgPSBfdGhpcyRwcm9wczQkZGVwZW5kZW4gPT09IHZvaWQgMCA/IFtdIDogX3RoaXMkcHJvcHM0JGRlcGVuZGVuLFxuICAgICAgICAgIG9uUmVzZXQgPSBfdGhpcyRwcm9wczQub25SZXNldDtcbiAgICAgIHZhciBzdG9yZSA9IGluZm8uc3RvcmU7XG5cbiAgICAgIHZhciBuYW1lUGF0aCA9IF90aGlzLmdldE5hbWVQYXRoKCk7XG5cbiAgICAgIHZhciBwcmV2VmFsdWUgPSBfdGhpcy5nZXRWYWx1ZShwcmV2U3RvcmUpO1xuXG4gICAgICB2YXIgY3VyVmFsdWUgPSBfdGhpcy5nZXRWYWx1ZShzdG9yZSk7XG5cbiAgICAgIHZhciBuYW1lUGF0aE1hdGNoID0gbmFtZVBhdGhMaXN0ICYmIGNvbnRhaW5zTmFtZVBhdGgobmFtZVBhdGhMaXN0LCBuYW1lUGF0aCk7IC8vIGBzZXRGaWVsZHNWYWx1ZWAgaXMgYSBxdWljayBhY2Nlc3MgdG8gdXBkYXRlIHJlbGF0ZWQgc3RhdHVzXG5cbiAgICAgIGlmIChpbmZvLnR5cGUgPT09ICd2YWx1ZVVwZGF0ZScgJiYgaW5mby5zb3VyY2UgPT09ICdleHRlcm5hbCcgJiYgcHJldlZhbHVlICE9PSBjdXJWYWx1ZSkge1xuICAgICAgICBfdGhpcy50b3VjaGVkID0gdHJ1ZTtcbiAgICAgICAgX3RoaXMuZGlydHkgPSB0cnVlO1xuICAgICAgICBfdGhpcy52YWxpZGF0ZVByb21pc2UgPSBudWxsO1xuICAgICAgICBfdGhpcy5lcnJvcnMgPSBFTVBUWV9FUlJPUlM7XG4gICAgICAgIF90aGlzLndhcm5pbmdzID0gRU1QVFlfRVJST1JTO1xuXG4gICAgICAgIF90aGlzLnRyaWdnZXJNZXRhRXZlbnQoKTtcbiAgICAgIH1cblxuICAgICAgc3dpdGNoIChpbmZvLnR5cGUpIHtcbiAgICAgICAgY2FzZSAncmVzZXQnOlxuICAgICAgICAgIGlmICghbmFtZVBhdGhMaXN0IHx8IG5hbWVQYXRoTWF0Y2gpIHtcbiAgICAgICAgICAgIC8vIENsZWFuIHVwIHN0YXRlXG4gICAgICAgICAgICBfdGhpcy50b3VjaGVkID0gZmFsc2U7XG4gICAgICAgICAgICBfdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgICAgICAgICAgX3RoaXMudmFsaWRhdGVQcm9taXNlID0gbnVsbDtcbiAgICAgICAgICAgIF90aGlzLmVycm9ycyA9IEVNUFRZX0VSUk9SUztcbiAgICAgICAgICAgIF90aGlzLndhcm5pbmdzID0gRU1QVFlfRVJST1JTO1xuXG4gICAgICAgICAgICBfdGhpcy50cmlnZ2VyTWV0YUV2ZW50KCk7XG5cbiAgICAgICAgICAgIG9uUmVzZXQgPT09IG51bGwgfHwgb25SZXNldCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25SZXNldCgpO1xuXG4gICAgICAgICAgICBfdGhpcy5yZWZyZXNoKCk7XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICAvKipcbiAgICAgICAgICogSW4gY2FzZSBmaWVsZCB3aXRoIGBwcmVzZXJ2ZSA9IGZhbHNlYCBuZXN0IGRlcHMgbGlrZTpcbiAgICAgICAgICogLSBBID0gMSA9PiBzaG93IEJcbiAgICAgICAgICogLSBCID0gMSA9PiBzaG93IENcbiAgICAgICAgICogLSBSZXNldCBBLCBuZWVkIGNsZWFuIEIsIENcbiAgICAgICAgICovXG5cbiAgICAgICAgY2FzZSAncmVtb3ZlJzpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZiAoc2hvdWxkVXBkYXRlKSB7XG4gICAgICAgICAgICAgIF90aGlzLnJlUmVuZGVyKCk7XG5cbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgY2FzZSAnc2V0RmllbGQnOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlmIChuYW1lUGF0aE1hdGNoKSB7XG4gICAgICAgICAgICAgIHZhciBkYXRhID0gaW5mby5kYXRhO1xuXG4gICAgICAgICAgICAgIGlmICgndG91Y2hlZCcgaW4gZGF0YSkge1xuICAgICAgICAgICAgICAgIF90aGlzLnRvdWNoZWQgPSBkYXRhLnRvdWNoZWQ7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoJ3ZhbGlkYXRpbmcnIGluIGRhdGEgJiYgISgnb3JpZ2luUkNGaWVsZCcgaW4gZGF0YSkpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy52YWxpZGF0ZVByb21pc2UgPSBkYXRhLnZhbGlkYXRpbmcgPyBQcm9taXNlLnJlc29sdmUoW10pIDogbnVsbDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICgnZXJyb3JzJyBpbiBkYXRhKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZXJyb3JzID0gZGF0YS5lcnJvcnMgfHwgRU1QVFlfRVJST1JTO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKCd3YXJuaW5ncycgaW4gZGF0YSkge1xuICAgICAgICAgICAgICAgIF90aGlzLndhcm5pbmdzID0gZGF0YS53YXJuaW5ncyB8fCBFTVBUWV9FUlJPUlM7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBfdGhpcy5kaXJ0eSA9IHRydWU7XG5cbiAgICAgICAgICAgICAgX3RoaXMudHJpZ2dlck1ldGFFdmVudCgpO1xuXG4gICAgICAgICAgICAgIF90aGlzLnJlUmVuZGVyKCk7XG5cbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSAvLyBIYW5kbGUgdXBkYXRlIGJ5IGBzZXRGaWVsZGAgd2l0aCBgc2hvdWxkVXBkYXRlYFxuXG5cbiAgICAgICAgICAgIGlmIChzaG91bGRVcGRhdGUgJiYgIW5hbWVQYXRoLmxlbmd0aCAmJiByZXF1aXJlVXBkYXRlKHNob3VsZFVwZGF0ZSwgcHJldlN0b3JlLCBzdG9yZSwgcHJldlZhbHVlLCBjdXJWYWx1ZSwgaW5mbykpIHtcbiAgICAgICAgICAgICAgX3RoaXMucmVSZW5kZXIoKTtcblxuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICBjYXNlICdkZXBlbmRlbmNpZXNVcGRhdGUnOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVHJpZ2dlciB3aGVuIG1hcmtlZCBgZGVwZW5kZW5jaWVzYCB1cGRhdGVkLiBSZWxhdGVkIGZpZWxkcyB3aWxsIGFsbCB1cGRhdGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIGRlcGVuZGVuY3lMaXN0ID0gZGVwZW5kZW5jaWVzLm1hcChnZXROYW1lUGF0aCk7IC8vIE5vIG5lZWQgZm9yIGBuYW1lUGF0aE1hdGhgIGNoZWNrIGFuZCBgc2hvdWxkVXBkYXRlYCBjaGVjaywgc2luY2UgYHZhbHVlVXBkYXRlYCB3aWxsIGJlXG4gICAgICAgICAgICAvLyBlbWl0dGVkIGVhcmxpZXIgYW5kIHRoZXkgd2lsbCB3b3JrIHRoZXJlXG4gICAgICAgICAgICAvLyBJZiBzZXQgaXQgbWF5IGNhdXNlIHVubmVjZXNzYXJ5IHR3aWNlIHJlcmVuZGVyaW5nXG5cbiAgICAgICAgICAgIGlmIChkZXBlbmRlbmN5TGlzdC5zb21lKGZ1bmN0aW9uIChkZXBlbmRlbmN5KSB7XG4gICAgICAgICAgICAgIHJldHVybiBjb250YWluc05hbWVQYXRoKGluZm8ucmVsYXRlZEZpZWxkcywgZGVwZW5kZW5jeSk7XG4gICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgICBfdGhpcy5yZVJlbmRlcigpO1xuXG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgLy8gMS4gSWYgYG5hbWVQYXRoYCBleGlzdHMgaW4gYG5hbWVQYXRoTGlzdGAsIG1lYW5zIGl0J3MgcmVsYXRlZCB2YWx1ZSBhbmQgc2hvdWxkIHVwZGF0ZVxuICAgICAgICAgIC8vICAgICAgRm9yIGV4YW1wbGUgPExpc3QgbmFtZT1cImxpc3RcIj48RmllbGQgbmFtZT17WydsaXN0JywgMF19PjwvTGlzdD5cbiAgICAgICAgICAvLyAgICAgIElmIGBuYW1lUGF0aExpc3RgIGlzIFtbJ2xpc3QnXV0gKExpc3QgdmFsdWUgdXBkYXRlKSwgRmllbGQgc2hvdWxkIGJlIHVwZGF0ZWRcbiAgICAgICAgICAvLyAgICAgIElmIGBuYW1lUGF0aExpc3RgIGlzIFtbJ2xpc3QnLCAwXV0gKEZpZWxkIHZhbHVlIHVwZGF0ZSksIExpc3Qgc2hvdWxkbid0IGJlIHVwZGF0ZWRcbiAgICAgICAgICAvLyAyLlxuICAgICAgICAgIC8vICAgMi4xIElmIGBkZXBlbmRlbmNpZXNgIGlzIHNldCwgYG5hbWVgIGlzIG5vdCBzZXQgYW5kIGBzaG91bGRVcGRhdGVgIGlzIG5vdCBzZXQsXG4gICAgICAgICAgLy8gICAgICAgZG9uJ3QgdXNlIGBzaG91bGRVcGRhdGVgLiBgZGVwZW5kZW5jaWVzYCBpcyB2aWV3IGFzIGEgc2hvcnRjdXQgaWYgYHNob3VsZFVwZGF0ZWBcbiAgICAgICAgICAvLyAgICAgICBpcyBub3QgcHJvdmlkZWRcbiAgICAgICAgICAvLyAgIDIuMiBJZiBgc2hvdWxkVXBkYXRlYCBwcm92aWRlZCwgdXNlIGN1c3RvbWl6ZSBsb2dpYyB0byB1cGRhdGUgdGhlIGZpZWxkXG4gICAgICAgICAgLy8gICAgICAgZWxzZSB0byBjaGVjayBpZiB2YWx1ZSBjaGFuZ2VkXG4gICAgICAgICAgaWYgKG5hbWVQYXRoTWF0Y2ggfHwgKCFkZXBlbmRlbmNpZXMubGVuZ3RoIHx8IG5hbWVQYXRoLmxlbmd0aCB8fCBzaG91bGRVcGRhdGUpICYmIHJlcXVpcmVVcGRhdGUoc2hvdWxkVXBkYXRlLCBwcmV2U3RvcmUsIHN0b3JlLCBwcmV2VmFsdWUsIGN1clZhbHVlLCBpbmZvKSkge1xuICAgICAgICAgICAgX3RoaXMucmVSZW5kZXIoKTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2hvdWxkVXBkYXRlID09PSB0cnVlKSB7XG4gICAgICAgIF90aGlzLnJlUmVuZGVyKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLnZhbGlkYXRlUnVsZXMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgLy8gV2Ugc2hvdWxkIGZpeGVkIG5hbWVQYXRoICYgdmFsdWUgdG8gYXZvaWQgZGV2ZWxvcGVyIGNoYW5nZSB0aGVuIGJ5IGZvcm0gZnVuY3Rpb25cbiAgICAgIHZhciBuYW1lUGF0aCA9IF90aGlzLmdldE5hbWVQYXRoKCk7XG5cbiAgICAgIHZhciBjdXJyZW50VmFsdWUgPSBfdGhpcy5nZXRWYWx1ZSgpOyAvLyBGb3JjZSBjaGFuZ2UgdG8gYXN5bmMgdG8gYXZvaWQgcnVsZSBPT0QgdW5kZXIgcmVuZGVyUHJvcHMgZmllbGRcblxuXG4gICAgICB2YXIgcm9vdFByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFfdGhpcy5tb3VudGVkKSB7XG4gICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF90aGlzJHByb3BzNSA9IF90aGlzLnByb3BzLFxuICAgICAgICAgICAgX3RoaXMkcHJvcHM1JHZhbGlkYXRlID0gX3RoaXMkcHJvcHM1LnZhbGlkYXRlRmlyc3QsXG4gICAgICAgICAgICB2YWxpZGF0ZUZpcnN0ID0gX3RoaXMkcHJvcHM1JHZhbGlkYXRlID09PSB2b2lkIDAgPyBmYWxzZSA6IF90aGlzJHByb3BzNSR2YWxpZGF0ZSxcbiAgICAgICAgICAgIG1lc3NhZ2VWYXJpYWJsZXMgPSBfdGhpcyRwcm9wczUubWVzc2FnZVZhcmlhYmxlcztcblxuICAgICAgICB2YXIgX3JlZjIgPSBvcHRpb25zIHx8IHt9LFxuICAgICAgICAgICAgdHJpZ2dlck5hbWUgPSBfcmVmMi50cmlnZ2VyTmFtZTtcblxuICAgICAgICB2YXIgZmlsdGVyZWRSdWxlcyA9IF90aGlzLmdldFJ1bGVzKCk7XG5cbiAgICAgICAgaWYgKHRyaWdnZXJOYW1lKSB7XG4gICAgICAgICAgZmlsdGVyZWRSdWxlcyA9IGZpbHRlcmVkUnVsZXMuZmlsdGVyKGZ1bmN0aW9uIChydWxlKSB7XG4gICAgICAgICAgICB2YXIgdmFsaWRhdGVUcmlnZ2VyID0gcnVsZS52YWxpZGF0ZVRyaWdnZXI7XG5cbiAgICAgICAgICAgIGlmICghdmFsaWRhdGVUcmlnZ2VyKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgdHJpZ2dlckxpc3QgPSB0b0FycmF5KHZhbGlkYXRlVHJpZ2dlcik7XG4gICAgICAgICAgICByZXR1cm4gdHJpZ2dlckxpc3QuaW5jbHVkZXModHJpZ2dlck5hbWUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHByb21pc2UgPSB2YWxpZGF0ZVJ1bGVzKG5hbWVQYXRoLCBjdXJyZW50VmFsdWUsIGZpbHRlcmVkUnVsZXMsIG9wdGlvbnMsIHZhbGlkYXRlRmlyc3QsIG1lc3NhZ2VWYXJpYWJsZXMpO1xuICAgICAgICBwcm9taXNlLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBydWxlRXJyb3JzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBFTVBUWV9FUlJPUlM7XG5cbiAgICAgICAgICBpZiAoX3RoaXMudmFsaWRhdGVQcm9taXNlID09PSByb290UHJvbWlzZSkge1xuICAgICAgICAgICAgX3RoaXMudmFsaWRhdGVQcm9taXNlID0gbnVsbDsgLy8gR2V0IGVycm9ycyAmIHdhcm5pbmdzXG5cbiAgICAgICAgICAgIHZhciBuZXh0RXJyb3JzID0gW107XG4gICAgICAgICAgICB2YXIgbmV4dFdhcm5pbmdzID0gW107XG4gICAgICAgICAgICBydWxlRXJyb3JzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICAgICAgICAgIHZhciB3YXJuaW5nT25seSA9IF9yZWYzLnJ1bGUud2FybmluZ09ubHksXG4gICAgICAgICAgICAgICAgICBfcmVmMyRlcnJvcnMgPSBfcmVmMy5lcnJvcnMsXG4gICAgICAgICAgICAgICAgICBlcnJvcnMgPSBfcmVmMyRlcnJvcnMgPT09IHZvaWQgMCA/IEVNUFRZX0VSUk9SUyA6IF9yZWYzJGVycm9ycztcblxuICAgICAgICAgICAgICBpZiAod2FybmluZ09ubHkpIHtcbiAgICAgICAgICAgICAgICBuZXh0V2FybmluZ3MucHVzaC5hcHBseShuZXh0V2FybmluZ3MsIF90b0NvbnN1bWFibGVBcnJheShlcnJvcnMpKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXh0RXJyb3JzLnB1c2guYXBwbHkobmV4dEVycm9ycywgX3RvQ29uc3VtYWJsZUFycmF5KGVycm9ycykpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIF90aGlzLmVycm9ycyA9IG5leHRFcnJvcnM7XG4gICAgICAgICAgICBfdGhpcy53YXJuaW5ncyA9IG5leHRXYXJuaW5ncztcblxuICAgICAgICAgICAgX3RoaXMudHJpZ2dlck1ldGFFdmVudCgpO1xuXG4gICAgICAgICAgICBfdGhpcy5yZVJlbmRlcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgfSk7XG4gICAgICBfdGhpcy52YWxpZGF0ZVByb21pc2UgPSByb290UHJvbWlzZTtcbiAgICAgIF90aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICAgIF90aGlzLmVycm9ycyA9IEVNUFRZX0VSUk9SUztcbiAgICAgIF90aGlzLndhcm5pbmdzID0gRU1QVFlfRVJST1JTO1xuXG4gICAgICBfdGhpcy50cmlnZ2VyTWV0YUV2ZW50KCk7IC8vIEZvcmNlIHRyaWdnZXIgcmUtcmVuZGVyIHNpbmNlIHdlIG5lZWQgc3luYyByZW5kZXJQcm9wcyB3aXRoIG5ldyBtZXRhXG5cblxuICAgICAgX3RoaXMucmVSZW5kZXIoKTtcblxuICAgICAgcmV0dXJuIHJvb3RQcm9taXNlO1xuICAgIH07XG5cbiAgICBfdGhpcy5pc0ZpZWxkVmFsaWRhdGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAhIV90aGlzLnZhbGlkYXRlUHJvbWlzZTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaXNGaWVsZFRvdWNoZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMudG91Y2hlZDtcbiAgICB9O1xuXG4gICAgX3RoaXMuaXNGaWVsZERpcnR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gVG91Y2hlZCBvciB2YWxpZGF0ZSBvciBoYXMgaW5pdGlhbFZhbHVlXG4gICAgICBpZiAoX3RoaXMuZGlydHkgfHwgX3RoaXMucHJvcHMuaW5pdGlhbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IC8vIEZvcm0gc2V0IGluaXRpYWxWYWx1ZVxuXG5cbiAgICAgIHZhciBmaWVsZENvbnRleHQgPSBfdGhpcy5wcm9wcy5maWVsZENvbnRleHQ7XG5cbiAgICAgIHZhciBfZmllbGRDb250ZXh0JGdldEludGUgPSBmaWVsZENvbnRleHQuZ2V0SW50ZXJuYWxIb29rcyhIT09LX01BUkspLFxuICAgICAgICAgIGdldEluaXRpYWxWYWx1ZSA9IF9maWVsZENvbnRleHQkZ2V0SW50ZS5nZXRJbml0aWFsVmFsdWU7XG5cbiAgICAgIGlmIChnZXRJbml0aWFsVmFsdWUoX3RoaXMuZ2V0TmFtZVBhdGgoKSkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICBfdGhpcy5nZXRFcnJvcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMuZXJyb3JzO1xuICAgIH07XG5cbiAgICBfdGhpcy5nZXRXYXJuaW5ncyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy53YXJuaW5ncztcbiAgICB9O1xuXG4gICAgX3RoaXMuaXNMaXN0RmllbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMucHJvcHMuaXNMaXN0RmllbGQ7XG4gICAgfTtcblxuICAgIF90aGlzLmlzTGlzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5wcm9wcy5pc0xpc3Q7XG4gICAgfTtcblxuICAgIF90aGlzLmlzUHJlc2VydmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMucHJvcHMucHJlc2VydmU7XG4gICAgfTtcblxuICAgIF90aGlzLmdldE1ldGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBNYWtlIGVycm9yICYgdmFsaWRhdGluZyBpbiBjYWNoZSB0byBzYXZlIHBlcmZcbiAgICAgIF90aGlzLnByZXZWYWxpZGF0aW5nID0gX3RoaXMuaXNGaWVsZFZhbGlkYXRpbmcoKTtcbiAgICAgIHZhciBtZXRhID0ge1xuICAgICAgICB0b3VjaGVkOiBfdGhpcy5pc0ZpZWxkVG91Y2hlZCgpLFxuICAgICAgICB2YWxpZGF0aW5nOiBfdGhpcy5wcmV2VmFsaWRhdGluZyxcbiAgICAgICAgZXJyb3JzOiBfdGhpcy5lcnJvcnMsXG4gICAgICAgIHdhcm5pbmdzOiBfdGhpcy53YXJuaW5ncyxcbiAgICAgICAgbmFtZTogX3RoaXMuZ2V0TmFtZVBhdGgoKVxuICAgICAgfTtcbiAgICAgIHJldHVybiBtZXRhO1xuICAgIH07XG5cbiAgICBfdGhpcy5nZXRPbmx5Q2hpbGQgPSBmdW5jdGlvbiAoY2hpbGRyZW4pIHtcbiAgICAgIC8vIFN1cHBvcnQgcmVuZGVyIHByb3BzXG4gICAgICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciBtZXRhID0gX3RoaXMuZ2V0TWV0YSgpO1xuXG4gICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIF90aGlzLmdldE9ubHlDaGlsZChjaGlsZHJlbihfdGhpcy5nZXRDb250cm9sbGVkKCksIG1ldGEsIF90aGlzLnByb3BzLmZpZWxkQ29udGV4dCkpKSwge30sIHtcbiAgICAgICAgICBpc0Z1bmN0aW9uOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfSAvLyBGaWxlZCBlbGVtZW50IG9ubHlcblxuXG4gICAgICB2YXIgY2hpbGRMaXN0ID0gdG9DaGlsZHJlbkFycmF5KGNoaWxkcmVuKTtcblxuICAgICAgaWYgKGNoaWxkTGlzdC5sZW5ndGggIT09IDEgfHwgISAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGRMaXN0WzBdKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNoaWxkOiBjaGlsZExpc3QsXG4gICAgICAgICAgaXNGdW5jdGlvbjogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY2hpbGQ6IGNoaWxkTGlzdFswXSxcbiAgICAgICAgaXNGdW5jdGlvbjogZmFsc2VcbiAgICAgIH07XG4gICAgfTtcblxuICAgIF90aGlzLmdldFZhbHVlID0gZnVuY3Rpb24gKHN0b3JlKSB7XG4gICAgICB2YXIgZ2V0RmllbGRzVmFsdWUgPSBfdGhpcy5wcm9wcy5maWVsZENvbnRleHQuZ2V0RmllbGRzVmFsdWU7XG5cbiAgICAgIHZhciBuYW1lUGF0aCA9IF90aGlzLmdldE5hbWVQYXRoKCk7XG5cbiAgICAgIHJldHVybiBnZXRWYWx1ZShzdG9yZSB8fCBnZXRGaWVsZHNWYWx1ZSh0cnVlKSwgbmFtZVBhdGgpO1xuICAgIH07XG5cbiAgICBfdGhpcy5nZXRDb250cm9sbGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGNoaWxkUHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgdmFyIF90aGlzJHByb3BzNiA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIHRyaWdnZXIgPSBfdGhpcyRwcm9wczYudHJpZ2dlcixcbiAgICAgICAgICB2YWxpZGF0ZVRyaWdnZXIgPSBfdGhpcyRwcm9wczYudmFsaWRhdGVUcmlnZ2VyLFxuICAgICAgICAgIGdldFZhbHVlRnJvbUV2ZW50ID0gX3RoaXMkcHJvcHM2LmdldFZhbHVlRnJvbUV2ZW50LFxuICAgICAgICAgIG5vcm1hbGl6ZSA9IF90aGlzJHByb3BzNi5ub3JtYWxpemUsXG4gICAgICAgICAgdmFsdWVQcm9wTmFtZSA9IF90aGlzJHByb3BzNi52YWx1ZVByb3BOYW1lLFxuICAgICAgICAgIGdldFZhbHVlUHJvcHMgPSBfdGhpcyRwcm9wczYuZ2V0VmFsdWVQcm9wcyxcbiAgICAgICAgICBmaWVsZENvbnRleHQgPSBfdGhpcyRwcm9wczYuZmllbGRDb250ZXh0O1xuICAgICAgdmFyIG1lcmdlZFZhbGlkYXRlVHJpZ2dlciA9IHZhbGlkYXRlVHJpZ2dlciAhPT0gdW5kZWZpbmVkID8gdmFsaWRhdGVUcmlnZ2VyIDogZmllbGRDb250ZXh0LnZhbGlkYXRlVHJpZ2dlcjtcblxuICAgICAgdmFyIG5hbWVQYXRoID0gX3RoaXMuZ2V0TmFtZVBhdGgoKTtcblxuICAgICAgdmFyIGdldEludGVybmFsSG9va3MgPSBmaWVsZENvbnRleHQuZ2V0SW50ZXJuYWxIb29rcyxcbiAgICAgICAgICBnZXRGaWVsZHNWYWx1ZSA9IGZpZWxkQ29udGV4dC5nZXRGaWVsZHNWYWx1ZTtcblxuICAgICAgdmFyIF9nZXRJbnRlcm5hbEhvb2tzID0gZ2V0SW50ZXJuYWxIb29rcyhIT09LX01BUkspLFxuICAgICAgICAgIGRpc3BhdGNoID0gX2dldEludGVybmFsSG9va3MuZGlzcGF0Y2g7XG5cbiAgICAgIHZhciB2YWx1ZSA9IF90aGlzLmdldFZhbHVlKCk7XG5cbiAgICAgIHZhciBtZXJnZWRHZXRWYWx1ZVByb3BzID0gZ2V0VmFsdWVQcm9wcyB8fCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIHJldHVybiBfZGVmaW5lUHJvcGVydHkoe30sIHZhbHVlUHJvcE5hbWUsIHZhbCk7XG4gICAgICB9OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuXG5cbiAgICAgIHZhciBvcmlnaW5UcmlnZ2VyRnVuYyA9IGNoaWxkUHJvcHNbdHJpZ2dlcl07XG5cbiAgICAgIHZhciBjb250cm9sID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBjaGlsZFByb3BzKSwgbWVyZ2VkR2V0VmFsdWVQcm9wcyh2YWx1ZSkpOyAvLyBBZGQgdHJpZ2dlclxuXG5cbiAgICAgIGNvbnRyb2xbdHJpZ2dlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIE1hcmsgYXMgdG91Y2hlZFxuICAgICAgICBfdGhpcy50b3VjaGVkID0gdHJ1ZTtcbiAgICAgICAgX3RoaXMuZGlydHkgPSB0cnVlO1xuXG4gICAgICAgIF90aGlzLnRyaWdnZXJNZXRhRXZlbnQoKTtcblxuICAgICAgICB2YXIgbmV3VmFsdWU7XG5cbiAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChnZXRWYWx1ZUZyb21FdmVudCkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gZ2V0VmFsdWVGcm9tRXZlbnQuYXBwbHkodm9pZCAwLCBhcmdzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IGRlZmF1bHRHZXRWYWx1ZUZyb21FdmVudC5hcHBseSh2b2lkIDAsIFt2YWx1ZVByb3BOYW1lXS5jb25jYXQoYXJncykpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5vcm1hbGl6ZSkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gbm9ybWFsaXplKG5ld1ZhbHVlLCB2YWx1ZSwgZ2V0RmllbGRzVmFsdWUodHJ1ZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGlzcGF0Y2goe1xuICAgICAgICAgIHR5cGU6ICd1cGRhdGVWYWx1ZScsXG4gICAgICAgICAgbmFtZVBhdGg6IG5hbWVQYXRoLFxuICAgICAgICAgIHZhbHVlOiBuZXdWYWx1ZVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAob3JpZ2luVHJpZ2dlckZ1bmMpIHtcbiAgICAgICAgICBvcmlnaW5UcmlnZ2VyRnVuYy5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICB9OyAvLyBBZGQgdmFsaWRhdGVUcmlnZ2VyXG5cblxuICAgICAgdmFyIHZhbGlkYXRlVHJpZ2dlckxpc3QgPSB0b0FycmF5KG1lcmdlZFZhbGlkYXRlVHJpZ2dlciB8fCBbXSk7XG4gICAgICB2YWxpZGF0ZVRyaWdnZXJMaXN0LmZvckVhY2goZnVuY3Rpb24gKHRyaWdnZXJOYW1lKSB7XG4gICAgICAgIC8vIFdyYXAgYWRkaXRpb25hbCBmdW5jdGlvbiBvZiBjb21wb25lbnQsIHNvIHRoYXQgd2UgY2FuIGdldCBsYXRlc3QgdmFsdWUgZnJvbSBzdG9yZVxuICAgICAgICB2YXIgb3JpZ2luVHJpZ2dlciA9IGNvbnRyb2xbdHJpZ2dlck5hbWVdO1xuXG4gICAgICAgIGNvbnRyb2xbdHJpZ2dlck5hbWVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChvcmlnaW5UcmlnZ2VyKSB7XG4gICAgICAgICAgICBvcmlnaW5UcmlnZ2VyLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICAgICAgICB9IC8vIEFsd2F5cyB1c2UgbGF0ZXN0IHJ1bGVzXG5cblxuICAgICAgICAgIHZhciBydWxlcyA9IF90aGlzLnByb3BzLnJ1bGVzO1xuXG4gICAgICAgICAgaWYgKHJ1bGVzICYmIHJ1bGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gV2UgZGlzcGF0Y2ggdmFsaWRhdGUgdG8gcm9vdCxcbiAgICAgICAgICAgIC8vIHNpbmNlIGl0IHdpbGwgdXBkYXRlIHJlbGF0ZWQgZGF0YSB3aXRoIG90aGVyIGZpZWxkIHdpdGggc2FtZSBuYW1lXG4gICAgICAgICAgICBkaXNwYXRjaCh7XG4gICAgICAgICAgICAgIHR5cGU6ICd2YWxpZGF0ZUZpZWxkJyxcbiAgICAgICAgICAgICAgbmFtZVBhdGg6IG5hbWVQYXRoLFxuICAgICAgICAgICAgICB0cmlnZ2VyTmFtZTogdHJpZ2dlck5hbWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGNvbnRyb2w7XG4gICAgfTtcblxuICAgIGlmIChwcm9wcy5maWVsZENvbnRleHQpIHtcbiAgICAgIHZhciBnZXRJbnRlcm5hbEhvb2tzID0gcHJvcHMuZmllbGRDb250ZXh0LmdldEludGVybmFsSG9va3M7XG5cbiAgICAgIHZhciBfZ2V0SW50ZXJuYWxIb29rczIgPSBnZXRJbnRlcm5hbEhvb2tzKEhPT0tfTUFSSyksXG4gICAgICAgICAgaW5pdEVudGl0eVZhbHVlID0gX2dldEludGVybmFsSG9va3MyLmluaXRFbnRpdHlWYWx1ZTtcblxuICAgICAgaW5pdEVudGl0eVZhbHVlKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRmllbGQsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzNyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgc2hvdWxkVXBkYXRlID0gX3RoaXMkcHJvcHM3LnNob3VsZFVwZGF0ZSxcbiAgICAgICAgICBmaWVsZENvbnRleHQgPSBfdGhpcyRwcm9wczcuZmllbGRDb250ZXh0O1xuICAgICAgdGhpcy5tb3VudGVkID0gdHJ1ZTsgLy8gUmVnaXN0ZXIgb24gaW5pdFxuXG4gICAgICBpZiAoZmllbGRDb250ZXh0KSB7XG4gICAgICAgIHZhciBnZXRJbnRlcm5hbEhvb2tzID0gZmllbGRDb250ZXh0LmdldEludGVybmFsSG9va3M7XG5cbiAgICAgICAgdmFyIF9nZXRJbnRlcm5hbEhvb2tzMyA9IGdldEludGVybmFsSG9va3MoSE9PS19NQVJLKSxcbiAgICAgICAgICAgIHJlZ2lzdGVyRmllbGQgPSBfZ2V0SW50ZXJuYWxIb29rczMucmVnaXN0ZXJGaWVsZDtcblxuICAgICAgICB0aGlzLmNhbmNlbFJlZ2lzdGVyRnVuYyA9IHJlZ2lzdGVyRmllbGQodGhpcyk7XG4gICAgICB9IC8vIE9uZSBtb3JlIHJlbmRlciBmb3IgY29tcG9uZW50IGluIGNhc2UgZmllbGRzIG5vdCByZWFkeVxuXG5cbiAgICAgIGlmIChzaG91bGRVcGRhdGUgPT09IHRydWUpIHtcbiAgICAgICAgdGhpcy5yZVJlbmRlcigpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMuY2FuY2VsUmVnaXN0ZXIoKTtcbiAgICAgIHRoaXMudHJpZ2dlck1ldGFFdmVudCh0cnVlKTtcbiAgICAgIHRoaXMubW91bnRlZCA9IGZhbHNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZVJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZVJlbmRlcigpIHtcbiAgICAgIGlmICghdGhpcy5tb3VudGVkKSByZXR1cm47XG4gICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgcmVzZXRDb3VudCA9IHRoaXMuc3RhdGUucmVzZXRDb3VudDtcbiAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG5cbiAgICAgIHZhciBfdGhpcyRnZXRPbmx5Q2hpbGQgPSB0aGlzLmdldE9ubHlDaGlsZChjaGlsZHJlbiksXG4gICAgICAgICAgY2hpbGQgPSBfdGhpcyRnZXRPbmx5Q2hpbGQuY2hpbGQsXG4gICAgICAgICAgaXNGdW5jdGlvbiA9IF90aGlzJGdldE9ubHlDaGlsZC5pc0Z1bmN0aW9uOyAvLyBOb3QgbmVlZCB0byBgY2xvbmVFbGVtZW50YCBzaW5jZSB1c2VyIGNhbiBoYW5kbGUgdGhpcyBpbiByZW5kZXIgZnVuY3Rpb24gc2VsZlxuXG5cbiAgICAgIHZhciByZXR1cm5DaGlsZE5vZGU7XG5cbiAgICAgIGlmIChpc0Z1bmN0aW9uKSB7XG4gICAgICAgIHJldHVybkNoaWxkTm9kZSA9IGNoaWxkO1xuICAgICAgfSBlbHNlIGlmICggLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgICByZXR1cm5DaGlsZE5vZGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB0aGlzLmdldENvbnRyb2xsZWQoY2hpbGQucHJvcHMpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm5pbmcoIWNoaWxkLCAnYGNoaWxkcmVuYCBvZiBGaWVsZCBpcyBub3QgdmFsaWRhdGUgUmVhY3RFbGVtZW50LicpO1xuICAgICAgICByZXR1cm5DaGlsZE5vZGUgPSBjaGlsZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCB7XG4gICAgICAgIGtleTogcmVzZXRDb3VudFxuICAgICAgfSwgcmV0dXJuQ2hpbGROb2RlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRmllbGQ7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkZpZWxkLmNvbnRleHRUeXBlID0gRmllbGRDb250ZXh0O1xuRmllbGQuZGVmYXVsdFByb3BzID0ge1xuICB0cmlnZ2VyOiAnb25DaGFuZ2UnLFxuICB2YWx1ZVByb3BOYW1lOiAndmFsdWUnXG59O1xuXG5mdW5jdGlvbiBXcmFwcGVyRmllbGQoX3JlZjUpIHtcbiAgdmFyIG5hbWUgPSBfcmVmNS5uYW1lLFxuICAgICAgcmVzdFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWY1LCBfZXhjbHVkZWQpO1xuXG4gIHZhciBmaWVsZENvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KEZpZWxkQ29udGV4dCk7XG4gIHZhciBuYW1lUGF0aCA9IG5hbWUgIT09IHVuZGVmaW5lZCA/IGdldE5hbWVQYXRoKG5hbWUpIDogdW5kZWZpbmVkO1xuICB2YXIga2V5ID0gJ2tlZXAnO1xuXG4gIGlmICghcmVzdFByb3BzLmlzTGlzdEZpZWxkKSB7XG4gICAga2V5ID0gXCJfXCIuY29uY2F0KChuYW1lUGF0aCB8fCBbXSkuam9pbignXycpKTtcbiAgfSAvLyBXYXJuaW5nIGlmIGl0J3MgYSBkaXJlY3RseSBsaXN0IGZpZWxkLlxuICAvLyBXZSBjYW4gc3RpbGwgc3VwcG9ydCBtdWx0aXBsZSBsZXZlbCBmaWVsZCBwcmVzZXJ2ZS5cblxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHJlc3RQcm9wcy5wcmVzZXJ2ZSA9PT0gZmFsc2UgJiYgcmVzdFByb3BzLmlzTGlzdEZpZWxkICYmIG5hbWVQYXRoLmxlbmd0aCA8PSAxKSB7XG4gICAgd2FybmluZyhmYWxzZSwgJ2BwcmVzZXJ2ZWAgc2hvdWxkIG5vdCBhcHBseSBvbiBGb3JtLkxpc3QgZmllbGRzLicpO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZpZWxkLCBfZXh0ZW5kcyh7XG4gICAga2V5OiBrZXksXG4gICAgbmFtZTogbmFtZVBhdGhcbiAgfSwgcmVzdFByb3BzLCB7XG4gICAgZmllbGRDb250ZXh0OiBmaWVsZENvbnRleHRcbiAgfSkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBXcmFwcGVyRmllbGQ7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xudmFyIExpc3RDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5leHBvcnQgZGVmYXVsdCBMaXN0Q29udGV4dDsiLCJpbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5XCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbnZhciBTUExJVCA9ICdfX0BmaWVsZF9zcGxpdF9fJztcbi8qKlxuICogQ29udmVydCBuYW1lIHBhdGggaW50byBzdHJpbmcgdG8gZmFzdCB0aGUgZmV0Y2ggc3BlZWQgb2YgTWFwLlxuICovXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZShuYW1lUGF0aCkge1xuICByZXR1cm4gbmFtZVBhdGgubWFwKGZ1bmN0aW9uIChjZWxsKSB7XG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KF90eXBlb2YoY2VsbCksIFwiOlwiKS5jb25jYXQoY2VsbCk7XG4gIH0pIC8vIE1hZ2ljIHNwbGl0XG4gIC5qb2luKFNQTElUKTtcbn1cbi8qKlxuICogTmFtZU1hcCBsaWtlIGEgYE1hcGAgYnV0IGFjY2VwdHMgYHN0cmluZ1tdYCBhcyBrZXkuXG4gKi9cblxuXG52YXIgTmFtZU1hcCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE5hbWVNYXAoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE5hbWVNYXApO1xuXG4gICAgdGhpcy5rdnMgPSBuZXcgTWFwKCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTmFtZU1hcCwgW3tcbiAgICBrZXk6IFwic2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgICB0aGlzLmt2cy5zZXQobm9ybWFsaXplKGtleSksIHZhbHVlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLmt2cy5nZXQobm9ybWFsaXplKGtleSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ1cGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlKGtleSwgdXBkYXRlcikge1xuICAgICAgdmFyIG9yaWdpbiA9IHRoaXMuZ2V0KGtleSk7XG4gICAgICB2YXIgbmV4dCA9IHVwZGF0ZXIob3JpZ2luKTtcblxuICAgICAgaWYgKCFuZXh0KSB7XG4gICAgICAgIHRoaXMuZGVsZXRlKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNldChrZXksIG5leHQpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJkZWxldGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2RlbGV0ZShrZXkpIHtcbiAgICAgIHRoaXMua3ZzLmRlbGV0ZShub3JtYWxpemUoa2V5KSk7XG4gICAgfSAvLyBTaW5jZSB3ZSBvbmx5IHVzZSB0aGlzIGluIHRlc3QsIGxldCBzaW1wbHkgcmVhbGl6ZSB0aGlzXG5cbiAgfSwge1xuICAgIGtleTogXCJtYXBcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbWFwKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gX3RvQ29uc3VtYWJsZUFycmF5KHRoaXMua3ZzLmVudHJpZXMoKSkubWFwKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDIpLFxuICAgICAgICAgICAga2V5ID0gX3JlZjJbMF0sXG4gICAgICAgICAgICB2YWx1ZSA9IF9yZWYyWzFdO1xuXG4gICAgICAgIHZhciBjZWxscyA9IGtleS5zcGxpdChTUExJVCk7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayh7XG4gICAgICAgICAga2V5OiBjZWxscy5tYXAoZnVuY3Rpb24gKGNlbGwpIHtcbiAgICAgICAgICAgIHZhciBfY2VsbCRtYXRjaCA9IGNlbGwubWF0Y2goL14oW146XSopOiguKikkLyksXG4gICAgICAgICAgICAgICAgX2NlbGwkbWF0Y2gyID0gX3NsaWNlZFRvQXJyYXkoX2NlbGwkbWF0Y2gsIDMpLFxuICAgICAgICAgICAgICAgIHR5cGUgPSBfY2VsbCRtYXRjaDJbMV0sXG4gICAgICAgICAgICAgICAgdW5pdCA9IF9jZWxsJG1hdGNoMlsyXTtcblxuICAgICAgICAgICAgcmV0dXJuIHR5cGUgPT09ICdudW1iZXInID8gTnVtYmVyKHVuaXQpIDogdW5pdDtcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidG9KU09OXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgIHZhciBqc29uID0ge307XG4gICAgICB0aGlzLm1hcChmdW5jdGlvbiAoX3JlZjMpIHtcbiAgICAgICAgdmFyIGtleSA9IF9yZWYzLmtleSxcbiAgICAgICAgICAgIHZhbHVlID0gX3JlZjMudmFsdWU7XG4gICAgICAgIGpzb25ba2V5LmpvaW4oJy4nKV0gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBqc29uO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBOYW1lTWFwO1xufSgpO1xuXG5leHBvcnQgZGVmYXVsdCBOYW1lTWFwOyIsImltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheVwiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrXCI7XG52YXIgX2V4Y2x1ZGVkID0gW1wibmFtZVwiLCBcImVycm9yc1wiXTtcbmltcG9ydCB3YXJuaW5nIGZyb20gXCJyYy11dGlsL2VzL3dhcm5pbmdcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEhPT0tfTUFSSyB9IGZyb20gJy4vRmllbGRDb250ZXh0JztcbmltcG9ydCB7IGFsbFByb21pc2VGaW5pc2ggfSBmcm9tICcuL3V0aWxzL2FzeW5jVXRpbCc7XG5pbXBvcnQgY2xvbmVEZWVwIGZyb20gJy4vdXRpbHMvY2xvbmVEZWVwJztcbmltcG9ydCB7IGRlZmF1bHRWYWxpZGF0ZU1lc3NhZ2VzIH0gZnJvbSAnLi91dGlscy9tZXNzYWdlcyc7XG5pbXBvcnQgTmFtZU1hcCBmcm9tICcuL3V0aWxzL05hbWVNYXAnO1xuaW1wb3J0IHsgY2xvbmVCeU5hbWVQYXRoTGlzdCwgY29udGFpbnNOYW1lUGF0aCwgZ2V0TmFtZVBhdGgsIGdldFZhbHVlLCBtYXRjaE5hbWVQYXRoLCBzZXRWYWx1ZSwgc2V0VmFsdWVzIH0gZnJvbSAnLi91dGlscy92YWx1ZVV0aWwnO1xuZXhwb3J0IHZhciBGb3JtU3RvcmUgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZUNsYXNzKGZ1bmN0aW9uIEZvcm1TdG9yZShmb3JjZVJvb3RVcGRhdGUpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRm9ybVN0b3JlKTtcblxuICB0aGlzLmZvcm1Ib29rZWQgPSBmYWxzZTtcbiAgdGhpcy5mb3JjZVJvb3RVcGRhdGUgPSB2b2lkIDA7XG4gIHRoaXMuc3Vic2NyaWJhYmxlID0gdHJ1ZTtcbiAgdGhpcy5zdG9yZSA9IHt9O1xuICB0aGlzLmZpZWxkRW50aXRpZXMgPSBbXTtcbiAgdGhpcy5pbml0aWFsVmFsdWVzID0ge307XG4gIHRoaXMuY2FsbGJhY2tzID0ge307XG4gIHRoaXMudmFsaWRhdGVNZXNzYWdlcyA9IG51bGw7XG4gIHRoaXMucHJlc2VydmUgPSBudWxsO1xuICB0aGlzLmxhc3RWYWxpZGF0ZVByb21pc2UgPSBudWxsO1xuXG4gIHRoaXMuZ2V0Rm9ybSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZ2V0RmllbGRWYWx1ZTogX3RoaXMuZ2V0RmllbGRWYWx1ZSxcbiAgICAgIGdldEZpZWxkc1ZhbHVlOiBfdGhpcy5nZXRGaWVsZHNWYWx1ZSxcbiAgICAgIGdldEZpZWxkRXJyb3I6IF90aGlzLmdldEZpZWxkRXJyb3IsXG4gICAgICBnZXRGaWVsZFdhcm5pbmc6IF90aGlzLmdldEZpZWxkV2FybmluZyxcbiAgICAgIGdldEZpZWxkc0Vycm9yOiBfdGhpcy5nZXRGaWVsZHNFcnJvcixcbiAgICAgIGlzRmllbGRzVG91Y2hlZDogX3RoaXMuaXNGaWVsZHNUb3VjaGVkLFxuICAgICAgaXNGaWVsZFRvdWNoZWQ6IF90aGlzLmlzRmllbGRUb3VjaGVkLFxuICAgICAgaXNGaWVsZFZhbGlkYXRpbmc6IF90aGlzLmlzRmllbGRWYWxpZGF0aW5nLFxuICAgICAgaXNGaWVsZHNWYWxpZGF0aW5nOiBfdGhpcy5pc0ZpZWxkc1ZhbGlkYXRpbmcsXG4gICAgICByZXNldEZpZWxkczogX3RoaXMucmVzZXRGaWVsZHMsXG4gICAgICBzZXRGaWVsZHM6IF90aGlzLnNldEZpZWxkcyxcbiAgICAgIHNldEZpZWxkc1ZhbHVlOiBfdGhpcy5zZXRGaWVsZHNWYWx1ZSxcbiAgICAgIHZhbGlkYXRlRmllbGRzOiBfdGhpcy52YWxpZGF0ZUZpZWxkcyxcbiAgICAgIHN1Ym1pdDogX3RoaXMuc3VibWl0LFxuICAgICAgX2luaXQ6IHRydWUsXG4gICAgICBnZXRJbnRlcm5hbEhvb2tzOiBfdGhpcy5nZXRJbnRlcm5hbEhvb2tzXG4gICAgfTtcbiAgfTtcblxuICB0aGlzLmdldEludGVybmFsSG9va3MgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKGtleSA9PT0gSE9PS19NQVJLKSB7XG4gICAgICBfdGhpcy5mb3JtSG9va2VkID0gdHJ1ZTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpc3BhdGNoOiBfdGhpcy5kaXNwYXRjaCxcbiAgICAgICAgaW5pdEVudGl0eVZhbHVlOiBfdGhpcy5pbml0RW50aXR5VmFsdWUsXG4gICAgICAgIHJlZ2lzdGVyRmllbGQ6IF90aGlzLnJlZ2lzdGVyRmllbGQsXG4gICAgICAgIHVzZVN1YnNjcmliZTogX3RoaXMudXNlU3Vic2NyaWJlLFxuICAgICAgICBzZXRJbml0aWFsVmFsdWVzOiBfdGhpcy5zZXRJbml0aWFsVmFsdWVzLFxuICAgICAgICBkZXN0cm95Rm9ybTogX3RoaXMuZGVzdHJveUZvcm0sXG4gICAgICAgIHNldENhbGxiYWNrczogX3RoaXMuc2V0Q2FsbGJhY2tzLFxuICAgICAgICBzZXRWYWxpZGF0ZU1lc3NhZ2VzOiBfdGhpcy5zZXRWYWxpZGF0ZU1lc3NhZ2VzLFxuICAgICAgICBnZXRGaWVsZHM6IF90aGlzLmdldEZpZWxkcyxcbiAgICAgICAgc2V0UHJlc2VydmU6IF90aGlzLnNldFByZXNlcnZlLFxuICAgICAgICBnZXRJbml0aWFsVmFsdWU6IF90aGlzLmdldEluaXRpYWxWYWx1ZSxcbiAgICAgICAgcmVnaXN0ZXJXYXRjaDogX3RoaXMucmVnaXN0ZXJXYXRjaFxuICAgICAgfTtcbiAgICB9XG5cbiAgICB3YXJuaW5nKGZhbHNlLCAnYGdldEludGVybmFsSG9va3NgIGlzIGludGVybmFsIHVzYWdlLiBTaG91bGQgbm90IGNhbGwgZGlyZWN0bHkuJyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgdGhpcy51c2VTdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJhYmxlKSB7XG4gICAgX3RoaXMuc3Vic2NyaWJhYmxlID0gc3Vic2NyaWJhYmxlO1xuICB9O1xuXG4gIHRoaXMucHJldldpdGhvdXRQcmVzZXJ2ZXMgPSBudWxsO1xuXG4gIHRoaXMuc2V0SW5pdGlhbFZhbHVlcyA9IGZ1bmN0aW9uIChpbml0aWFsVmFsdWVzLCBpbml0KSB7XG4gICAgX3RoaXMuaW5pdGlhbFZhbHVlcyA9IGluaXRpYWxWYWx1ZXMgfHwge307XG5cbiAgICBpZiAoaW5pdCkge1xuICAgICAgdmFyIF90aGlzJHByZXZXaXRob3V0UHJlcztcblxuICAgICAgdmFyIG5leHRTdG9yZSA9IHNldFZhbHVlcyh7fSwgaW5pdGlhbFZhbHVlcywgX3RoaXMuc3RvcmUpOyAvLyBXZSB3aWxsIHRha2UgY29uc2lkZXIgcHJldiBmb3JtIHVubW91bnQgZmllbGRzLlxuICAgICAgLy8gV2hlbiB0aGUgZmllbGQgaXMgbm90IGBwcmVzZXJ2ZWAsIHdlIG5lZWQgZmlsbCB0aGlzIHdpdGggaW5pdGlhbFZhbHVlcyBpbnN0ZWFkIG9mIHN0b3JlLlxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGFycmF5LWNhbGxiYWNrLXJldHVyblxuXG4gICAgICAoX3RoaXMkcHJldldpdGhvdXRQcmVzID0gX3RoaXMucHJldldpdGhvdXRQcmVzZXJ2ZXMpID09PSBudWxsIHx8IF90aGlzJHByZXZXaXRob3V0UHJlcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkcHJldldpdGhvdXRQcmVzLm1hcChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICB2YXIgbmFtZVBhdGggPSBfcmVmLmtleTtcbiAgICAgICAgbmV4dFN0b3JlID0gc2V0VmFsdWUobmV4dFN0b3JlLCBuYW1lUGF0aCwgZ2V0VmFsdWUoaW5pdGlhbFZhbHVlcywgbmFtZVBhdGgpKTtcbiAgICAgIH0pO1xuICAgICAgX3RoaXMucHJldldpdGhvdXRQcmVzZXJ2ZXMgPSBudWxsO1xuXG4gICAgICBfdGhpcy51cGRhdGVTdG9yZShuZXh0U3RvcmUpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLmRlc3Ryb3lGb3JtID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcmV2V2l0aG91dFByZXNlcnZlcyA9IG5ldyBOYW1lTWFwKCk7XG5cbiAgICBfdGhpcy5nZXRGaWVsZEVudGl0aWVzKHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGVudGl0eSkge1xuICAgICAgaWYgKCFfdGhpcy5pc01lcmdlZFByZXNlcnZlKGVudGl0eS5pc1ByZXNlcnZlKCkpKSB7XG4gICAgICAgIHByZXZXaXRob3V0UHJlc2VydmVzLnNldChlbnRpdHkuZ2V0TmFtZVBhdGgoKSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfdGhpcy5wcmV2V2l0aG91dFByZXNlcnZlcyA9IHByZXZXaXRob3V0UHJlc2VydmVzO1xuICB9O1xuXG4gIHRoaXMuZ2V0SW5pdGlhbFZhbHVlID0gZnVuY3Rpb24gKG5hbWVQYXRoKSB7XG4gICAgdmFyIGluaXRWYWx1ZSA9IGdldFZhbHVlKF90aGlzLmluaXRpYWxWYWx1ZXMsIG5hbWVQYXRoKTsgLy8gTm90IGNsb25lRGVlcCB3aGVuIHdpdGhvdXQgYG5hbWVQYXRoYFxuXG4gICAgcmV0dXJuIG5hbWVQYXRoLmxlbmd0aCA/IGNsb25lRGVlcChpbml0VmFsdWUpIDogaW5pdFZhbHVlO1xuICB9O1xuXG4gIHRoaXMuc2V0Q2FsbGJhY2tzID0gZnVuY3Rpb24gKGNhbGxiYWNrcykge1xuICAgIF90aGlzLmNhbGxiYWNrcyA9IGNhbGxiYWNrcztcbiAgfTtcblxuICB0aGlzLnNldFZhbGlkYXRlTWVzc2FnZXMgPSBmdW5jdGlvbiAodmFsaWRhdGVNZXNzYWdlcykge1xuICAgIF90aGlzLnZhbGlkYXRlTWVzc2FnZXMgPSB2YWxpZGF0ZU1lc3NhZ2VzO1xuICB9O1xuXG4gIHRoaXMuc2V0UHJlc2VydmUgPSBmdW5jdGlvbiAocHJlc2VydmUpIHtcbiAgICBfdGhpcy5wcmVzZXJ2ZSA9IHByZXNlcnZlO1xuICB9O1xuXG4gIHRoaXMud2F0Y2hMaXN0ID0gW107XG5cbiAgdGhpcy5yZWdpc3RlcldhdGNoID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgX3RoaXMud2F0Y2hMaXN0LnB1c2goY2FsbGJhY2spO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLndhdGNoTGlzdCA9IF90aGlzLndhdGNoTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHJldHVybiBmbiAhPT0gY2FsbGJhY2s7XG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xuXG4gIHRoaXMubm90aWZ5V2F0Y2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG5hbWVQYXRoID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbXTtcblxuICAgIC8vIE5vIG5lZWQgdG8gY29zdCBwZXJmIHdoZW4gbm90aGluZyBuZWVkIHRvIHdhdGNoXG4gICAgaWYgKF90aGlzLndhdGNoTGlzdC5sZW5ndGgpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBfdGhpcy5nZXRGaWVsZHNWYWx1ZSgpO1xuXG4gICAgICBfdGhpcy53YXRjaExpc3QuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2sodmFsdWVzLCBuYW1lUGF0aCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy50aW1lb3V0SWQgPSBudWxsO1xuXG4gIHRoaXMud2FybmluZ1VuaG9va2VkID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFfdGhpcy50aW1lb3V0SWQgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIF90aGlzLnRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy50aW1lb3V0SWQgPSBudWxsO1xuXG4gICAgICAgIGlmICghX3RoaXMuZm9ybUhvb2tlZCkge1xuICAgICAgICAgIHdhcm5pbmcoZmFsc2UsICdJbnN0YW5jZSBjcmVhdGVkIGJ5IGB1c2VGb3JtYCBpcyBub3QgY29ubmVjdGVkIHRvIGFueSBGb3JtIGVsZW1lbnQuIEZvcmdldCB0byBwYXNzIGBmb3JtYCBwcm9wPycpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy51cGRhdGVTdG9yZSA9IGZ1bmN0aW9uIChuZXh0U3RvcmUpIHtcbiAgICBfdGhpcy5zdG9yZSA9IG5leHRTdG9yZTtcbiAgfTtcblxuICB0aGlzLmdldEZpZWxkRW50aXRpZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHB1cmUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgaWYgKCFwdXJlKSB7XG4gICAgICByZXR1cm4gX3RoaXMuZmllbGRFbnRpdGllcztcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXMuZmllbGRFbnRpdGllcy5maWx0ZXIoZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICByZXR1cm4gZmllbGQuZ2V0TmFtZVBhdGgoKS5sZW5ndGg7XG4gICAgfSk7XG4gIH07XG5cbiAgdGhpcy5nZXRGaWVsZHNNYXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHB1cmUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuICAgIHZhciBjYWNoZSA9IG5ldyBOYW1lTWFwKCk7XG5cbiAgICBfdGhpcy5nZXRGaWVsZEVudGl0aWVzKHB1cmUpLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICB2YXIgbmFtZVBhdGggPSBmaWVsZC5nZXROYW1lUGF0aCgpO1xuICAgICAgY2FjaGUuc2V0KG5hbWVQYXRoLCBmaWVsZCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gY2FjaGU7XG4gIH07XG5cbiAgdGhpcy5nZXRGaWVsZEVudGl0aWVzRm9yTmFtZVBhdGhMaXN0ID0gZnVuY3Rpb24gKG5hbWVMaXN0KSB7XG4gICAgaWYgKCFuYW1lTGlzdCkge1xuICAgICAgcmV0dXJuIF90aGlzLmdldEZpZWxkRW50aXRpZXModHJ1ZSk7XG4gICAgfVxuXG4gICAgdmFyIGNhY2hlID0gX3RoaXMuZ2V0RmllbGRzTWFwKHRydWUpO1xuXG4gICAgcmV0dXJuIG5hbWVMaXN0Lm1hcChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIG5hbWVQYXRoID0gZ2V0TmFtZVBhdGgobmFtZSk7XG4gICAgICByZXR1cm4gY2FjaGUuZ2V0KG5hbWVQYXRoKSB8fCB7XG4gICAgICAgIElOVkFMSURBVEVfTkFNRV9QQVRIOiBnZXROYW1lUGF0aChuYW1lKVxuICAgICAgfTtcbiAgICB9KTtcbiAgfTtcblxuICB0aGlzLmdldEZpZWxkc1ZhbHVlID0gZnVuY3Rpb24gKG5hbWVMaXN0LCBmaWx0ZXJGdW5jKSB7XG4gICAgX3RoaXMud2FybmluZ1VuaG9va2VkKCk7XG5cbiAgICBpZiAobmFtZUxpc3QgPT09IHRydWUgJiYgIWZpbHRlckZ1bmMpIHtcbiAgICAgIHJldHVybiBfdGhpcy5zdG9yZTtcbiAgICB9XG5cbiAgICB2YXIgZmllbGRFbnRpdGllcyA9IF90aGlzLmdldEZpZWxkRW50aXRpZXNGb3JOYW1lUGF0aExpc3QoQXJyYXkuaXNBcnJheShuYW1lTGlzdCkgPyBuYW1lTGlzdCA6IG51bGwpO1xuXG4gICAgdmFyIGZpbHRlcmVkTmFtZUxpc3QgPSBbXTtcbiAgICBmaWVsZEVudGl0aWVzLmZvckVhY2goZnVuY3Rpb24gKGVudGl0eSkge1xuICAgICAgdmFyIF9lbnRpdHkkaXNMaXN0RmllbGQ7XG5cbiAgICAgIHZhciBuYW1lUGF0aCA9ICdJTlZBTElEQVRFX05BTUVfUEFUSCcgaW4gZW50aXR5ID8gZW50aXR5LklOVkFMSURBVEVfTkFNRV9QQVRIIDogZW50aXR5LmdldE5hbWVQYXRoKCk7IC8vIElnbm9yZSB3aGVuIGl0J3MgYSBsaXN0IGl0ZW0gYW5kIG5vdCBzcGVjaWZpYyB0aGUgbmFtZVBhdGgsXG4gICAgICAvLyBzaW5jZSBwYXJlbnQgZmllbGQgaXMgYWxyZWFkeSB0YWtlIGluIGNvdW50XG5cbiAgICAgIGlmICghbmFtZUxpc3QgJiYgKChfZW50aXR5JGlzTGlzdEZpZWxkID0gZW50aXR5LmlzTGlzdEZpZWxkKSA9PT0gbnVsbCB8fCBfZW50aXR5JGlzTGlzdEZpZWxkID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZW50aXR5JGlzTGlzdEZpZWxkLmNhbGwoZW50aXR5KSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWZpbHRlckZ1bmMpIHtcbiAgICAgICAgZmlsdGVyZWROYW1lTGlzdC5wdXNoKG5hbWVQYXRoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBtZXRhID0gJ2dldE1ldGEnIGluIGVudGl0eSA/IGVudGl0eS5nZXRNZXRhKCkgOiBudWxsO1xuXG4gICAgICAgIGlmIChmaWx0ZXJGdW5jKG1ldGEpKSB7XG4gICAgICAgICAgZmlsdGVyZWROYW1lTGlzdC5wdXNoKG5hbWVQYXRoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBjbG9uZUJ5TmFtZVBhdGhMaXN0KF90aGlzLnN0b3JlLCBmaWx0ZXJlZE5hbWVMaXN0Lm1hcChnZXROYW1lUGF0aCkpO1xuICB9O1xuXG4gIHRoaXMuZ2V0RmllbGRWYWx1ZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgX3RoaXMud2FybmluZ1VuaG9va2VkKCk7XG5cbiAgICB2YXIgbmFtZVBhdGggPSBnZXROYW1lUGF0aChuYW1lKTtcbiAgICByZXR1cm4gZ2V0VmFsdWUoX3RoaXMuc3RvcmUsIG5hbWVQYXRoKTtcbiAgfTtcblxuICB0aGlzLmdldEZpZWxkc0Vycm9yID0gZnVuY3Rpb24gKG5hbWVMaXN0KSB7XG4gICAgX3RoaXMud2FybmluZ1VuaG9va2VkKCk7XG5cbiAgICB2YXIgZmllbGRFbnRpdGllcyA9IF90aGlzLmdldEZpZWxkRW50aXRpZXNGb3JOYW1lUGF0aExpc3QobmFtZUxpc3QpO1xuXG4gICAgcmV0dXJuIGZpZWxkRW50aXRpZXMubWFwKGZ1bmN0aW9uIChlbnRpdHksIGluZGV4KSB7XG4gICAgICBpZiAoZW50aXR5ICYmICEoJ0lOVkFMSURBVEVfTkFNRV9QQVRIJyBpbiBlbnRpdHkpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbmFtZTogZW50aXR5LmdldE5hbWVQYXRoKCksXG4gICAgICAgICAgZXJyb3JzOiBlbnRpdHkuZ2V0RXJyb3JzKCksXG4gICAgICAgICAgd2FybmluZ3M6IGVudGl0eS5nZXRXYXJuaW5ncygpXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IGdldE5hbWVQYXRoKG5hbWVMaXN0W2luZGV4XSksXG4gICAgICAgIGVycm9yczogW10sXG4gICAgICAgIHdhcm5pbmdzOiBbXVxuICAgICAgfTtcbiAgICB9KTtcbiAgfTtcblxuICB0aGlzLmdldEZpZWxkRXJyb3IgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIF90aGlzLndhcm5pbmdVbmhvb2tlZCgpO1xuXG4gICAgdmFyIG5hbWVQYXRoID0gZ2V0TmFtZVBhdGgobmFtZSk7XG5cbiAgICB2YXIgZmllbGRFcnJvciA9IF90aGlzLmdldEZpZWxkc0Vycm9yKFtuYW1lUGF0aF0pWzBdO1xuXG4gICAgcmV0dXJuIGZpZWxkRXJyb3IuZXJyb3JzO1xuICB9O1xuXG4gIHRoaXMuZ2V0RmllbGRXYXJuaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBfdGhpcy53YXJuaW5nVW5ob29rZWQoKTtcblxuICAgIHZhciBuYW1lUGF0aCA9IGdldE5hbWVQYXRoKG5hbWUpO1xuXG4gICAgdmFyIGZpZWxkRXJyb3IgPSBfdGhpcy5nZXRGaWVsZHNFcnJvcihbbmFtZVBhdGhdKVswXTtcblxuICAgIHJldHVybiBmaWVsZEVycm9yLndhcm5pbmdzO1xuICB9O1xuXG4gIHRoaXMuaXNGaWVsZHNUb3VjaGVkID0gZnVuY3Rpb24gKCkge1xuICAgIF90aGlzLndhcm5pbmdVbmhvb2tlZCgpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHZhciBhcmcwID0gYXJnc1swXSxcbiAgICAgICAgYXJnMSA9IGFyZ3NbMV07XG4gICAgdmFyIG5hbWVQYXRoTGlzdDtcbiAgICB2YXIgaXNBbGxGaWVsZHNUb3VjaGVkID0gZmFsc2U7XG5cbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDApIHtcbiAgICAgIG5hbWVQYXRoTGlzdCA9IG51bGw7XG4gICAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnMCkpIHtcbiAgICAgICAgbmFtZVBhdGhMaXN0ID0gYXJnMC5tYXAoZ2V0TmFtZVBhdGgpO1xuICAgICAgICBpc0FsbEZpZWxkc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5hbWVQYXRoTGlzdCA9IG51bGw7XG4gICAgICAgIGlzQWxsRmllbGRzVG91Y2hlZCA9IGFyZzA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG5hbWVQYXRoTGlzdCA9IGFyZzAubWFwKGdldE5hbWVQYXRoKTtcbiAgICAgIGlzQWxsRmllbGRzVG91Y2hlZCA9IGFyZzE7XG4gICAgfVxuXG4gICAgdmFyIGZpZWxkRW50aXRpZXMgPSBfdGhpcy5nZXRGaWVsZEVudGl0aWVzKHRydWUpO1xuXG4gICAgdmFyIGlzRmllbGRUb3VjaGVkID0gZnVuY3Rpb24gaXNGaWVsZFRvdWNoZWQoZmllbGQpIHtcbiAgICAgIHJldHVybiBmaWVsZC5pc0ZpZWxkVG91Y2hlZCgpO1xuICAgIH07IC8vID09PT09IFdpbGwgZ2V0IGZ1bGx5IGNvbXBhcmUgd2hlbiBub3QgY29uZmlnIG5hbWVQYXRoTGlzdCA9PT09PVxuXG5cbiAgICBpZiAoIW5hbWVQYXRoTGlzdCkge1xuICAgICAgcmV0dXJuIGlzQWxsRmllbGRzVG91Y2hlZCA/IGZpZWxkRW50aXRpZXMuZXZlcnkoaXNGaWVsZFRvdWNoZWQpIDogZmllbGRFbnRpdGllcy5zb21lKGlzRmllbGRUb3VjaGVkKTtcbiAgICB9IC8vIEdlbmVyYXRlIGEgbmVzdCB0cmVlIGZvciB2YWxpZGF0ZVxuXG5cbiAgICB2YXIgbWFwID0gbmV3IE5hbWVNYXAoKTtcbiAgICBuYW1lUGF0aExpc3QuZm9yRWFjaChmdW5jdGlvbiAoc2hvcnROYW1lUGF0aCkge1xuICAgICAgbWFwLnNldChzaG9ydE5hbWVQYXRoLCBbXSk7XG4gICAgfSk7XG4gICAgZmllbGRFbnRpdGllcy5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgdmFyIGZpZWxkTmFtZVBhdGggPSBmaWVsZC5nZXROYW1lUGF0aCgpOyAvLyBGaW5kIG1hdGNoZWQgZW50aXR5IGFuZCBwdXQgaW50byBsaXN0XG5cbiAgICAgIG5hbWVQYXRoTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChzaG9ydE5hbWVQYXRoKSB7XG4gICAgICAgIGlmIChzaG9ydE5hbWVQYXRoLmV2ZXJ5KGZ1bmN0aW9uIChuYW1lVW5pdCwgaSkge1xuICAgICAgICAgIHJldHVybiBmaWVsZE5hbWVQYXRoW2ldID09PSBuYW1lVW5pdDtcbiAgICAgICAgfSkpIHtcbiAgICAgICAgICBtYXAudXBkYXRlKHNob3J0TmFtZVBhdGgsIGZ1bmN0aW9uIChsaXN0KSB7XG4gICAgICAgICAgICByZXR1cm4gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShsaXN0KSwgW2ZpZWxkXSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pOyAvLyBDaGVjayBpZiBOYW1lTWFwIHZhbHVlIGlzIHRvdWNoZWRcblxuICAgIHZhciBpc05hbWVQYXRoTGlzdFRvdWNoZWQgPSBmdW5jdGlvbiBpc05hbWVQYXRoTGlzdFRvdWNoZWQoZW50aXRpZXMpIHtcbiAgICAgIHJldHVybiBlbnRpdGllcy5zb21lKGlzRmllbGRUb3VjaGVkKTtcbiAgICB9O1xuXG4gICAgdmFyIG5hbWVQYXRoTGlzdEVudGl0aWVzID0gbWFwLm1hcChmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICAgIHZhciB2YWx1ZSA9IF9yZWYyLnZhbHVlO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiBpc0FsbEZpZWxkc1RvdWNoZWQgPyBuYW1lUGF0aExpc3RFbnRpdGllcy5ldmVyeShpc05hbWVQYXRoTGlzdFRvdWNoZWQpIDogbmFtZVBhdGhMaXN0RW50aXRpZXMuc29tZShpc05hbWVQYXRoTGlzdFRvdWNoZWQpO1xuICB9O1xuXG4gIHRoaXMuaXNGaWVsZFRvdWNoZWQgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIF90aGlzLndhcm5pbmdVbmhvb2tlZCgpO1xuXG4gICAgcmV0dXJuIF90aGlzLmlzRmllbGRzVG91Y2hlZChbbmFtZV0pO1xuICB9O1xuXG4gIHRoaXMuaXNGaWVsZHNWYWxpZGF0aW5nID0gZnVuY3Rpb24gKG5hbWVMaXN0KSB7XG4gICAgX3RoaXMud2FybmluZ1VuaG9va2VkKCk7XG5cbiAgICB2YXIgZmllbGRFbnRpdGllcyA9IF90aGlzLmdldEZpZWxkRW50aXRpZXMoKTtcblxuICAgIGlmICghbmFtZUxpc3QpIHtcbiAgICAgIHJldHVybiBmaWVsZEVudGl0aWVzLnNvbWUoZnVuY3Rpb24gKHRlc3RGaWVsZCkge1xuICAgICAgICByZXR1cm4gdGVzdEZpZWxkLmlzRmllbGRWYWxpZGF0aW5nKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgbmFtZVBhdGhMaXN0ID0gbmFtZUxpc3QubWFwKGdldE5hbWVQYXRoKTtcbiAgICByZXR1cm4gZmllbGRFbnRpdGllcy5zb21lKGZ1bmN0aW9uICh0ZXN0RmllbGQpIHtcbiAgICAgIHZhciBmaWVsZE5hbWVQYXRoID0gdGVzdEZpZWxkLmdldE5hbWVQYXRoKCk7XG4gICAgICByZXR1cm4gY29udGFpbnNOYW1lUGF0aChuYW1lUGF0aExpc3QsIGZpZWxkTmFtZVBhdGgpICYmIHRlc3RGaWVsZC5pc0ZpZWxkVmFsaWRhdGluZygpO1xuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMuaXNGaWVsZFZhbGlkYXRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIF90aGlzLndhcm5pbmdVbmhvb2tlZCgpO1xuXG4gICAgcmV0dXJuIF90aGlzLmlzRmllbGRzVmFsaWRhdGluZyhbbmFtZV0pO1xuICB9O1xuXG4gIHRoaXMucmVzZXRXaXRoRmllbGRJbml0aWFsVmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGluZm8gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIC8vIENyZWF0ZSBjYWNoZVxuICAgIHZhciBjYWNoZSA9IG5ldyBOYW1lTWFwKCk7XG5cbiAgICB2YXIgZmllbGRFbnRpdGllcyA9IF90aGlzLmdldEZpZWxkRW50aXRpZXModHJ1ZSk7XG5cbiAgICBmaWVsZEVudGl0aWVzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICB2YXIgaW5pdGlhbFZhbHVlID0gZmllbGQucHJvcHMuaW5pdGlhbFZhbHVlO1xuICAgICAgdmFyIG5hbWVQYXRoID0gZmllbGQuZ2V0TmFtZVBhdGgoKTsgLy8gUmVjb3JkIG9ubHkgaWYgaGFzIGBpbml0aWFsVmFsdWVgXG5cbiAgICAgIGlmIChpbml0aWFsVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YXIgcmVjb3JkcyA9IGNhY2hlLmdldChuYW1lUGF0aCkgfHwgbmV3IFNldCgpO1xuICAgICAgICByZWNvcmRzLmFkZCh7XG4gICAgICAgICAgZW50aXR5OiBmaWVsZCxcbiAgICAgICAgICB2YWx1ZTogaW5pdGlhbFZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgICBjYWNoZS5zZXQobmFtZVBhdGgsIHJlY29yZHMpO1xuICAgICAgfVxuICAgIH0pOyAvLyBSZXNldFxuXG4gICAgdmFyIHJlc2V0V2l0aEZpZWxkcyA9IGZ1bmN0aW9uIHJlc2V0V2l0aEZpZWxkcyhlbnRpdGllcykge1xuICAgICAgZW50aXRpZXMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgdmFyIGluaXRpYWxWYWx1ZSA9IGZpZWxkLnByb3BzLmluaXRpYWxWYWx1ZTtcblxuICAgICAgICBpZiAoaW5pdGlhbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YXIgbmFtZVBhdGggPSBmaWVsZC5nZXROYW1lUGF0aCgpO1xuXG4gICAgICAgICAgdmFyIGZvcm1Jbml0aWFsVmFsdWUgPSBfdGhpcy5nZXRJbml0aWFsVmFsdWUobmFtZVBhdGgpO1xuXG4gICAgICAgICAgaWYgKGZvcm1Jbml0aWFsVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gV2FybmluZyBpZiBjb25mbGljdCB3aXRoIGZvcm0gaW5pdGlhbFZhbHVlcyBhbmQgZG8gbm90IG1vZGlmeSB2YWx1ZVxuICAgICAgICAgICAgd2FybmluZyhmYWxzZSwgXCJGb3JtIGFscmVhZHkgc2V0ICdpbml0aWFsVmFsdWVzJyB3aXRoIHBhdGggJ1wiLmNvbmNhdChuYW1lUGF0aC5qb2luKCcuJyksIFwiJy4gRmllbGQgY2FuIG5vdCBvdmVyd3JpdGUgaXQuXCIpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHJlY29yZHMgPSBjYWNoZS5nZXQobmFtZVBhdGgpO1xuXG4gICAgICAgICAgICBpZiAocmVjb3JkcyAmJiByZWNvcmRzLnNpemUgPiAxKSB7XG4gICAgICAgICAgICAgIC8vIFdhcm5pbmcgaWYgbXVsdGlwbGUgZmllbGQgc2V0IGBpbml0aWFsVmFsdWVgYW5kIGRvIG5vdCBtb2RpZnkgdmFsdWVcbiAgICAgICAgICAgICAgd2FybmluZyhmYWxzZSwgXCJNdWx0aXBsZSBGaWVsZCB3aXRoIHBhdGggJ1wiLmNvbmNhdChuYW1lUGF0aC5qb2luKCcuJyksIFwiJyBzZXQgJ2luaXRpYWxWYWx1ZScuIENhbiBub3QgZGVjaWRlIHdoaWNoIG9uZSB0byBwaWNrLlwiKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlY29yZHMpIHtcbiAgICAgICAgICAgICAgdmFyIG9yaWdpblZhbHVlID0gX3RoaXMuZ2V0RmllbGRWYWx1ZShuYW1lUGF0aCk7IC8vIFNldCBgaW5pdGlhbFZhbHVlYFxuXG5cbiAgICAgICAgICAgICAgaWYgKCFpbmZvLnNraXBFeGlzdCB8fCBvcmlnaW5WYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMudXBkYXRlU3RvcmUoc2V0VmFsdWUoX3RoaXMuc3RvcmUsIG5hbWVQYXRoLCBfdG9Db25zdW1hYmxlQXJyYXkocmVjb3JkcylbMF0udmFsdWUpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHZhciByZXF1aXJlZEZpZWxkRW50aXRpZXM7XG5cbiAgICBpZiAoaW5mby5lbnRpdGllcykge1xuICAgICAgcmVxdWlyZWRGaWVsZEVudGl0aWVzID0gaW5mby5lbnRpdGllcztcbiAgICB9IGVsc2UgaWYgKGluZm8ubmFtZVBhdGhMaXN0KSB7XG4gICAgICByZXF1aXJlZEZpZWxkRW50aXRpZXMgPSBbXTtcbiAgICAgIGluZm8ubmFtZVBhdGhMaXN0LmZvckVhY2goZnVuY3Rpb24gKG5hbWVQYXRoKSB7XG4gICAgICAgIHZhciByZWNvcmRzID0gY2FjaGUuZ2V0KG5hbWVQYXRoKTtcblxuICAgICAgICBpZiAocmVjb3Jkcykge1xuICAgICAgICAgIHZhciBfcmVxdWlyZWRGaWVsZEVudGl0aWU7XG5cbiAgICAgICAgICAoX3JlcXVpcmVkRmllbGRFbnRpdGllID0gcmVxdWlyZWRGaWVsZEVudGl0aWVzKS5wdXNoLmFwcGx5KF9yZXF1aXJlZEZpZWxkRW50aXRpZSwgX3RvQ29uc3VtYWJsZUFycmF5KF90b0NvbnN1bWFibGVBcnJheShyZWNvcmRzKS5tYXAoZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgICAgIHJldHVybiByLmVudGl0eTtcbiAgICAgICAgICB9KSkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVxdWlyZWRGaWVsZEVudGl0aWVzID0gZmllbGRFbnRpdGllcztcbiAgICB9XG5cbiAgICByZXNldFdpdGhGaWVsZHMocmVxdWlyZWRGaWVsZEVudGl0aWVzKTtcbiAgfTtcblxuICB0aGlzLnJlc2V0RmllbGRzID0gZnVuY3Rpb24gKG5hbWVMaXN0KSB7XG4gICAgX3RoaXMud2FybmluZ1VuaG9va2VkKCk7XG5cbiAgICB2YXIgcHJldlN0b3JlID0gX3RoaXMuc3RvcmU7XG5cbiAgICBpZiAoIW5hbWVMaXN0KSB7XG4gICAgICBfdGhpcy51cGRhdGVTdG9yZShzZXRWYWx1ZXMoe30sIF90aGlzLmluaXRpYWxWYWx1ZXMpKTtcblxuICAgICAgX3RoaXMucmVzZXRXaXRoRmllbGRJbml0aWFsVmFsdWUoKTtcblxuICAgICAgX3RoaXMubm90aWZ5T2JzZXJ2ZXJzKHByZXZTdG9yZSwgbnVsbCwge1xuICAgICAgICB0eXBlOiAncmVzZXQnXG4gICAgICB9KTtcblxuICAgICAgX3RoaXMubm90aWZ5V2F0Y2goKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gUmVzZXQgYnkgYG5hbWVMaXN0YFxuXG5cbiAgICB2YXIgbmFtZVBhdGhMaXN0ID0gbmFtZUxpc3QubWFwKGdldE5hbWVQYXRoKTtcbiAgICBuYW1lUGF0aExpc3QuZm9yRWFjaChmdW5jdGlvbiAobmFtZVBhdGgpIHtcbiAgICAgIHZhciBpbml0aWFsVmFsdWUgPSBfdGhpcy5nZXRJbml0aWFsVmFsdWUobmFtZVBhdGgpO1xuXG4gICAgICBfdGhpcy51cGRhdGVTdG9yZShzZXRWYWx1ZShfdGhpcy5zdG9yZSwgbmFtZVBhdGgsIGluaXRpYWxWYWx1ZSkpO1xuICAgIH0pO1xuXG4gICAgX3RoaXMucmVzZXRXaXRoRmllbGRJbml0aWFsVmFsdWUoe1xuICAgICAgbmFtZVBhdGhMaXN0OiBuYW1lUGF0aExpc3RcbiAgICB9KTtcblxuICAgIF90aGlzLm5vdGlmeU9ic2VydmVycyhwcmV2U3RvcmUsIG5hbWVQYXRoTGlzdCwge1xuICAgICAgdHlwZTogJ3Jlc2V0J1xuICAgIH0pO1xuXG4gICAgX3RoaXMubm90aWZ5V2F0Y2gobmFtZVBhdGhMaXN0KTtcbiAgfTtcblxuICB0aGlzLnNldEZpZWxkcyA9IGZ1bmN0aW9uIChmaWVsZHMpIHtcbiAgICBfdGhpcy53YXJuaW5nVW5ob29rZWQoKTtcblxuICAgIHZhciBwcmV2U3RvcmUgPSBfdGhpcy5zdG9yZTtcbiAgICB2YXIgbmFtZVBhdGhMaXN0ID0gW107XG4gICAgZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkRGF0YSkge1xuICAgICAgdmFyIG5hbWUgPSBmaWVsZERhdGEubmFtZSxcbiAgICAgICAgICBlcnJvcnMgPSBmaWVsZERhdGEuZXJyb3JzLFxuICAgICAgICAgIGRhdGEgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoZmllbGREYXRhLCBfZXhjbHVkZWQpO1xuXG4gICAgICB2YXIgbmFtZVBhdGggPSBnZXROYW1lUGF0aChuYW1lKTtcbiAgICAgIG5hbWVQYXRoTGlzdC5wdXNoKG5hbWVQYXRoKTsgLy8gVmFsdWVcblxuICAgICAgaWYgKCd2YWx1ZScgaW4gZGF0YSkge1xuICAgICAgICBfdGhpcy51cGRhdGVTdG9yZShzZXRWYWx1ZShfdGhpcy5zdG9yZSwgbmFtZVBhdGgsIGRhdGEudmFsdWUpKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMubm90aWZ5T2JzZXJ2ZXJzKHByZXZTdG9yZSwgW25hbWVQYXRoXSwge1xuICAgICAgICB0eXBlOiAnc2V0RmllbGQnLFxuICAgICAgICBkYXRhOiBmaWVsZERhdGFcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX3RoaXMubm90aWZ5V2F0Y2gobmFtZVBhdGhMaXN0KTtcbiAgfTtcblxuICB0aGlzLmdldEZpZWxkcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZW50aXRpZXMgPSBfdGhpcy5nZXRGaWVsZEVudGl0aWVzKHRydWUpO1xuXG4gICAgdmFyIGZpZWxkcyA9IGVudGl0aWVzLm1hcChmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHZhciBuYW1lUGF0aCA9IGZpZWxkLmdldE5hbWVQYXRoKCk7XG4gICAgICB2YXIgbWV0YSA9IGZpZWxkLmdldE1ldGEoKTtcblxuICAgICAgdmFyIGZpZWxkRGF0YSA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgbWV0YSksIHt9LCB7XG4gICAgICAgIG5hbWU6IG5hbWVQYXRoLFxuICAgICAgICB2YWx1ZTogX3RoaXMuZ2V0RmllbGRWYWx1ZShuYW1lUGF0aClcbiAgICAgIH0pO1xuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZmllbGREYXRhLCAnb3JpZ2luUkNGaWVsZCcsIHtcbiAgICAgICAgdmFsdWU6IHRydWVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZpZWxkRGF0YTtcbiAgICB9KTtcbiAgICByZXR1cm4gZmllbGRzO1xuICB9O1xuXG4gIHRoaXMuaW5pdEVudGl0eVZhbHVlID0gZnVuY3Rpb24gKGVudGl0eSkge1xuICAgIHZhciBpbml0aWFsVmFsdWUgPSBlbnRpdHkucHJvcHMuaW5pdGlhbFZhbHVlO1xuXG4gICAgaWYgKGluaXRpYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgbmFtZVBhdGggPSBlbnRpdHkuZ2V0TmFtZVBhdGgoKTtcbiAgICAgIHZhciBwcmV2VmFsdWUgPSBnZXRWYWx1ZShfdGhpcy5zdG9yZSwgbmFtZVBhdGgpO1xuXG4gICAgICBpZiAocHJldlZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgX3RoaXMudXBkYXRlU3RvcmUoc2V0VmFsdWUoX3RoaXMuc3RvcmUsIG5hbWVQYXRoLCBpbml0aWFsVmFsdWUpKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdGhpcy5pc01lcmdlZFByZXNlcnZlID0gZnVuY3Rpb24gKGZpZWxkUHJlc2VydmUpIHtcbiAgICB2YXIgbWVyZ2VkUHJlc2VydmUgPSBmaWVsZFByZXNlcnZlICE9PSB1bmRlZmluZWQgPyBmaWVsZFByZXNlcnZlIDogX3RoaXMucHJlc2VydmU7XG4gICAgcmV0dXJuIG1lcmdlZFByZXNlcnZlICE9PSBudWxsICYmIG1lcmdlZFByZXNlcnZlICE9PSB2b2lkIDAgPyBtZXJnZWRQcmVzZXJ2ZSA6IHRydWU7XG4gIH07XG5cbiAgdGhpcy5yZWdpc3RlckZpZWxkID0gZnVuY3Rpb24gKGVudGl0eSkge1xuICAgIF90aGlzLmZpZWxkRW50aXRpZXMucHVzaChlbnRpdHkpO1xuXG4gICAgdmFyIG5hbWVQYXRoID0gZW50aXR5LmdldE5hbWVQYXRoKCk7XG5cbiAgICBfdGhpcy5ub3RpZnlXYXRjaChbbmFtZVBhdGhdKTsgLy8gU2V0IGluaXRpYWwgdmFsdWVzXG5cblxuICAgIGlmIChlbnRpdHkucHJvcHMuaW5pdGlhbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBwcmV2U3RvcmUgPSBfdGhpcy5zdG9yZTtcblxuICAgICAgX3RoaXMucmVzZXRXaXRoRmllbGRJbml0aWFsVmFsdWUoe1xuICAgICAgICBlbnRpdGllczogW2VudGl0eV0sXG4gICAgICAgIHNraXBFeGlzdDogdHJ1ZVxuICAgICAgfSk7XG5cbiAgICAgIF90aGlzLm5vdGlmeU9ic2VydmVycyhwcmV2U3RvcmUsIFtlbnRpdHkuZ2V0TmFtZVBhdGgoKV0sIHtcbiAgICAgICAgdHlwZTogJ3ZhbHVlVXBkYXRlJyxcbiAgICAgICAgc291cmNlOiAnaW50ZXJuYWwnXG4gICAgICB9KTtcbiAgICB9IC8vIHVuLXJlZ2lzdGVyIGZpZWxkIGNhbGxiYWNrXG5cblxuICAgIHJldHVybiBmdW5jdGlvbiAoaXNMaXN0RmllbGQsIHByZXNlcnZlKSB7XG4gICAgICB2YXIgc3ViTmFtZVBhdGggPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IFtdO1xuICAgICAgX3RoaXMuZmllbGRFbnRpdGllcyA9IF90aGlzLmZpZWxkRW50aXRpZXMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBlbnRpdHk7XG4gICAgICB9KTsgLy8gQ2xlYW4gdXAgc3RvcmUgdmFsdWUgaWYgbm90IHByZXNlcnZlXG5cbiAgICAgIGlmICghX3RoaXMuaXNNZXJnZWRQcmVzZXJ2ZShwcmVzZXJ2ZSkgJiYgKCFpc0xpc3RGaWVsZCB8fCBzdWJOYW1lUGF0aC5sZW5ndGggPiAxKSkge1xuICAgICAgICB2YXIgZGVmYXVsdFZhbHVlID0gaXNMaXN0RmllbGQgPyB1bmRlZmluZWQgOiBfdGhpcy5nZXRJbml0aWFsVmFsdWUobmFtZVBhdGgpO1xuXG4gICAgICAgIGlmIChuYW1lUGF0aC5sZW5ndGggJiYgX3RoaXMuZ2V0RmllbGRWYWx1ZShuYW1lUGF0aCkgIT09IGRlZmF1bHRWYWx1ZSAmJiBfdGhpcy5maWVsZEVudGl0aWVzLmV2ZXJ5KGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgICAgIHJldHVybiAoLy8gT25seSByZXNldCB3aGVuIG5vIG5hbWVQYXRoIGV4aXN0XG4gICAgICAgICAgICAhbWF0Y2hOYW1lUGF0aChmaWVsZC5nZXROYW1lUGF0aCgpLCBuYW1lUGF0aClcbiAgICAgICAgICApO1xuICAgICAgICB9KSkge1xuICAgICAgICAgIHZhciBfcHJldlN0b3JlID0gX3RoaXMuc3RvcmU7XG5cbiAgICAgICAgICBfdGhpcy51cGRhdGVTdG9yZShzZXRWYWx1ZShfcHJldlN0b3JlLCBuYW1lUGF0aCwgZGVmYXVsdFZhbHVlLCB0cnVlKSk7IC8vIE5vdGlmeSB0aGF0IGZpZWxkIGlzIHVubW91bnRcblxuXG4gICAgICAgICAgX3RoaXMubm90aWZ5T2JzZXJ2ZXJzKF9wcmV2U3RvcmUsIFtuYW1lUGF0aF0sIHtcbiAgICAgICAgICAgIHR5cGU6ICdyZW1vdmUnXG4gICAgICAgICAgfSk7IC8vIERlcGVuZGVuY2llcyB1cGRhdGVcblxuXG4gICAgICAgICAgX3RoaXMudHJpZ2dlckRlcGVuZGVuY2llc1VwZGF0ZShfcHJldlN0b3JlLCBuYW1lUGF0aCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgX3RoaXMubm90aWZ5V2F0Y2goW25hbWVQYXRoXSk7XG4gICAgfTtcbiAgfTtcblxuICB0aGlzLmRpc3BhdGNoID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgIGNhc2UgJ3VwZGF0ZVZhbHVlJzpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBuYW1lUGF0aCA9IGFjdGlvbi5uYW1lUGF0aCxcbiAgICAgICAgICAgICAgdmFsdWUgPSBhY3Rpb24udmFsdWU7XG5cbiAgICAgICAgICBfdGhpcy51cGRhdGVWYWx1ZShuYW1lUGF0aCwgdmFsdWUpO1xuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSAndmFsaWRhdGVGaWVsZCc6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgX25hbWVQYXRoID0gYWN0aW9uLm5hbWVQYXRoLFxuICAgICAgICAgICAgICB0cmlnZ2VyTmFtZSA9IGFjdGlvbi50cmlnZ2VyTmFtZTtcblxuICAgICAgICAgIF90aGlzLnZhbGlkYXRlRmllbGRzKFtfbmFtZVBhdGhdLCB7XG4gICAgICAgICAgICB0cmlnZ2VyTmFtZTogdHJpZ2dlck5hbWVcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGRlZmF1bHQ6IC8vIEN1cnJlbnRseSB3ZSBkb24ndCBoYXZlIG90aGVyIGFjdGlvbi4gRG8gbm90aGluZy5cblxuICAgIH1cbiAgfTtcblxuICB0aGlzLm5vdGlmeU9ic2VydmVycyA9IGZ1bmN0aW9uIChwcmV2U3RvcmUsIG5hbWVQYXRoTGlzdCwgaW5mbykge1xuICAgIGlmIChfdGhpcy5zdWJzY3JpYmFibGUpIHtcbiAgICAgIHZhciBtZXJnZWRJbmZvID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBpbmZvKSwge30sIHtcbiAgICAgICAgc3RvcmU6IF90aGlzLmdldEZpZWxkc1ZhbHVlKHRydWUpXG4gICAgICB9KTtcblxuICAgICAgX3RoaXMuZ2V0RmllbGRFbnRpdGllcygpLmZvckVhY2goZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICAgIHZhciBvblN0b3JlQ2hhbmdlID0gX3JlZjMub25TdG9yZUNoYW5nZTtcbiAgICAgICAgb25TdG9yZUNoYW5nZShwcmV2U3RvcmUsIG5hbWVQYXRoTGlzdCwgbWVyZ2VkSW5mbyk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgX3RoaXMuZm9yY2VSb290VXBkYXRlKCk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMudHJpZ2dlckRlcGVuZGVuY2llc1VwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2U3RvcmUsIG5hbWVQYXRoKSB7XG4gICAgdmFyIGNoaWxkcmVuRmllbGRzID0gX3RoaXMuZ2V0RGVwZW5kZW5jeUNoaWxkcmVuRmllbGRzKG5hbWVQYXRoKTtcblxuICAgIGlmIChjaGlsZHJlbkZpZWxkcy5sZW5ndGgpIHtcbiAgICAgIF90aGlzLnZhbGlkYXRlRmllbGRzKGNoaWxkcmVuRmllbGRzKTtcbiAgICB9XG5cbiAgICBfdGhpcy5ub3RpZnlPYnNlcnZlcnMocHJldlN0b3JlLCBjaGlsZHJlbkZpZWxkcywge1xuICAgICAgdHlwZTogJ2RlcGVuZGVuY2llc1VwZGF0ZScsXG4gICAgICByZWxhdGVkRmllbGRzOiBbbmFtZVBhdGhdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoY2hpbGRyZW5GaWVsZHMpKVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNoaWxkcmVuRmllbGRzO1xuICB9O1xuXG4gIHRoaXMudXBkYXRlVmFsdWUgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgbmFtZVBhdGggPSBnZXROYW1lUGF0aChuYW1lKTtcbiAgICB2YXIgcHJldlN0b3JlID0gX3RoaXMuc3RvcmU7XG5cbiAgICBfdGhpcy51cGRhdGVTdG9yZShzZXRWYWx1ZShfdGhpcy5zdG9yZSwgbmFtZVBhdGgsIHZhbHVlKSk7XG5cbiAgICBfdGhpcy5ub3RpZnlPYnNlcnZlcnMocHJldlN0b3JlLCBbbmFtZVBhdGhdLCB7XG4gICAgICB0eXBlOiAndmFsdWVVcGRhdGUnLFxuICAgICAgc291cmNlOiAnaW50ZXJuYWwnXG4gICAgfSk7XG5cbiAgICBfdGhpcy5ub3RpZnlXYXRjaChbbmFtZVBhdGhdKTsgLy8gRGVwZW5kZW5jaWVzIHVwZGF0ZVxuXG5cbiAgICB2YXIgY2hpbGRyZW5GaWVsZHMgPSBfdGhpcy50cmlnZ2VyRGVwZW5kZW5jaWVzVXBkYXRlKHByZXZTdG9yZSwgbmFtZVBhdGgpOyAvLyB0cmlnZ2VyIGNhbGxiYWNrIGZ1bmN0aW9uXG5cblxuICAgIHZhciBvblZhbHVlc0NoYW5nZSA9IF90aGlzLmNhbGxiYWNrcy5vblZhbHVlc0NoYW5nZTtcblxuICAgIGlmIChvblZhbHVlc0NoYW5nZSkge1xuICAgICAgdmFyIGNoYW5nZWRWYWx1ZXMgPSBjbG9uZUJ5TmFtZVBhdGhMaXN0KF90aGlzLnN0b3JlLCBbbmFtZVBhdGhdKTtcbiAgICAgIG9uVmFsdWVzQ2hhbmdlKGNoYW5nZWRWYWx1ZXMsIF90aGlzLmdldEZpZWxkc1ZhbHVlKCkpO1xuICAgIH1cblxuICAgIF90aGlzLnRyaWdnZXJPbkZpZWxkc0NoYW5nZShbbmFtZVBhdGhdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoY2hpbGRyZW5GaWVsZHMpKSk7XG4gIH07XG5cbiAgdGhpcy5zZXRGaWVsZHNWYWx1ZSA9IGZ1bmN0aW9uIChzdG9yZSkge1xuICAgIF90aGlzLndhcm5pbmdVbmhvb2tlZCgpO1xuXG4gICAgdmFyIHByZXZTdG9yZSA9IF90aGlzLnN0b3JlO1xuXG4gICAgaWYgKHN0b3JlKSB7XG4gICAgICB2YXIgbmV4dFN0b3JlID0gc2V0VmFsdWVzKF90aGlzLnN0b3JlLCBzdG9yZSk7XG5cbiAgICAgIF90aGlzLnVwZGF0ZVN0b3JlKG5leHRTdG9yZSk7XG4gICAgfVxuXG4gICAgX3RoaXMubm90aWZ5T2JzZXJ2ZXJzKHByZXZTdG9yZSwgbnVsbCwge1xuICAgICAgdHlwZTogJ3ZhbHVlVXBkYXRlJyxcbiAgICAgIHNvdXJjZTogJ2V4dGVybmFsJ1xuICAgIH0pO1xuXG4gICAgX3RoaXMubm90aWZ5V2F0Y2goKTtcbiAgfTtcblxuICB0aGlzLmdldERlcGVuZGVuY3lDaGlsZHJlbkZpZWxkcyA9IGZ1bmN0aW9uIChyb290TmFtZVBhdGgpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBuZXcgU2V0KCk7XG4gICAgdmFyIGNoaWxkcmVuRmllbGRzID0gW107XG4gICAgdmFyIGRlcGVuZGVuY2llczJmaWVsZHMgPSBuZXcgTmFtZU1hcCgpO1xuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlIG1hcHNcbiAgICAgKiBDYW4gdXNlIGNhY2hlIHRvIHNhdmUgcGVyZiBpZiB1c2VyIHJlcG9ydCBwZXJmb3JtYW5jZSBpc3N1ZSB3aXRoIHRoaXNcbiAgICAgKi9cblxuICAgIF90aGlzLmdldEZpZWxkRW50aXRpZXMoKS5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgdmFyIGRlcGVuZGVuY2llcyA9IGZpZWxkLnByb3BzLmRlcGVuZGVuY2llcztcbiAgICAgIChkZXBlbmRlbmNpZXMgfHwgW10pLmZvckVhY2goZnVuY3Rpb24gKGRlcGVuZGVuY3kpIHtcbiAgICAgICAgdmFyIGRlcGVuZGVuY3lOYW1lUGF0aCA9IGdldE5hbWVQYXRoKGRlcGVuZGVuY3kpO1xuICAgICAgICBkZXBlbmRlbmNpZXMyZmllbGRzLnVwZGF0ZShkZXBlbmRlbmN5TmFtZVBhdGgsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgZmllbGRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBuZXcgU2V0KCk7XG4gICAgICAgICAgZmllbGRzLmFkZChmaWVsZCk7XG4gICAgICAgICAgcmV0dXJuIGZpZWxkcztcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHZhciBmaWxsQ2hpbGRyZW4gPSBmdW5jdGlvbiBmaWxsQ2hpbGRyZW4obmFtZVBhdGgpIHtcbiAgICAgIHZhciBmaWVsZHMgPSBkZXBlbmRlbmNpZXMyZmllbGRzLmdldChuYW1lUGF0aCkgfHwgbmV3IFNldCgpO1xuICAgICAgZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgIGlmICghY2hpbGRyZW4uaGFzKGZpZWxkKSkge1xuICAgICAgICAgIGNoaWxkcmVuLmFkZChmaWVsZCk7XG4gICAgICAgICAgdmFyIGZpZWxkTmFtZVBhdGggPSBmaWVsZC5nZXROYW1lUGF0aCgpO1xuXG4gICAgICAgICAgaWYgKGZpZWxkLmlzRmllbGREaXJ0eSgpICYmIGZpZWxkTmFtZVBhdGgubGVuZ3RoKSB7XG4gICAgICAgICAgICBjaGlsZHJlbkZpZWxkcy5wdXNoKGZpZWxkTmFtZVBhdGgpO1xuICAgICAgICAgICAgZmlsbENoaWxkcmVuKGZpZWxkTmFtZVBhdGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGZpbGxDaGlsZHJlbihyb290TmFtZVBhdGgpO1xuICAgIHJldHVybiBjaGlsZHJlbkZpZWxkcztcbiAgfTtcblxuICB0aGlzLnRyaWdnZXJPbkZpZWxkc0NoYW5nZSA9IGZ1bmN0aW9uIChuYW1lUGF0aExpc3QsIGZpbGVkRXJyb3JzKSB7XG4gICAgdmFyIG9uRmllbGRzQ2hhbmdlID0gX3RoaXMuY2FsbGJhY2tzLm9uRmllbGRzQ2hhbmdlO1xuXG4gICAgaWYgKG9uRmllbGRzQ2hhbmdlKSB7XG4gICAgICB2YXIgZmllbGRzID0gX3RoaXMuZ2V0RmllbGRzKCk7XG4gICAgICAvKipcbiAgICAgICAqIEZpbGwgZXJyb3JzIHNpbmNlIGBmaWVsZHNgIG1heSBiZSByZXBsYWNlZCBieSBjb250cm9sbGVkIGZpZWxkc1xuICAgICAgICovXG5cblxuICAgICAgaWYgKGZpbGVkRXJyb3JzKSB7XG4gICAgICAgIHZhciBjYWNoZSA9IG5ldyBOYW1lTWFwKCk7XG4gICAgICAgIGZpbGVkRXJyb3JzLmZvckVhY2goZnVuY3Rpb24gKF9yZWY0KSB7XG4gICAgICAgICAgdmFyIG5hbWUgPSBfcmVmNC5uYW1lLFxuICAgICAgICAgICAgICBlcnJvcnMgPSBfcmVmNC5lcnJvcnM7XG4gICAgICAgICAgY2FjaGUuc2V0KG5hbWUsIGVycm9ycyk7XG4gICAgICAgIH0pO1xuICAgICAgICBmaWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgICBmaWVsZC5lcnJvcnMgPSBjYWNoZS5nZXQoZmllbGQubmFtZSkgfHwgZmllbGQuZXJyb3JzO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNoYW5nZWRGaWVsZHMgPSBmaWVsZHMuZmlsdGVyKGZ1bmN0aW9uIChfcmVmNSkge1xuICAgICAgICB2YXIgZmllbGROYW1lID0gX3JlZjUubmFtZTtcbiAgICAgICAgcmV0dXJuIGNvbnRhaW5zTmFtZVBhdGgobmFtZVBhdGhMaXN0LCBmaWVsZE5hbWUpO1xuICAgICAgfSk7XG4gICAgICBvbkZpZWxkc0NoYW5nZShjaGFuZ2VkRmllbGRzLCBmaWVsZHMpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLnZhbGlkYXRlRmllbGRzID0gZnVuY3Rpb24gKG5hbWVMaXN0LCBvcHRpb25zKSB7XG4gICAgX3RoaXMud2FybmluZ1VuaG9va2VkKCk7XG5cbiAgICB2YXIgcHJvdmlkZU5hbWVMaXN0ID0gISFuYW1lTGlzdDtcbiAgICB2YXIgbmFtZVBhdGhMaXN0ID0gcHJvdmlkZU5hbWVMaXN0ID8gbmFtZUxpc3QubWFwKGdldE5hbWVQYXRoKSA6IFtdOyAvLyBDb2xsZWN0IHJlc3VsdCBpbiBwcm9taXNlIGxpc3RcblxuICAgIHZhciBwcm9taXNlTGlzdCA9IFtdO1xuXG4gICAgX3RoaXMuZ2V0RmllbGRFbnRpdGllcyh0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgLy8gQWRkIGZpZWxkIGlmIG5vdCBwcm92aWRlIGBuYW1lTGlzdGBcbiAgICAgIGlmICghcHJvdmlkZU5hbWVMaXN0KSB7XG4gICAgICAgIG5hbWVQYXRoTGlzdC5wdXNoKGZpZWxkLmdldE5hbWVQYXRoKCkpO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBSZWN1cnNpdmUgdmFsaWRhdGUgaWYgY29uZmlndXJlZC5cbiAgICAgICAqIFRPRE86IHBlcmYgaW1wcm92ZW1lbnQgQHpvbWJpZUpcbiAgICAgICAqL1xuXG5cbiAgICAgIGlmICgob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnJlY3Vyc2l2ZSkgJiYgcHJvdmlkZU5hbWVMaXN0KSB7XG4gICAgICAgIHZhciBuYW1lUGF0aCA9IGZpZWxkLmdldE5hbWVQYXRoKCk7XG5cbiAgICAgICAgaWYgKCAvLyBuYW1lTGlzdFtpXSA9PT0gdW5kZWZpbmVkIOivtOaYjuaYr+S7pSBuYW1lTGlzdCDlvIDlpLTnmoRcbiAgICAgICAgLy8gWyduYW1lJ10gLT4gWyduYW1lJywnbGlzdCddXG4gICAgICAgIG5hbWVQYXRoLmV2ZXJ5KGZ1bmN0aW9uIChuYW1lVW5pdCwgaSkge1xuICAgICAgICAgIHJldHVybiBuYW1lTGlzdFtpXSA9PT0gbmFtZVVuaXQgfHwgbmFtZUxpc3RbaV0gPT09IHVuZGVmaW5lZDtcbiAgICAgICAgfSkpIHtcbiAgICAgICAgICBuYW1lUGF0aExpc3QucHVzaChuYW1lUGF0aCk7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gU2tpcCBpZiB3aXRob3V0IHJ1bGVcblxuXG4gICAgICBpZiAoIWZpZWxkLnByb3BzLnJ1bGVzIHx8ICFmaWVsZC5wcm9wcy5ydWxlcy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgZmllbGROYW1lUGF0aCA9IGZpZWxkLmdldE5hbWVQYXRoKCk7IC8vIEFkZCBmaWVsZCB2YWxpZGF0ZSBydWxlIGluIHRvIHByb21pc2UgbGlzdFxuXG4gICAgICBpZiAoIXByb3ZpZGVOYW1lTGlzdCB8fCBjb250YWluc05hbWVQYXRoKG5hbWVQYXRoTGlzdCwgZmllbGROYW1lUGF0aCkpIHtcbiAgICAgICAgdmFyIHByb21pc2UgPSBmaWVsZC52YWxpZGF0ZVJ1bGVzKF9vYmplY3RTcHJlYWQoe1xuICAgICAgICAgIHZhbGlkYXRlTWVzc2FnZXM6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZGVmYXVsdFZhbGlkYXRlTWVzc2FnZXMpLCBfdGhpcy52YWxpZGF0ZU1lc3NhZ2VzKVxuICAgICAgICB9LCBvcHRpb25zKSk7IC8vIFdyYXAgcHJvbWlzZSB3aXRoIGZpZWxkXG5cbiAgICAgICAgcHJvbWlzZUxpc3QucHVzaChwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiBmaWVsZE5hbWVQYXRoLFxuICAgICAgICAgICAgZXJyb3JzOiBbXSxcbiAgICAgICAgICAgIHdhcm5pbmdzOiBbXVxuICAgICAgICAgIH07XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChydWxlRXJyb3JzKSB7XG4gICAgICAgICAgdmFyIG1lcmdlZEVycm9ycyA9IFtdO1xuICAgICAgICAgIHZhciBtZXJnZWRXYXJuaW5ncyA9IFtdO1xuICAgICAgICAgIHJ1bGVFcnJvcnMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjYpIHtcbiAgICAgICAgICAgIHZhciB3YXJuaW5nT25seSA9IF9yZWY2LnJ1bGUud2FybmluZ09ubHksXG4gICAgICAgICAgICAgICAgZXJyb3JzID0gX3JlZjYuZXJyb3JzO1xuXG4gICAgICAgICAgICBpZiAod2FybmluZ09ubHkpIHtcbiAgICAgICAgICAgICAgbWVyZ2VkV2FybmluZ3MucHVzaC5hcHBseShtZXJnZWRXYXJuaW5ncywgX3RvQ29uc3VtYWJsZUFycmF5KGVycm9ycykpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbWVyZ2VkRXJyb3JzLnB1c2guYXBwbHkobWVyZ2VkRXJyb3JzLCBfdG9Db25zdW1hYmxlQXJyYXkoZXJyb3JzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAobWVyZ2VkRXJyb3JzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHtcbiAgICAgICAgICAgICAgbmFtZTogZmllbGROYW1lUGF0aCxcbiAgICAgICAgICAgICAgZXJyb3JzOiBtZXJnZWRFcnJvcnMsXG4gICAgICAgICAgICAgIHdhcm5pbmdzOiBtZXJnZWRXYXJuaW5nc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6IGZpZWxkTmFtZVBhdGgsXG4gICAgICAgICAgICBlcnJvcnM6IG1lcmdlZEVycm9ycyxcbiAgICAgICAgICAgIHdhcm5pbmdzOiBtZXJnZWRXYXJuaW5nc1xuICAgICAgICAgIH07XG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciBzdW1tYXJ5UHJvbWlzZSA9IGFsbFByb21pc2VGaW5pc2gocHJvbWlzZUxpc3QpO1xuICAgIF90aGlzLmxhc3RWYWxpZGF0ZVByb21pc2UgPSBzdW1tYXJ5UHJvbWlzZTsgLy8gTm90aWZ5IGZpZWxkcyB3aXRoIHJ1bGUgdGhhdCB2YWxpZGF0ZSBoYXMgZmluaXNoZWQgYW5kIG5lZWQgdXBkYXRlXG5cbiAgICBzdW1tYXJ5UHJvbWlzZS5jYXRjaChmdW5jdGlvbiAocmVzdWx0cykge1xuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0cykge1xuICAgICAgdmFyIHJlc3VsdE5hbWVQYXRoTGlzdCA9IHJlc3VsdHMubWFwKGZ1bmN0aW9uIChfcmVmNykge1xuICAgICAgICB2YXIgbmFtZSA9IF9yZWY3Lm5hbWU7XG4gICAgICAgIHJldHVybiBuYW1lO1xuICAgICAgfSk7XG5cbiAgICAgIF90aGlzLm5vdGlmeU9ic2VydmVycyhfdGhpcy5zdG9yZSwgcmVzdWx0TmFtZVBhdGhMaXN0LCB7XG4gICAgICAgIHR5cGU6ICd2YWxpZGF0ZUZpbmlzaCdcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy50cmlnZ2VyT25GaWVsZHNDaGFuZ2UocmVzdWx0TmFtZVBhdGhMaXN0LCByZXN1bHRzKTtcbiAgICB9KTtcbiAgICB2YXIgcmV0dXJuUHJvbWlzZSA9IHN1bW1hcnlQcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLmxhc3RWYWxpZGF0ZVByb21pc2UgPT09IHN1bW1hcnlQcm9taXNlKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoX3RoaXMuZ2V0RmllbGRzVmFsdWUobmFtZVBhdGhMaXN0KSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChbXSk7XG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlc3VsdHMpIHtcbiAgICAgIHZhciBlcnJvckxpc3QgPSByZXN1bHRzLmZpbHRlcihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgIHJldHVybiByZXN1bHQgJiYgcmVzdWx0LmVycm9ycy5sZW5ndGg7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh7XG4gICAgICAgIHZhbHVlczogX3RoaXMuZ2V0RmllbGRzVmFsdWUobmFtZVBhdGhMaXN0KSxcbiAgICAgICAgZXJyb3JGaWVsZHM6IGVycm9yTGlzdCxcbiAgICAgICAgb3V0T2ZEYXRlOiBfdGhpcy5sYXN0VmFsaWRhdGVQcm9taXNlICE9PSBzdW1tYXJ5UHJvbWlzZVxuICAgICAgfSk7XG4gICAgfSk7IC8vIERvIG5vdCB0aHJvdyBpbiBjb25zb2xlXG5cbiAgICByZXR1cm5Qcm9taXNlLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gZTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0dXJuUHJvbWlzZTtcbiAgfTtcblxuICB0aGlzLnN1Ym1pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICBfdGhpcy53YXJuaW5nVW5ob29rZWQoKTtcblxuICAgIF90aGlzLnZhbGlkYXRlRmllbGRzKCkudGhlbihmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgICB2YXIgb25GaW5pc2ggPSBfdGhpcy5jYWxsYmFja3Mub25GaW5pc2g7XG5cbiAgICAgIGlmIChvbkZpbmlzaCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIG9uRmluaXNoKHZhbHVlcyk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIC8vIFNob3VsZCBwcmludCBlcnJvciBpZiB1c2VyIGBvbkZpbmlzaGAgY2FsbGJhY2sgZmFpbGVkXG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBvbkZpbmlzaEZhaWxlZCA9IF90aGlzLmNhbGxiYWNrcy5vbkZpbmlzaEZhaWxlZDtcblxuICAgICAgaWYgKG9uRmluaXNoRmFpbGVkKSB7XG4gICAgICAgIG9uRmluaXNoRmFpbGVkKGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMuZm9yY2VSb290VXBkYXRlID0gZm9yY2VSb290VXBkYXRlO1xufSk7XG5cbmZ1bmN0aW9uIHVzZUZvcm0oZm9ybSkge1xuICB2YXIgZm9ybVJlZiA9IFJlYWN0LnVzZVJlZigpO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZSh7fSksXG4gICAgICBfUmVhY3QkdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlLCAyKSxcbiAgICAgIGZvcmNlVXBkYXRlID0gX1JlYWN0JHVzZVN0YXRlMlsxXTtcblxuICBpZiAoIWZvcm1SZWYuY3VycmVudCkge1xuICAgIGlmIChmb3JtKSB7XG4gICAgICBmb3JtUmVmLmN1cnJlbnQgPSBmb3JtO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDcmVhdGUgYSBuZXcgRm9ybVN0b3JlIGlmIG5vdCBwcm92aWRlZFxuICAgICAgdmFyIGZvcmNlUmVSZW5kZXIgPSBmdW5jdGlvbiBmb3JjZVJlUmVuZGVyKCkge1xuICAgICAgICBmb3JjZVVwZGF0ZSh7fSk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgZm9ybVN0b3JlID0gbmV3IEZvcm1TdG9yZShmb3JjZVJlUmVuZGVyKTtcbiAgICAgIGZvcm1SZWYuY3VycmVudCA9IGZvcm1TdG9yZS5nZXRGb3JtKCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFtmb3JtUmVmLmN1cnJlbnRdO1xufVxuXG5leHBvcnQgZGVmYXVsdCB1c2VGb3JtOyIsImV4cG9ydCBmdW5jdGlvbiBhbGxQcm9taXNlRmluaXNoKHByb21pc2VMaXN0KSB7XG4gIHZhciBoYXNFcnJvciA9IGZhbHNlO1xuICB2YXIgY291bnQgPSBwcm9taXNlTGlzdC5sZW5ndGg7XG4gIHZhciByZXN1bHRzID0gW107XG5cbiAgaWYgKCFwcm9taXNlTGlzdC5sZW5ndGgpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFtdKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgcHJvbWlzZUxpc3QuZm9yRWFjaChmdW5jdGlvbiAocHJvbWlzZSwgaW5kZXgpIHtcbiAgICAgIHByb21pc2UuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaGFzRXJyb3IgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZTtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICBjb3VudCAtPSAxO1xuICAgICAgICByZXN1bHRzW2luZGV4XSA9IHJlc3VsdDtcblxuICAgICAgICBpZiAoY291bnQgPiAwKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc0Vycm9yKSB7XG4gICAgICAgICAgcmVqZWN0KHJlc3VsdHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzb2x2ZShyZXN1bHRzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn0iLCJpbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbnZhciBGb3JtQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHtcbiAgdHJpZ2dlckZvcm1DaGFuZ2U6IGZ1bmN0aW9uIHRyaWdnZXJGb3JtQ2hhbmdlKCkge30sXG4gIHRyaWdnZXJGb3JtRmluaXNoOiBmdW5jdGlvbiB0cmlnZ2VyRm9ybUZpbmlzaCgpIHt9LFxuICByZWdpc3RlckZvcm06IGZ1bmN0aW9uIHJlZ2lzdGVyRm9ybSgpIHt9LFxuICB1bnJlZ2lzdGVyRm9ybTogZnVuY3Rpb24gdW5yZWdpc3RlckZvcm0oKSB7fVxufSk7XG5cbnZhciBGb3JtUHJvdmlkZXIgPSBmdW5jdGlvbiBGb3JtUHJvdmlkZXIoX3JlZikge1xuICB2YXIgdmFsaWRhdGVNZXNzYWdlcyA9IF9yZWYudmFsaWRhdGVNZXNzYWdlcyxcbiAgICAgIG9uRm9ybUNoYW5nZSA9IF9yZWYub25Gb3JtQ2hhbmdlLFxuICAgICAgb25Gb3JtRmluaXNoID0gX3JlZi5vbkZvcm1GaW5pc2gsXG4gICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW47XG4gIHZhciBmb3JtQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoRm9ybUNvbnRleHQpO1xuICB2YXIgZm9ybXNSZWYgPSBSZWFjdC51c2VSZWYoe30pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBmb3JtQ29udGV4dCksIHt9LCB7XG4gICAgICB2YWxpZGF0ZU1lc3NhZ2VzOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGZvcm1Db250ZXh0LnZhbGlkYXRlTWVzc2FnZXMpLCB2YWxpZGF0ZU1lc3NhZ2VzKSxcbiAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgLy8gPSAgICAgICAgICAgICAgICAgIEdsb2JhbCBGb3JtIENvbnRyb2wgICAgICAgICAgICAgICAgICA9XG4gICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgIHRyaWdnZXJGb3JtQ2hhbmdlOiBmdW5jdGlvbiB0cmlnZ2VyRm9ybUNoYW5nZShuYW1lLCBjaGFuZ2VkRmllbGRzKSB7XG4gICAgICAgIGlmIChvbkZvcm1DaGFuZ2UpIHtcbiAgICAgICAgICBvbkZvcm1DaGFuZ2UobmFtZSwge1xuICAgICAgICAgICAgY2hhbmdlZEZpZWxkczogY2hhbmdlZEZpZWxkcyxcbiAgICAgICAgICAgIGZvcm1zOiBmb3Jtc1JlZi5jdXJyZW50XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtQ29udGV4dC50cmlnZ2VyRm9ybUNoYW5nZShuYW1lLCBjaGFuZ2VkRmllbGRzKTtcbiAgICAgIH0sXG4gICAgICB0cmlnZ2VyRm9ybUZpbmlzaDogZnVuY3Rpb24gdHJpZ2dlckZvcm1GaW5pc2gobmFtZSwgdmFsdWVzKSB7XG4gICAgICAgIGlmIChvbkZvcm1GaW5pc2gpIHtcbiAgICAgICAgICBvbkZvcm1GaW5pc2gobmFtZSwge1xuICAgICAgICAgICAgdmFsdWVzOiB2YWx1ZXMsXG4gICAgICAgICAgICBmb3JtczogZm9ybXNSZWYuY3VycmVudFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9ybUNvbnRleHQudHJpZ2dlckZvcm1GaW5pc2gobmFtZSwgdmFsdWVzKTtcbiAgICAgIH0sXG4gICAgICByZWdpc3RlckZvcm06IGZ1bmN0aW9uIHJlZ2lzdGVyRm9ybShuYW1lLCBmb3JtKSB7XG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgZm9ybXNSZWYuY3VycmVudCA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZm9ybXNSZWYuY3VycmVudCksIHt9LCBfZGVmaW5lUHJvcGVydHkoe30sIG5hbWUsIGZvcm0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm1Db250ZXh0LnJlZ2lzdGVyRm9ybShuYW1lLCBmb3JtKTtcbiAgICAgIH0sXG4gICAgICB1bnJlZ2lzdGVyRm9ybTogZnVuY3Rpb24gdW5yZWdpc3RlckZvcm0obmFtZSkge1xuICAgICAgICB2YXIgbmV3Rm9ybXMgPSBfb2JqZWN0U3ByZWFkKHt9LCBmb3Jtc1JlZi5jdXJyZW50KTtcblxuICAgICAgICBkZWxldGUgbmV3Rm9ybXNbbmFtZV07XG4gICAgICAgIGZvcm1zUmVmLmN1cnJlbnQgPSBuZXdGb3JtcztcbiAgICAgICAgZm9ybUNvbnRleHQudW5yZWdpc3RlckZvcm0obmFtZSk7XG4gICAgICB9XG4gICAgfSlcbiAgfSwgY2hpbGRyZW4pO1xufTtcblxuZXhwb3J0IHsgRm9ybVByb3ZpZGVyIH07XG5leHBvcnQgZGVmYXVsdCBGb3JtQ29udGV4dDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG5pbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG52YXIgX2V4Y2x1ZGVkID0gW1wibmFtZVwiLCBcImluaXRpYWxWYWx1ZXNcIiwgXCJmaWVsZHNcIiwgXCJmb3JtXCIsIFwicHJlc2VydmVcIiwgXCJjaGlsZHJlblwiLCBcImNvbXBvbmVudFwiLCBcInZhbGlkYXRlTWVzc2FnZXNcIiwgXCJ2YWxpZGF0ZVRyaWdnZXJcIiwgXCJvblZhbHVlc0NoYW5nZVwiLCBcIm9uRmllbGRzQ2hhbmdlXCIsIFwib25GaW5pc2hcIiwgXCJvbkZpbmlzaEZhaWxlZFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB1c2VGb3JtIGZyb20gJy4vdXNlRm9ybSc7XG5pbXBvcnQgRmllbGRDb250ZXh0LCB7IEhPT0tfTUFSSyB9IGZyb20gJy4vRmllbGRDb250ZXh0JztcbmltcG9ydCBGb3JtQ29udGV4dCBmcm9tICcuL0Zvcm1Db250ZXh0JztcbmltcG9ydCB7IGlzU2ltaWxhciB9IGZyb20gJy4vdXRpbHMvdmFsdWVVdGlsJztcblxudmFyIEZvcm0gPSBmdW5jdGlvbiBGb3JtKF9yZWYsIHJlZikge1xuICB2YXIgbmFtZSA9IF9yZWYubmFtZSxcbiAgICAgIGluaXRpYWxWYWx1ZXMgPSBfcmVmLmluaXRpYWxWYWx1ZXMsXG4gICAgICBmaWVsZHMgPSBfcmVmLmZpZWxkcyxcbiAgICAgIGZvcm0gPSBfcmVmLmZvcm0sXG4gICAgICBwcmVzZXJ2ZSA9IF9yZWYucHJlc2VydmUsXG4gICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICBfcmVmJGNvbXBvbmVudCA9IF9yZWYuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3JlZiRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdmb3JtJyA6IF9yZWYkY29tcG9uZW50LFxuICAgICAgdmFsaWRhdGVNZXNzYWdlcyA9IF9yZWYudmFsaWRhdGVNZXNzYWdlcyxcbiAgICAgIF9yZWYkdmFsaWRhdGVUcmlnZ2VyID0gX3JlZi52YWxpZGF0ZVRyaWdnZXIsXG4gICAgICB2YWxpZGF0ZVRyaWdnZXIgPSBfcmVmJHZhbGlkYXRlVHJpZ2dlciA9PT0gdm9pZCAwID8gJ29uQ2hhbmdlJyA6IF9yZWYkdmFsaWRhdGVUcmlnZ2VyLFxuICAgICAgb25WYWx1ZXNDaGFuZ2UgPSBfcmVmLm9uVmFsdWVzQ2hhbmdlLFxuICAgICAgX29uRmllbGRzQ2hhbmdlID0gX3JlZi5vbkZpZWxkc0NoYW5nZSxcbiAgICAgIF9vbkZpbmlzaCA9IF9yZWYub25GaW5pc2gsXG4gICAgICBvbkZpbmlzaEZhaWxlZCA9IF9yZWYub25GaW5pc2hGYWlsZWQsXG4gICAgICByZXN0UHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgX2V4Y2x1ZGVkKTtcblxuICB2YXIgZm9ybUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KEZvcm1Db250ZXh0KTsgLy8gV2UgY3VzdG9taXplIGhhbmRsZSBldmVudCBzaW5jZSBDb250ZXh0IHdpbGwgbWFrZXMgYWxsIHRoZSBjb25zdW1lciByZS1yZW5kZXI6XG4gIC8vIGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9jb250ZXh0Lmh0bWwjY29udGV4dHByb3ZpZGVyXG5cbiAgdmFyIF91c2VGb3JtID0gdXNlRm9ybShmb3JtKSxcbiAgICAgIF91c2VGb3JtMiA9IF9zbGljZWRUb0FycmF5KF91c2VGb3JtLCAxKSxcbiAgICAgIGZvcm1JbnN0YW5jZSA9IF91c2VGb3JtMlswXTtcblxuICB2YXIgX2Zvcm1JbnN0YW5jZSRnZXRJbnRlID0gZm9ybUluc3RhbmNlLmdldEludGVybmFsSG9va3MoSE9PS19NQVJLKSxcbiAgICAgIHVzZVN1YnNjcmliZSA9IF9mb3JtSW5zdGFuY2UkZ2V0SW50ZS51c2VTdWJzY3JpYmUsXG4gICAgICBzZXRJbml0aWFsVmFsdWVzID0gX2Zvcm1JbnN0YW5jZSRnZXRJbnRlLnNldEluaXRpYWxWYWx1ZXMsXG4gICAgICBzZXRDYWxsYmFja3MgPSBfZm9ybUluc3RhbmNlJGdldEludGUuc2V0Q2FsbGJhY2tzLFxuICAgICAgc2V0VmFsaWRhdGVNZXNzYWdlcyA9IF9mb3JtSW5zdGFuY2UkZ2V0SW50ZS5zZXRWYWxpZGF0ZU1lc3NhZ2VzLFxuICAgICAgc2V0UHJlc2VydmUgPSBfZm9ybUluc3RhbmNlJGdldEludGUuc2V0UHJlc2VydmUsXG4gICAgICBkZXN0cm95Rm9ybSA9IF9mb3JtSW5zdGFuY2UkZ2V0SW50ZS5kZXN0cm95Rm9ybTsgLy8gUGFzcyByZWYgd2l0aCBmb3JtIGluc3RhbmNlXG5cblxuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKHJlZiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmb3JtSW5zdGFuY2U7XG4gIH0pOyAvLyBSZWdpc3RlciBmb3JtIGludG8gQ29udGV4dFxuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgZm9ybUNvbnRleHQucmVnaXN0ZXJGb3JtKG5hbWUsIGZvcm1JbnN0YW5jZSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvcm1Db250ZXh0LnVucmVnaXN0ZXJGb3JtKG5hbWUpO1xuICAgIH07XG4gIH0sIFtmb3JtQ29udGV4dCwgZm9ybUluc3RhbmNlLCBuYW1lXSk7IC8vIFBhc3MgcHJvcHMgdG8gc3RvcmVcblxuICBzZXRWYWxpZGF0ZU1lc3NhZ2VzKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZm9ybUNvbnRleHQudmFsaWRhdGVNZXNzYWdlcyksIHZhbGlkYXRlTWVzc2FnZXMpKTtcbiAgc2V0Q2FsbGJhY2tzKHtcbiAgICBvblZhbHVlc0NoYW5nZTogb25WYWx1ZXNDaGFuZ2UsXG4gICAgb25GaWVsZHNDaGFuZ2U6IGZ1bmN0aW9uIG9uRmllbGRzQ2hhbmdlKGNoYW5nZWRGaWVsZHMpIHtcbiAgICAgIGZvcm1Db250ZXh0LnRyaWdnZXJGb3JtQ2hhbmdlKG5hbWUsIGNoYW5nZWRGaWVsZHMpO1xuXG4gICAgICBpZiAoX29uRmllbGRzQ2hhbmdlKSB7XG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCByZXN0ID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICByZXN0W19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9vbkZpZWxkc0NoYW5nZS5hcHBseSh2b2lkIDAsIFtjaGFuZ2VkRmllbGRzXS5jb25jYXQocmVzdCkpO1xuICAgICAgfVxuICAgIH0sXG4gICAgb25GaW5pc2g6IGZ1bmN0aW9uIG9uRmluaXNoKHZhbHVlcykge1xuICAgICAgZm9ybUNvbnRleHQudHJpZ2dlckZvcm1GaW5pc2gobmFtZSwgdmFsdWVzKTtcblxuICAgICAgaWYgKF9vbkZpbmlzaCkge1xuICAgICAgICBfb25GaW5pc2godmFsdWVzKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG9uRmluaXNoRmFpbGVkOiBvbkZpbmlzaEZhaWxlZFxuICB9KTtcbiAgc2V0UHJlc2VydmUocHJlc2VydmUpOyAvLyBTZXQgaW5pdGlhbCB2YWx1ZSwgaW5pdCBzdG9yZSB2YWx1ZSB3aGVuIGZpcnN0IG1vdW50XG5cbiAgdmFyIG1vdW50UmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBzZXRJbml0aWFsVmFsdWVzKGluaXRpYWxWYWx1ZXMsICFtb3VudFJlZi5jdXJyZW50KTtcblxuICBpZiAoIW1vdW50UmVmLmN1cnJlbnQpIHtcbiAgICBtb3VudFJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgfVxuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRlc3Ryb3lGb3JtO1xuICB9LCAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIFtdKTsgLy8gUHJlcGFyZSBjaGlsZHJlbiBieSBgY2hpbGRyZW5gIHR5cGVcblxuICB2YXIgY2hpbGRyZW5Ob2RlO1xuICB2YXIgY2hpbGRyZW5SZW5kZXJQcm9wcyA9IHR5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJztcblxuICBpZiAoY2hpbGRyZW5SZW5kZXJQcm9wcykge1xuICAgIHZhciB2YWx1ZXMgPSBmb3JtSW5zdGFuY2UuZ2V0RmllbGRzVmFsdWUodHJ1ZSk7XG4gICAgY2hpbGRyZW5Ob2RlID0gY2hpbGRyZW4odmFsdWVzLCBmb3JtSW5zdGFuY2UpO1xuICB9IGVsc2Uge1xuICAgIGNoaWxkcmVuTm9kZSA9IGNoaWxkcmVuO1xuICB9IC8vIE5vdCB1c2Ugc3Vic2NyaWJlIHdoZW4gdXNpbmcgcmVuZGVyIHByb3BzXG5cblxuICB1c2VTdWJzY3JpYmUoIWNoaWxkcmVuUmVuZGVyUHJvcHMpOyAvLyBMaXN0ZW4gaWYgZmllbGRzIHByb3ZpZGVkLiBXZSB1c2UgcmVmIHRvIHNhdmUgcHJldiBkYXRhIGhlcmUgdG8gYXZvaWQgYWRkaXRpb25hbCByZW5kZXJcblxuICB2YXIgcHJldkZpZWxkc1JlZiA9IFJlYWN0LnVzZVJlZigpO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghaXNTaW1pbGFyKHByZXZGaWVsZHNSZWYuY3VycmVudCB8fCBbXSwgZmllbGRzIHx8IFtdKSkge1xuICAgICAgZm9ybUluc3RhbmNlLnNldEZpZWxkcyhmaWVsZHMgfHwgW10pO1xuICAgIH1cblxuICAgIHByZXZGaWVsZHNSZWYuY3VycmVudCA9IGZpZWxkcztcbiAgfSwgW2ZpZWxkcywgZm9ybUluc3RhbmNlXSk7XG4gIHZhciBmb3JtQ29udGV4dFZhbHVlID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZm9ybUluc3RhbmNlKSwge30sIHtcbiAgICAgIHZhbGlkYXRlVHJpZ2dlcjogdmFsaWRhdGVUcmlnZ2VyXG4gICAgfSk7XG4gIH0sIFtmb3JtSW5zdGFuY2UsIHZhbGlkYXRlVHJpZ2dlcl0pO1xuICB2YXIgd3JhcHBlck5vZGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGaWVsZENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogZm9ybUNvbnRleHRWYWx1ZVxuICB9LCBjaGlsZHJlbk5vZGUpO1xuXG4gIGlmIChDb21wb25lbnQgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIHdyYXBwZXJOb2RlO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHJlc3RQcm9wcywge1xuICAgIG9uU3VibWl0OiBmdW5jdGlvbiBvblN1Ym1pdChldmVudCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgZm9ybUluc3RhbmNlLnN1Ym1pdCgpO1xuICAgIH0sXG4gICAgb25SZXNldDogZnVuY3Rpb24gb25SZXNldChldmVudCkge1xuICAgICAgdmFyIF9yZXN0UHJvcHMkb25SZXNldDtcblxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGZvcm1JbnN0YW5jZS5yZXNldEZpZWxkcygpO1xuICAgICAgKF9yZXN0UHJvcHMkb25SZXNldCA9IHJlc3RQcm9wcy5vblJlc2V0KSA9PT0gbnVsbCB8fCBfcmVzdFByb3BzJG9uUmVzZXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9yZXN0UHJvcHMkb25SZXNldC5jYWxsKHJlc3RQcm9wcywgZXZlbnQpO1xuICAgIH1cbiAgfSksIHdyYXBwZXJOb2RlKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEZvcm07IiwiaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgeyBGaWVsZENvbnRleHQgfSBmcm9tICcuJztcbmltcG9ydCB3YXJuaW5nIGZyb20gXCJyYy11dGlsL2VzL3dhcm5pbmdcIjtcbmltcG9ydCB7IEhPT0tfTUFSSyB9IGZyb20gJy4vRmllbGRDb250ZXh0JztcbmltcG9ydCB7IHVzZVN0YXRlLCB1c2VDb250ZXh0LCB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldE5hbWVQYXRoLCBnZXRWYWx1ZSB9IGZyb20gJy4vdXRpbHMvdmFsdWVVdGlsJztcbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnkodmFsdWUpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1c2VXYXRjaCgpIHtcbiAgdmFyIGRlcGVuZGVuY2llcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogW107XG4gIHZhciBmb3JtID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG5cbiAgdmFyIF91c2VTdGF0ZSA9IHVzZVN0YXRlKCksXG4gICAgICBfdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAyKSxcbiAgICAgIHZhbHVlID0gX3VzZVN0YXRlMlswXSxcbiAgICAgIHNldFZhbHVlID0gX3VzZVN0YXRlMlsxXTtcblxuICB2YXIgdmFsdWVTdHIgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5KHZhbHVlKTtcbiAgfSwgW3ZhbHVlXSk7XG4gIHZhciB2YWx1ZVN0clJlZiA9IHVzZVJlZih2YWx1ZVN0cik7XG4gIHZhbHVlU3RyUmVmLmN1cnJlbnQgPSB2YWx1ZVN0cjtcbiAgdmFyIGZpZWxkQ29udGV4dCA9IHVzZUNvbnRleHQoRmllbGRDb250ZXh0KTtcbiAgdmFyIGZvcm1JbnN0YW5jZSA9IGZvcm0gfHwgZmllbGRDb250ZXh0O1xuICB2YXIgaXNWYWxpZEZvcm0gPSBmb3JtSW5zdGFuY2UgJiYgZm9ybUluc3RhbmNlLl9pbml0OyAvLyBXYXJuaW5nIGlmIG5vdCBleGlzdCBmb3JtIGluc3RhbmNlXG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuaW5nKGlzVmFsaWRGb3JtLCAndXNlV2F0Y2ggcmVxdWlyZXMgYSBmb3JtIGluc3RhbmNlIHNpbmNlIGl0IGNhbiBub3QgYXV0byBkZXRlY3QgZnJvbSBjb250ZXh0LicpO1xuICB9XG5cbiAgdmFyIG5hbWVQYXRoID0gZ2V0TmFtZVBhdGgoZGVwZW5kZW5jaWVzKTtcbiAgdmFyIG5hbWVQYXRoUmVmID0gdXNlUmVmKG5hbWVQYXRoKTtcbiAgbmFtZVBhdGhSZWYuY3VycmVudCA9IG5hbWVQYXRoO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIC8vIFNraXAgaWYgbm90IGV4aXN0IGZvcm0gaW5zdGFuY2VcbiAgICBpZiAoIWlzVmFsaWRGb3JtKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGdldEZpZWxkc1ZhbHVlID0gZm9ybUluc3RhbmNlLmdldEZpZWxkc1ZhbHVlLFxuICAgICAgICBnZXRJbnRlcm5hbEhvb2tzID0gZm9ybUluc3RhbmNlLmdldEludGVybmFsSG9va3M7XG5cbiAgICB2YXIgX2dldEludGVybmFsSG9va3MgPSBnZXRJbnRlcm5hbEhvb2tzKEhPT0tfTUFSSyksXG4gICAgICAgIHJlZ2lzdGVyV2F0Y2ggPSBfZ2V0SW50ZXJuYWxIb29rcy5yZWdpc3RlcldhdGNoO1xuXG4gICAgdmFyIGNhbmNlbFJlZ2lzdGVyID0gcmVnaXN0ZXJXYXRjaChmdW5jdGlvbiAoc3RvcmUpIHtcbiAgICAgIHZhciBuZXdWYWx1ZSA9IGdldFZhbHVlKHN0b3JlLCBuYW1lUGF0aFJlZi5jdXJyZW50KTtcbiAgICAgIHZhciBuZXh0VmFsdWVTdHIgPSBzdHJpbmdpZnkobmV3VmFsdWUpOyAvLyBDb21wYXJlIHN0cmluZ2lmeSBpbiBjYXNlIGl0J3MgbmVzdCBvYmplY3RcblxuICAgICAgaWYgKHZhbHVlU3RyUmVmLmN1cnJlbnQgIT09IG5leHRWYWx1ZVN0cikge1xuICAgICAgICB2YWx1ZVN0clJlZi5jdXJyZW50ID0gbmV4dFZhbHVlU3RyO1xuICAgICAgICBzZXRWYWx1ZShuZXdWYWx1ZSk7XG4gICAgICB9XG4gICAgfSk7IC8vIFRPRE86IFdlIGNhbiBpbXByb3ZlIHRoaXMgcGVyZiBpbiBmdXR1cmVcblxuICAgIHZhciBpbml0aWFsVmFsdWUgPSBnZXRWYWx1ZShnZXRGaWVsZHNWYWx1ZSgpLCBuYW1lUGF0aFJlZi5jdXJyZW50KTtcbiAgICBzZXRWYWx1ZShpbml0aWFsVmFsdWUpO1xuICAgIHJldHVybiBjYW5jZWxSZWdpc3RlcjtcbiAgfSwgLy8gV2UgZG8gbm90IG5lZWQgcmUtcmVnaXN0ZXIgc2luY2UgbmFtZVBhdGggY29udGVudCBpcyB0aGUgc2FtZVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIFtdKTtcbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5leHBvcnQgZGVmYXVsdCB1c2VXYXRjaDsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRmllbGQgZnJvbSAnLi9GaWVsZCc7XG5pbXBvcnQgTGlzdCBmcm9tICcuL0xpc3QnO1xuaW1wb3J0IHVzZUZvcm0gZnJvbSAnLi91c2VGb3JtJztcbmltcG9ydCBGaWVsZEZvcm0gZnJvbSAnLi9Gb3JtJztcbmltcG9ydCB7IEZvcm1Qcm92aWRlciB9IGZyb20gJy4vRm9ybUNvbnRleHQnO1xuaW1wb3J0IEZpZWxkQ29udGV4dCBmcm9tICcuL0ZpZWxkQ29udGV4dCc7XG5pbXBvcnQgTGlzdENvbnRleHQgZnJvbSAnLi9MaXN0Q29udGV4dCc7XG5pbXBvcnQgdXNlV2F0Y2ggZnJvbSAnLi91c2VXYXRjaCc7XG52YXIgSW50ZXJuYWxGb3JtID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoRmllbGRGb3JtKTtcbnZhciBSZWZGb3JtID0gSW50ZXJuYWxGb3JtO1xuUmVmRm9ybS5Gb3JtUHJvdmlkZXIgPSBGb3JtUHJvdmlkZXI7XG5SZWZGb3JtLkZpZWxkID0gRmllbGQ7XG5SZWZGb3JtLkxpc3QgPSBMaXN0O1xuUmVmRm9ybS51c2VGb3JtID0gdXNlRm9ybTtcblJlZkZvcm0udXNlV2F0Y2ggPSB1c2VXYXRjaDtcbmV4cG9ydCB7IEZpZWxkLCBMaXN0LCB1c2VGb3JtLCBGb3JtUHJvdmlkZXIsIEZpZWxkQ29udGV4dCwgTGlzdENvbnRleHQsIHVzZVdhdGNoIH07XG5leHBvcnQgZGVmYXVsdCBSZWZGb3JtOyIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG5pbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheVwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSBcInJjLXV0aWwvZXMvd2FybmluZ1wiO1xuaW1wb3J0IEZpZWxkQ29udGV4dCBmcm9tICcuL0ZpZWxkQ29udGV4dCc7XG5pbXBvcnQgRmllbGQgZnJvbSAnLi9GaWVsZCc7XG5pbXBvcnQgeyBtb3ZlIGFzIF9tb3ZlLCBnZXROYW1lUGF0aCB9IGZyb20gJy4vdXRpbHMvdmFsdWVVdGlsJztcbmltcG9ydCBMaXN0Q29udGV4dCBmcm9tICcuL0xpc3RDb250ZXh0JztcblxudmFyIExpc3QgPSBmdW5jdGlvbiBMaXN0KF9yZWYpIHtcbiAgdmFyIG5hbWUgPSBfcmVmLm5hbWUsXG4gICAgICBpbml0aWFsVmFsdWUgPSBfcmVmLmluaXRpYWxWYWx1ZSxcbiAgICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICAgIHJ1bGVzID0gX3JlZi5ydWxlcyxcbiAgICAgIHZhbGlkYXRlVHJpZ2dlciA9IF9yZWYudmFsaWRhdGVUcmlnZ2VyO1xuICB2YXIgY29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoRmllbGRDb250ZXh0KTtcbiAgdmFyIGtleVJlZiA9IFJlYWN0LnVzZVJlZih7XG4gICAga2V5czogW10sXG4gICAgaWQ6IDBcbiAgfSk7XG4gIHZhciBrZXlNYW5hZ2VyID0ga2V5UmVmLmN1cnJlbnQ7XG4gIHZhciBwcmVmaXhOYW1lID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudFByZWZpeE5hbWUgPSBnZXROYW1lUGF0aChjb250ZXh0LnByZWZpeE5hbWUpIHx8IFtdO1xuICAgIHJldHVybiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHBhcmVudFByZWZpeE5hbWUpLCBfdG9Db25zdW1hYmxlQXJyYXkoZ2V0TmFtZVBhdGgobmFtZSkpKTtcbiAgfSwgW2NvbnRleHQucHJlZml4TmFtZSwgbmFtZV0pO1xuICB2YXIgZmllbGRDb250ZXh0ID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgY29udGV4dCksIHt9LCB7XG4gICAgICBwcmVmaXhOYW1lOiBwcmVmaXhOYW1lXG4gICAgfSk7XG4gIH0sIFtjb250ZXh0LCBwcmVmaXhOYW1lXSk7IC8vIExpc3QgY29udGV4dFxuXG4gIHZhciBsaXN0Q29udGV4dCA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBnZXRLZXk6IGZ1bmN0aW9uIGdldEtleShuYW1lUGF0aCkge1xuICAgICAgICB2YXIgbGVuID0gcHJlZml4TmFtZS5sZW5ndGg7XG4gICAgICAgIHZhciBwYXRoTmFtZSA9IG5hbWVQYXRoW2xlbl07XG4gICAgICAgIHJldHVybiBba2V5TWFuYWdlci5rZXlzW3BhdGhOYW1lXSwgbmFtZVBhdGguc2xpY2UobGVuICsgMSldO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtwcmVmaXhOYW1lXSk7IC8vIFVzZXIgc2hvdWxkIG5vdCBwYXNzIGBjaGlsZHJlbmAgYXMgb3RoZXIgdHlwZS5cblxuICBpZiAodHlwZW9mIGNoaWxkcmVuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgd2FybmluZyhmYWxzZSwgJ0Zvcm0uTGlzdCBvbmx5IGFjY2VwdHMgZnVuY3Rpb24gYXMgY2hpbGRyZW4uJyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgc2hvdWxkVXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkVXBkYXRlKHByZXZWYWx1ZSwgbmV4dFZhbHVlLCBfcmVmMikge1xuICAgIHZhciBzb3VyY2UgPSBfcmVmMi5zb3VyY2U7XG5cbiAgICBpZiAoc291cmNlID09PSAnaW50ZXJuYWwnKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZXZWYWx1ZSAhPT0gbmV4dFZhbHVlO1xuICB9O1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMaXN0Q29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBsaXN0Q29udGV4dFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGaWVsZENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogZmllbGRDb250ZXh0XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZpZWxkLCB7XG4gICAgbmFtZTogW10sXG4gICAgc2hvdWxkVXBkYXRlOiBzaG91bGRVcGRhdGUsXG4gICAgcnVsZXM6IHJ1bGVzLFxuICAgIHZhbGlkYXRlVHJpZ2dlcjogdmFsaWRhdGVUcmlnZ2VyLFxuICAgIGluaXRpYWxWYWx1ZTogaW5pdGlhbFZhbHVlLFxuICAgIGlzTGlzdDogdHJ1ZVxuICB9LCBmdW5jdGlvbiAoX3JlZjMsIG1ldGEpIHtcbiAgICB2YXIgX3JlZjMkdmFsdWUgPSBfcmVmMy52YWx1ZSxcbiAgICAgICAgdmFsdWUgPSBfcmVmMyR2YWx1ZSA9PT0gdm9pZCAwID8gW10gOiBfcmVmMyR2YWx1ZSxcbiAgICAgICAgb25DaGFuZ2UgPSBfcmVmMy5vbkNoYW5nZTtcbiAgICB2YXIgZ2V0RmllbGRWYWx1ZSA9IGNvbnRleHQuZ2V0RmllbGRWYWx1ZTtcblxuICAgIHZhciBnZXROZXdWYWx1ZSA9IGZ1bmN0aW9uIGdldE5ld1ZhbHVlKCkge1xuICAgICAgdmFyIHZhbHVlcyA9IGdldEZpZWxkVmFsdWUocHJlZml4TmFtZSB8fCBbXSk7XG4gICAgICByZXR1cm4gdmFsdWVzIHx8IFtdO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWx3YXlzIGdldCBsYXRlc3QgdmFsdWUgaW4gY2FzZSB1c2VyIHVwZGF0ZSBmaWVsZHMgYnkgYGZvcm1gIGFwaS5cbiAgICAgKi9cblxuXG4gICAgdmFyIG9wZXJhdGlvbnMgPSB7XG4gICAgICBhZGQ6IGZ1bmN0aW9uIGFkZChkZWZhdWx0VmFsdWUsIGluZGV4KSB7XG4gICAgICAgIC8vIE1hcHBpbmcga2V5c1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSBnZXROZXdWYWx1ZSgpO1xuXG4gICAgICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDw9IG5ld1ZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgIGtleU1hbmFnZXIua2V5cyA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoa2V5TWFuYWdlci5rZXlzLnNsaWNlKDAsIGluZGV4KSksIFtrZXlNYW5hZ2VyLmlkXSwgX3RvQ29uc3VtYWJsZUFycmF5KGtleU1hbmFnZXIua2V5cy5zbGljZShpbmRleCkpKTtcbiAgICAgICAgICBvbkNoYW5nZShbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KG5ld1ZhbHVlLnNsaWNlKDAsIGluZGV4KSksIFtkZWZhdWx0VmFsdWVdLCBfdG9Db25zdW1hYmxlQXJyYXkobmV3VmFsdWUuc2xpY2UoaW5kZXgpKSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIChpbmRleCA8IDAgfHwgaW5kZXggPiBuZXdWYWx1ZS5sZW5ndGgpKSB7XG4gICAgICAgICAgICB3YXJuaW5nKGZhbHNlLCAnVGhlIHNlY29uZCBwYXJhbWV0ZXIgb2YgdGhlIGFkZCBmdW5jdGlvbiBzaG91bGQgYmUgYSB2YWxpZCBwb3NpdGl2ZSBudW1iZXIuJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAga2V5TWFuYWdlci5rZXlzID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShrZXlNYW5hZ2VyLmtleXMpLCBba2V5TWFuYWdlci5pZF0pO1xuICAgICAgICAgIG9uQ2hhbmdlKFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkobmV3VmFsdWUpLCBbZGVmYXVsdFZhbHVlXSkpO1xuICAgICAgICB9XG5cbiAgICAgICAga2V5TWFuYWdlci5pZCArPSAxO1xuICAgICAgfSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKGluZGV4KSB7XG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IGdldE5ld1ZhbHVlKCk7XG4gICAgICAgIHZhciBpbmRleFNldCA9IG5ldyBTZXQoQXJyYXkuaXNBcnJheShpbmRleCkgPyBpbmRleCA6IFtpbmRleF0pO1xuXG4gICAgICAgIGlmIChpbmRleFNldC5zaXplIDw9IDApIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBrZXlNYW5hZ2VyLmtleXMgPSBrZXlNYW5hZ2VyLmtleXMuZmlsdGVyKGZ1bmN0aW9uIChfLCBrZXlzSW5kZXgpIHtcbiAgICAgICAgICByZXR1cm4gIWluZGV4U2V0LmhhcyhrZXlzSW5kZXgpO1xuICAgICAgICB9KTsgLy8gVHJpZ2dlciBzdG9yZSBjaGFuZ2VcblxuICAgICAgICBvbkNoYW5nZShuZXdWYWx1ZS5maWx0ZXIoZnVuY3Rpb24gKF8sIHZhbHVlSW5kZXgpIHtcbiAgICAgICAgICByZXR1cm4gIWluZGV4U2V0Lmhhcyh2YWx1ZUluZGV4KTtcbiAgICAgICAgfSkpO1xuICAgICAgfSxcbiAgICAgIG1vdmU6IGZ1bmN0aW9uIG1vdmUoZnJvbSwgdG8pIHtcbiAgICAgICAgaWYgKGZyb20gPT09IHRvKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gZ2V0TmV3VmFsdWUoKTsgLy8gRG8gbm90IGhhbmRsZSBvdXQgb2YgcmFuZ2VcblxuICAgICAgICBpZiAoZnJvbSA8IDAgfHwgZnJvbSA+PSBuZXdWYWx1ZS5sZW5ndGggfHwgdG8gPCAwIHx8IHRvID49IG5ld1ZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGtleU1hbmFnZXIua2V5cyA9IF9tb3ZlKGtleU1hbmFnZXIua2V5cywgZnJvbSwgdG8pOyAvLyBUcmlnZ2VyIHN0b3JlIGNoYW5nZVxuXG4gICAgICAgIG9uQ2hhbmdlKF9tb3ZlKG5ld1ZhbHVlLCBmcm9tLCB0bykpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIGxpc3RWYWx1ZSA9IHZhbHVlIHx8IFtdO1xuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGxpc3RWYWx1ZSkpIHtcbiAgICAgIGxpc3RWYWx1ZSA9IFtdO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuaW5nKGZhbHNlLCBcIkN1cnJlbnQgdmFsdWUgb2YgJ1wiLmNvbmNhdChwcmVmaXhOYW1lLmpvaW4oJyA+ICcpLCBcIicgaXMgbm90IGFuIGFycmF5IHR5cGUuXCIpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY2hpbGRyZW4obGlzdFZhbHVlLm1hcChmdW5jdGlvbiAoX18sIGluZGV4KSB7XG4gICAgICB2YXIga2V5ID0ga2V5TWFuYWdlci5rZXlzW2luZGV4XTtcblxuICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGtleU1hbmFnZXIua2V5c1tpbmRleF0gPSBrZXlNYW5hZ2VyLmlkO1xuICAgICAgICBrZXkgPSBrZXlNYW5hZ2VyLmtleXNbaW5kZXhdO1xuICAgICAgICBrZXlNYW5hZ2VyLmlkICs9IDE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IGluZGV4LFxuICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgaXNMaXN0RmllbGQ6IHRydWVcbiAgICAgIH07XG4gICAgfSksIG9wZXJhdGlvbnMsIG1ldGEpO1xuICB9KSkpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTGlzdDsiLCJ2YXIgc2FmZUlzTmFOID0gTnVtYmVyLmlzTmFOIHx8XG4gICAgZnVuY3Rpb24gcG9ueWZpbGwodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgdmFsdWUgIT09IHZhbHVlO1xuICAgIH07XG5mdW5jdGlvbiBpc0VxdWFsKGZpcnN0LCBzZWNvbmQpIHtcbiAgICBpZiAoZmlyc3QgPT09IHNlY29uZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHNhZmVJc05hTihmaXJzdCkgJiYgc2FmZUlzTmFOKHNlY29uZCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGFyZUlucHV0c0VxdWFsKG5ld0lucHV0cywgbGFzdElucHV0cykge1xuICAgIGlmIChuZXdJbnB1dHMubGVuZ3RoICE9PSBsYXN0SW5wdXRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3SW5wdXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghaXNFcXVhbChuZXdJbnB1dHNbaV0sIGxhc3RJbnB1dHNbaV0pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIG1lbW9pemVPbmUocmVzdWx0Rm4sIGlzRXF1YWwpIHtcbiAgICBpZiAoaXNFcXVhbCA9PT0gdm9pZCAwKSB7IGlzRXF1YWwgPSBhcmVJbnB1dHNFcXVhbDsgfVxuICAgIHZhciBjYWNoZSA9IG51bGw7XG4gICAgZnVuY3Rpb24gbWVtb2l6ZWQoKSB7XG4gICAgICAgIHZhciBuZXdBcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBuZXdBcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhY2hlICYmIGNhY2hlLmxhc3RUaGlzID09PSB0aGlzICYmIGlzRXF1YWwobmV3QXJncywgY2FjaGUubGFzdEFyZ3MpKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FjaGUubGFzdFJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGFzdFJlc3VsdCA9IHJlc3VsdEZuLmFwcGx5KHRoaXMsIG5ld0FyZ3MpO1xuICAgICAgICBjYWNoZSA9IHtcbiAgICAgICAgICAgIGxhc3RSZXN1bHQ6IGxhc3RSZXN1bHQsXG4gICAgICAgICAgICBsYXN0QXJnczogbmV3QXJncyxcbiAgICAgICAgICAgIGxhc3RUaGlzOiB0aGlzLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgICB9XG4gICAgbWVtb2l6ZWQuY2xlYXIgPSBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgY2FjaGUgPSBudWxsO1xuICAgIH07XG4gICAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG5leHBvcnQgeyBtZW1vaXplT25lIGFzIGRlZmF1bHQgfTtcbiIsInZhciBsb2NhbGUgPSB7XG4gIHBsYWNlaG9sZGVyOiAnU2VsZWN0IHRpbWUnLFxuICByYW5nZVBsYWNlaG9sZGVyOiBbJ1N0YXJ0IHRpbWUnLCAnRW5kIHRpbWUnXVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBDYWxlbmRhckxvY2FsZSBmcm9tIFwicmMtcGlja2VyL2VzL2xvY2FsZS9lbl9VU1wiO1xuaW1wb3J0IFRpbWVQaWNrZXJMb2NhbGUgZnJvbSAnLi4vLi4vdGltZS1waWNrZXIvbG9jYWxlL2VuX1VTJzsgLy8gTWVyZ2UgaW50byBhIGxvY2FsZSBvYmplY3RcblxudmFyIGxvY2FsZSA9IHtcbiAgbGFuZzogX2V4dGVuZHMoe1xuICAgIHBsYWNlaG9sZGVyOiAnU2VsZWN0IGRhdGUnLFxuICAgIHllYXJQbGFjZWhvbGRlcjogJ1NlbGVjdCB5ZWFyJyxcbiAgICBxdWFydGVyUGxhY2Vob2xkZXI6ICdTZWxlY3QgcXVhcnRlcicsXG4gICAgbW9udGhQbGFjZWhvbGRlcjogJ1NlbGVjdCBtb250aCcsXG4gICAgd2Vla1BsYWNlaG9sZGVyOiAnU2VsZWN0IHdlZWsnLFxuICAgIHJhbmdlUGxhY2Vob2xkZXI6IFsnU3RhcnQgZGF0ZScsICdFbmQgZGF0ZSddLFxuICAgIHJhbmdlWWVhclBsYWNlaG9sZGVyOiBbJ1N0YXJ0IHllYXInLCAnRW5kIHllYXInXSxcbiAgICByYW5nZVF1YXJ0ZXJQbGFjZWhvbGRlcjogWydTdGFydCBxdWFydGVyJywgJ0VuZCBxdWFydGVyJ10sXG4gICAgcmFuZ2VNb250aFBsYWNlaG9sZGVyOiBbJ1N0YXJ0IG1vbnRoJywgJ0VuZCBtb250aCddLFxuICAgIHJhbmdlV2Vla1BsYWNlaG9sZGVyOiBbJ1N0YXJ0IHdlZWsnLCAnRW5kIHdlZWsnXVxuICB9LCBDYWxlbmRhckxvY2FsZSksXG4gIHRpbWVQaWNrZXJMb2NhbGU6IF9leHRlbmRzKHt9LCBUaW1lUGlja2VyTG9jYWxlKVxufTsgLy8gQWxsIHNldHRpbmdzIGF0OlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9ibG9iL21hc3Rlci9jb21wb25lbnRzL2RhdGUtcGlja2VyL2xvY2FsZS9leGFtcGxlLmpzb25cblxuZXhwb3J0IGRlZmF1bHQgbG9jYWxlOyIsInZhciBsb2NhbGUgPSB7XG4gIGxvY2FsZTogJ2VuX1VTJyxcbiAgdG9kYXk6ICdUb2RheScsXG4gIG5vdzogJ05vdycsXG4gIGJhY2tUb1RvZGF5OiAnQmFjayB0byB0b2RheScsXG4gIG9rOiAnT0snLFxuICBjbGVhcjogJ0NsZWFyJyxcbiAgbW9udGg6ICdNb250aCcsXG4gIHllYXI6ICdZZWFyJyxcbiAgdGltZVNlbGVjdDogJ3NlbGVjdCB0aW1lJyxcbiAgZGF0ZVNlbGVjdDogJ3NlbGVjdCBkYXRlJyxcbiAgd2Vla1NlbGVjdDogJ0Nob29zZSBhIHdlZWsnLFxuICBtb250aFNlbGVjdDogJ0Nob29zZSBhIG1vbnRoJyxcbiAgeWVhclNlbGVjdDogJ0Nob29zZSBhIHllYXInLFxuICBkZWNhZGVTZWxlY3Q6ICdDaG9vc2UgYSBkZWNhZGUnLFxuICB5ZWFyRm9ybWF0OiAnWVlZWScsXG4gIGRhdGVGb3JtYXQ6ICdNL0QvWVlZWScsXG4gIGRheUZvcm1hdDogJ0QnLFxuICBkYXRlVGltZUZvcm1hdDogJ00vRC9ZWVlZIEhIOm1tOnNzJyxcbiAgbW9udGhCZWZvcmVZZWFyOiB0cnVlLFxuICBwcmV2aW91c01vbnRoOiAnUHJldmlvdXMgbW9udGggKFBhZ2VVcCknLFxuICBuZXh0TW9udGg6ICdOZXh0IG1vbnRoIChQYWdlRG93biknLFxuICBwcmV2aW91c1llYXI6ICdMYXN0IHllYXIgKENvbnRyb2wgKyBsZWZ0KScsXG4gIG5leHRZZWFyOiAnTmV4dCB5ZWFyIChDb250cm9sICsgcmlnaHQpJyxcbiAgcHJldmlvdXNEZWNhZGU6ICdMYXN0IGRlY2FkZScsXG4gIG5leHREZWNhZGU6ICdOZXh0IGRlY2FkZScsXG4gIHByZXZpb3VzQ2VudHVyeTogJ0xhc3QgY2VudHVyeScsXG4gIG5leHRDZW50dXJ5OiAnTmV4dCBjZW50dXJ5J1xufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTsiLCIvKiBlc2xpbnQtZGlzYWJsZSBuby10ZW1wbGF0ZS1jdXJseS1pbi1zdHJpbmcgKi9cbmltcG9ydCBQYWdpbmF0aW9uIGZyb20gXCJyYy1wYWdpbmF0aW9uL2VzL2xvY2FsZS9lbl9VU1wiO1xuaW1wb3J0IERhdGVQaWNrZXIgZnJvbSAnLi4vZGF0ZS1waWNrZXIvbG9jYWxlL2VuX1VTJztcbmltcG9ydCBUaW1lUGlja2VyIGZyb20gJy4uL3RpbWUtcGlja2VyL2xvY2FsZS9lbl9VUyc7XG5pbXBvcnQgQ2FsZW5kYXIgZnJvbSAnLi4vY2FsZW5kYXIvbG9jYWxlL2VuX1VTJztcbnZhciB0eXBlVGVtcGxhdGUgPSAnJHtsYWJlbH0gaXMgbm90IGEgdmFsaWQgJHt0eXBlfSc7XG52YXIgbG9jYWxlVmFsdWVzID0ge1xuICBsb2NhbGU6ICdlbicsXG4gIFBhZ2luYXRpb246IFBhZ2luYXRpb24sXG4gIERhdGVQaWNrZXI6IERhdGVQaWNrZXIsXG4gIFRpbWVQaWNrZXI6IFRpbWVQaWNrZXIsXG4gIENhbGVuZGFyOiBDYWxlbmRhcixcbiAgZ2xvYmFsOiB7XG4gICAgcGxhY2Vob2xkZXI6ICdQbGVhc2Ugc2VsZWN0J1xuICB9LFxuICBUYWJsZToge1xuICAgIGZpbHRlclRpdGxlOiAnRmlsdGVyIG1lbnUnLFxuICAgIGZpbHRlckNvbmZpcm06ICdPSycsXG4gICAgZmlsdGVyUmVzZXQ6ICdSZXNldCcsXG4gICAgZmlsdGVyRW1wdHlUZXh0OiAnTm8gZmlsdGVycycsXG4gICAgZmlsdGVyQ2hlY2thbGw6ICdTZWxlY3QgYWxsIGl0ZW1zJyxcbiAgICBmaWx0ZXJTZWFyY2hQbGFjZWhvbGRlcjogJ1NlYXJjaCBpbiBmaWx0ZXJzJyxcbiAgICBlbXB0eVRleHQ6ICdObyBkYXRhJyxcbiAgICBzZWxlY3RBbGw6ICdTZWxlY3QgY3VycmVudCBwYWdlJyxcbiAgICBzZWxlY3RJbnZlcnQ6ICdJbnZlcnQgY3VycmVudCBwYWdlJyxcbiAgICBzZWxlY3ROb25lOiAnQ2xlYXIgYWxsIGRhdGEnLFxuICAgIHNlbGVjdGlvbkFsbDogJ1NlbGVjdCBhbGwgZGF0YScsXG4gICAgc29ydFRpdGxlOiAnU29ydCcsXG4gICAgZXhwYW5kOiAnRXhwYW5kIHJvdycsXG4gICAgY29sbGFwc2U6ICdDb2xsYXBzZSByb3cnLFxuICAgIHRyaWdnZXJEZXNjOiAnQ2xpY2sgdG8gc29ydCBkZXNjZW5kaW5nJyxcbiAgICB0cmlnZ2VyQXNjOiAnQ2xpY2sgdG8gc29ydCBhc2NlbmRpbmcnLFxuICAgIGNhbmNlbFNvcnQ6ICdDbGljayB0byBjYW5jZWwgc29ydGluZydcbiAgfSxcbiAgTW9kYWw6IHtcbiAgICBva1RleHQ6ICdPSycsXG4gICAgY2FuY2VsVGV4dDogJ0NhbmNlbCcsXG4gICAganVzdE9rVGV4dDogJ09LJ1xuICB9LFxuICBQb3Bjb25maXJtOiB7XG4gICAgb2tUZXh0OiAnT0snLFxuICAgIGNhbmNlbFRleHQ6ICdDYW5jZWwnXG4gIH0sXG4gIFRyYW5zZmVyOiB7XG4gICAgdGl0bGVzOiBbJycsICcnXSxcbiAgICBzZWFyY2hQbGFjZWhvbGRlcjogJ1NlYXJjaCBoZXJlJyxcbiAgICBpdGVtVW5pdDogJ2l0ZW0nLFxuICAgIGl0ZW1zVW5pdDogJ2l0ZW1zJyxcbiAgICByZW1vdmU6ICdSZW1vdmUnLFxuICAgIHNlbGVjdEN1cnJlbnQ6ICdTZWxlY3QgY3VycmVudCBwYWdlJyxcbiAgICByZW1vdmVDdXJyZW50OiAnUmVtb3ZlIGN1cnJlbnQgcGFnZScsXG4gICAgc2VsZWN0QWxsOiAnU2VsZWN0IGFsbCBkYXRhJyxcbiAgICByZW1vdmVBbGw6ICdSZW1vdmUgYWxsIGRhdGEnLFxuICAgIHNlbGVjdEludmVydDogJ0ludmVydCBjdXJyZW50IHBhZ2UnXG4gIH0sXG4gIFVwbG9hZDoge1xuICAgIHVwbG9hZGluZzogJ1VwbG9hZGluZy4uLicsXG4gICAgcmVtb3ZlRmlsZTogJ1JlbW92ZSBmaWxlJyxcbiAgICB1cGxvYWRFcnJvcjogJ1VwbG9hZCBlcnJvcicsXG4gICAgcHJldmlld0ZpbGU6ICdQcmV2aWV3IGZpbGUnLFxuICAgIGRvd25sb2FkRmlsZTogJ0Rvd25sb2FkIGZpbGUnXG4gIH0sXG4gIEVtcHR5OiB7XG4gICAgZGVzY3JpcHRpb246ICdObyBEYXRhJ1xuICB9LFxuICBJY29uOiB7XG4gICAgaWNvbjogJ2ljb24nXG4gIH0sXG4gIFRleHQ6IHtcbiAgICBlZGl0OiAnRWRpdCcsXG4gICAgY29weTogJ0NvcHknLFxuICAgIGNvcGllZDogJ0NvcGllZCcsXG4gICAgZXhwYW5kOiAnRXhwYW5kJ1xuICB9LFxuICBQYWdlSGVhZGVyOiB7XG4gICAgYmFjazogJ0JhY2snXG4gIH0sXG4gIEZvcm06IHtcbiAgICBvcHRpb25hbDogJyhvcHRpb25hbCknLFxuICAgIGRlZmF1bHRWYWxpZGF0ZU1lc3NhZ2VzOiB7XG4gICAgICBcImRlZmF1bHRcIjogJ0ZpZWxkIHZhbGlkYXRpb24gZXJyb3IgZm9yICR7bGFiZWx9JyxcbiAgICAgIHJlcXVpcmVkOiAnUGxlYXNlIGVudGVyICR7bGFiZWx9JyxcbiAgICAgIFwiZW51bVwiOiAnJHtsYWJlbH0gbXVzdCBiZSBvbmUgb2YgWyR7ZW51bX1dJyxcbiAgICAgIHdoaXRlc3BhY2U6ICcke2xhYmVsfSBjYW5ub3QgYmUgYSBibGFuayBjaGFyYWN0ZXInLFxuICAgICAgZGF0ZToge1xuICAgICAgICBmb3JtYXQ6ICcke2xhYmVsfSBkYXRlIGZvcm1hdCBpcyBpbnZhbGlkJyxcbiAgICAgICAgcGFyc2U6ICcke2xhYmVsfSBjYW5ub3QgYmUgY29udmVydGVkIHRvIGEgZGF0ZScsXG4gICAgICAgIGludmFsaWQ6ICcke2xhYmVsfSBpcyBhbiBpbnZhbGlkIGRhdGUnXG4gICAgICB9LFxuICAgICAgdHlwZXM6IHtcbiAgICAgICAgc3RyaW5nOiB0eXBlVGVtcGxhdGUsXG4gICAgICAgIG1ldGhvZDogdHlwZVRlbXBsYXRlLFxuICAgICAgICBhcnJheTogdHlwZVRlbXBsYXRlLFxuICAgICAgICBvYmplY3Q6IHR5cGVUZW1wbGF0ZSxcbiAgICAgICAgbnVtYmVyOiB0eXBlVGVtcGxhdGUsXG4gICAgICAgIGRhdGU6IHR5cGVUZW1wbGF0ZSxcbiAgICAgICAgXCJib29sZWFuXCI6IHR5cGVUZW1wbGF0ZSxcbiAgICAgICAgaW50ZWdlcjogdHlwZVRlbXBsYXRlLFxuICAgICAgICBcImZsb2F0XCI6IHR5cGVUZW1wbGF0ZSxcbiAgICAgICAgcmVnZXhwOiB0eXBlVGVtcGxhdGUsXG4gICAgICAgIGVtYWlsOiB0eXBlVGVtcGxhdGUsXG4gICAgICAgIHVybDogdHlwZVRlbXBsYXRlLFxuICAgICAgICBoZXg6IHR5cGVUZW1wbGF0ZVxuICAgICAgfSxcbiAgICAgIHN0cmluZzoge1xuICAgICAgICBsZW46ICcke2xhYmVsfSBtdXN0IGJlICR7bGVufSBjaGFyYWN0ZXJzJyxcbiAgICAgICAgbWluOiAnJHtsYWJlbH0gbXVzdCBiZSBhdCBsZWFzdCAke21pbn0gY2hhcmFjdGVycycsXG4gICAgICAgIG1heDogJyR7bGFiZWx9IG11c3QgYmUgdXAgdG8gJHttYXh9IGNoYXJhY3RlcnMnLFxuICAgICAgICByYW5nZTogJyR7bGFiZWx9IG11c3QgYmUgYmV0d2VlbiAke21pbn0tJHttYXh9IGNoYXJhY3RlcnMnXG4gICAgICB9LFxuICAgICAgbnVtYmVyOiB7XG4gICAgICAgIGxlbjogJyR7bGFiZWx9IG11c3QgYmUgZXF1YWwgdG8gJHtsZW59JyxcbiAgICAgICAgbWluOiAnJHtsYWJlbH0gbXVzdCBiZSBtaW5pbXVtICR7bWlufScsXG4gICAgICAgIG1heDogJyR7bGFiZWx9IG11c3QgYmUgbWF4aW11bSAke21heH0nLFxuICAgICAgICByYW5nZTogJyR7bGFiZWx9IG11c3QgYmUgYmV0d2VlbiAke21pbn0tJHttYXh9J1xuICAgICAgfSxcbiAgICAgIGFycmF5OiB7XG4gICAgICAgIGxlbjogJ011c3QgYmUgJHtsZW59ICR7bGFiZWx9JyxcbiAgICAgICAgbWluOiAnQXQgbGVhc3QgJHttaW59ICR7bGFiZWx9JyxcbiAgICAgICAgbWF4OiAnQXQgbW9zdCAke21heH0gJHtsYWJlbH0nLFxuICAgICAgICByYW5nZTogJ1RoZSBhbW91bnQgb2YgJHtsYWJlbH0gbXVzdCBiZSBiZXR3ZWVuICR7bWlufS0ke21heH0nXG4gICAgICB9LFxuICAgICAgcGF0dGVybjoge1xuICAgICAgICBtaXNtYXRjaDogJyR7bGFiZWx9IGRvZXMgbm90IG1hdGNoIHRoZSBwYXR0ZXJuICR7cGF0dGVybn0nXG4gICAgICB9XG4gICAgfVxuICB9LFxuICBJbWFnZToge1xuICAgIHByZXZpZXc6ICdQcmV2aWV3J1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxlVmFsdWVzOyIsImV4cG9ydCBkZWZhdWx0IHtcbiAgLy8gT3B0aW9ucy5qc3hcbiAgaXRlbXNfcGVyX3BhZ2U6ICcvIHBhZ2UnLFxuICBqdW1wX3RvOiAnR28gdG8nLFxuICBqdW1wX3RvX2NvbmZpcm06ICdjb25maXJtJyxcbiAgcGFnZTogJ1BhZ2UnLFxuICAvLyBQYWdpbmF0aW9uLmpzeFxuICBwcmV2X3BhZ2U6ICdQcmV2aW91cyBQYWdlJyxcbiAgbmV4dF9wYWdlOiAnTmV4dCBQYWdlJyxcbiAgcHJldl81OiAnUHJldmlvdXMgNSBQYWdlcycsXG4gIG5leHRfNTogJ05leHQgNSBQYWdlcycsXG4gIHByZXZfMzogJ1ByZXZpb3VzIDMgUGFnZXMnLFxuICBuZXh0XzM6ICdOZXh0IDMgUGFnZXMnLFxuICBwYWdlX3NpemU6ICdQYWdlIFNpemUnXG59OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IGRlZmF1bHRMb2NhbGUgZnJvbSAnLi4vbG9jYWxlL2RlZmF1bHQnO1xuXG52YXIgcnVudGltZUxvY2FsZSA9IF9leHRlbmRzKHt9LCBkZWZhdWx0TG9jYWxlLk1vZGFsKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNoYW5nZUNvbmZpcm1Mb2NhbGUobmV3TG9jYWxlKSB7XG4gIGlmIChuZXdMb2NhbGUpIHtcbiAgICBydW50aW1lTG9jYWxlID0gX2V4dGVuZHMoX2V4dGVuZHMoe30sIHJ1bnRpbWVMb2NhbGUpLCBuZXdMb2NhbGUpO1xuICB9IGVsc2Uge1xuICAgIHJ1bnRpbWVMb2NhbGUgPSBfZXh0ZW5kcyh7fSwgZGVmYXVsdExvY2FsZS5Nb2RhbCk7XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb25maXJtTG9jYWxlKCkge1xuICByZXR1cm4gcnVudGltZUxvY2FsZTtcbn0iLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xudmFyIExvY2FsZUNvbnRleHQgPSAvKiNfX1BVUkVfXyovY3JlYXRlQ29udGV4dCh1bmRlZmluZWQpO1xuZXhwb3J0IGRlZmF1bHQgTG9jYWxlQ29udGV4dDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNcIjtcbmltcG9ydCBfY3JlYXRlU3VwZXIgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZVN1cGVyXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgbWVtb2l6ZU9uZSBmcm9tICdtZW1vaXplLW9uZSc7XG5pbXBvcnQgd2FybmluZyBmcm9tICcuLi9fdXRpbC93YXJuaW5nJztcbmltcG9ydCB7IGNoYW5nZUNvbmZpcm1Mb2NhbGUgfSBmcm9tICcuLi9tb2RhbC9sb2NhbGUnO1xuaW1wb3J0IExvY2FsZUNvbnRleHQgZnJvbSAnLi9jb250ZXh0JztcbmV4cG9ydCB2YXIgQU5UX01BUksgPSAnaW50ZXJuYWxNYXJrJztcblxudmFyIExvY2FsZVByb3ZpZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhMb2NhbGVQcm92aWRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihMb2NhbGVQcm92aWRlcik7XG5cbiAgZnVuY3Rpb24gTG9jYWxlUHJvdmlkZXIocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9jYWxlUHJvdmlkZXIpO1xuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwcm9wcyk7XG4gICAgX3RoaXMuZ2V0TWVtb2l6ZWRDb250ZXh0VmFsdWUgPSBtZW1vaXplT25lKGZ1bmN0aW9uIChsb2NhbGVWYWx1ZSkge1xuICAgICAgcmV0dXJuIF9leHRlbmRzKF9leHRlbmRzKHt9LCBsb2NhbGVWYWx1ZSksIHtcbiAgICAgICAgZXhpc3Q6IHRydWVcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGNoYW5nZUNvbmZpcm1Mb2NhbGUocHJvcHMubG9jYWxlICYmIHByb3BzLmxvY2FsZS5Nb2RhbCk7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcm9wcy5fQU5UX01BUktfXyA9PT0gQU5UX01BUkssICdMb2NhbGVQcm92aWRlcicsICdgTG9jYWxlUHJvdmlkZXJgIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgYGxvY2FsZWAgd2l0aCBgQ29uZmlnUHJvdmlkZXJgIGluc3RlYWQ6IGh0dHA6Ly91LmFudC5kZXNpZ24vbG9jYWxlJykgOiB2b2lkIDA7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKExvY2FsZVByb3ZpZGVyLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGNoYW5nZUNvbmZpcm1Mb2NhbGUodGhpcy5wcm9wcy5sb2NhbGUgJiYgdGhpcy5wcm9wcy5sb2NhbGUuTW9kYWwpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgdmFyIGxvY2FsZSA9IHRoaXMucHJvcHMubG9jYWxlO1xuXG4gICAgICBpZiAocHJldlByb3BzLmxvY2FsZSAhPT0gbG9jYWxlKSB7XG4gICAgICAgIGNoYW5nZUNvbmZpcm1Mb2NhbGUobG9jYWxlICYmIGxvY2FsZS5Nb2RhbCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgY2hhbmdlQ29uZmlybUxvY2FsZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBsb2NhbGUgPSBfdGhpcyRwcm9wcy5sb2NhbGUsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbjtcbiAgICAgIHZhciBjb250ZXh0VmFsdWUgPSB0aGlzLmdldE1lbW9pemVkQ29udGV4dFZhbHVlKGxvY2FsZSk7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTG9jYWxlQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogY29udGV4dFZhbHVlXG4gICAgICB9LCBjaGlsZHJlbik7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIExvY2FsZVByb3ZpZGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnQgeyBMb2NhbGVQcm92aWRlciBhcyBkZWZhdWx0IH07XG5Mb2NhbGVQcm92aWRlci5kZWZhdWx0UHJvcHMgPSB7XG4gIGxvY2FsZToge31cbn07IiwiaW1wb3J0IGxvY2FsZSBmcm9tICcuLi9sb2NhbGUvZGVmYXVsdCc7XG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzXCI7XG5pbXBvcnQgX2NyZWF0ZVN1cGVyIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVTdXBlclwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGRlZmF1bHRMb2NhbGVEYXRhIGZyb20gJy4vZGVmYXVsdCc7XG5pbXBvcnQgTG9jYWxlQ29udGV4dCBmcm9tICcuL2NvbnRleHQnO1xuXG52YXIgTG9jYWxlUmVjZWl2ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKExvY2FsZVJlY2VpdmVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKExvY2FsZVJlY2VpdmVyKTtcblxuICBmdW5jdGlvbiBMb2NhbGVSZWNlaXZlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9jYWxlUmVjZWl2ZXIpO1xuXG4gICAgcmV0dXJuIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKExvY2FsZVJlY2VpdmVyLCBbe1xuICAgIGtleTogXCJnZXRMb2NhbGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TG9jYWxlKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjb21wb25lbnROYW1lID0gX3RoaXMkcHJvcHMuY29tcG9uZW50TmFtZSxcbiAgICAgICAgICBkZWZhdWx0TG9jYWxlID0gX3RoaXMkcHJvcHMuZGVmYXVsdExvY2FsZTtcbiAgICAgIHZhciBsb2NhbGUgPSBkZWZhdWx0TG9jYWxlIHx8IGRlZmF1bHRMb2NhbGVEYXRhW2NvbXBvbmVudE5hbWUgIT09IG51bGwgJiYgY29tcG9uZW50TmFtZSAhPT0gdm9pZCAwID8gY29tcG9uZW50TmFtZSA6ICdnbG9iYWwnXTtcbiAgICAgIHZhciBhbnRMb2NhbGUgPSB0aGlzLmNvbnRleHQ7XG4gICAgICB2YXIgbG9jYWxlRnJvbUNvbnRleHQgPSBjb21wb25lbnROYW1lICYmIGFudExvY2FsZSA/IGFudExvY2FsZVtjb21wb25lbnROYW1lXSA6IHt9O1xuICAgICAgcmV0dXJuIF9leHRlbmRzKF9leHRlbmRzKHt9LCBsb2NhbGUgaW5zdGFuY2VvZiBGdW5jdGlvbiA/IGxvY2FsZSgpIDogbG9jYWxlKSwgbG9jYWxlRnJvbUNvbnRleHQgfHwge30pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRMb2NhbGVDb2RlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldExvY2FsZUNvZGUoKSB7XG4gICAgICB2YXIgYW50TG9jYWxlID0gdGhpcy5jb250ZXh0O1xuICAgICAgdmFyIGxvY2FsZUNvZGUgPSBhbnRMb2NhbGUgJiYgYW50TG9jYWxlLmxvY2FsZTsgLy8gSGFkIHVzZSBMb2NhbGVQcm92aWRlIGJ1dCBkaWRuJ3Qgc2V0IGxvY2FsZVxuXG4gICAgICBpZiAoYW50TG9jYWxlICYmIGFudExvY2FsZS5leGlzdCAmJiAhbG9jYWxlQ29kZSkge1xuICAgICAgICByZXR1cm4gZGVmYXVsdExvY2FsZURhdGEubG9jYWxlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbG9jYWxlQ29kZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuKHRoaXMuZ2V0TG9jYWxlKCksIHRoaXMuZ2V0TG9jYWxlQ29kZSgpLCB0aGlzLmNvbnRleHQpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBMb2NhbGVSZWNlaXZlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0IHsgTG9jYWxlUmVjZWl2ZXIgYXMgZGVmYXVsdCB9O1xuTG9jYWxlUmVjZWl2ZXIuZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnROYW1lOiAnZ2xvYmFsJ1xufTtcbkxvY2FsZVJlY2VpdmVyLmNvbnRleHRUeXBlID0gTG9jYWxlQ29udGV4dDtcbmV4cG9ydCBmdW5jdGlvbiB1c2VMb2NhbGVSZWNlaXZlcihjb21wb25lbnROYW1lLCBkZWZhdWx0TG9jYWxlKSB7XG4gIHZhciBhbnRMb2NhbGUgPSBSZWFjdC51c2VDb250ZXh0KExvY2FsZUNvbnRleHQpO1xuICB2YXIgY29tcG9uZW50TG9jYWxlID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGxvY2FsZSA9IGRlZmF1bHRMb2NhbGUgfHwgZGVmYXVsdExvY2FsZURhdGFbY29tcG9uZW50TmFtZSB8fCAnZ2xvYmFsJ107XG4gICAgdmFyIGxvY2FsZUZyb21Db250ZXh0ID0gY29tcG9uZW50TmFtZSAmJiBhbnRMb2NhbGUgPyBhbnRMb2NhbGVbY29tcG9uZW50TmFtZV0gOiB7fTtcbiAgICByZXR1cm4gX2V4dGVuZHMoX2V4dGVuZHMoe30sIHR5cGVvZiBsb2NhbGUgPT09ICdmdW5jdGlvbicgPyBsb2NhbGUoKSA6IGxvY2FsZSksIGxvY2FsZUZyb21Db250ZXh0IHx8IHt9KTtcbiAgfSwgW2NvbXBvbmVudE5hbWUsIGRlZmF1bHRMb2NhbGUsIGFudExvY2FsZV0pO1xuICByZXR1cm4gW2NvbXBvbmVudExvY2FsZV07XG59IiwiLy8gVGhpcyBpY29uIGZpbGUgaXMgZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkuXG52YXIgTG9hZGluZ091dGxpbmVkID0geyBcImljb25cIjogeyBcInRhZ1wiOiBcInN2Z1wiLCBcImF0dHJzXCI6IHsgXCJ2aWV3Qm94XCI6IFwiMCAwIDEwMjQgMTAyNFwiLCBcImZvY3VzYWJsZVwiOiBcImZhbHNlXCIgfSwgXCJjaGlsZHJlblwiOiBbeyBcInRhZ1wiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk05ODggNTQ4Yy0xOS45IDAtMzYtMTYuMS0zNi0zNiAwLTU5LjQtMTEuNi0xMTctMzQuNi0xNzEuM2E0NDAuNDUgNDQwLjQ1IDAgMDAtOTQuMy0xMzkuOSA0MzcuNzEgNDM3LjcxIDAgMDAtMTM5LjktOTQuM0M2MjkgODMuNiA1NzEuNCA3MiA1MTIgNzJjLTE5LjkgMC0zNi0xNi4xLTM2LTM2czE2LjEtMzYgMzYtMzZjNjkuMSAwIDEzNi4yIDEzLjUgMTk5LjMgNDAuM0M3NzIuMyA2NiA4MjcgMTAzIDg3NCAxNTBjNDcgNDcgODMuOSAxMDEuOCAxMDkuNyAxNjIuNyAyNi43IDYzLjEgNDAuMiAxMzAuMiA0MC4yIDE5OS4zLjEgMTkuOS0xNiAzNi0zNS45IDM2elwiIH0gfV0gfSwgXCJuYW1lXCI6IFwibG9hZGluZ1wiLCBcInRoZW1lXCI6IFwib3V0bGluZWRcIiB9O1xuZXhwb3J0IGRlZmF1bHQgTG9hZGluZ091dGxpbmVkO1xuIiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbi8vIEdFTkVSQVRFIEJZIC4vc2NyaXB0cy9nZW5lcmF0ZS50c1xuLy8gRE9OIE5PVCBFRElUIElUIE1BTlVBTExZXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgTG9hZGluZ091dGxpbmVkU3ZnIGZyb20gXCJAYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL0xvYWRpbmdPdXRsaW5lZFwiO1xuaW1wb3J0IEFudGRJY29uIGZyb20gJy4uL2NvbXBvbmVudHMvQW50ZEljb24nO1xuXG52YXIgTG9hZGluZ091dGxpbmVkID0gZnVuY3Rpb24gTG9hZGluZ091dGxpbmVkKHByb3BzLCByZWYpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEFudGRJY29uLCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHByb3BzKSwge30sIHtcbiAgICByZWY6IHJlZixcbiAgICBpY29uOiBMb2FkaW5nT3V0bGluZWRTdmdcbiAgfSkpO1xufTtcblxuTG9hZGluZ091dGxpbmVkLmRpc3BsYXlOYW1lID0gJ0xvYWRpbmdPdXRsaW5lZCc7XG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihMb2FkaW5nT3V0bGluZWQpOyIsIi8vIFRoaXMgaWNvbiBmaWxlIGlzIGdlbmVyYXRlZCBhdXRvbWF0aWNhbGx5LlxudmFyIEV4Y2xhbWF0aW9uQ2lyY2xlRmlsbGVkID0geyBcImljb25cIjogeyBcInRhZ1wiOiBcInN2Z1wiLCBcImF0dHJzXCI6IHsgXCJ2aWV3Qm94XCI6IFwiNjQgNjQgODk2IDg5NlwiLCBcImZvY3VzYWJsZVwiOiBcImZhbHNlXCIgfSwgXCJjaGlsZHJlblwiOiBbeyBcInRhZ1wiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk01MTIgNjRDMjY0LjYgNjQgNjQgMjY0LjYgNjQgNTEyczIwMC42IDQ0OCA0NDggNDQ4IDQ0OC0yMDAuNiA0NDgtNDQ4Uzc1OS40IDY0IDUxMiA2NHptLTMyIDIzMmMwLTQuNCAzLjYtOCA4LThoNDhjNC40IDAgOCAzLjYgOCA4djI3MmMwIDQuNC0zLjYgOC04IDhoLTQ4Yy00LjQgMC04LTMuNi04LThWMjk2em0zMiA0NDBhNDguMDEgNDguMDEgMCAwMTAtOTYgNDguMDEgNDguMDEgMCAwMTAgOTZ6XCIgfSB9XSB9LCBcIm5hbWVcIjogXCJleGNsYW1hdGlvbi1jaXJjbGVcIiwgXCJ0aGVtZVwiOiBcImZpbGxlZFwiIH07XG5leHBvcnQgZGVmYXVsdCBFeGNsYW1hdGlvbkNpcmNsZUZpbGxlZDtcbiIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG4vLyBHRU5FUkFURSBCWSAuL3NjcmlwdHMvZ2VuZXJhdGUudHNcbi8vIERPTiBOT1QgRURJVCBJVCBNQU5VQUxMWVxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEV4Y2xhbWF0aW9uQ2lyY2xlRmlsbGVkU3ZnIGZyb20gXCJAYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL0V4Y2xhbWF0aW9uQ2lyY2xlRmlsbGVkXCI7XG5pbXBvcnQgQW50ZEljb24gZnJvbSAnLi4vY29tcG9uZW50cy9BbnRkSWNvbic7XG5cbnZhciBFeGNsYW1hdGlvbkNpcmNsZUZpbGxlZCA9IGZ1bmN0aW9uIEV4Y2xhbWF0aW9uQ2lyY2xlRmlsbGVkKHByb3BzLCByZWYpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEFudGRJY29uLCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHByb3BzKSwge30sIHtcbiAgICByZWY6IHJlZixcbiAgICBpY29uOiBFeGNsYW1hdGlvbkNpcmNsZUZpbGxlZFN2Z1xuICB9KSk7XG59O1xuXG5FeGNsYW1hdGlvbkNpcmNsZUZpbGxlZC5kaXNwbGF5TmFtZSA9ICdFeGNsYW1hdGlvbkNpcmNsZUZpbGxlZCc7XG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihFeGNsYW1hdGlvbkNpcmNsZUZpbGxlZCk7IiwiLy8gVGhpcyBpY29uIGZpbGUgaXMgZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkuXG52YXIgQ2xvc2VDaXJjbGVGaWxsZWQgPSB7IFwiaWNvblwiOiB7IFwidGFnXCI6IFwic3ZnXCIsIFwiYXR0cnNcIjogeyBcInZpZXdCb3hcIjogXCI2NCA2NCA4OTYgODk2XCIsIFwiZm9jdXNhYmxlXCI6IFwiZmFsc2VcIiB9LCBcImNoaWxkcmVuXCI6IFt7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTUxMiA2NEMyNjQuNiA2NCA2NCAyNjQuNiA2NCA1MTJzMjAwLjYgNDQ4IDQ0OCA0NDggNDQ4LTIwMC42IDQ0OC00NDhTNzU5LjQgNjQgNTEyIDY0em0xNjUuNCA2MTguMmwtNjYtLjNMNTEyIDU2My40bC05OS4zIDExOC40LTY2LjEuM2MtNC40IDAtOC0zLjUtOC04IDAtMS45LjctMy43IDEuOS01LjJsMTMwLjEtMTU1TDM0MC41IDM1OWE4LjMyIDguMzIgMCAwMS0xLjktNS4yYzAtNC40IDMuNi04IDgtOGw2Ni4xLjNMNTEyIDQ2NC42bDk5LjMtMTE4LjQgNjYtLjNjNC40IDAgOCAzLjUgOCA4IDAgMS45LS43IDMuNy0xLjkgNS4yTDU1My41IDUxNGwxMzAgMTU1YzEuMiAxLjUgMS45IDMuMyAxLjkgNS4yIDAgNC40LTMuNiA4LTggOHpcIiB9IH1dIH0sIFwibmFtZVwiOiBcImNsb3NlLWNpcmNsZVwiLCBcInRoZW1lXCI6IFwiZmlsbGVkXCIgfTtcbmV4cG9ydCBkZWZhdWx0IENsb3NlQ2lyY2xlRmlsbGVkO1xuIiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbi8vIEdFTkVSQVRFIEJZIC4vc2NyaXB0cy9nZW5lcmF0ZS50c1xuLy8gRE9OIE5PVCBFRElUIElUIE1BTlVBTExZXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQ2xvc2VDaXJjbGVGaWxsZWRTdmcgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zLXN2Zy9lcy9hc24vQ2xvc2VDaXJjbGVGaWxsZWRcIjtcbmltcG9ydCBBbnRkSWNvbiBmcm9tICcuLi9jb21wb25lbnRzL0FudGRJY29uJztcblxudmFyIENsb3NlQ2lyY2xlRmlsbGVkID0gZnVuY3Rpb24gQ2xvc2VDaXJjbGVGaWxsZWQocHJvcHMsIHJlZikge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQW50ZEljb24sIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcHJvcHMpLCB7fSwge1xuICAgIHJlZjogcmVmLFxuICAgIGljb246IENsb3NlQ2lyY2xlRmlsbGVkU3ZnXG4gIH0pKTtcbn07XG5cbkNsb3NlQ2lyY2xlRmlsbGVkLmRpc3BsYXlOYW1lID0gJ0Nsb3NlQ2lyY2xlRmlsbGVkJztcbmV4cG9ydCBkZWZhdWx0IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKENsb3NlQ2lyY2xlRmlsbGVkKTsiLCIvLyBUaGlzIGljb24gZmlsZSBpcyBnZW5lcmF0ZWQgYXV0b21hdGljYWxseS5cbnZhciBDaGVja0NpcmNsZUZpbGxlZCA9IHsgXCJpY29uXCI6IHsgXCJ0YWdcIjogXCJzdmdcIiwgXCJhdHRyc1wiOiB7IFwidmlld0JveFwiOiBcIjY0IDY0IDg5NiA4OTZcIiwgXCJmb2N1c2FibGVcIjogXCJmYWxzZVwiIH0sIFwiY2hpbGRyZW5cIjogW3sgXCJ0YWdcIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNNTEyIDY0QzI2NC42IDY0IDY0IDI2NC42IDY0IDUxMnMyMDAuNiA0NDggNDQ4IDQ0OCA0NDgtMjAwLjYgNDQ4LTQ0OFM3NTkuNCA2NCA1MTIgNjR6bTE5My41IDMwMS43bC0yMTAuNiAyOTJhMzEuOCAzMS44IDAgMDEtNTEuNyAwTDMxOC41IDQ4NC45Yy0zLjgtNS4zIDAtMTIuNyA2LjUtMTIuN2g0Ni45YzEwLjIgMCAxOS45IDQuOSAyNS45IDEzLjNsNzEuMiA5OC44IDE1Ny4yLTIxOGM2LTguMyAxNS42LTEzLjMgMjUuOS0xMy4zSDY5OWM2LjUgMCAxMC4zIDcuNCA2LjUgMTIuN3pcIiB9IH1dIH0sIFwibmFtZVwiOiBcImNoZWNrLWNpcmNsZVwiLCBcInRoZW1lXCI6IFwiZmlsbGVkXCIgfTtcbmV4cG9ydCBkZWZhdWx0IENoZWNrQ2lyY2xlRmlsbGVkO1xuIiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbi8vIEdFTkVSQVRFIEJZIC4vc2NyaXB0cy9nZW5lcmF0ZS50c1xuLy8gRE9OIE5PVCBFRElUIElUIE1BTlVBTExZXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQ2hlY2tDaXJjbGVGaWxsZWRTdmcgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zLXN2Zy9lcy9hc24vQ2hlY2tDaXJjbGVGaWxsZWRcIjtcbmltcG9ydCBBbnRkSWNvbiBmcm9tICcuLi9jb21wb25lbnRzL0FudGRJY29uJztcblxudmFyIENoZWNrQ2lyY2xlRmlsbGVkID0gZnVuY3Rpb24gQ2hlY2tDaXJjbGVGaWxsZWQocHJvcHMsIHJlZikge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQW50ZEljb24sIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcHJvcHMpLCB7fSwge1xuICAgIHJlZjogcmVmLFxuICAgIGljb246IENoZWNrQ2lyY2xlRmlsbGVkU3ZnXG4gIH0pKTtcbn07XG5cbkNoZWNrQ2lyY2xlRmlsbGVkLmRpc3BsYXlOYW1lID0gJ0NoZWNrQ2lyY2xlRmlsbGVkJztcbmV4cG9ydCBkZWZhdWx0IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKENoZWNrQ2lyY2xlRmlsbGVkKTsiLCIvLyBUaGlzIGljb24gZmlsZSBpcyBnZW5lcmF0ZWQgYXV0b21hdGljYWxseS5cbnZhciBJbmZvQ2lyY2xlRmlsbGVkID0geyBcImljb25cIjogeyBcInRhZ1wiOiBcInN2Z1wiLCBcImF0dHJzXCI6IHsgXCJ2aWV3Qm94XCI6IFwiNjQgNjQgODk2IDg5NlwiLCBcImZvY3VzYWJsZVwiOiBcImZhbHNlXCIgfSwgXCJjaGlsZHJlblwiOiBbeyBcInRhZ1wiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk01MTIgNjRDMjY0LjYgNjQgNjQgMjY0LjYgNjQgNTEyczIwMC42IDQ0OCA0NDggNDQ4IDQ0OC0yMDAuNiA0NDgtNDQ4Uzc1OS40IDY0IDUxMiA2NHptMzIgNjY0YzAgNC40LTMuNiA4LTggOGgtNDhjLTQuNCAwLTgtMy42LTgtOFY0NTZjMC00LjQgMy42LTggOC04aDQ4YzQuNCAwIDggMy42IDggOHYyNzJ6bS0zMi0zNDRhNDguMDEgNDguMDEgMCAwMTAtOTYgNDguMDEgNDguMDEgMCAwMTAgOTZ6XCIgfSB9XSB9LCBcIm5hbWVcIjogXCJpbmZvLWNpcmNsZVwiLCBcInRoZW1lXCI6IFwiZmlsbGVkXCIgfTtcbmV4cG9ydCBkZWZhdWx0IEluZm9DaXJjbGVGaWxsZWQ7XG4iLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuLy8gR0VORVJBVEUgQlkgLi9zY3JpcHRzL2dlbmVyYXRlLnRzXG4vLyBET04gTk9UIEVESVQgSVQgTUFOVUFMTFlcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbmZvQ2lyY2xlRmlsbGVkU3ZnIGZyb20gXCJAYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL0luZm9DaXJjbGVGaWxsZWRcIjtcbmltcG9ydCBBbnRkSWNvbiBmcm9tICcuLi9jb21wb25lbnRzL0FudGRJY29uJztcblxudmFyIEluZm9DaXJjbGVGaWxsZWQgPSBmdW5jdGlvbiBJbmZvQ2lyY2xlRmlsbGVkKHByb3BzLCByZWYpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEFudGRJY29uLCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHByb3BzKSwge30sIHtcbiAgICByZWY6IHJlZixcbiAgICBpY29uOiBJbmZvQ2lyY2xlRmlsbGVkU3ZnXG4gIH0pKTtcbn07XG5cbkluZm9DaXJjbGVGaWxsZWQuZGlzcGxheU5hbWUgPSAnSW5mb0NpcmNsZUZpbGxlZCc7XG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihJbmZvQ2lyY2xlRmlsbGVkKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSQ05vdGlmaWNhdGlvbiBmcm9tICdyYy1ub3RpZmljYXRpb24nO1xuaW1wb3J0IExvYWRpbmdPdXRsaW5lZCBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMvZXMvaWNvbnMvTG9hZGluZ091dGxpbmVkXCI7XG5pbXBvcnQgRXhjbGFtYXRpb25DaXJjbGVGaWxsZWQgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL0V4Y2xhbWF0aW9uQ2lyY2xlRmlsbGVkXCI7XG5pbXBvcnQgQ2xvc2VDaXJjbGVGaWxsZWQgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL0Nsb3NlQ2lyY2xlRmlsbGVkXCI7XG5pbXBvcnQgQ2hlY2tDaXJjbGVGaWxsZWQgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL0NoZWNrQ2lyY2xlRmlsbGVkXCI7XG5pbXBvcnQgSW5mb0NpcmNsZUZpbGxlZCBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMvZXMvaWNvbnMvSW5mb0NpcmNsZUZpbGxlZFwiO1xuaW1wb3J0IGNyZWF0ZVVzZU1lc3NhZ2UgZnJvbSAnLi9ob29rcy91c2VNZXNzYWdlJztcbmltcG9ydCBDb25maWdQcm92aWRlciwgeyBnbG9iYWxDb25maWcgfSBmcm9tICcuLi9jb25maWctcHJvdmlkZXInO1xudmFyIG1lc3NhZ2VJbnN0YW5jZTtcbnZhciBkZWZhdWx0RHVyYXRpb24gPSAzO1xudmFyIGRlZmF1bHRUb3A7XG52YXIga2V5ID0gMTtcbnZhciBsb2NhbFByZWZpeENscyA9ICcnO1xudmFyIHRyYW5zaXRpb25OYW1lID0gJ21vdmUtdXAnO1xudmFyIGhhc1RyYW5zaXRpb25OYW1lID0gZmFsc2U7XG52YXIgZ2V0Q29udGFpbmVyO1xudmFyIG1heENvdW50O1xudmFyIHJ0bCA9IGZhbHNlO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEtleVRoZW5JbmNyZWFzZUtleSgpIHtcbiAgcmV0dXJuIGtleSsrO1xufVxuXG5mdW5jdGlvbiBzZXRNZXNzYWdlQ29uZmlnKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMudG9wICE9PSB1bmRlZmluZWQpIHtcbiAgICBkZWZhdWx0VG9wID0gb3B0aW9ucy50b3A7XG4gICAgbWVzc2FnZUluc3RhbmNlID0gbnVsbDsgLy8gZGVsZXRlIG1lc3NhZ2VJbnN0YW5jZSBmb3IgbmV3IGRlZmF1bHRUb3BcbiAgfVxuXG4gIGlmIChvcHRpb25zLmR1cmF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICBkZWZhdWx0RHVyYXRpb24gPSBvcHRpb25zLmR1cmF0aW9uO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMucHJlZml4Q2xzICE9PSB1bmRlZmluZWQpIHtcbiAgICBsb2NhbFByZWZpeENscyA9IG9wdGlvbnMucHJlZml4Q2xzO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuZ2V0Q29udGFpbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICBnZXRDb250YWluZXIgPSBvcHRpb25zLmdldENvbnRhaW5lcjtcbiAgICBtZXNzYWdlSW5zdGFuY2UgPSBudWxsOyAvLyBkZWxldGUgbWVzc2FnZUluc3RhbmNlIGZvciBuZXcgZ2V0Q29udGFpbmVyXG4gIH1cblxuICBpZiAob3B0aW9ucy50cmFuc2l0aW9uTmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdHJhbnNpdGlvbk5hbWUgPSBvcHRpb25zLnRyYW5zaXRpb25OYW1lO1xuICAgIG1lc3NhZ2VJbnN0YW5jZSA9IG51bGw7IC8vIGRlbGV0ZSBtZXNzYWdlSW5zdGFuY2UgZm9yIG5ldyB0cmFuc2l0aW9uTmFtZVxuXG4gICAgaGFzVHJhbnNpdGlvbk5hbWUgPSB0cnVlO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMubWF4Q291bnQgIT09IHVuZGVmaW5lZCkge1xuICAgIG1heENvdW50ID0gb3B0aW9ucy5tYXhDb3VudDtcbiAgICBtZXNzYWdlSW5zdGFuY2UgPSBudWxsO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMucnRsICE9PSB1bmRlZmluZWQpIHtcbiAgICBydGwgPSBvcHRpb25zLnJ0bDtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRSQ05vdGlmaWNhdGlvbkluc3RhbmNlKGFyZ3MsIGNhbGxiYWNrKSB7XG4gIHZhciBjdXN0b21pemVQcmVmaXhDbHMgPSBhcmdzLnByZWZpeENscyxcbiAgICAgIGdldENvbnRleHRQb3B1cENvbnRhaW5lciA9IGFyZ3MuZ2V0UG9wdXBDb250YWluZXI7XG5cbiAgdmFyIF9nbG9iYWxDb25maWcgPSBnbG9iYWxDb25maWcoKSxcbiAgICAgIGdldFByZWZpeENscyA9IF9nbG9iYWxDb25maWcuZ2V0UHJlZml4Q2xzLFxuICAgICAgZ2V0Um9vdFByZWZpeENscyA9IF9nbG9iYWxDb25maWcuZ2V0Um9vdFByZWZpeENscyxcbiAgICAgIGdldEljb25QcmVmaXhDbHMgPSBfZ2xvYmFsQ29uZmlnLmdldEljb25QcmVmaXhDbHM7XG5cbiAgdmFyIHByZWZpeENscyA9IGdldFByZWZpeENscygnbWVzc2FnZScsIGN1c3RvbWl6ZVByZWZpeENscyB8fCBsb2NhbFByZWZpeENscyk7XG4gIHZhciByb290UHJlZml4Q2xzID0gZ2V0Um9vdFByZWZpeENscyhhcmdzLnJvb3RQcmVmaXhDbHMsIHByZWZpeENscyk7XG4gIHZhciBpY29uUHJlZml4Q2xzID0gZ2V0SWNvblByZWZpeENscygpO1xuXG4gIGlmIChtZXNzYWdlSW5zdGFuY2UpIHtcbiAgICBjYWxsYmFjayh7XG4gICAgICBwcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICAgIHJvb3RQcmVmaXhDbHM6IHJvb3RQcmVmaXhDbHMsXG4gICAgICBpY29uUHJlZml4Q2xzOiBpY29uUHJlZml4Q2xzLFxuICAgICAgaW5zdGFuY2U6IG1lc3NhZ2VJbnN0YW5jZVxuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBpbnN0YW5jZUNvbmZpZyA9IHtcbiAgICBwcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICB0cmFuc2l0aW9uTmFtZTogaGFzVHJhbnNpdGlvbk5hbWUgPyB0cmFuc2l0aW9uTmFtZSA6IFwiXCIuY29uY2F0KHJvb3RQcmVmaXhDbHMsIFwiLVwiKS5jb25jYXQodHJhbnNpdGlvbk5hbWUpLFxuICAgIHN0eWxlOiB7XG4gICAgICB0b3A6IGRlZmF1bHRUb3BcbiAgICB9LFxuICAgIGdldENvbnRhaW5lcjogZ2V0Q29udGFpbmVyIHx8IGdldENvbnRleHRQb3B1cENvbnRhaW5lcixcbiAgICBtYXhDb3VudDogbWF4Q291bnRcbiAgfTtcbiAgUkNOb3RpZmljYXRpb24ubmV3SW5zdGFuY2UoaW5zdGFuY2VDb25maWcsIGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgIGlmIChtZXNzYWdlSW5zdGFuY2UpIHtcbiAgICAgIGNhbGxiYWNrKHtcbiAgICAgICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMsXG4gICAgICAgIHJvb3RQcmVmaXhDbHM6IHJvb3RQcmVmaXhDbHMsXG4gICAgICAgIGljb25QcmVmaXhDbHM6IGljb25QcmVmaXhDbHMsXG4gICAgICAgIGluc3RhbmNlOiBtZXNzYWdlSW5zdGFuY2VcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG1lc3NhZ2VJbnN0YW5jZSA9IGluc3RhbmNlO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAndGVzdCcpIHtcbiAgICAgIG1lc3NhZ2VJbnN0YW5jZS5jb25maWcgPSBpbnN0YW5jZUNvbmZpZztcbiAgICB9XG5cbiAgICBjYWxsYmFjayh7XG4gICAgICBwcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICAgIHJvb3RQcmVmaXhDbHM6IHJvb3RQcmVmaXhDbHMsXG4gICAgICBpY29uUHJlZml4Q2xzOiBpY29uUHJlZml4Q2xzLFxuICAgICAgaW5zdGFuY2U6IGluc3RhbmNlXG4gICAgfSk7XG4gIH0pO1xufVxuXG52YXIgdHlwZVRvSWNvbiA9IHtcbiAgaW5mbzogSW5mb0NpcmNsZUZpbGxlZCxcbiAgc3VjY2VzczogQ2hlY2tDaXJjbGVGaWxsZWQsXG4gIGVycm9yOiBDbG9zZUNpcmNsZUZpbGxlZCxcbiAgd2FybmluZzogRXhjbGFtYXRpb25DaXJjbGVGaWxsZWQsXG4gIGxvYWRpbmc6IExvYWRpbmdPdXRsaW5lZFxufTtcbmV4cG9ydCB2YXIgdHlwZUxpc3QgPSBPYmplY3Qua2V5cyh0eXBlVG9JY29uKTtcblxuZnVuY3Rpb24gZ2V0UkNOb3RpY2VQcm9wcyhhcmdzLCBwcmVmaXhDbHMsIGljb25QcmVmaXhDbHMpIHtcbiAgdmFyIF9jbGFzc05hbWVzO1xuXG4gIHZhciBkdXJhdGlvbiA9IGFyZ3MuZHVyYXRpb24gIT09IHVuZGVmaW5lZCA/IGFyZ3MuZHVyYXRpb24gOiBkZWZhdWx0RHVyYXRpb247XG4gIHZhciBJY29uQ29tcG9uZW50ID0gdHlwZVRvSWNvblthcmdzLnR5cGVdO1xuICB2YXIgbWVzc2FnZUNsYXNzID0gY2xhc3NOYW1lcyhcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWN1c3RvbS1jb250ZW50XCIpLCAoX2NsYXNzTmFtZXMgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLVwiKS5jb25jYXQoYXJncy50eXBlKSwgYXJncy50eXBlKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXJ0bFwiKSwgcnRsID09PSB0cnVlKSwgX2NsYXNzTmFtZXMpKTtcbiAgcmV0dXJuIHtcbiAgICBrZXk6IGFyZ3Mua2V5LFxuICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICBzdHlsZTogYXJncy5zdHlsZSB8fCB7fSxcbiAgICBjbGFzc05hbWU6IGFyZ3MuY2xhc3NOYW1lLFxuICAgIGNvbnRlbnQ6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbmZpZ1Byb3ZpZGVyLCB7XG4gICAgICBpY29uUHJlZml4Q2xzOiBpY29uUHJlZml4Q2xzXG4gICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBtZXNzYWdlQ2xhc3NcbiAgICB9LCBhcmdzLmljb24gfHwgSWNvbkNvbXBvbmVudCAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJY29uQ29tcG9uZW50LCBudWxsKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIG51bGwsIGFyZ3MuY29udGVudCkpKSxcbiAgICBvbkNsb3NlOiBhcmdzLm9uQ2xvc2UsXG4gICAgb25DbGljazogYXJncy5vbkNsaWNrXG4gIH07XG59XG5cbmZ1bmN0aW9uIG5vdGljZShhcmdzKSB7XG4gIHZhciB0YXJnZXQgPSBhcmdzLmtleSB8fCBnZXRLZXlUaGVuSW5jcmVhc2VLZXkoKTtcbiAgdmFyIGNsb3NlUHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gY2FsbGJhY2soKSB7XG4gICAgICBpZiAodHlwZW9mIGFyZ3Mub25DbG9zZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBhcmdzLm9uQ2xvc2UoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc29sdmUodHJ1ZSk7XG4gICAgfTtcblxuICAgIGdldFJDTm90aWZpY2F0aW9uSW5zdGFuY2UoYXJncywgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBwcmVmaXhDbHMgPSBfcmVmLnByZWZpeENscyxcbiAgICAgICAgICBpY29uUHJlZml4Q2xzID0gX3JlZi5pY29uUHJlZml4Q2xzLFxuICAgICAgICAgIGluc3RhbmNlID0gX3JlZi5pbnN0YW5jZTtcbiAgICAgIGluc3RhbmNlLm5vdGljZShnZXRSQ05vdGljZVByb3BzKF9leHRlbmRzKF9leHRlbmRzKHt9LCBhcmdzKSwge1xuICAgICAgICBrZXk6IHRhcmdldCxcbiAgICAgICAgb25DbG9zZTogY2FsbGJhY2tcbiAgICAgIH0pLCBwcmVmaXhDbHMsIGljb25QcmVmaXhDbHMpKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgdmFyIHJlc3VsdCA9IGZ1bmN0aW9uIHJlc3VsdCgpIHtcbiAgICBpZiAobWVzc2FnZUluc3RhbmNlKSB7XG4gICAgICBtZXNzYWdlSW5zdGFuY2UucmVtb3ZlTm90aWNlKHRhcmdldCk7XG4gICAgfVxuICB9O1xuXG4gIHJlc3VsdC50aGVuID0gZnVuY3Rpb24gKGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgICByZXR1cm4gY2xvc2VQcm9taXNlLnRoZW4oZmlsbGVkLCByZWplY3RlZCk7XG4gIH07XG5cbiAgcmVzdWx0LnByb21pc2UgPSBjbG9zZVByb21pc2U7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGlzQXJnc1Byb3BzKGNvbnRlbnQpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChjb250ZW50KSA9PT0gJ1tvYmplY3QgT2JqZWN0XScgJiYgISFjb250ZW50LmNvbnRlbnQ7XG59XG5cbnZhciBhcGkgPSB7XG4gIG9wZW46IG5vdGljZSxcbiAgY29uZmlnOiBzZXRNZXNzYWdlQ29uZmlnLFxuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KG1lc3NhZ2VLZXkpIHtcbiAgICBpZiAobWVzc2FnZUluc3RhbmNlKSB7XG4gICAgICBpZiAobWVzc2FnZUtleSkge1xuICAgICAgICB2YXIgX21lc3NhZ2VJbnN0YW5jZSA9IG1lc3NhZ2VJbnN0YW5jZSxcbiAgICAgICAgICAgIHJlbW92ZU5vdGljZSA9IF9tZXNzYWdlSW5zdGFuY2UucmVtb3ZlTm90aWNlO1xuICAgICAgICByZW1vdmVOb3RpY2UobWVzc2FnZUtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgX21lc3NhZ2VJbnN0YW5jZTIgPSBtZXNzYWdlSW5zdGFuY2UsXG4gICAgICAgICAgICBkZXN0cm95ID0gX21lc3NhZ2VJbnN0YW5jZTIuZGVzdHJveTtcbiAgICAgICAgZGVzdHJveSgpO1xuICAgICAgICBtZXNzYWdlSW5zdGFuY2UgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbmV4cG9ydCBmdW5jdGlvbiBhdHRhY2hUeXBlQXBpKG9yaWdpbmFsQXBpLCB0eXBlKSB7XG4gIG9yaWdpbmFsQXBpW3R5cGVdID0gZnVuY3Rpb24gKGNvbnRlbnQsIGR1cmF0aW9uLCBvbkNsb3NlKSB7XG4gICAgaWYgKGlzQXJnc1Byb3BzKGNvbnRlbnQpKSB7XG4gICAgICByZXR1cm4gb3JpZ2luYWxBcGkub3BlbihfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgY29udGVudCksIHtcbiAgICAgICAgdHlwZTogdHlwZVxuICAgICAgfSkpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZHVyYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG9uQ2xvc2UgPSBkdXJhdGlvbjtcbiAgICAgIGR1cmF0aW9uID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiBvcmlnaW5hbEFwaS5vcGVuKHtcbiAgICAgIGNvbnRlbnQ6IGNvbnRlbnQsXG4gICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgb25DbG9zZTogb25DbG9zZVxuICAgIH0pO1xuICB9O1xufVxudHlwZUxpc3QuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICByZXR1cm4gYXR0YWNoVHlwZUFwaShhcGksIHR5cGUpO1xufSk7XG5hcGkud2FybiA9IGFwaS53YXJuaW5nO1xuYXBpLnVzZU1lc3NhZ2UgPSBjcmVhdGVVc2VNZXNzYWdlKGdldFJDTm90aWZpY2F0aW9uSW5zdGFuY2UsIGdldFJDTm90aWNlUHJvcHMpO1xuLyoqIEBwcml2YXRlIHRlc3QgT25seSBmdW5jdGlvbi4gTm90IHdvcmsgb24gcHJvZHVjdGlvbiAqL1xuXG5leHBvcnQgdmFyIGdldEluc3RhbmNlID0gZnVuY3Rpb24gZ2V0SW5zdGFuY2UoKSB7XG4gIHJldHVybiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Rlc3QnID8gbWVzc2FnZUluc3RhbmNlIDogbnVsbDtcbn07XG5leHBvcnQgZGVmYXVsdCBhcGk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB1c2VSQ05vdGlmaWNhdGlvbiBmcm9tIFwicmMtbm90aWZpY2F0aW9uL2VzL3VzZU5vdGlmaWNhdGlvblwiO1xuaW1wb3J0IHsgQ29uZmlnQ29uc3VtZXIgfSBmcm9tICcuLi8uLi9jb25maWctcHJvdmlkZXInO1xuaW1wb3J0IHsgYXR0YWNoVHlwZUFwaSwgZ2V0S2V5VGhlbkluY3JlYXNlS2V5LCB0eXBlTGlzdCB9IGZyb20gJy4uJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVVzZU1lc3NhZ2UoZ2V0UmNOb3RpZmljYXRpb25JbnN0YW5jZSwgZ2V0UkNOb3RpY2VQcm9wcykge1xuICB2YXIgdXNlTWVzc2FnZSA9IGZ1bmN0aW9uIHVzZU1lc3NhZ2UoKSB7XG4gICAgLy8gV2UgY2FuIG9ubHkgZ2V0IGNvbnRlbnQgYnkgcmVuZGVyXG4gICAgdmFyIGdldFByZWZpeENscztcbiAgICB2YXIgZ2V0UG9wdXBDb250YWluZXI7IC8vIFdlIGNyZWF0ZSBhIHByb3h5IHRvIGhhbmRsZSBkZWxheSBjcmVhdGVkIGluc3RhbmNlXG5cbiAgICB2YXIgaW5uZXJJbnN0YW5jZSA9IG51bGw7XG4gICAgdmFyIHByb3h5ID0ge1xuICAgICAgYWRkOiBmdW5jdGlvbiBhZGQobm90aWNlUHJvcHMsIGhvbGRlckNhbGxiYWNrKSB7XG4gICAgICAgIGlubmVySW5zdGFuY2UgPT09IG51bGwgfHwgaW5uZXJJbnN0YW5jZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5uZXJJbnN0YW5jZS5jb21wb25lbnQuYWRkKG5vdGljZVByb3BzLCBob2xkZXJDYWxsYmFjayk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBfdXNlUkNOb3RpZmljYXRpb24gPSB1c2VSQ05vdGlmaWNhdGlvbihwcm94eSksXG4gICAgICAgIF91c2VSQ05vdGlmaWNhdGlvbjIgPSBfc2xpY2VkVG9BcnJheShfdXNlUkNOb3RpZmljYXRpb24sIDIpLFxuICAgICAgICBob29rTm90aWZ5ID0gX3VzZVJDTm90aWZpY2F0aW9uMlswXSxcbiAgICAgICAgaG9sZGVyID0gX3VzZVJDTm90aWZpY2F0aW9uMlsxXTtcblxuICAgIGZ1bmN0aW9uIG5vdGlmeShhcmdzKSB7XG4gICAgICB2YXIgY3VzdG9taXplUHJlZml4Q2xzID0gYXJncy5wcmVmaXhDbHM7XG4gICAgICB2YXIgbWVyZ2VkUHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdtZXNzYWdlJywgY3VzdG9taXplUHJlZml4Q2xzKTtcbiAgICAgIHZhciByb290UHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCk7XG4gICAgICB2YXIgdGFyZ2V0ID0gYXJncy5rZXkgfHwgZ2V0S2V5VGhlbkluY3JlYXNlS2V5KCk7XG4gICAgICB2YXIgY2xvc2VQcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gY2FsbGJhY2soKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBhcmdzLm9uQ2xvc2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGFyZ3Mub25DbG9zZSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiByZXNvbHZlKHRydWUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGdldFJjTm90aWZpY2F0aW9uSW5zdGFuY2UoX2V4dGVuZHMoX2V4dGVuZHMoe30sIGFyZ3MpLCB7XG4gICAgICAgICAgcHJlZml4Q2xzOiBtZXJnZWRQcmVmaXhDbHMsXG4gICAgICAgICAgcm9vdFByZWZpeENsczogcm9vdFByZWZpeENscyxcbiAgICAgICAgICBnZXRQb3B1cENvbnRhaW5lcjogZ2V0UG9wdXBDb250YWluZXJcbiAgICAgICAgfSksIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgICAgdmFyIHByZWZpeENscyA9IF9yZWYucHJlZml4Q2xzLFxuICAgICAgICAgICAgICBpbnN0YW5jZSA9IF9yZWYuaW5zdGFuY2U7XG4gICAgICAgICAgaW5uZXJJbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgICAgICAgIGhvb2tOb3RpZnkoZ2V0UkNOb3RpY2VQcm9wcyhfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgYXJncyksIHtcbiAgICAgICAgICAgIGtleTogdGFyZ2V0LFxuICAgICAgICAgICAgb25DbG9zZTogY2FsbGJhY2tcbiAgICAgICAgICB9KSwgcHJlZml4Q2xzKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciByZXN1bHQgPSBmdW5jdGlvbiByZXN1bHQoKSB7XG4gICAgICAgIGlmIChpbm5lckluc3RhbmNlKSB7XG4gICAgICAgICAgaW5uZXJJbnN0YW5jZS5yZW1vdmVOb3RpY2UodGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcmVzdWx0LnRoZW4gPSBmdW5jdGlvbiAoZmlsbGVkLCByZWplY3RlZCkge1xuICAgICAgICByZXR1cm4gY2xvc2VQcm9taXNlLnRoZW4oZmlsbGVkLCByZWplY3RlZCk7XG4gICAgICB9O1xuXG4gICAgICByZXN1bHQucHJvbWlzZSA9IGNsb3NlUHJvbWlzZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSAvLyBGaWxsIGZ1bmN0aW9uc1xuXG5cbiAgICB2YXIgaG9va0FwaVJlZiA9IFJlYWN0LnVzZVJlZih7fSk7XG4gICAgaG9va0FwaVJlZi5jdXJyZW50Lm9wZW4gPSBub3RpZnk7XG4gICAgdHlwZUxpc3QuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgcmV0dXJuIGF0dGFjaFR5cGVBcGkoaG9va0FwaVJlZi5jdXJyZW50LCB0eXBlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2hvb2tBcGlSZWYuY3VycmVudCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29uZmlnQ29uc3VtZXIsIHtcbiAgICAgIGtleTogXCJob2xkZXJcIlxuICAgIH0sIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICBnZXRQcmVmaXhDbHMgPSBjb250ZXh0LmdldFByZWZpeENscztcbiAgICAgIGdldFBvcHVwQ29udGFpbmVyID0gY29udGV4dC5nZXRQb3B1cENvbnRhaW5lcjtcbiAgICAgIHJldHVybiBob2xkZXI7XG4gICAgfSldO1xuICB9O1xuXG4gIHJldHVybiB1c2VNZXNzYWdlO1xufSIsImltcG9ydCB7IG51bWJlcklucHV0VG9PYmplY3QsIHJnYmFUb0hleCwgcmdiVG9IZXgsIHJnYlRvSHNsLCByZ2JUb0hzdiB9IGZyb20gJy4vY29udmVyc2lvbic7XG5pbXBvcnQgeyBuYW1lcyB9IGZyb20gJy4vY3NzLWNvbG9yLW5hbWVzJztcbmltcG9ydCB7IGlucHV0VG9SR0IgfSBmcm9tICcuL2Zvcm1hdC1pbnB1dCc7XG5pbXBvcnQgeyBib3VuZDAxLCBib3VuZEFscGhhLCBjbGFtcDAxIH0gZnJvbSAnLi91dGlsJztcbnZhciBUaW55Q29sb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGlueUNvbG9yKGNvbG9yLCBvcHRzKSB7XG4gICAgICAgIGlmIChjb2xvciA9PT0gdm9pZCAwKSB7IGNvbG9yID0gJyc7IH1cbiAgICAgICAgaWYgKG9wdHMgPT09IHZvaWQgMCkgeyBvcHRzID0ge307IH1cbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAvLyBJZiBpbnB1dCBpcyBhbHJlYWR5IGEgdGlueWNvbG9yLCByZXR1cm4gaXRzZWxmXG4gICAgICAgIGlmIChjb2xvciBpbnN0YW5jZW9mIFRpbnlDb2xvcikge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0cnVjdG9yLXJldHVyblxuICAgICAgICAgICAgcmV0dXJuIGNvbG9yO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgY29sb3IgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBjb2xvciA9IG51bWJlcklucHV0VG9PYmplY3QoY29sb3IpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3JpZ2luYWxJbnB1dCA9IGNvbG9yO1xuICAgICAgICB2YXIgcmdiID0gaW5wdXRUb1JHQihjb2xvcik7XG4gICAgICAgIHRoaXMub3JpZ2luYWxJbnB1dCA9IGNvbG9yO1xuICAgICAgICB0aGlzLnIgPSByZ2IucjtcbiAgICAgICAgdGhpcy5nID0gcmdiLmc7XG4gICAgICAgIHRoaXMuYiA9IHJnYi5iO1xuICAgICAgICB0aGlzLmEgPSByZ2IuYTtcbiAgICAgICAgdGhpcy5yb3VuZEEgPSBNYXRoLnJvdW5kKDEwMCAqIHRoaXMuYSkgLyAxMDA7XG4gICAgICAgIHRoaXMuZm9ybWF0ID0gKF9hID0gb3B0cy5mb3JtYXQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHJnYi5mb3JtYXQ7XG4gICAgICAgIHRoaXMuZ3JhZGllbnRUeXBlID0gb3B0cy5ncmFkaWVudFR5cGU7XG4gICAgICAgIC8vIERvbid0IGxldCB0aGUgcmFuZ2Ugb2YgWzAsMjU1XSBjb21lIGJhY2sgaW4gWzAsMV0uXG4gICAgICAgIC8vIFBvdGVudGlhbGx5IGxvc2UgYSBsaXR0bGUgYml0IG9mIHByZWNpc2lvbiBoZXJlLCBidXQgd2lsbCBmaXggaXNzdWVzIHdoZXJlXG4gICAgICAgIC8vIC41IGdldHMgaW50ZXJwcmV0ZWQgYXMgaGFsZiBvZiB0aGUgdG90YWwsIGluc3RlYWQgb2YgaGFsZiBvZiAxXG4gICAgICAgIC8vIElmIGl0IHdhcyBzdXBwb3NlZCB0byBiZSAxMjgsIHRoaXMgd2FzIGFscmVhZHkgdGFrZW4gY2FyZSBvZiBieSBgaW5wdXRUb1JnYmBcbiAgICAgICAgaWYgKHRoaXMuciA8IDEpIHtcbiAgICAgICAgICAgIHRoaXMuciA9IE1hdGgucm91bmQodGhpcy5yKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5nIDwgMSkge1xuICAgICAgICAgICAgdGhpcy5nID0gTWF0aC5yb3VuZCh0aGlzLmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmIgPCAxKSB7XG4gICAgICAgICAgICB0aGlzLmIgPSBNYXRoLnJvdW5kKHRoaXMuYik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc1ZhbGlkID0gcmdiLm9rO1xuICAgIH1cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLmlzRGFyayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QnJpZ2h0bmVzcygpIDwgMTI4O1xuICAgIH07XG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS5pc0xpZ2h0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuaXNEYXJrKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBwZXJjZWl2ZWQgYnJpZ2h0bmVzcyBvZiB0aGUgY29sb3IsIGZyb20gMC0yNTUuXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS5nZXRCcmlnaHRuZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9BRVJUI2NvbG9yLWNvbnRyYXN0XG4gICAgICAgIHZhciByZ2IgPSB0aGlzLnRvUmdiKCk7XG4gICAgICAgIHJldHVybiAocmdiLnIgKiAyOTkgKyByZ2IuZyAqIDU4NyArIHJnYi5iICogMTE0KSAvIDEwMDA7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBwZXJjZWl2ZWQgbHVtaW5hbmNlIG9mIGEgY29sb3IsIGZyb20gMC0xLlxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUuZ2V0THVtaW5hbmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1XQ0FHMjAtMjAwODEyMTEvI3JlbGF0aXZlbHVtaW5hbmNlZGVmXG4gICAgICAgIHZhciByZ2IgPSB0aGlzLnRvUmdiKCk7XG4gICAgICAgIHZhciBSO1xuICAgICAgICB2YXIgRztcbiAgICAgICAgdmFyIEI7XG4gICAgICAgIHZhciBSc1JHQiA9IHJnYi5yIC8gMjU1O1xuICAgICAgICB2YXIgR3NSR0IgPSByZ2IuZyAvIDI1NTtcbiAgICAgICAgdmFyIEJzUkdCID0gcmdiLmIgLyAyNTU7XG4gICAgICAgIGlmIChSc1JHQiA8PSAwLjAzOTI4KSB7XG4gICAgICAgICAgICBSID0gUnNSR0IgLyAxMi45MjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZXhwb25lbnRpYXRpb24tb3BlcmF0b3JcbiAgICAgICAgICAgIFIgPSBNYXRoLnBvdygoUnNSR0IgKyAwLjA1NSkgLyAxLjA1NSwgMi40KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoR3NSR0IgPD0gMC4wMzkyOCkge1xuICAgICAgICAgICAgRyA9IEdzUkdCIC8gMTIuOTI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWV4cG9uZW50aWF0aW9uLW9wZXJhdG9yXG4gICAgICAgICAgICBHID0gTWF0aC5wb3coKEdzUkdCICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEJzUkdCIDw9IDAuMDM5MjgpIHtcbiAgICAgICAgICAgIEIgPSBCc1JHQiAvIDEyLjkyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1leHBvbmVudGlhdGlvbi1vcGVyYXRvclxuICAgICAgICAgICAgQiA9IE1hdGgucG93KChCc1JHQiArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwLjIxMjYgKiBSICsgMC43MTUyICogRyArIDAuMDcyMiAqIEI7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBhbHBoYSB2YWx1ZSBvZiBhIGNvbG9yLCBmcm9tIDAtMS5cbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLmdldEFscGhhID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYWxwaGEgdmFsdWUgb24gdGhlIGN1cnJlbnQgY29sb3IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYWxwaGEgLSBUaGUgbmV3IGFscGhhIHZhbHVlLiBUaGUgYWNjZXB0ZWQgcmFuZ2UgaXMgMC0xLlxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUuc2V0QWxwaGEgPSBmdW5jdGlvbiAoYWxwaGEpIHtcbiAgICAgICAgdGhpcy5hID0gYm91bmRBbHBoYShhbHBoYSk7XG4gICAgICAgIHRoaXMucm91bmRBID0gTWF0aC5yb3VuZCgxMDAgKiB0aGlzLmEpIC8gMTAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG9iamVjdCBhcyBhIEhTVkEgb2JqZWN0LlxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUudG9Ic3YgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBoc3YgPSByZ2JUb0hzdih0aGlzLnIsIHRoaXMuZywgdGhpcy5iKTtcbiAgICAgICAgcmV0dXJuIHsgaDogaHN2LmggKiAzNjAsIHM6IGhzdi5zLCB2OiBoc3YudiwgYTogdGhpcy5hIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBoc3ZhIHZhbHVlcyBpbnRlcnBvbGF0ZWQgaW50byBhIHN0cmluZyB3aXRoIHRoZSBmb2xsb3dpbmcgZm9ybWF0OlxuICAgICAqIFwiaHN2YSh4eHgsIHh4eCwgeHh4LCB4eClcIi5cbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLnRvSHN2U3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaHN2ID0gcmdiVG9Ic3YodGhpcy5yLCB0aGlzLmcsIHRoaXMuYik7XG4gICAgICAgIHZhciBoID0gTWF0aC5yb3VuZChoc3YuaCAqIDM2MCk7XG4gICAgICAgIHZhciBzID0gTWF0aC5yb3VuZChoc3YucyAqIDEwMCk7XG4gICAgICAgIHZhciB2ID0gTWF0aC5yb3VuZChoc3YudiAqIDEwMCk7XG4gICAgICAgIHJldHVybiB0aGlzLmEgPT09IDEgPyBcImhzdihcIi5jb25jYXQoaCwgXCIsIFwiKS5jb25jYXQocywgXCIlLCBcIikuY29uY2F0KHYsIFwiJSlcIikgOiBcImhzdmEoXCIuY29uY2F0KGgsIFwiLCBcIikuY29uY2F0KHMsIFwiJSwgXCIpLmNvbmNhdCh2LCBcIiUsIFwiKS5jb25jYXQodGhpcy5yb3VuZEEsIFwiKVwiKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG9iamVjdCBhcyBhIEhTTEEgb2JqZWN0LlxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUudG9Ic2wgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBoc2wgPSByZ2JUb0hzbCh0aGlzLnIsIHRoaXMuZywgdGhpcy5iKTtcbiAgICAgICAgcmV0dXJuIHsgaDogaHNsLmggKiAzNjAsIHM6IGhzbC5zLCBsOiBoc2wubCwgYTogdGhpcy5hIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBoc2xhIHZhbHVlcyBpbnRlcnBvbGF0ZWQgaW50byBhIHN0cmluZyB3aXRoIHRoZSBmb2xsb3dpbmcgZm9ybWF0OlxuICAgICAqIFwiaHNsYSh4eHgsIHh4eCwgeHh4LCB4eClcIi5cbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLnRvSHNsU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaHNsID0gcmdiVG9Ic2wodGhpcy5yLCB0aGlzLmcsIHRoaXMuYik7XG4gICAgICAgIHZhciBoID0gTWF0aC5yb3VuZChoc2wuaCAqIDM2MCk7XG4gICAgICAgIHZhciBzID0gTWF0aC5yb3VuZChoc2wucyAqIDEwMCk7XG4gICAgICAgIHZhciBsID0gTWF0aC5yb3VuZChoc2wubCAqIDEwMCk7XG4gICAgICAgIHJldHVybiB0aGlzLmEgPT09IDEgPyBcImhzbChcIi5jb25jYXQoaCwgXCIsIFwiKS5jb25jYXQocywgXCIlLCBcIikuY29uY2F0KGwsIFwiJSlcIikgOiBcImhzbGEoXCIuY29uY2F0KGgsIFwiLCBcIikuY29uY2F0KHMsIFwiJSwgXCIpLmNvbmNhdChsLCBcIiUsIFwiKS5jb25jYXQodGhpcy5yb3VuZEEsIFwiKVwiKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGhleCB2YWx1ZSBvZiB0aGUgY29sb3IuXG4gICAgICogQHBhcmFtIGFsbG93M0NoYXIgd2lsbCBzaG9ydGVuIGhleCB2YWx1ZSB0byAzIGNoYXIgaWYgcG9zc2libGVcbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLnRvSGV4ID0gZnVuY3Rpb24gKGFsbG93M0NoYXIpIHtcbiAgICAgICAgaWYgKGFsbG93M0NoYXIgPT09IHZvaWQgMCkgeyBhbGxvdzNDaGFyID0gZmFsc2U7IH1cbiAgICAgICAgcmV0dXJuIHJnYlRvSGV4KHRoaXMuciwgdGhpcy5nLCB0aGlzLmIsIGFsbG93M0NoYXIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgaGV4IHZhbHVlIG9mIHRoZSBjb2xvciAtd2l0aCBhICMgYXBwZW5lZC5cbiAgICAgKiBAcGFyYW0gYWxsb3czQ2hhciB3aWxsIHNob3J0ZW4gaGV4IHZhbHVlIHRvIDMgY2hhciBpZiBwb3NzaWJsZVxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUudG9IZXhTdHJpbmcgPSBmdW5jdGlvbiAoYWxsb3czQ2hhcikge1xuICAgICAgICBpZiAoYWxsb3czQ2hhciA9PT0gdm9pZCAwKSB7IGFsbG93M0NoYXIgPSBmYWxzZTsgfVxuICAgICAgICByZXR1cm4gJyMnICsgdGhpcy50b0hleChhbGxvdzNDaGFyKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGhleCA4IHZhbHVlIG9mIHRoZSBjb2xvci5cbiAgICAgKiBAcGFyYW0gYWxsb3c0Q2hhciB3aWxsIHNob3J0ZW4gaGV4IHZhbHVlIHRvIDQgY2hhciBpZiBwb3NzaWJsZVxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUudG9IZXg4ID0gZnVuY3Rpb24gKGFsbG93NENoYXIpIHtcbiAgICAgICAgaWYgKGFsbG93NENoYXIgPT09IHZvaWQgMCkgeyBhbGxvdzRDaGFyID0gZmFsc2U7IH1cbiAgICAgICAgcmV0dXJuIHJnYmFUb0hleCh0aGlzLnIsIHRoaXMuZywgdGhpcy5iLCB0aGlzLmEsIGFsbG93NENoYXIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgaGV4IDggdmFsdWUgb2YgdGhlIGNvbG9yIC13aXRoIGEgIyBhcHBlbmVkLlxuICAgICAqIEBwYXJhbSBhbGxvdzRDaGFyIHdpbGwgc2hvcnRlbiBoZXggdmFsdWUgdG8gNCBjaGFyIGlmIHBvc3NpYmxlXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS50b0hleDhTdHJpbmcgPSBmdW5jdGlvbiAoYWxsb3c0Q2hhcikge1xuICAgICAgICBpZiAoYWxsb3c0Q2hhciA9PT0gdm9pZCAwKSB7IGFsbG93NENoYXIgPSBmYWxzZTsgfVxuICAgICAgICByZXR1cm4gJyMnICsgdGhpcy50b0hleDgoYWxsb3c0Q2hhcik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBvYmplY3QgYXMgYSBSR0JBIG9iamVjdC5cbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLnRvUmdiID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcjogTWF0aC5yb3VuZCh0aGlzLnIpLFxuICAgICAgICAgICAgZzogTWF0aC5yb3VuZCh0aGlzLmcpLFxuICAgICAgICAgICAgYjogTWF0aC5yb3VuZCh0aGlzLmIpLFxuICAgICAgICAgICAgYTogdGhpcy5hLFxuICAgICAgICB9O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgUkdCQSB2YWx1ZXMgaW50ZXJwb2xhdGVkIGludG8gYSBzdHJpbmcgd2l0aCB0aGUgZm9sbG93aW5nIGZvcm1hdDpcbiAgICAgKiBcIlJHQkEoeHh4LCB4eHgsIHh4eCwgeHgpXCIuXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS50b1JnYlN0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHIgPSBNYXRoLnJvdW5kKHRoaXMucik7XG4gICAgICAgIHZhciBnID0gTWF0aC5yb3VuZCh0aGlzLmcpO1xuICAgICAgICB2YXIgYiA9IE1hdGgucm91bmQodGhpcy5iKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYSA9PT0gMSA/IFwicmdiKFwiLmNvbmNhdChyLCBcIiwgXCIpLmNvbmNhdChnLCBcIiwgXCIpLmNvbmNhdChiLCBcIilcIikgOiBcInJnYmEoXCIuY29uY2F0KHIsIFwiLCBcIikuY29uY2F0KGcsIFwiLCBcIikuY29uY2F0KGIsIFwiLCBcIikuY29uY2F0KHRoaXMucm91bmRBLCBcIilcIik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBvYmplY3QgYXMgYSBSR0JBIG9iamVjdC5cbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLnRvUGVyY2VudGFnZVJnYiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGZtdCA9IGZ1bmN0aW9uICh4KSB7IHJldHVybiBcIlwiLmNvbmNhdChNYXRoLnJvdW5kKGJvdW5kMDEoeCwgMjU1KSAqIDEwMCksIFwiJVwiKTsgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHI6IGZtdCh0aGlzLnIpLFxuICAgICAgICAgICAgZzogZm10KHRoaXMuZyksXG4gICAgICAgICAgICBiOiBmbXQodGhpcy5iKSxcbiAgICAgICAgICAgIGE6IHRoaXMuYSxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIFJHQkEgcmVsYXRpdmUgdmFsdWVzIGludGVycG9sYXRlZCBpbnRvIGEgc3RyaW5nXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS50b1BlcmNlbnRhZ2VSZ2JTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBybmQgPSBmdW5jdGlvbiAoeCkgeyByZXR1cm4gTWF0aC5yb3VuZChib3VuZDAxKHgsIDI1NSkgKiAxMDApOyB9O1xuICAgICAgICByZXR1cm4gdGhpcy5hID09PSAxXG4gICAgICAgICAgICA/IFwicmdiKFwiLmNvbmNhdChybmQodGhpcy5yKSwgXCIlLCBcIikuY29uY2F0KHJuZCh0aGlzLmcpLCBcIiUsIFwiKS5jb25jYXQocm5kKHRoaXMuYiksIFwiJSlcIilcbiAgICAgICAgICAgIDogXCJyZ2JhKFwiLmNvbmNhdChybmQodGhpcy5yKSwgXCIlLCBcIikuY29uY2F0KHJuZCh0aGlzLmcpLCBcIiUsIFwiKS5jb25jYXQocm5kKHRoaXMuYiksIFwiJSwgXCIpLmNvbmNhdCh0aGlzLnJvdW5kQSwgXCIpXCIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVGhlICdyZWFsJyBuYW1lIG9mIHRoZSBjb2xvciAtaWYgdGhlcmUgaXMgb25lLlxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUudG9OYW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5hID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3RyYW5zcGFyZW50JztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5hIDwgMSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBoZXggPSAnIycgKyByZ2JUb0hleCh0aGlzLnIsIHRoaXMuZywgdGhpcy5iLCBmYWxzZSk7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBPYmplY3QuZW50cmllcyhuYW1lcyk7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgX2IgPSBfYVtfaV0sIGtleSA9IF9iWzBdLCB2YWx1ZSA9IF9iWzFdO1xuICAgICAgICAgICAgaWYgKGhleCA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHZhciBmb3JtYXRTZXQgPSBCb29sZWFuKGZvcm1hdCk7XG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdCAhPT0gbnVsbCAmJiBmb3JtYXQgIT09IHZvaWQgMCA/IGZvcm1hdCA6IHRoaXMuZm9ybWF0O1xuICAgICAgICB2YXIgZm9ybWF0dGVkU3RyaW5nID0gZmFsc2U7XG4gICAgICAgIHZhciBoYXNBbHBoYSA9IHRoaXMuYSA8IDEgJiYgdGhpcy5hID49IDA7XG4gICAgICAgIHZhciBuZWVkc0FscGhhRm9ybWF0ID0gIWZvcm1hdFNldCAmJiBoYXNBbHBoYSAmJiAoZm9ybWF0LnN0YXJ0c1dpdGgoJ2hleCcpIHx8IGZvcm1hdCA9PT0gJ25hbWUnKTtcbiAgICAgICAgaWYgKG5lZWRzQWxwaGFGb3JtYXQpIHtcbiAgICAgICAgICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgXCJ0cmFuc3BhcmVudFwiLCBhbGwgb3RoZXIgbm9uLWFscGhhIGZvcm1hdHNcbiAgICAgICAgICAgIC8vIHdpbGwgcmV0dXJuIHJnYmEgd2hlbiB0aGVyZSBpcyB0cmFuc3BhcmVuY3kuXG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnbmFtZScgJiYgdGhpcy5hID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9OYW1lKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50b1JnYlN0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09ICdyZ2InKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSB0aGlzLnRvUmdiU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ3ByZ2InKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSB0aGlzLnRvUGVyY2VudGFnZVJnYlN0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09ICdoZXgnIHx8IGZvcm1hdCA9PT0gJ2hleDYnKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSB0aGlzLnRvSGV4U3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2hleDMnKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSB0aGlzLnRvSGV4U3RyaW5nKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09ICdoZXg0Jykge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b0hleDhTdHJpbmcodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2hleDgnKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSB0aGlzLnRvSGV4OFN0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09ICduYW1lJykge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b05hbWUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSAnaHNsJykge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b0hzbFN0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09ICdoc3YnKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSB0aGlzLnRvSHN2U3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZvcm1hdHRlZFN0cmluZyB8fCB0aGlzLnRvSGV4U3RyaW5nKCk7XG4gICAgfTtcbiAgICBUaW55Q29sb3IucHJvdG90eXBlLnRvTnVtYmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKE1hdGgucm91bmQodGhpcy5yKSA8PCAxNikgKyAoTWF0aC5yb3VuZCh0aGlzLmcpIDw8IDgpICsgTWF0aC5yb3VuZCh0aGlzLmIpO1xuICAgIH07XG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUaW55Q29sb3IodGhpcy50b1N0cmluZygpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIExpZ2h0ZW4gdGhlIGNvbG9yIGEgZ2l2ZW4gYW1vdW50LiBQcm92aWRpbmcgMTAwIHdpbGwgYWx3YXlzIHJldHVybiB3aGl0ZS5cbiAgICAgKiBAcGFyYW0gYW1vdW50IC0gdmFsaWQgYmV0d2VlbiAxLTEwMFxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUubGlnaHRlbiA9IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgaWYgKGFtb3VudCA9PT0gdm9pZCAwKSB7IGFtb3VudCA9IDEwOyB9XG4gICAgICAgIHZhciBoc2wgPSB0aGlzLnRvSHNsKCk7XG4gICAgICAgIGhzbC5sICs9IGFtb3VudCAvIDEwMDtcbiAgICAgICAgaHNsLmwgPSBjbGFtcDAxKGhzbC5sKTtcbiAgICAgICAgcmV0dXJuIG5ldyBUaW55Q29sb3IoaHNsKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEJyaWdodGVuIHRoZSBjb2xvciBhIGdpdmVuIGFtb3VudCwgZnJvbSAwIHRvIDEwMC5cbiAgICAgKiBAcGFyYW0gYW1vdW50IC0gdmFsaWQgYmV0d2VlbiAxLTEwMFxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUuYnJpZ2h0ZW4gPSBmdW5jdGlvbiAoYW1vdW50KSB7XG4gICAgICAgIGlmIChhbW91bnQgPT09IHZvaWQgMCkgeyBhbW91bnQgPSAxMDsgfVxuICAgICAgICB2YXIgcmdiID0gdGhpcy50b1JnYigpO1xuICAgICAgICByZ2IuciA9IE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgcmdiLnIgLSBNYXRoLnJvdW5kKDI1NSAqIC0oYW1vdW50IC8gMTAwKSkpKTtcbiAgICAgICAgcmdiLmcgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIHJnYi5nIC0gTWF0aC5yb3VuZCgyNTUgKiAtKGFtb3VudCAvIDEwMCkpKSk7XG4gICAgICAgIHJnYi5iID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCByZ2IuYiAtIE1hdGgucm91bmQoMjU1ICogLShhbW91bnQgLyAxMDApKSkpO1xuICAgICAgICByZXR1cm4gbmV3IFRpbnlDb2xvcihyZ2IpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRGFya2VuIHRoZSBjb2xvciBhIGdpdmVuIGFtb3VudCwgZnJvbSAwIHRvIDEwMC5cbiAgICAgKiBQcm92aWRpbmcgMTAwIHdpbGwgYWx3YXlzIHJldHVybiBibGFjay5cbiAgICAgKiBAcGFyYW0gYW1vdW50IC0gdmFsaWQgYmV0d2VlbiAxLTEwMFxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUuZGFya2VuID0gZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICBpZiAoYW1vdW50ID09PSB2b2lkIDApIHsgYW1vdW50ID0gMTA7IH1cbiAgICAgICAgdmFyIGhzbCA9IHRoaXMudG9Ic2woKTtcbiAgICAgICAgaHNsLmwgLT0gYW1vdW50IC8gMTAwO1xuICAgICAgICBoc2wubCA9IGNsYW1wMDEoaHNsLmwpO1xuICAgICAgICByZXR1cm4gbmV3IFRpbnlDb2xvcihoc2wpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWl4IHRoZSBjb2xvciB3aXRoIHB1cmUgd2hpdGUsIGZyb20gMCB0byAxMDAuXG4gICAgICogUHJvdmlkaW5nIDAgd2lsbCBkbyBub3RoaW5nLCBwcm92aWRpbmcgMTAwIHdpbGwgYWx3YXlzIHJldHVybiB3aGl0ZS5cbiAgICAgKiBAcGFyYW0gYW1vdW50IC0gdmFsaWQgYmV0d2VlbiAxLTEwMFxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUudGludCA9IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgaWYgKGFtb3VudCA9PT0gdm9pZCAwKSB7IGFtb3VudCA9IDEwOyB9XG4gICAgICAgIHJldHVybiB0aGlzLm1peCgnd2hpdGUnLCBhbW91bnQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWl4IHRoZSBjb2xvciB3aXRoIHB1cmUgYmxhY2ssIGZyb20gMCB0byAxMDAuXG4gICAgICogUHJvdmlkaW5nIDAgd2lsbCBkbyBub3RoaW5nLCBwcm92aWRpbmcgMTAwIHdpbGwgYWx3YXlzIHJldHVybiBibGFjay5cbiAgICAgKiBAcGFyYW0gYW1vdW50IC0gdmFsaWQgYmV0d2VlbiAxLTEwMFxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUuc2hhZGUgPSBmdW5jdGlvbiAoYW1vdW50KSB7XG4gICAgICAgIGlmIChhbW91bnQgPT09IHZvaWQgMCkgeyBhbW91bnQgPSAxMDsgfVxuICAgICAgICByZXR1cm4gdGhpcy5taXgoJ2JsYWNrJywgYW1vdW50KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERlc2F0dXJhdGUgdGhlIGNvbG9yIGEgZ2l2ZW4gYW1vdW50LCBmcm9tIDAgdG8gMTAwLlxuICAgICAqIFByb3ZpZGluZyAxMDAgd2lsbCBpcyB0aGUgc2FtZSBhcyBjYWxsaW5nIGdyZXlzY2FsZVxuICAgICAqIEBwYXJhbSBhbW91bnQgLSB2YWxpZCBiZXR3ZWVuIDEtMTAwXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS5kZXNhdHVyYXRlID0gZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICBpZiAoYW1vdW50ID09PSB2b2lkIDApIHsgYW1vdW50ID0gMTA7IH1cbiAgICAgICAgdmFyIGhzbCA9IHRoaXMudG9Ic2woKTtcbiAgICAgICAgaHNsLnMgLT0gYW1vdW50IC8gMTAwO1xuICAgICAgICBoc2wucyA9IGNsYW1wMDEoaHNsLnMpO1xuICAgICAgICByZXR1cm4gbmV3IFRpbnlDb2xvcihoc2wpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2F0dXJhdGUgdGhlIGNvbG9yIGEgZ2l2ZW4gYW1vdW50LCBmcm9tIDAgdG8gMTAwLlxuICAgICAqIEBwYXJhbSBhbW91bnQgLSB2YWxpZCBiZXR3ZWVuIDEtMTAwXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS5zYXR1cmF0ZSA9IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgaWYgKGFtb3VudCA9PT0gdm9pZCAwKSB7IGFtb3VudCA9IDEwOyB9XG4gICAgICAgIHZhciBoc2wgPSB0aGlzLnRvSHNsKCk7XG4gICAgICAgIGhzbC5zICs9IGFtb3VudCAvIDEwMDtcbiAgICAgICAgaHNsLnMgPSBjbGFtcDAxKGhzbC5zKTtcbiAgICAgICAgcmV0dXJuIG5ldyBUaW55Q29sb3IoaHNsKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENvbXBsZXRlbHkgZGVzYXR1cmF0ZXMgYSBjb2xvciBpbnRvIGdyZXlzY2FsZS5cbiAgICAgKiBTYW1lIGFzIGNhbGxpbmcgYGRlc2F0dXJhdGUoMTAwKWBcbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLmdyZXlzY2FsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVzYXR1cmF0ZSgxMDApO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU3BpbiB0YWtlcyBhIHBvc2l0aXZlIG9yIG5lZ2F0aXZlIGFtb3VudCB3aXRoaW4gWy0zNjAsIDM2MF0gaW5kaWNhdGluZyB0aGUgY2hhbmdlIG9mIGh1ZS5cbiAgICAgKiBWYWx1ZXMgb3V0c2lkZSBvZiB0aGlzIHJhbmdlIHdpbGwgYmUgd3JhcHBlZCBpbnRvIHRoaXMgcmFuZ2UuXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS5zcGluID0gZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICB2YXIgaHNsID0gdGhpcy50b0hzbCgpO1xuICAgICAgICB2YXIgaHVlID0gKGhzbC5oICsgYW1vdW50KSAlIDM2MDtcbiAgICAgICAgaHNsLmggPSBodWUgPCAwID8gMzYwICsgaHVlIDogaHVlO1xuICAgICAgICByZXR1cm4gbmV3IFRpbnlDb2xvcihoc2wpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWl4IHRoZSBjdXJyZW50IGNvbG9yIGEgZ2l2ZW4gYW1vdW50IHdpdGggYW5vdGhlciBjb2xvciwgZnJvbSAwIHRvIDEwMC5cbiAgICAgKiAwIG1lYW5zIG5vIG1peGluZyAocmV0dXJuIGN1cnJlbnQgY29sb3IpLlxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUubWl4ID0gZnVuY3Rpb24gKGNvbG9yLCBhbW91bnQpIHtcbiAgICAgICAgaWYgKGFtb3VudCA9PT0gdm9pZCAwKSB7IGFtb3VudCA9IDUwOyB9XG4gICAgICAgIHZhciByZ2IxID0gdGhpcy50b1JnYigpO1xuICAgICAgICB2YXIgcmdiMiA9IG5ldyBUaW55Q29sb3IoY29sb3IpLnRvUmdiKCk7XG4gICAgICAgIHZhciBwID0gYW1vdW50IC8gMTAwO1xuICAgICAgICB2YXIgcmdiYSA9IHtcbiAgICAgICAgICAgIHI6IChyZ2IyLnIgLSByZ2IxLnIpICogcCArIHJnYjEucixcbiAgICAgICAgICAgIGc6IChyZ2IyLmcgLSByZ2IxLmcpICogcCArIHJnYjEuZyxcbiAgICAgICAgICAgIGI6IChyZ2IyLmIgLSByZ2IxLmIpICogcCArIHJnYjEuYixcbiAgICAgICAgICAgIGE6IChyZ2IyLmEgLSByZ2IxLmEpICogcCArIHJnYjEuYSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG5ldyBUaW55Q29sb3IocmdiYSk7XG4gICAgfTtcbiAgICBUaW55Q29sb3IucHJvdG90eXBlLmFuYWxvZ291cyA9IGZ1bmN0aW9uIChyZXN1bHRzLCBzbGljZXMpIHtcbiAgICAgICAgaWYgKHJlc3VsdHMgPT09IHZvaWQgMCkgeyByZXN1bHRzID0gNjsgfVxuICAgICAgICBpZiAoc2xpY2VzID09PSB2b2lkIDApIHsgc2xpY2VzID0gMzA7IH1cbiAgICAgICAgdmFyIGhzbCA9IHRoaXMudG9Ic2woKTtcbiAgICAgICAgdmFyIHBhcnQgPSAzNjAgLyBzbGljZXM7XG4gICAgICAgIHZhciByZXQgPSBbdGhpc107XG4gICAgICAgIGZvciAoaHNsLmggPSAoaHNsLmggLSAoKHBhcnQgKiByZXN1bHRzKSA+PiAxKSArIDcyMCkgJSAzNjA7IC0tcmVzdWx0czspIHtcbiAgICAgICAgICAgIGhzbC5oID0gKGhzbC5oICsgcGFydCkgJSAzNjA7XG4gICAgICAgICAgICByZXQucHVzaChuZXcgVGlueUNvbG9yKGhzbCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiB0YWtlbiBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmZ1c2lvbi9qUXVlcnkteGNvbG9yL2Jsb2IvbWFzdGVyL2pxdWVyeS54Y29sb3IuanNcbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLmNvbXBsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBoc2wgPSB0aGlzLnRvSHNsKCk7XG4gICAgICAgIGhzbC5oID0gKGhzbC5oICsgMTgwKSAlIDM2MDtcbiAgICAgICAgcmV0dXJuIG5ldyBUaW55Q29sb3IoaHNsKTtcbiAgICB9O1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUubW9ub2Nocm9tYXRpYyA9IGZ1bmN0aW9uIChyZXN1bHRzKSB7XG4gICAgICAgIGlmIChyZXN1bHRzID09PSB2b2lkIDApIHsgcmVzdWx0cyA9IDY7IH1cbiAgICAgICAgdmFyIGhzdiA9IHRoaXMudG9Ic3YoKTtcbiAgICAgICAgdmFyIGggPSBoc3YuaDtcbiAgICAgICAgdmFyIHMgPSBoc3YucztcbiAgICAgICAgdmFyIHYgPSBoc3YudjtcbiAgICAgICAgdmFyIHJlcyA9IFtdO1xuICAgICAgICB2YXIgbW9kaWZpY2F0aW9uID0gMSAvIHJlc3VsdHM7XG4gICAgICAgIHdoaWxlIChyZXN1bHRzLS0pIHtcbiAgICAgICAgICAgIHJlcy5wdXNoKG5ldyBUaW55Q29sb3IoeyBoOiBoLCBzOiBzLCB2OiB2IH0pKTtcbiAgICAgICAgICAgIHYgPSAodiArIG1vZGlmaWNhdGlvbikgJSAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfTtcbiAgICBUaW55Q29sb3IucHJvdG90eXBlLnNwbGl0Y29tcGxlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGhzbCA9IHRoaXMudG9Ic2woKTtcbiAgICAgICAgdmFyIGggPSBoc2wuaDtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICBuZXcgVGlueUNvbG9yKHsgaDogKGggKyA3MikgJSAzNjAsIHM6IGhzbC5zLCBsOiBoc2wubCB9KSxcbiAgICAgICAgICAgIG5ldyBUaW55Q29sb3IoeyBoOiAoaCArIDIxNikgJSAzNjAsIHM6IGhzbC5zLCBsOiBoc2wubCB9KSxcbiAgICAgICAgXTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENvbXB1dGUgaG93IHRoZSBjb2xvciB3b3VsZCBhcHBlYXIgb24gYSBiYWNrZ3JvdW5kXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS5vbkJhY2tncm91bmQgPSBmdW5jdGlvbiAoYmFja2dyb3VuZCkge1xuICAgICAgICB2YXIgZmcgPSB0aGlzLnRvUmdiKCk7XG4gICAgICAgIHZhciBiZyA9IG5ldyBUaW55Q29sb3IoYmFja2dyb3VuZCkudG9SZ2IoKTtcbiAgICAgICAgcmV0dXJuIG5ldyBUaW55Q29sb3Ioe1xuICAgICAgICAgICAgcjogYmcuciArIChmZy5yIC0gYmcucikgKiBmZy5hLFxuICAgICAgICAgICAgZzogYmcuZyArIChmZy5nIC0gYmcuZykgKiBmZy5hLFxuICAgICAgICAgICAgYjogYmcuYiArIChmZy5iIC0gYmcuYikgKiBmZy5hLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFsaWFzIGZvciBgcG9seWFkKDMpYFxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUudHJpYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvbHlhZCgzKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFsaWFzIGZvciBgcG9seWFkKDQpYFxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUudGV0cmFkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wb2x5YWQoNCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgcG9seWFkIGNvbG9ycywgbGlrZSAoZm9yIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIGV0Yy4uLilcbiAgICAgKiBtb25hZCwgZHlhZCwgdHJpYWQsIHRldHJhZCwgcGVudGFkLCBoZXhhZCwgaGVwdGFkLCBvY3RhZCwgZXRjLi4uXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS5wb2x5YWQgPSBmdW5jdGlvbiAobikge1xuICAgICAgICB2YXIgaHNsID0gdGhpcy50b0hzbCgpO1xuICAgICAgICB2YXIgaCA9IGhzbC5oO1xuICAgICAgICB2YXIgcmVzdWx0ID0gW3RoaXNdO1xuICAgICAgICB2YXIgaW5jcmVtZW50ID0gMzYwIC8gbjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5ldyBUaW55Q29sb3IoeyBoOiAoaCArIGkgKiBpbmNyZW1lbnQpICUgMzYwLCBzOiBoc2wucywgbDogaHNsLmwgfSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBjb21wYXJlIGNvbG9yIHZzIGN1cnJlbnQgY29sb3JcbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIChjb2xvcikge1xuICAgICAgICByZXR1cm4gdGhpcy50b1JnYlN0cmluZygpID09PSBuZXcgVGlueUNvbG9yKGNvbG9yKS50b1JnYlN0cmluZygpO1xuICAgIH07XG4gICAgcmV0dXJuIFRpbnlDb2xvcjtcbn0oKSk7XG5leHBvcnQgeyBUaW55Q29sb3IgfTtcbi8vIGtlcHQgZm9yIGJhY2t3YXJkcyBjb21wYXRhYmlsaXR5IHdpdGggdjFcbmV4cG9ydCBmdW5jdGlvbiB0aW55Y29sb3IoY29sb3IsIG9wdHMpIHtcbiAgICBpZiAoY29sb3IgPT09IHZvaWQgMCkgeyBjb2xvciA9ICcnOyB9XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkgeyBvcHRzID0ge307IH1cbiAgICByZXR1cm4gbmV3IFRpbnlDb2xvcihjb2xvciwgb3B0cyk7XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvcHJlZmVyLWRlZmF1bHQtZXhwb3J0LCBwcmVmZXItZGVzdHJ1Y3R1cmluZyAqL1xuaW1wb3J0IHsgdXBkYXRlQ1NTIH0gZnJvbSBcInJjLXV0aWwvZXMvRG9tL2R5bmFtaWNDU1NcIjtcbmltcG9ydCBjYW5Vc2VEb20gZnJvbSBcInJjLXV0aWwvZXMvRG9tL2NhblVzZURvbVwiO1xuaW1wb3J0IHsgVGlueUNvbG9yIH0gZnJvbSAnQGN0cmwvdGlueWNvbG9yJztcbmltcG9ydCB7IGdlbmVyYXRlIH0gZnJvbSAnQGFudC1kZXNpZ24vY29sb3JzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJy4uL191dGlsL3dhcm5pbmcnO1xudmFyIGR5bmFtaWNTdHlsZU1hcmsgPSBcIi1hbnQtXCIuY29uY2F0KERhdGUubm93KCksIFwiLVwiKS5jb25jYXQoTWF0aC5yYW5kb20oKSk7XG5leHBvcnQgZnVuY3Rpb24gZ2V0U3R5bGUoZ2xvYmFsUHJlZml4Q2xzLCB0aGVtZSkge1xuICB2YXIgdmFyaWFibGVzID0ge307XG5cbiAgdmFyIGZvcm1hdENvbG9yID0gZnVuY3Rpb24gZm9ybWF0Q29sb3IoY29sb3IsIHVwZGF0ZXIpIHtcbiAgICB2YXIgY2xvbmUgPSBjb2xvci5jbG9uZSgpO1xuICAgIGNsb25lID0gKHVwZGF0ZXIgPT09IG51bGwgfHwgdXBkYXRlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogdXBkYXRlcihjbG9uZSkpIHx8IGNsb25lO1xuICAgIHJldHVybiBjbG9uZS50b1JnYlN0cmluZygpO1xuICB9O1xuXG4gIHZhciBmaWxsQ29sb3IgPSBmdW5jdGlvbiBmaWxsQ29sb3IoY29sb3JWYWwsIHR5cGUpIHtcbiAgICB2YXIgYmFzZUNvbG9yID0gbmV3IFRpbnlDb2xvcihjb2xvclZhbCk7XG4gICAgdmFyIGNvbG9yUGFsZXR0ZXMgPSBnZW5lcmF0ZShiYXNlQ29sb3IudG9SZ2JTdHJpbmcoKSk7XG4gICAgdmFyaWFibGVzW1wiXCIuY29uY2F0KHR5cGUsIFwiLWNvbG9yXCIpXSA9IGZvcm1hdENvbG9yKGJhc2VDb2xvcik7XG4gICAgdmFyaWFibGVzW1wiXCIuY29uY2F0KHR5cGUsIFwiLWNvbG9yLWRpc2FibGVkXCIpXSA9IGNvbG9yUGFsZXR0ZXNbMV07XG4gICAgdmFyaWFibGVzW1wiXCIuY29uY2F0KHR5cGUsIFwiLWNvbG9yLWhvdmVyXCIpXSA9IGNvbG9yUGFsZXR0ZXNbNF07XG4gICAgdmFyaWFibGVzW1wiXCIuY29uY2F0KHR5cGUsIFwiLWNvbG9yLWFjdGl2ZVwiKV0gPSBjb2xvclBhbGV0dGVzWzddO1xuICAgIHZhcmlhYmxlc1tcIlwiLmNvbmNhdCh0eXBlLCBcIi1jb2xvci1vdXRsaW5lXCIpXSA9IGJhc2VDb2xvci5jbG9uZSgpLnNldEFscGhhKDAuMikudG9SZ2JTdHJpbmcoKTtcbiAgICB2YXJpYWJsZXNbXCJcIi5jb25jYXQodHlwZSwgXCItY29sb3ItZGVwcmVjYXRlZC1iZ1wiKV0gPSBjb2xvclBhbGV0dGVzWzFdO1xuICAgIHZhcmlhYmxlc1tcIlwiLmNvbmNhdCh0eXBlLCBcIi1jb2xvci1kZXByZWNhdGVkLWJvcmRlclwiKV0gPSBjb2xvclBhbGV0dGVzWzNdO1xuICB9OyAvLyA9PT09PT09PT09PT09PT09IFByaW1hcnkgQ29sb3IgPT09PT09PT09PT09PT09PVxuXG5cbiAgaWYgKHRoZW1lLnByaW1hcnlDb2xvcikge1xuICAgIGZpbGxDb2xvcih0aGVtZS5wcmltYXJ5Q29sb3IsICdwcmltYXJ5Jyk7XG4gICAgdmFyIHByaW1hcnlDb2xvciA9IG5ldyBUaW55Q29sb3IodGhlbWUucHJpbWFyeUNvbG9yKTtcbiAgICB2YXIgcHJpbWFyeUNvbG9ycyA9IGdlbmVyYXRlKHByaW1hcnlDb2xvci50b1JnYlN0cmluZygpKTsgLy8gTGVnYWN5IC0gV2Ugc2hvdWxkIHVzZSBzZW1hbnRpYyBuYW1pbmcgc3RhbmRhcmRcblxuICAgIHByaW1hcnlDb2xvcnMuZm9yRWFjaChmdW5jdGlvbiAoY29sb3IsIGluZGV4KSB7XG4gICAgICB2YXJpYWJsZXNbXCJwcmltYXJ5LVwiLmNvbmNhdChpbmRleCArIDEpXSA9IGNvbG9yO1xuICAgIH0pOyAvLyBEZXByZWNhdGVkXG5cbiAgICB2YXJpYWJsZXNbJ3ByaW1hcnktY29sb3ItZGVwcmVjYXRlZC1sLTM1J10gPSBmb3JtYXRDb2xvcihwcmltYXJ5Q29sb3IsIGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gYy5saWdodGVuKDM1KTtcbiAgICB9KTtcbiAgICB2YXJpYWJsZXNbJ3ByaW1hcnktY29sb3ItZGVwcmVjYXRlZC1sLTIwJ10gPSBmb3JtYXRDb2xvcihwcmltYXJ5Q29sb3IsIGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gYy5saWdodGVuKDIwKTtcbiAgICB9KTtcbiAgICB2YXJpYWJsZXNbJ3ByaW1hcnktY29sb3ItZGVwcmVjYXRlZC10LTIwJ10gPSBmb3JtYXRDb2xvcihwcmltYXJ5Q29sb3IsIGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gYy50aW50KDIwKTtcbiAgICB9KTtcbiAgICB2YXJpYWJsZXNbJ3ByaW1hcnktY29sb3ItZGVwcmVjYXRlZC10LTUwJ10gPSBmb3JtYXRDb2xvcihwcmltYXJ5Q29sb3IsIGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gYy50aW50KDUwKTtcbiAgICB9KTtcbiAgICB2YXJpYWJsZXNbJ3ByaW1hcnktY29sb3ItZGVwcmVjYXRlZC1mLTEyJ10gPSBmb3JtYXRDb2xvcihwcmltYXJ5Q29sb3IsIGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gYy5zZXRBbHBoYShjLmdldEFscGhhKCkgKiAwLjEyKTtcbiAgICB9KTtcbiAgICB2YXIgcHJpbWFyeUFjdGl2ZUNvbG9yID0gbmV3IFRpbnlDb2xvcihwcmltYXJ5Q29sb3JzWzBdKTtcbiAgICB2YXJpYWJsZXNbJ3ByaW1hcnktY29sb3ItYWN0aXZlLWRlcHJlY2F0ZWQtZi0zMCddID0gZm9ybWF0Q29sb3IocHJpbWFyeUFjdGl2ZUNvbG9yLCBmdW5jdGlvbiAoYykge1xuICAgICAgcmV0dXJuIGMuc2V0QWxwaGEoYy5nZXRBbHBoYSgpICogMC4zKTtcbiAgICB9KTtcbiAgICB2YXJpYWJsZXNbJ3ByaW1hcnktY29sb3ItYWN0aXZlLWRlcHJlY2F0ZWQtZC0wMiddID0gZm9ybWF0Q29sb3IocHJpbWFyeUFjdGl2ZUNvbG9yLCBmdW5jdGlvbiAoYykge1xuICAgICAgcmV0dXJuIGMuZGFya2VuKDIpO1xuICAgIH0pO1xuICB9IC8vID09PT09PT09PT09PT09PT0gU3VjY2VzcyBDb2xvciA9PT09PT09PT09PT09PT09XG5cblxuICBpZiAodGhlbWUuc3VjY2Vzc0NvbG9yKSB7XG4gICAgZmlsbENvbG9yKHRoZW1lLnN1Y2Nlc3NDb2xvciwgJ3N1Y2Nlc3MnKTtcbiAgfSAvLyA9PT09PT09PT09PT09PT09IFdhcm5pbmcgQ29sb3IgPT09PT09PT09PT09PT09PVxuXG5cbiAgaWYgKHRoZW1lLndhcm5pbmdDb2xvcikge1xuICAgIGZpbGxDb2xvcih0aGVtZS53YXJuaW5nQ29sb3IsICd3YXJuaW5nJyk7XG4gIH0gLy8gPT09PT09PT09PT09PT09PT0gRXJyb3IgQ29sb3IgPT09PT09PT09PT09PT09PT1cblxuXG4gIGlmICh0aGVtZS5lcnJvckNvbG9yKSB7XG4gICAgZmlsbENvbG9yKHRoZW1lLmVycm9yQ29sb3IsICdlcnJvcicpO1xuICB9IC8vID09PT09PT09PT09PT09PT09IEluZm8gQ29sb3IgPT09PT09PT09PT09PT09PT09XG5cblxuICBpZiAodGhlbWUuaW5mb0NvbG9yKSB7XG4gICAgZmlsbENvbG9yKHRoZW1lLmluZm9Db2xvciwgJ2luZm8nKTtcbiAgfSAvLyBDb252ZXJ0IHRvIGNzcyB2YXJpYWJsZXNcblxuXG4gIHZhciBjc3NMaXN0ID0gT2JqZWN0LmtleXModmFyaWFibGVzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBcIi0tXCIuY29uY2F0KGdsb2JhbFByZWZpeENscywgXCItXCIpLmNvbmNhdChrZXksIFwiOiBcIikuY29uY2F0KHZhcmlhYmxlc1trZXldLCBcIjtcIik7XG4gIH0pO1xuICByZXR1cm4gXCJcXG4gIDpyb290IHtcXG4gICAgXCIuY29uY2F0KGNzc0xpc3Quam9pbignXFxuJyksIFwiXFxuICB9XFxuICBcIikudHJpbSgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyVGhlbWUoZ2xvYmFsUHJlZml4Q2xzLCB0aGVtZSkge1xuICB2YXIgc3R5bGUgPSBnZXRTdHlsZShnbG9iYWxQcmVmaXhDbHMsIHRoZW1lKTtcblxuICBpZiAoY2FuVXNlRG9tKCkpIHtcbiAgICB1cGRhdGVDU1Moc3R5bGUsIFwiXCIuY29uY2F0KGR5bmFtaWNTdHlsZU1hcmssIFwiLWR5bmFtaWMtdGhlbWVcIikpO1xuICB9IGVsc2Uge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdDb25maWdQcm92aWRlcicsICdTU1IgZG8gbm90IHN1cHBvcnQgZHluYW1pYyB0aGVtZSB3aXRoIGNzcyB2YXJpYWJsZXMuJykgOiB2b2lkIDA7XG4gIH1cbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG52YXIgRGlzYWJsZWRDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoZmFsc2UpO1xuZXhwb3J0IHZhciBEaXNhYmxlZENvbnRleHRQcm92aWRlciA9IGZ1bmN0aW9uIERpc2FibGVkQ29udGV4dFByb3ZpZGVyKF9yZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICAgIGRpc2FibGVkID0gX3JlZi5kaXNhYmxlZDtcbiAgdmFyIG9yaWdpbkRpc2FibGVkID0gUmVhY3QudXNlQ29udGV4dChEaXNhYmxlZENvbnRleHQpO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGlzYWJsZWRDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGRpc2FibGVkIHx8IG9yaWdpbkRpc2FibGVkXG4gIH0sIGNoaWxkcmVuKTtcbn07XG5leHBvcnQgZGVmYXVsdCBEaXNhYmxlZENvbnRleHQ7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xudmFyIFNpemVDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQodW5kZWZpbmVkKTtcbmV4cG9ydCB2YXIgU2l6ZUNvbnRleHRQcm92aWRlciA9IGZ1bmN0aW9uIFNpemVDb250ZXh0UHJvdmlkZXIoX3JlZikge1xuICB2YXIgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgc2l6ZSA9IF9yZWYuc2l6ZTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFNpemVDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAob3JpZ2luU2l6ZSkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChTaXplQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHNpemUgfHwgb3JpZ2luU2l6ZVxuICAgIH0sIGNoaWxkcmVuKTtcbiAgfSk7XG59O1xuZXhwb3J0IGRlZmF1bHQgU2l6ZUNvbnRleHQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgSWNvbkNvbnRleHQgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zL2VzL2NvbXBvbmVudHMvQ29udGV4dFwiO1xuaW1wb3J0IHsgRm9ybVByb3ZpZGVyIGFzIFJjRm9ybVByb3ZpZGVyIH0gZnJvbSAncmMtZmllbGQtZm9ybSc7XG5pbXBvcnQgdXNlTWVtbyBmcm9tIFwicmMtdXRpbC9lcy9ob29rcy91c2VNZW1vXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgTG9jYWxlUHJvdmlkZXIsIHsgQU5UX01BUksgfSBmcm9tICcuLi9sb2NhbGUtcHJvdmlkZXInO1xuaW1wb3J0IExvY2FsZVJlY2VpdmVyIGZyb20gJy4uL2xvY2FsZS1wcm92aWRlci9Mb2NhbGVSZWNlaXZlcic7XG5pbXBvcnQgZGVmYXVsdExvY2FsZSBmcm9tICcuLi9sb2NhbGUvZGVmYXVsdCc7XG5pbXBvcnQgbWVzc2FnZSBmcm9tICcuLi9tZXNzYWdlJztcbmltcG9ydCBub3RpZmljYXRpb24gZnJvbSAnLi4vbm90aWZpY2F0aW9uJztcbmltcG9ydCB7IENvbmZpZ0NvbnN1bWVyLCBDb25maWdDb250ZXh0IH0gZnJvbSAnLi9jb250ZXh0JztcbmltcG9ydCB7IHJlZ2lzdGVyVGhlbWUgfSBmcm9tICcuL2Nzc1ZhcmlhYmxlcyc7XG5pbXBvcnQgeyBEaXNhYmxlZENvbnRleHRQcm92aWRlciB9IGZyb20gJy4vRGlzYWJsZWRDb250ZXh0JztcbmltcG9ydCBTaXplQ29udGV4dCwgeyBTaXplQ29udGV4dFByb3ZpZGVyIH0gZnJvbSAnLi9TaXplQ29udGV4dCc7XG5leHBvcnQgeyBDb25maWdDb250ZXh0LCBDb25maWdDb25zdW1lciB9O1xuZXhwb3J0IHZhciBjb25maWdDb25zdW1lclByb3BzID0gWydnZXRUYXJnZXRDb250YWluZXInLCAnZ2V0UG9wdXBDb250YWluZXInLCAncm9vdFByZWZpeENscycsICdnZXRQcmVmaXhDbHMnLCAncmVuZGVyRW1wdHknLCAnY3NwJywgJ2F1dG9JbnNlcnRTcGFjZUluQnV0dG9uJywgJ2xvY2FsZScsICdwYWdlSGVhZGVyJ107IC8vIFRoZXNlIHByb3BzIGlzIHVzZWQgYnkgYHVzZUNvbnRleHRgIGRpcmVjdGx5IGluIHN1YiBjb21wb25lbnRcblxudmFyIFBBU1NFRF9QUk9QUyA9IFsnZ2V0VGFyZ2V0Q29udGFpbmVyJywgJ2dldFBvcHVwQ29udGFpbmVyJywgJ3JlbmRlckVtcHR5JywgJ3BhZ2VIZWFkZXInLCAnaW5wdXQnLCAncGFnaW5hdGlvbicsICdmb3JtJ107XG5leHBvcnQgdmFyIGRlZmF1bHRQcmVmaXhDbHMgPSAnYW50JztcbmV4cG9ydCB2YXIgZGVmYXVsdEljb25QcmVmaXhDbHMgPSAnYW50aWNvbic7XG52YXIgZ2xvYmFsUHJlZml4Q2xzO1xudmFyIGdsb2JhbEljb25QcmVmaXhDbHM7XG5cbmZ1bmN0aW9uIGdldEdsb2JhbFByZWZpeENscygpIHtcbiAgcmV0dXJuIGdsb2JhbFByZWZpeENscyB8fCBkZWZhdWx0UHJlZml4Q2xzO1xufVxuXG5mdW5jdGlvbiBnZXRHbG9iYWxJY29uUHJlZml4Q2xzKCkge1xuICByZXR1cm4gZ2xvYmFsSWNvblByZWZpeENscyB8fCBkZWZhdWx0SWNvblByZWZpeENscztcbn1cblxudmFyIHNldEdsb2JhbENvbmZpZyA9IGZ1bmN0aW9uIHNldEdsb2JhbENvbmZpZyhfcmVmKSB7XG4gIHZhciBwcmVmaXhDbHMgPSBfcmVmLnByZWZpeENscyxcbiAgICAgIGljb25QcmVmaXhDbHMgPSBfcmVmLmljb25QcmVmaXhDbHMsXG4gICAgICB0aGVtZSA9IF9yZWYudGhlbWU7XG5cbiAgaWYgKHByZWZpeENscyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZ2xvYmFsUHJlZml4Q2xzID0gcHJlZml4Q2xzO1xuICB9XG5cbiAgaWYgKGljb25QcmVmaXhDbHMgIT09IHVuZGVmaW5lZCkge1xuICAgIGdsb2JhbEljb25QcmVmaXhDbHMgPSBpY29uUHJlZml4Q2xzO1xuICB9XG5cbiAgaWYgKHRoZW1lKSB7XG4gICAgcmVnaXN0ZXJUaGVtZShnZXRHbG9iYWxQcmVmaXhDbHMoKSwgdGhlbWUpO1xuICB9XG59O1xuXG5leHBvcnQgdmFyIGdsb2JhbENvbmZpZyA9IGZ1bmN0aW9uIGdsb2JhbENvbmZpZygpIHtcbiAgcmV0dXJuIHtcbiAgICBnZXRQcmVmaXhDbHM6IGZ1bmN0aW9uIGdldFByZWZpeENscyhzdWZmaXhDbHMsIGN1c3RvbWl6ZVByZWZpeENscykge1xuICAgICAgaWYgKGN1c3RvbWl6ZVByZWZpeENscykgcmV0dXJuIGN1c3RvbWl6ZVByZWZpeENscztcbiAgICAgIHJldHVybiBzdWZmaXhDbHMgPyBcIlwiLmNvbmNhdChnZXRHbG9iYWxQcmVmaXhDbHMoKSwgXCItXCIpLmNvbmNhdChzdWZmaXhDbHMpIDogZ2V0R2xvYmFsUHJlZml4Q2xzKCk7XG4gICAgfSxcbiAgICBnZXRJY29uUHJlZml4Q2xzOiBnZXRHbG9iYWxJY29uUHJlZml4Q2xzLFxuICAgIGdldFJvb3RQcmVmaXhDbHM6IGZ1bmN0aW9uIGdldFJvb3RQcmVmaXhDbHMocm9vdFByZWZpeENscywgY3VzdG9taXplUHJlZml4Q2xzKSB7XG4gICAgICAvLyBDdXN0b21pemUgcm9vdFByZWZpeENscyBpcyBmaXJzdCBwcmlvcml0eVxuICAgICAgaWYgKHJvb3RQcmVmaXhDbHMpIHtcbiAgICAgICAgcmV0dXJuIHJvb3RQcmVmaXhDbHM7XG4gICAgICB9IC8vIElmIEdsb2JhbCBwcmVmaXhDbHMgcHJvdmlkZWQsIHVzZSB0aGlzXG5cblxuICAgICAgaWYgKGdsb2JhbFByZWZpeENscykge1xuICAgICAgICByZXR1cm4gZ2xvYmFsUHJlZml4Q2xzO1xuICAgICAgfSAvLyBbTGVnYWN5XSBJZiBjdXN0b21pemUgcHJlZml4Q2xzIHByb3ZpZGVkLCB3ZSBjdXQgaXQgdG8gZ2V0IHRoZSBwcmVmaXhDbHNcblxuXG4gICAgICBpZiAoY3VzdG9taXplUHJlZml4Q2xzICYmIGN1c3RvbWl6ZVByZWZpeENscy5pbmNsdWRlcygnLScpKSB7XG4gICAgICAgIHJldHVybiBjdXN0b21pemVQcmVmaXhDbHMucmVwbGFjZSgvXiguKiktW14tXSokLywgJyQxJyk7XG4gICAgICB9IC8vIEZhbGxiYWNrIHRvIGRlZmF1bHQgcHJlZml4Q2xzXG5cblxuICAgICAgcmV0dXJuIGdldEdsb2JhbFByZWZpeENscygpO1xuICAgIH1cbiAgfTtcbn07XG5cbnZhciBQcm92aWRlckNoaWxkcmVuID0gZnVuY3Rpb24gUHJvdmlkZXJDaGlsZHJlbihwcm9wcykge1xuICB2YXIgX2EsIF9iO1xuXG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY3NwID0gcHJvcHMuY3NwLFxuICAgICAgYXV0b0luc2VydFNwYWNlSW5CdXR0b24gPSBwcm9wcy5hdXRvSW5zZXJ0U3BhY2VJbkJ1dHRvbixcbiAgICAgIGZvcm0gPSBwcm9wcy5mb3JtLFxuICAgICAgbG9jYWxlID0gcHJvcHMubG9jYWxlLFxuICAgICAgY29tcG9uZW50U2l6ZSA9IHByb3BzLmNvbXBvbmVudFNpemUsXG4gICAgICBkaXJlY3Rpb24gPSBwcm9wcy5kaXJlY3Rpb24sXG4gICAgICBzcGFjZSA9IHByb3BzLnNwYWNlLFxuICAgICAgdmlydHVhbCA9IHByb3BzLnZpcnR1YWwsXG4gICAgICBkcm9wZG93bk1hdGNoU2VsZWN0V2lkdGggPSBwcm9wcy5kcm9wZG93bk1hdGNoU2VsZWN0V2lkdGgsXG4gICAgICBsZWdhY3lMb2NhbGUgPSBwcm9wcy5sZWdhY3lMb2NhbGUsXG4gICAgICBwYXJlbnRDb250ZXh0ID0gcHJvcHMucGFyZW50Q29udGV4dCxcbiAgICAgIGljb25QcmVmaXhDbHMgPSBwcm9wcy5pY29uUHJlZml4Q2xzLFxuICAgICAgY29tcG9uZW50RGlzYWJsZWQgPSBwcm9wcy5jb21wb25lbnREaXNhYmxlZDtcbiAgdmFyIGdldFByZWZpeENscyA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChzdWZmaXhDbHMsIGN1c3RvbWl6ZVByZWZpeENscykge1xuICAgIHZhciBwcmVmaXhDbHMgPSBwcm9wcy5wcmVmaXhDbHM7XG4gICAgaWYgKGN1c3RvbWl6ZVByZWZpeENscykgcmV0dXJuIGN1c3RvbWl6ZVByZWZpeENscztcbiAgICB2YXIgbWVyZ2VkUHJlZml4Q2xzID0gcHJlZml4Q2xzIHx8IHBhcmVudENvbnRleHQuZ2V0UHJlZml4Q2xzKCcnKTtcbiAgICByZXR1cm4gc3VmZml4Q2xzID8gXCJcIi5jb25jYXQobWVyZ2VkUHJlZml4Q2xzLCBcIi1cIikuY29uY2F0KHN1ZmZpeENscykgOiBtZXJnZWRQcmVmaXhDbHM7XG4gIH0sIFtwYXJlbnRDb250ZXh0LmdldFByZWZpeENscywgcHJvcHMucHJlZml4Q2xzXSk7XG5cbiAgdmFyIGNvbmZpZyA9IF9leHRlbmRzKF9leHRlbmRzKHt9LCBwYXJlbnRDb250ZXh0KSwge1xuICAgIGNzcDogY3NwLFxuICAgIGF1dG9JbnNlcnRTcGFjZUluQnV0dG9uOiBhdXRvSW5zZXJ0U3BhY2VJbkJ1dHRvbixcbiAgICBsb2NhbGU6IGxvY2FsZSB8fCBsZWdhY3lMb2NhbGUsXG4gICAgZGlyZWN0aW9uOiBkaXJlY3Rpb24sXG4gICAgc3BhY2U6IHNwYWNlLFxuICAgIHZpcnR1YWw6IHZpcnR1YWwsXG4gICAgZHJvcGRvd25NYXRjaFNlbGVjdFdpZHRoOiBkcm9wZG93bk1hdGNoU2VsZWN0V2lkdGgsXG4gICAgZ2V0UHJlZml4Q2xzOiBnZXRQcmVmaXhDbHNcbiAgfSk7IC8vIFBhc3MgdGhlIHByb3BzIHVzZWQgYnkgYHVzZUNvbnRleHRgIGRpcmVjdGx5IHdpdGggY2hpbGQgY29tcG9uZW50LlxuICAvLyBUaGVzZSBwcm9wcyBzaG91bGQgbWVyZ2VkIGludG8gYGNvbmZpZ2AuXG5cblxuICBQQVNTRURfUFJPUFMuZm9yRWFjaChmdW5jdGlvbiAocHJvcE5hbWUpIHtcbiAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuXG4gICAgaWYgKHByb3BWYWx1ZSkge1xuICAgICAgY29uZmlnW3Byb3BOYW1lXSA9IHByb3BWYWx1ZTtcbiAgICB9XG4gIH0pOyAvLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy8yNzYxN1xuXG4gIHZhciBtZW1vZWRDb25maWcgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY29uZmlnO1xuICB9LCBjb25maWcsIGZ1bmN0aW9uIChwcmV2Q29uZmlnLCBjdXJyZW50Q29uZmlnKSB7XG4gICAgdmFyIHByZXZLZXlzID0gT2JqZWN0LmtleXMocHJldkNvbmZpZyk7XG4gICAgdmFyIGN1cnJlbnRLZXlzID0gT2JqZWN0LmtleXMoY3VycmVudENvbmZpZyk7XG4gICAgcmV0dXJuIHByZXZLZXlzLmxlbmd0aCAhPT0gY3VycmVudEtleXMubGVuZ3RoIHx8IHByZXZLZXlzLnNvbWUoZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIHByZXZDb25maWdba2V5XSAhPT0gY3VycmVudENvbmZpZ1trZXldO1xuICAgIH0pO1xuICB9KTtcbiAgdmFyIG1lbW9JY29uQ29udGV4dFZhbHVlID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByZWZpeENsczogaWNvblByZWZpeENscyxcbiAgICAgIGNzcDogY3NwXG4gICAgfTtcbiAgfSwgW2ljb25QcmVmaXhDbHMsIGNzcF0pO1xuICB2YXIgY2hpbGROb2RlID0gY2hpbGRyZW47IC8vIEFkZGl0aW9uYWwgRm9ybSBwcm92aWRlclxuXG4gIHZhciB2YWxpZGF0ZU1lc3NhZ2VzID0ge307XG5cbiAgaWYgKGxvY2FsZSkge1xuICAgIHZhbGlkYXRlTWVzc2FnZXMgPSAoKF9hID0gbG9jYWxlLkZvcm0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kZWZhdWx0VmFsaWRhdGVNZXNzYWdlcykgfHwgKChfYiA9IGRlZmF1bHRMb2NhbGUuRm9ybSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmRlZmF1bHRWYWxpZGF0ZU1lc3NhZ2VzKSB8fCB7fTtcbiAgfVxuXG4gIGlmIChmb3JtICYmIGZvcm0udmFsaWRhdGVNZXNzYWdlcykge1xuICAgIHZhbGlkYXRlTWVzc2FnZXMgPSBfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgdmFsaWRhdGVNZXNzYWdlcyksIGZvcm0udmFsaWRhdGVNZXNzYWdlcyk7XG4gIH1cblxuICBpZiAoT2JqZWN0LmtleXModmFsaWRhdGVNZXNzYWdlcykubGVuZ3RoID4gMCkge1xuICAgIGNoaWxkTm9kZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJjRm9ybVByb3ZpZGVyLCB7XG4gICAgICB2YWxpZGF0ZU1lc3NhZ2VzOiB2YWxpZGF0ZU1lc3NhZ2VzXG4gICAgfSwgY2hpbGRyZW4pO1xuICB9XG5cbiAgaWYgKGxvY2FsZSkge1xuICAgIGNoaWxkTm9kZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExvY2FsZVByb3ZpZGVyLCB7XG4gICAgICBsb2NhbGU6IGxvY2FsZSxcbiAgICAgIF9BTlRfTUFSS19fOiBBTlRfTUFSS1xuICAgIH0sIGNoaWxkTm9kZSk7XG4gIH1cblxuICBpZiAoaWNvblByZWZpeENscyB8fCBjc3ApIHtcbiAgICBjaGlsZE5vZGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJY29uQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IG1lbW9JY29uQ29udGV4dFZhbHVlXG4gICAgfSwgY2hpbGROb2RlKTtcbiAgfVxuXG4gIGlmIChjb21wb25lbnRTaXplKSB7XG4gICAgY2hpbGROb2RlID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoU2l6ZUNvbnRleHRQcm92aWRlciwge1xuICAgICAgc2l6ZTogY29tcG9uZW50U2l6ZVxuICAgIH0sIGNoaWxkTm9kZSk7XG4gIH1cblxuICBpZiAoY29tcG9uZW50RGlzYWJsZWQgIT09IHVuZGVmaW5lZCkge1xuICAgIGNoaWxkTm9kZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERpc2FibGVkQ29udGV4dFByb3ZpZGVyLCB7XG4gICAgICBkaXNhYmxlZDogY29tcG9uZW50RGlzYWJsZWRcbiAgICB9LCBjaGlsZE5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbmZpZ0NvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogbWVtb2VkQ29uZmlnXG4gIH0sIGNoaWxkTm9kZSk7XG59O1xuXG52YXIgQ29uZmlnUHJvdmlkZXIgPSBmdW5jdGlvbiBDb25maWdQcm92aWRlcihwcm9wcykge1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChwcm9wcy5kaXJlY3Rpb24pIHtcbiAgICAgIG1lc3NhZ2UuY29uZmlnKHtcbiAgICAgICAgcnRsOiBwcm9wcy5kaXJlY3Rpb24gPT09ICdydGwnXG4gICAgICB9KTtcbiAgICAgIG5vdGlmaWNhdGlvbi5jb25maWcoe1xuICAgICAgICBydGw6IHByb3BzLmRpcmVjdGlvbiA9PT0gJ3J0bCdcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW3Byb3BzLmRpcmVjdGlvbl0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTG9jYWxlUmVjZWl2ZXIsIG51bGwsIGZ1bmN0aW9uIChfLCBfXywgbGVnYWN5TG9jYWxlKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbmZpZ0NvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFByb3ZpZGVyQ2hpbGRyZW4sIF9leHRlbmRzKHtcbiAgICAgICAgcGFyZW50Q29udGV4dDogY29udGV4dCxcbiAgICAgICAgbGVnYWN5TG9jYWxlOiBsZWdhY3lMb2NhbGVcbiAgICAgIH0sIHByb3BzKSk7XG4gICAgfSk7XG4gIH0pO1xufTtcbi8qKiBAcHJpdmF0ZSBpbnRlcm5hbCBVc2FnZS4gZG8gbm90IHVzZSBpbiB5b3VyIHByb2R1Y3Rpb24gKi9cblxuXG5Db25maWdQcm92aWRlci5Db25maWdDb250ZXh0ID0gQ29uZmlnQ29udGV4dDtcbkNvbmZpZ1Byb3ZpZGVyLlNpemVDb250ZXh0ID0gU2l6ZUNvbnRleHQ7XG5Db25maWdQcm92aWRlci5jb25maWcgPSBzZXRHbG9iYWxDb25maWc7XG5leHBvcnQgZGVmYXVsdCBDb25maWdQcm92aWRlcjsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VNZW1vKGdldFZhbHVlLCBjb25kaXRpb24sIHNob3VsZFVwZGF0ZSkge1xuICB2YXIgY2FjaGVSZWYgPSBSZWFjdC51c2VSZWYoe30pO1xuXG4gIGlmICghKCd2YWx1ZScgaW4gY2FjaGVSZWYuY3VycmVudCkgfHwgc2hvdWxkVXBkYXRlKGNhY2hlUmVmLmN1cnJlbnQuY29uZGl0aW9uLCBjb25kaXRpb24pKSB7XG4gICAgY2FjaGVSZWYuY3VycmVudC52YWx1ZSA9IGdldFZhbHVlKCk7XG4gICAgY2FjaGVSZWYuY3VycmVudC5jb25kaXRpb24gPSBjb25kaXRpb247XG4gIH1cblxuICByZXR1cm4gY2FjaGVSZWYuY3VycmVudC52YWx1ZTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX3JlZ2VuZXJhdG9yUnVudGltZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIjtcblxudmFyIF9fYXdhaXRlciA9IHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7XG4gICAgICByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTtcbiAgICB9XG5cbiAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gIH0pO1xufTtcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IE5vdGlmaWNhdGlvbiBmcm9tICdyYy1ub3RpZmljYXRpb24nO1xuaW1wb3J0IENsb3NlT3V0bGluZWQgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL0Nsb3NlT3V0bGluZWRcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IENoZWNrQ2lyY2xlT3V0bGluZWQgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL0NoZWNrQ2lyY2xlT3V0bGluZWRcIjtcbmltcG9ydCBDbG9zZUNpcmNsZU91dGxpbmVkIGZyb20gXCJAYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9DbG9zZUNpcmNsZU91dGxpbmVkXCI7XG5pbXBvcnQgRXhjbGFtYXRpb25DaXJjbGVPdXRsaW5lZCBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMvZXMvaWNvbnMvRXhjbGFtYXRpb25DaXJjbGVPdXRsaW5lZFwiO1xuaW1wb3J0IEluZm9DaXJjbGVPdXRsaW5lZCBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMvZXMvaWNvbnMvSW5mb0NpcmNsZU91dGxpbmVkXCI7XG5pbXBvcnQgY3JlYXRlVXNlTm90aWZpY2F0aW9uIGZyb20gJy4vaG9va3MvdXNlTm90aWZpY2F0aW9uJztcbmltcG9ydCBDb25maWdQcm92aWRlciwgeyBnbG9iYWxDb25maWcgfSBmcm9tICcuLi9jb25maWctcHJvdmlkZXInO1xudmFyIG5vdGlmaWNhdGlvbkluc3RhbmNlID0ge307XG52YXIgZGVmYXVsdER1cmF0aW9uID0gNC41O1xudmFyIGRlZmF1bHRUb3AgPSAyNDtcbnZhciBkZWZhdWx0Qm90dG9tID0gMjQ7XG52YXIgZGVmYXVsdFByZWZpeENscyA9ICcnO1xudmFyIGRlZmF1bHRQbGFjZW1lbnQgPSAndG9wUmlnaHQnO1xudmFyIGRlZmF1bHRHZXRDb250YWluZXI7XG52YXIgZGVmYXVsdENsb3NlSWNvbjtcbnZhciBydGwgPSBmYWxzZTtcbnZhciBtYXhDb3VudDtcblxuZnVuY3Rpb24gc2V0Tm90aWZpY2F0aW9uQ29uZmlnKG9wdGlvbnMpIHtcbiAgdmFyIGR1cmF0aW9uID0gb3B0aW9ucy5kdXJhdGlvbixcbiAgICAgIHBsYWNlbWVudCA9IG9wdGlvbnMucGxhY2VtZW50LFxuICAgICAgYm90dG9tID0gb3B0aW9ucy5ib3R0b20sXG4gICAgICB0b3AgPSBvcHRpb25zLnRvcCxcbiAgICAgIGdldENvbnRhaW5lciA9IG9wdGlvbnMuZ2V0Q29udGFpbmVyLFxuICAgICAgY2xvc2VJY29uID0gb3B0aW9ucy5jbG9zZUljb24sXG4gICAgICBwcmVmaXhDbHMgPSBvcHRpb25zLnByZWZpeENscztcblxuICBpZiAocHJlZml4Q2xzICE9PSB1bmRlZmluZWQpIHtcbiAgICBkZWZhdWx0UHJlZml4Q2xzID0gcHJlZml4Q2xzO1xuICB9XG5cbiAgaWYgKGR1cmF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICBkZWZhdWx0RHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgfVxuXG4gIGlmIChwbGFjZW1lbnQgIT09IHVuZGVmaW5lZCkge1xuICAgIGRlZmF1bHRQbGFjZW1lbnQgPSBwbGFjZW1lbnQ7XG4gIH0gZWxzZSBpZiAob3B0aW9ucy5ydGwpIHtcbiAgICBkZWZhdWx0UGxhY2VtZW50ID0gJ3RvcExlZnQnO1xuICB9XG5cbiAgaWYgKGJvdHRvbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZGVmYXVsdEJvdHRvbSA9IGJvdHRvbTtcbiAgfVxuXG4gIGlmICh0b3AgIT09IHVuZGVmaW5lZCkge1xuICAgIGRlZmF1bHRUb3AgPSB0b3A7XG4gIH1cblxuICBpZiAoZ2V0Q29udGFpbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICBkZWZhdWx0R2V0Q29udGFpbmVyID0gZ2V0Q29udGFpbmVyO1xuICB9XG5cbiAgaWYgKGNsb3NlSWNvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZGVmYXVsdENsb3NlSWNvbiA9IGNsb3NlSWNvbjtcbiAgfVxuXG4gIGlmIChvcHRpb25zLnJ0bCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcnRsID0gb3B0aW9ucy5ydGw7XG4gIH1cblxuICBpZiAob3B0aW9ucy5tYXhDb3VudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgbWF4Q291bnQgPSBvcHRpb25zLm1heENvdW50O1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFBsYWNlbWVudFN0eWxlKHBsYWNlbWVudCkge1xuICB2YXIgdG9wID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBkZWZhdWx0VG9wO1xuICB2YXIgYm90dG9tID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBkZWZhdWx0Qm90dG9tO1xuICB2YXIgc3R5bGU7XG5cbiAgc3dpdGNoIChwbGFjZW1lbnQpIHtcbiAgICBjYXNlICd0b3AnOlxuICAgICAgc3R5bGUgPSB7XG4gICAgICAgIGxlZnQ6ICc1MCUnLFxuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKC01MCUpJyxcbiAgICAgICAgcmlnaHQ6ICdhdXRvJyxcbiAgICAgICAgdG9wOiB0b3AsXG4gICAgICAgIGJvdHRvbTogJ2F1dG8nXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICd0b3BMZWZ0JzpcbiAgICAgIHN0eWxlID0ge1xuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICB0b3A6IHRvcCxcbiAgICAgICAgYm90dG9tOiAnYXV0bydcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3RvcFJpZ2h0JzpcbiAgICAgIHN0eWxlID0ge1xuICAgICAgICByaWdodDogMCxcbiAgICAgICAgdG9wOiB0b3AsXG4gICAgICAgIGJvdHRvbTogJ2F1dG8nXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdib3R0b20nOlxuICAgICAgc3R5bGUgPSB7XG4gICAgICAgIGxlZnQ6ICc1MCUnLFxuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKC01MCUpJyxcbiAgICAgICAgcmlnaHQ6ICdhdXRvJyxcbiAgICAgICAgdG9wOiAnYXV0bycsXG4gICAgICAgIGJvdHRvbTogYm90dG9tXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdib3R0b21MZWZ0JzpcbiAgICAgIHN0eWxlID0ge1xuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICB0b3A6ICdhdXRvJyxcbiAgICAgICAgYm90dG9tOiBib3R0b21cbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICBzdHlsZSA9IHtcbiAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgIHRvcDogJ2F1dG8nLFxuICAgICAgICBib3R0b206IGJvdHRvbVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBnZXROb3RpZmljYXRpb25JbnN0YW5jZShhcmdzLCBjYWxsYmFjaykge1xuICB2YXIgX2FyZ3MkcGxhY2VtZW50ID0gYXJncy5wbGFjZW1lbnQsXG4gICAgICBwbGFjZW1lbnQgPSBfYXJncyRwbGFjZW1lbnQgPT09IHZvaWQgMCA/IGRlZmF1bHRQbGFjZW1lbnQgOiBfYXJncyRwbGFjZW1lbnQsXG4gICAgICB0b3AgPSBhcmdzLnRvcCxcbiAgICAgIGJvdHRvbSA9IGFyZ3MuYm90dG9tLFxuICAgICAgX2FyZ3MkZ2V0Q29udGFpbmVyID0gYXJncy5nZXRDb250YWluZXIsXG4gICAgICBnZXRDb250YWluZXIgPSBfYXJncyRnZXRDb250YWluZXIgPT09IHZvaWQgMCA/IGRlZmF1bHRHZXRDb250YWluZXIgOiBfYXJncyRnZXRDb250YWluZXIsXG4gICAgICBjdXN0b21pemVQcmVmaXhDbHMgPSBhcmdzLnByZWZpeENscztcblxuICB2YXIgX2dsb2JhbENvbmZpZyA9IGdsb2JhbENvbmZpZygpLFxuICAgICAgZ2V0UHJlZml4Q2xzID0gX2dsb2JhbENvbmZpZy5nZXRQcmVmaXhDbHMsXG4gICAgICBnZXRJY29uUHJlZml4Q2xzID0gX2dsb2JhbENvbmZpZy5nZXRJY29uUHJlZml4Q2xzO1xuXG4gIHZhciBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ25vdGlmaWNhdGlvbicsIGN1c3RvbWl6ZVByZWZpeENscyB8fCBkZWZhdWx0UHJlZml4Q2xzKTtcbiAgdmFyIGljb25QcmVmaXhDbHMgPSBnZXRJY29uUHJlZml4Q2xzKCk7XG4gIHZhciBjYWNoZUtleSA9IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdChwbGFjZW1lbnQpO1xuICB2YXIgY2FjaGVJbnN0YW5jZSA9IG5vdGlmaWNhdGlvbkluc3RhbmNlW2NhY2hlS2V5XTtcblxuICBpZiAoY2FjaGVJbnN0YW5jZSkge1xuICAgIFByb21pc2UucmVzb2x2ZShjYWNoZUluc3RhbmNlKS50aGVuKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgY2FsbGJhY2soe1xuICAgICAgICBwcmVmaXhDbHM6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItbm90aWNlXCIpLFxuICAgICAgICBpY29uUHJlZml4Q2xzOiBpY29uUHJlZml4Q2xzLFxuICAgICAgICBpbnN0YW5jZTogaW5zdGFuY2VcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBub3RpZmljYXRpb25DbGFzcyA9IGNsYXNzTmFtZXMoXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1cIikuY29uY2F0KHBsYWNlbWVudCksIF9kZWZpbmVQcm9wZXJ0eSh7fSwgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1ydGxcIiksIHJ0bCA9PT0gdHJ1ZSkpO1xuICBub3RpZmljYXRpb25JbnN0YW5jZVtjYWNoZUtleV0gPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgIE5vdGlmaWNhdGlvbi5uZXdJbnN0YW5jZSh7XG4gICAgICBwcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICAgIGNsYXNzTmFtZTogbm90aWZpY2F0aW9uQ2xhc3MsXG4gICAgICBzdHlsZTogZ2V0UGxhY2VtZW50U3R5bGUocGxhY2VtZW50LCB0b3AsIGJvdHRvbSksXG4gICAgICBnZXRDb250YWluZXI6IGdldENvbnRhaW5lcixcbiAgICAgIG1heENvdW50OiBtYXhDb3VudFxuICAgIH0sIGZ1bmN0aW9uIChub3RpZmljYXRpb24pIHtcbiAgICAgIHJlc29sdmUobm90aWZpY2F0aW9uKTtcbiAgICAgIGNhbGxiYWNrKHtcbiAgICAgICAgcHJlZml4Q2xzOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLW5vdGljZVwiKSxcbiAgICAgICAgaWNvblByZWZpeENsczogaWNvblByZWZpeENscyxcbiAgICAgICAgaW5zdGFuY2U6IG5vdGlmaWNhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG52YXIgdHlwZVRvSWNvbiA9IHtcbiAgc3VjY2VzczogQ2hlY2tDaXJjbGVPdXRsaW5lZCxcbiAgaW5mbzogSW5mb0NpcmNsZU91dGxpbmVkLFxuICBlcnJvcjogQ2xvc2VDaXJjbGVPdXRsaW5lZCxcbiAgd2FybmluZzogRXhjbGFtYXRpb25DaXJjbGVPdXRsaW5lZFxufTtcblxuZnVuY3Rpb24gZ2V0UkNOb3RpY2VQcm9wcyhhcmdzLCBwcmVmaXhDbHMsIGljb25QcmVmaXhDbHMpIHtcbiAgdmFyIGR1cmF0aW9uQXJnID0gYXJncy5kdXJhdGlvbixcbiAgICAgIGljb24gPSBhcmdzLmljb24sXG4gICAgICB0eXBlID0gYXJncy50eXBlLFxuICAgICAgZGVzY3JpcHRpb24gPSBhcmdzLmRlc2NyaXB0aW9uLFxuICAgICAgbWVzc2FnZSA9IGFyZ3MubWVzc2FnZSxcbiAgICAgIGJ0biA9IGFyZ3MuYnRuLFxuICAgICAgb25DbG9zZSA9IGFyZ3Mub25DbG9zZSxcbiAgICAgIG9uQ2xpY2sgPSBhcmdzLm9uQ2xpY2ssXG4gICAgICBrZXkgPSBhcmdzLmtleSxcbiAgICAgIHN0eWxlID0gYXJncy5zdHlsZSxcbiAgICAgIGNsYXNzTmFtZSA9IGFyZ3MuY2xhc3NOYW1lLFxuICAgICAgX2FyZ3MkY2xvc2VJY29uID0gYXJncy5jbG9zZUljb24sXG4gICAgICBjbG9zZUljb24gPSBfYXJncyRjbG9zZUljb24gPT09IHZvaWQgMCA/IGRlZmF1bHRDbG9zZUljb24gOiBfYXJncyRjbG9zZUljb247XG4gIHZhciBkdXJhdGlvbiA9IGR1cmF0aW9uQXJnID09PSB1bmRlZmluZWQgPyBkZWZhdWx0RHVyYXRpb24gOiBkdXJhdGlvbkFyZztcbiAgdmFyIGljb25Ob2RlID0gbnVsbDtcblxuICBpZiAoaWNvbikge1xuICAgIGljb25Ob2RlID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1pY29uXCIpXG4gICAgfSwgYXJncy5pY29uKTtcbiAgfSBlbHNlIGlmICh0eXBlKSB7XG4gICAgaWNvbk5vZGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCh0eXBlVG9JY29uW3R5cGVdIHx8IG51bGwsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1pY29uIFwiKS5jb25jYXQocHJlZml4Q2xzLCBcIi1pY29uLVwiKS5jb25jYXQodHlwZSlcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBjbG9zZUljb25Ub1JlbmRlciA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWNsb3NlLXhcIilcbiAgfSwgY2xvc2VJY29uIHx8IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENsb3NlT3V0bGluZWQsIHtcbiAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItY2xvc2UtaWNvblwiKVxuICB9KSk7XG4gIHZhciBhdXRvTWFyZ2luVGFnID0gIWRlc2NyaXB0aW9uICYmIGljb25Ob2RlID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItbWVzc2FnZS1zaW5nbGUtbGluZS1hdXRvLW1hcmdpblwiKVxuICB9KSA6IG51bGw7XG4gIHJldHVybiB7XG4gICAgY29udGVudDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29uZmlnUHJvdmlkZXIsIHtcbiAgICAgIGljb25QcmVmaXhDbHM6IGljb25QcmVmaXhDbHNcbiAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IGljb25Ob2RlID8gXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi13aXRoLWljb25cIikgOiAnJyxcbiAgICAgIHJvbGU6IFwiYWxlcnRcIlxuICAgIH0sIGljb25Ob2RlLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItbWVzc2FnZVwiKVxuICAgIH0sIGF1dG9NYXJnaW5UYWcsIG1lc3NhZ2UpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItZGVzY3JpcHRpb25cIilcbiAgICB9LCBkZXNjcmlwdGlvbiksIGJ0biA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItYnRuXCIpXG4gICAgfSwgYnRuKSA6IG51bGwpKSxcbiAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgY2xvc2FibGU6IHRydWUsXG4gICAgY2xvc2VJY29uOiBjbG9zZUljb25Ub1JlbmRlcixcbiAgICBvbkNsb3NlOiBvbkNsb3NlLFxuICAgIG9uQ2xpY2s6IG9uQ2xpY2ssXG4gICAga2V5OiBrZXksXG4gICAgc3R5bGU6IHN0eWxlIHx8IHt9LFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1cIikuY29uY2F0KHR5cGUpLCAhIXR5cGUpKVxuICB9O1xufVxuXG5mdW5jdGlvbiBub3RpY2UoYXJncykge1xuICBnZXROb3RpZmljYXRpb25JbnN0YW5jZShhcmdzLCBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBwcmVmaXhDbHMgPSBfcmVmLnByZWZpeENscyxcbiAgICAgICAgaWNvblByZWZpeENscyA9IF9yZWYuaWNvblByZWZpeENscyxcbiAgICAgICAgaW5zdGFuY2UgPSBfcmVmLmluc3RhbmNlO1xuICAgIGluc3RhbmNlLm5vdGljZShnZXRSQ05vdGljZVByb3BzKGFyZ3MsIHByZWZpeENscywgaWNvblByZWZpeENscykpO1xuICB9KTtcbn1cblxudmFyIGFwaSA9IHtcbiAgb3Blbjogbm90aWNlLFxuICBjbG9zZTogZnVuY3Rpb24gY2xvc2Uoa2V5KSB7XG4gICAgT2JqZWN0LmtleXMobm90aWZpY2F0aW9uSW5zdGFuY2UpLmZvckVhY2goZnVuY3Rpb24gKGNhY2hlS2V5KSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5vdGlmaWNhdGlvbkluc3RhbmNlW2NhY2hlS2V5XSkudGhlbihmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgaW5zdGFuY2UucmVtb3ZlTm90aWNlKGtleSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSxcbiAgY29uZmlnOiBzZXROb3RpZmljYXRpb25Db25maWcsXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgT2JqZWN0LmtleXMobm90aWZpY2F0aW9uSW5zdGFuY2UpLmZvckVhY2goZnVuY3Rpb24gKGNhY2hlS2V5KSB7XG4gICAgICBQcm9taXNlLnJlc29sdmUobm90aWZpY2F0aW9uSW5zdGFuY2VbY2FjaGVLZXldKS50aGVuKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgICBpbnN0YW5jZS5kZXN0cm95KCk7XG4gICAgICB9KTtcbiAgICAgIGRlbGV0ZSBub3RpZmljYXRpb25JbnN0YW5jZVtjYWNoZUtleV07IC8vIGxndG1banMvbWlzc2luZy1hd2FpdF1cbiAgICB9KTtcbiAgfVxufTtcblsnc3VjY2VzcycsICdpbmZvJywgJ3dhcm5pbmcnLCAnZXJyb3InXS5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gIGFwaVt0eXBlXSA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgcmV0dXJuIGFwaS5vcGVuKF9leHRlbmRzKF9leHRlbmRzKHt9LCBhcmdzKSwge1xuICAgICAgdHlwZTogdHlwZVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuYXBpLndhcm4gPSBhcGkud2FybmluZztcbmFwaS51c2VOb3RpZmljYXRpb24gPSBjcmVhdGVVc2VOb3RpZmljYXRpb24oZ2V0Tm90aWZpY2F0aW9uSW5zdGFuY2UsIGdldFJDTm90aWNlUHJvcHMpO1xuLyoqIEBwcml2YXRlIHRlc3QgT25seSBmdW5jdGlvbi4gTm90IHdvcmsgb24gcHJvZHVjdGlvbiAqL1xuXG5leHBvcnQgdmFyIGdldEluc3RhbmNlID0gZnVuY3Rpb24gZ2V0SW5zdGFuY2UoY2FjaGVLZXkpIHtcbiAgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7XG4gICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkge1xuICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0JyA/IG5vdGlmaWNhdGlvbkluc3RhbmNlW2NhY2hlS2V5XSA6IG51bGwpO1xuXG4gICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBfY2FsbGVlKTtcbiAgfSkpO1xufTtcbmV4cG9ydCBkZWZhdWx0IGFwaTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHVzZVJDTm90aWZpY2F0aW9uIGZyb20gXCJyYy1ub3RpZmljYXRpb24vZXMvdXNlTm90aWZpY2F0aW9uXCI7XG5pbXBvcnQgeyBDb25maWdDb25zdW1lciB9IGZyb20gJy4uLy4uL2NvbmZpZy1wcm92aWRlcic7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVVc2VOb3RpZmljYXRpb24oZ2V0Tm90aWZpY2F0aW9uSW5zdGFuY2UsIGdldFJDTm90aWNlUHJvcHMpIHtcbiAgdmFyIHVzZU5vdGlmaWNhdGlvbiA9IGZ1bmN0aW9uIHVzZU5vdGlmaWNhdGlvbigpIHtcbiAgICAvLyBXZSBjYW4gb25seSBnZXQgY29udGVudCBieSByZW5kZXJcbiAgICB2YXIgZ2V0UHJlZml4Q2xzOyAvLyBXZSBjcmVhdGUgYSBwcm94eSB0byBoYW5kbGUgZGVsYXkgY3JlYXRlZCBpbnN0YW5jZVxuXG4gICAgdmFyIGlubmVySW5zdGFuY2UgPSBudWxsO1xuICAgIHZhciBwcm94eSA9IHtcbiAgICAgIGFkZDogZnVuY3Rpb24gYWRkKG5vdGljZVByb3BzLCBob2xkZXJDYWxsYmFjaykge1xuICAgICAgICBpbm5lckluc3RhbmNlID09PSBudWxsIHx8IGlubmVySW5zdGFuY2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGlubmVySW5zdGFuY2UuY29tcG9uZW50LmFkZChub3RpY2VQcm9wcywgaG9sZGVyQ2FsbGJhY2spO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgX3VzZVJDTm90aWZpY2F0aW9uID0gdXNlUkNOb3RpZmljYXRpb24ocHJveHkpLFxuICAgICAgICBfdXNlUkNOb3RpZmljYXRpb24yID0gX3NsaWNlZFRvQXJyYXkoX3VzZVJDTm90aWZpY2F0aW9uLCAyKSxcbiAgICAgICAgaG9va05vdGlmeSA9IF91c2VSQ05vdGlmaWNhdGlvbjJbMF0sXG4gICAgICAgIGhvbGRlciA9IF91c2VSQ05vdGlmaWNhdGlvbjJbMV07XG5cbiAgICBmdW5jdGlvbiBub3RpZnkoYXJncykge1xuICAgICAgdmFyIGN1c3RvbWl6ZVByZWZpeENscyA9IGFyZ3MucHJlZml4Q2xzO1xuICAgICAgdmFyIG1lcmdlZFByZWZpeENscyA9IGdldFByZWZpeENscygnbm90aWZpY2F0aW9uJywgY3VzdG9taXplUHJlZml4Q2xzKTtcbiAgICAgIGdldE5vdGlmaWNhdGlvbkluc3RhbmNlKF9leHRlbmRzKF9leHRlbmRzKHt9LCBhcmdzKSwge1xuICAgICAgICBwcmVmaXhDbHM6IG1lcmdlZFByZWZpeENsc1xuICAgICAgfSksIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgIHZhciBwcmVmaXhDbHMgPSBfcmVmLnByZWZpeENscyxcbiAgICAgICAgICAgIGluc3RhbmNlID0gX3JlZi5pbnN0YW5jZTtcbiAgICAgICAgaW5uZXJJbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgICAgICBob29rTm90aWZ5KGdldFJDTm90aWNlUHJvcHMoYXJncywgcHJlZml4Q2xzKSk7XG4gICAgICB9KTtcbiAgICB9IC8vIEZpbGwgZnVuY3Rpb25zXG5cblxuICAgIHZhciBob29rQXBpUmVmID0gUmVhY3QudXNlUmVmKHt9KTtcbiAgICBob29rQXBpUmVmLmN1cnJlbnQub3BlbiA9IG5vdGlmeTtcbiAgICBbJ3N1Y2Nlc3MnLCAnaW5mbycsICd3YXJuaW5nJywgJ2Vycm9yJ10uZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgaG9va0FwaVJlZi5jdXJyZW50W3R5cGVdID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGhvb2tBcGlSZWYuY3VycmVudC5vcGVuKF9leHRlbmRzKF9leHRlbmRzKHt9LCBhcmdzKSwge1xuICAgICAgICAgIHR5cGU6IHR5cGVcbiAgICAgICAgfSkpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2hvb2tBcGlSZWYuY3VycmVudCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29uZmlnQ29uc3VtZXIsIHtcbiAgICAgIGtleTogXCJob2xkZXJcIlxuICAgIH0sIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICBnZXRQcmVmaXhDbHMgPSBjb250ZXh0LmdldFByZWZpeENscztcbiAgICAgIHJldHVybiBob2xkZXI7XG4gICAgfSldO1xuICB9O1xuXG4gIHJldHVybiB1c2VOb3RpZmljYXRpb247XG59IiwiJ3VzZSBzdHJpY3QnXG52YXIgQUxQSEFCRVQgPSAncXB6cnk5eDhnZjJ0dmR3MHMzam41NGtoY2U2bXVhN2wnXG5cbi8vIHByZS1jb21wdXRlIGxvb2t1cCB0YWJsZVxudmFyIEFMUEhBQkVUX01BUCA9IHt9XG5mb3IgKHZhciB6ID0gMDsgeiA8IEFMUEhBQkVULmxlbmd0aDsgeisrKSB7XG4gIHZhciB4ID0gQUxQSEFCRVQuY2hhckF0KHopXG5cbiAgaWYgKEFMUEhBQkVUX01BUFt4XSAhPT0gdW5kZWZpbmVkKSB0aHJvdyBuZXcgVHlwZUVycm9yKHggKyAnIGlzIGFtYmlndW91cycpXG4gIEFMUEhBQkVUX01BUFt4XSA9IHpcbn1cblxuZnVuY3Rpb24gcG9seW1vZFN0ZXAgKHByZSkge1xuICB2YXIgYiA9IHByZSA+PiAyNVxuICByZXR1cm4gKChwcmUgJiAweDFGRkZGRkYpIDw8IDUpIF5cbiAgICAoLSgoYiA+PiAwKSAmIDEpICYgMHgzYjZhNTdiMikgXlxuICAgICgtKChiID4+IDEpICYgMSkgJiAweDI2NTA4ZTZkKSBeXG4gICAgKC0oKGIgPj4gMikgJiAxKSAmIDB4MWVhMTE5ZmEpIF5cbiAgICAoLSgoYiA+PiAzKSAmIDEpICYgMHgzZDQyMzNkZCkgXlxuICAgICgtKChiID4+IDQpICYgMSkgJiAweDJhMTQ2MmIzKVxufVxuXG5mdW5jdGlvbiBwcmVmaXhDaGsgKHByZWZpeCkge1xuICB2YXIgY2hrID0gMVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHByZWZpeC5sZW5ndGg7ICsraSkge1xuICAgIHZhciBjID0gcHJlZml4LmNoYXJDb2RlQXQoaSlcbiAgICBpZiAoYyA8IDMzIHx8IGMgPiAxMjYpIHJldHVybiAnSW52YWxpZCBwcmVmaXggKCcgKyBwcmVmaXggKyAnKSdcblxuICAgIGNoayA9IHBvbHltb2RTdGVwKGNoaykgXiAoYyA+PiA1KVxuICB9XG4gIGNoayA9IHBvbHltb2RTdGVwKGNoaylcblxuICBmb3IgKGkgPSAwOyBpIDwgcHJlZml4Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHYgPSBwcmVmaXguY2hhckNvZGVBdChpKVxuICAgIGNoayA9IHBvbHltb2RTdGVwKGNoaykgXiAodiAmIDB4MWYpXG4gIH1cbiAgcmV0dXJuIGNoa1xufVxuXG5mdW5jdGlvbiBlbmNvZGUgKHByZWZpeCwgd29yZHMsIExJTUlUKSB7XG4gIExJTUlUID0gTElNSVQgfHwgOTBcbiAgaWYgKChwcmVmaXgubGVuZ3RoICsgNyArIHdvcmRzLmxlbmd0aCkgPiBMSU1JVCkgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhjZWVkcyBsZW5ndGggbGltaXQnKVxuXG4gIHByZWZpeCA9IHByZWZpeC50b0xvd2VyQ2FzZSgpXG5cbiAgLy8gZGV0ZXJtaW5lIGNoayBtb2RcbiAgdmFyIGNoayA9IHByZWZpeENoayhwcmVmaXgpXG4gIGlmICh0eXBlb2YgY2hrID09PSAnc3RyaW5nJykgdGhyb3cgbmV3IEVycm9yKGNoaylcblxuICB2YXIgcmVzdWx0ID0gcHJlZml4ICsgJzEnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgd29yZHMubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgeCA9IHdvcmRzW2ldXG4gICAgaWYgKCh4ID4+IDUpICE9PSAwKSB0aHJvdyBuZXcgRXJyb3IoJ05vbiA1LWJpdCB3b3JkJylcblxuICAgIGNoayA9IHBvbHltb2RTdGVwKGNoaykgXiB4XG4gICAgcmVzdWx0ICs9IEFMUEhBQkVULmNoYXJBdCh4KVxuICB9XG5cbiAgZm9yIChpID0gMDsgaSA8IDY7ICsraSkge1xuICAgIGNoayA9IHBvbHltb2RTdGVwKGNoaylcbiAgfVxuICBjaGsgXj0gMVxuXG4gIGZvciAoaSA9IDA7IGkgPCA2OyArK2kpIHtcbiAgICB2YXIgdiA9IChjaGsgPj4gKCg1IC0gaSkgKiA1KSkgJiAweDFmXG4gICAgcmVzdWx0ICs9IEFMUEhBQkVULmNoYXJBdCh2KVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5mdW5jdGlvbiBfX2RlY29kZSAoc3RyLCBMSU1JVCkge1xuICBMSU1JVCA9IExJTUlUIHx8IDkwXG4gIGlmIChzdHIubGVuZ3RoIDwgOCkgcmV0dXJuIHN0ciArICcgdG9vIHNob3J0J1xuICBpZiAoc3RyLmxlbmd0aCA+IExJTUlUKSByZXR1cm4gJ0V4Y2VlZHMgbGVuZ3RoIGxpbWl0J1xuXG4gIC8vIGRvbid0IGFsbG93IG1peGVkIGNhc2VcbiAgdmFyIGxvd2VyZWQgPSBzdHIudG9Mb3dlckNhc2UoKVxuICB2YXIgdXBwZXJlZCA9IHN0ci50b1VwcGVyQ2FzZSgpXG4gIGlmIChzdHIgIT09IGxvd2VyZWQgJiYgc3RyICE9PSB1cHBlcmVkKSByZXR1cm4gJ01peGVkLWNhc2Ugc3RyaW5nICcgKyBzdHJcbiAgc3RyID0gbG93ZXJlZFxuXG4gIHZhciBzcGxpdCA9IHN0ci5sYXN0SW5kZXhPZignMScpXG4gIGlmIChzcGxpdCA9PT0gLTEpIHJldHVybiAnTm8gc2VwYXJhdG9yIGNoYXJhY3RlciBmb3IgJyArIHN0clxuICBpZiAoc3BsaXQgPT09IDApIHJldHVybiAnTWlzc2luZyBwcmVmaXggZm9yICcgKyBzdHJcblxuICB2YXIgcHJlZml4ID0gc3RyLnNsaWNlKDAsIHNwbGl0KVxuICB2YXIgd29yZENoYXJzID0gc3RyLnNsaWNlKHNwbGl0ICsgMSlcbiAgaWYgKHdvcmRDaGFycy5sZW5ndGggPCA2KSByZXR1cm4gJ0RhdGEgdG9vIHNob3J0J1xuXG4gIHZhciBjaGsgPSBwcmVmaXhDaGsocHJlZml4KVxuICBpZiAodHlwZW9mIGNoayA9PT0gJ3N0cmluZycpIHJldHVybiBjaGtcblxuICB2YXIgd29yZHMgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHdvcmRDaGFycy5sZW5ndGg7ICsraSkge1xuICAgIHZhciBjID0gd29yZENoYXJzLmNoYXJBdChpKVxuICAgIHZhciB2ID0gQUxQSEFCRVRfTUFQW2NdXG4gICAgaWYgKHYgPT09IHVuZGVmaW5lZCkgcmV0dXJuICdVbmtub3duIGNoYXJhY3RlciAnICsgY1xuICAgIGNoayA9IHBvbHltb2RTdGVwKGNoaykgXiB2XG5cbiAgICAvLyBub3QgaW4gdGhlIGNoZWNrc3VtP1xuICAgIGlmIChpICsgNiA+PSB3b3JkQ2hhcnMubGVuZ3RoKSBjb250aW51ZVxuICAgIHdvcmRzLnB1c2godilcbiAgfVxuXG4gIGlmIChjaGsgIT09IDEpIHJldHVybiAnSW52YWxpZCBjaGVja3N1bSBmb3IgJyArIHN0clxuICByZXR1cm4geyBwcmVmaXg6IHByZWZpeCwgd29yZHM6IHdvcmRzIH1cbn1cblxuZnVuY3Rpb24gZGVjb2RlVW5zYWZlICgpIHtcbiAgdmFyIHJlcyA9IF9fZGVjb2RlLmFwcGx5KG51bGwsIGFyZ3VtZW50cylcbiAgaWYgKHR5cGVvZiByZXMgPT09ICdvYmplY3QnKSByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGRlY29kZSAoc3RyKSB7XG4gIHZhciByZXMgPSBfX2RlY29kZS5hcHBseShudWxsLCBhcmd1bWVudHMpXG4gIGlmICh0eXBlb2YgcmVzID09PSAnb2JqZWN0JykgcmV0dXJuIHJlc1xuXG4gIHRocm93IG5ldyBFcnJvcihyZXMpXG59XG5cbmZ1bmN0aW9uIGNvbnZlcnQgKGRhdGEsIGluQml0cywgb3V0Qml0cywgcGFkKSB7XG4gIHZhciB2YWx1ZSA9IDBcbiAgdmFyIGJpdHMgPSAwXG4gIHZhciBtYXhWID0gKDEgPDwgb3V0Qml0cykgLSAxXG5cbiAgdmFyIHJlc3VsdCA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7ICsraSkge1xuICAgIHZhbHVlID0gKHZhbHVlIDw8IGluQml0cykgfCBkYXRhW2ldXG4gICAgYml0cyArPSBpbkJpdHNcblxuICAgIHdoaWxlIChiaXRzID49IG91dEJpdHMpIHtcbiAgICAgIGJpdHMgLT0gb3V0Qml0c1xuICAgICAgcmVzdWx0LnB1c2goKHZhbHVlID4+IGJpdHMpICYgbWF4VilcbiAgICB9XG4gIH1cblxuICBpZiAocGFkKSB7XG4gICAgaWYgKGJpdHMgPiAwKSB7XG4gICAgICByZXN1bHQucHVzaCgodmFsdWUgPDwgKG91dEJpdHMgLSBiaXRzKSkgJiBtYXhWKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYml0cyA+PSBpbkJpdHMpIHJldHVybiAnRXhjZXNzIHBhZGRpbmcnXG4gICAgaWYgKCh2YWx1ZSA8PCAob3V0Qml0cyAtIGJpdHMpKSAmIG1heFYpIHJldHVybiAnTm9uLXplcm8gcGFkZGluZydcbiAgfVxuXG4gIHJldHVybiByZXN1bHRcbn1cblxuZnVuY3Rpb24gdG9Xb3Jkc1Vuc2FmZSAoYnl0ZXMpIHtcbiAgdmFyIHJlcyA9IGNvbnZlcnQoYnl0ZXMsIDgsIDUsIHRydWUpXG4gIGlmIChBcnJheS5pc0FycmF5KHJlcykpIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gdG9Xb3JkcyAoYnl0ZXMpIHtcbiAgdmFyIHJlcyA9IGNvbnZlcnQoYnl0ZXMsIDgsIDUsIHRydWUpXG4gIGlmIChBcnJheS5pc0FycmF5KHJlcykpIHJldHVybiByZXNcblxuICB0aHJvdyBuZXcgRXJyb3IocmVzKVxufVxuXG5mdW5jdGlvbiBmcm9tV29yZHNVbnNhZmUgKHdvcmRzKSB7XG4gIHZhciByZXMgPSBjb252ZXJ0KHdvcmRzLCA1LCA4LCBmYWxzZSlcbiAgaWYgKEFycmF5LmlzQXJyYXkocmVzKSkgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBmcm9tV29yZHMgKHdvcmRzKSB7XG4gIHZhciByZXMgPSBjb252ZXJ0KHdvcmRzLCA1LCA4LCBmYWxzZSlcbiAgaWYgKEFycmF5LmlzQXJyYXkocmVzKSkgcmV0dXJuIHJlc1xuXG4gIHRocm93IG5ldyBFcnJvcihyZXMpXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBkZWNvZGVVbnNhZmU6IGRlY29kZVVuc2FmZSxcbiAgZGVjb2RlOiBkZWNvZGUsXG4gIGVuY29kZTogZW5jb2RlLFxuICB0b1dvcmRzVW5zYWZlOiB0b1dvcmRzVW5zYWZlLFxuICB0b1dvcmRzOiB0b1dvcmRzLFxuICBmcm9tV29yZHNVbnNhZmU6IGZyb21Xb3Jkc1Vuc2FmZSxcbiAgZnJvbVdvcmRzOiBmcm9tV29yZHNcbn1cbiIsIihmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBVdGlsc1xuICBmdW5jdGlvbiBhc3NlcnQgKHZhbCwgbXNnKSB7XG4gICAgaWYgKCF2YWwpIHRocm93IG5ldyBFcnJvcihtc2cgfHwgJ0Fzc2VydGlvbiBmYWlsZWQnKTtcbiAgfVxuXG4gIC8vIENvdWxkIHVzZSBgaW5oZXJpdHNgIG1vZHVsZSwgYnV0IGRvbid0IHdhbnQgdG8gbW92ZSBmcm9tIHNpbmdsZSBmaWxlXG4gIC8vIGFyY2hpdGVjdHVyZSB5ZXQuXG4gIGZ1bmN0aW9uIGluaGVyaXRzIChjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvcjtcbiAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlO1xuICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKCk7XG4gICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yO1xuICB9XG5cbiAgLy8gQk5cblxuICBmdW5jdGlvbiBCTiAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICBpZiAoQk4uaXNCTihudW1iZXIpKSB7XG4gICAgICByZXR1cm4gbnVtYmVyO1xuICAgIH1cblxuICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgIHRoaXMud29yZHMgPSBudWxsO1xuICAgIHRoaXMubGVuZ3RoID0gMDtcblxuICAgIC8vIFJlZHVjdGlvbiBjb250ZXh0XG4gICAgdGhpcy5yZWQgPSBudWxsO1xuXG4gICAgaWYgKG51bWJlciAhPT0gbnVsbCkge1xuICAgICAgaWYgKGJhc2UgPT09ICdsZScgfHwgYmFzZSA9PT0gJ2JlJykge1xuICAgICAgICBlbmRpYW4gPSBiYXNlO1xuICAgICAgICBiYXNlID0gMTA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2luaXQobnVtYmVyIHx8IDAsIGJhc2UgfHwgMTAsIGVuZGlhbiB8fCAnYmUnKTtcbiAgICB9XG4gIH1cbiAgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBCTjtcbiAgfSBlbHNlIHtcbiAgICBleHBvcnRzLkJOID0gQk47XG4gIH1cblxuICBCTi5CTiA9IEJOO1xuICBCTi53b3JkU2l6ZSA9IDI2O1xuXG4gIHZhciBCdWZmZXI7XG4gIHRyeSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuQnVmZmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgQnVmZmVyID0gd2luZG93LkJ1ZmZlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICB9XG5cbiAgQk4uaXNCTiA9IGZ1bmN0aW9uIGlzQk4gKG51bSkge1xuICAgIGlmIChudW0gaW5zdGFuY2VvZiBCTikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bSAhPT0gbnVsbCAmJiB0eXBlb2YgbnVtID09PSAnb2JqZWN0JyAmJlxuICAgICAgbnVtLmNvbnN0cnVjdG9yLndvcmRTaXplID09PSBCTi53b3JkU2l6ZSAmJiBBcnJheS5pc0FycmF5KG51bS53b3Jkcyk7XG4gIH07XG5cbiAgQk4ubWF4ID0gZnVuY3Rpb24gbWF4IChsZWZ0LCByaWdodCkge1xuICAgIGlmIChsZWZ0LmNtcChyaWdodCkgPiAwKSByZXR1cm4gbGVmdDtcbiAgICByZXR1cm4gcmlnaHQ7XG4gIH07XG5cbiAgQk4ubWluID0gZnVuY3Rpb24gbWluIChsZWZ0LCByaWdodCkge1xuICAgIGlmIChsZWZ0LmNtcChyaWdodCkgPCAwKSByZXR1cm4gbGVmdDtcbiAgICByZXR1cm4gcmlnaHQ7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gaW5pdCAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICBpZiAodHlwZW9mIG51bWJlciA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0TnVtYmVyKG51bWJlciwgYmFzZSwgZW5kaWFuKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG51bWJlciA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0QXJyYXkobnVtYmVyLCBiYXNlLCBlbmRpYW4pO1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAnaGV4Jykge1xuICAgICAgYmFzZSA9IDE2O1xuICAgIH1cbiAgICBhc3NlcnQoYmFzZSA9PT0gKGJhc2UgfCAwKSAmJiBiYXNlID49IDIgJiYgYmFzZSA8PSAzNik7XG5cbiAgICBudW1iZXIgPSBudW1iZXIudG9TdHJpbmcoKS5yZXBsYWNlKC9cXHMrL2csICcnKTtcbiAgICB2YXIgc3RhcnQgPSAwO1xuICAgIGlmIChudW1iZXJbMF0gPT09ICctJykge1xuICAgICAgc3RhcnQrKztcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH1cblxuICAgIGlmIChzdGFydCA8IG51bWJlci5sZW5ndGgpIHtcbiAgICAgIGlmIChiYXNlID09PSAxNikge1xuICAgICAgICB0aGlzLl9wYXJzZUhleChudW1iZXIsIHN0YXJ0LCBlbmRpYW4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fcGFyc2VCYXNlKG51bWJlciwgYmFzZSwgc3RhcnQpO1xuICAgICAgICBpZiAoZW5kaWFuID09PSAnbGUnKSB7XG4gICAgICAgICAgdGhpcy5faW5pdEFycmF5KHRoaXMudG9BcnJheSgpLCBiYXNlLCBlbmRpYW4pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdE51bWJlciA9IGZ1bmN0aW9uIF9pbml0TnVtYmVyIChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIG51bWJlciA9IC1udW1iZXI7XG4gICAgfVxuICAgIGlmIChudW1iZXIgPCAweDQwMDAwMDApIHtcbiAgICAgIHRoaXMud29yZHMgPSBbbnVtYmVyICYgMHgzZmZmZmZmXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB9IGVsc2UgaWYgKG51bWJlciA8IDB4MTAwMDAwMDAwMDAwMDApIHtcbiAgICAgIHRoaXMud29yZHMgPSBbXG4gICAgICAgIG51bWJlciAmIDB4M2ZmZmZmZixcbiAgICAgICAgKG51bWJlciAvIDB4NDAwMDAwMCkgJiAweDNmZmZmZmZcbiAgICAgIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2VydChudW1iZXIgPCAweDIwMDAwMDAwMDAwMDAwKTsgLy8gMiBeIDUzICh1bnNhZmUpXG4gICAgICB0aGlzLndvcmRzID0gW1xuICAgICAgICBudW1iZXIgJiAweDNmZmZmZmYsXG4gICAgICAgIChudW1iZXIgLyAweDQwMDAwMDApICYgMHgzZmZmZmZmLFxuICAgICAgICAxXG4gICAgICBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAzO1xuICAgIH1cblxuICAgIGlmIChlbmRpYW4gIT09ICdsZScpIHJldHVybjtcblxuICAgIC8vIFJldmVyc2UgdGhlIGJ5dGVzXG4gICAgdGhpcy5faW5pdEFycmF5KHRoaXMudG9BcnJheSgpLCBiYXNlLCBlbmRpYW4pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdEFycmF5ID0gZnVuY3Rpb24gX2luaXRBcnJheSAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICAvLyBQZXJoYXBzIGEgVWludDhBcnJheVxuICAgIGFzc2VydCh0eXBlb2YgbnVtYmVyLmxlbmd0aCA9PT0gJ251bWJlcicpO1xuICAgIGlmIChudW1iZXIubGVuZ3RoIDw9IDApIHtcbiAgICAgIHRoaXMud29yZHMgPSBbMF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGguY2VpbChudW1iZXIubGVuZ3RoIC8gMyk7XG4gICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB9XG5cbiAgICB2YXIgaiwgdztcbiAgICB2YXIgb2ZmID0gMDtcbiAgICBpZiAoZW5kaWFuID09PSAnYmUnKSB7XG4gICAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gMSwgaiA9IDA7IGkgPj0gMDsgaSAtPSAzKSB7XG4gICAgICAgIHcgPSBudW1iZXJbaV0gfCAobnVtYmVyW2kgLSAxXSA8PCA4KSB8IChudW1iZXJbaSAtIDJdIDw8IDE2KTtcbiAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgICB0aGlzLndvcmRzW2ogKyAxXSA9ICh3ID4+PiAoMjYgLSBvZmYpKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgb2ZmICs9IDI0O1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZW5kaWFuID09PSAnbGUnKSB7XG4gICAgICBmb3IgKGkgPSAwLCBqID0gMDsgaSA8IG51bWJlci5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICB3ID0gbnVtYmVyW2ldIHwgKG51bWJlcltpICsgMV0gPDwgOCkgfCAobnVtYmVyW2kgKyAyXSA8PCAxNik7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSAodyA+Pj4gKDI2IC0gb2ZmKSkgJiAweDNmZmZmZmY7XG4gICAgICAgIG9mZiArPSAyNDtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3N0cmlwKCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcGFyc2VIZXg0Qml0cyAoc3RyaW5nLCBpbmRleCkge1xuICAgIHZhciBjID0gc3RyaW5nLmNoYXJDb2RlQXQoaW5kZXgpO1xuICAgIC8vICcwJyAtICc5J1xuICAgIGlmIChjID49IDQ4ICYmIGMgPD0gNTcpIHtcbiAgICAgIHJldHVybiBjIC0gNDg7XG4gICAgLy8gJ0EnIC0gJ0YnXG4gICAgfSBlbHNlIGlmIChjID49IDY1ICYmIGMgPD0gNzApIHtcbiAgICAgIHJldHVybiBjIC0gNTU7XG4gICAgLy8gJ2EnIC0gJ2YnXG4gICAgfSBlbHNlIGlmIChjID49IDk3ICYmIGMgPD0gMTAyKSB7XG4gICAgICByZXR1cm4gYyAtIDg3O1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQoZmFsc2UsICdJbnZhbGlkIGNoYXJhY3RlciBpbiAnICsgc3RyaW5nKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUhleEJ5dGUgKHN0cmluZywgbG93ZXJCb3VuZCwgaW5kZXgpIHtcbiAgICB2YXIgciA9IHBhcnNlSGV4NEJpdHMoc3RyaW5nLCBpbmRleCk7XG4gICAgaWYgKGluZGV4IC0gMSA+PSBsb3dlckJvdW5kKSB7XG4gICAgICByIHw9IHBhcnNlSGV4NEJpdHMoc3RyaW5nLCBpbmRleCAtIDEpIDw8IDQ7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9wYXJzZUhleCA9IGZ1bmN0aW9uIF9wYXJzZUhleCAobnVtYmVyLCBzdGFydCwgZW5kaWFuKSB7XG4gICAgLy8gQ3JlYXRlIHBvc3NpYmx5IGJpZ2dlciBhcnJheSB0byBlbnN1cmUgdGhhdCBpdCBmaXRzIHRoZSBudW1iZXJcbiAgICB0aGlzLmxlbmd0aCA9IE1hdGguY2VpbCgobnVtYmVyLmxlbmd0aCAtIHN0YXJ0KSAvIDYpO1xuICAgIHRoaXMud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgfVxuXG4gICAgLy8gMjQtYml0cyBjaHVua3NcbiAgICB2YXIgb2ZmID0gMDtcbiAgICB2YXIgaiA9IDA7XG5cbiAgICB2YXIgdztcbiAgICBpZiAoZW5kaWFuID09PSAnYmUnKSB7XG4gICAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gMTsgaSA+PSBzdGFydDsgaSAtPSAyKSB7XG4gICAgICAgIHcgPSBwYXJzZUhleEJ5dGUobnVtYmVyLCBzdGFydCwgaSkgPDwgb2ZmO1xuICAgICAgICB0aGlzLndvcmRzW2pdIHw9IHcgJiAweDNmZmZmZmY7XG4gICAgICAgIGlmIChvZmYgPj0gMTgpIHtcbiAgICAgICAgICBvZmYgLT0gMTg7XG4gICAgICAgICAgaiArPSAxO1xuICAgICAgICAgIHRoaXMud29yZHNbal0gfD0gdyA+Pj4gMjY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2ZmICs9IDg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHBhcnNlTGVuZ3RoID0gbnVtYmVyLmxlbmd0aCAtIHN0YXJ0O1xuICAgICAgZm9yIChpID0gcGFyc2VMZW5ndGggJSAyID09PSAwID8gc3RhcnQgKyAxIDogc3RhcnQ7IGkgPCBudW1iZXIubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgdyA9IHBhcnNlSGV4Qnl0ZShudW1iZXIsIHN0YXJ0LCBpKSA8PCBvZmY7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gdyAmIDB4M2ZmZmZmZjtcbiAgICAgICAgaWYgKG9mZiA+PSAxOCkge1xuICAgICAgICAgIG9mZiAtPSAxODtcbiAgICAgICAgICBqICs9IDE7XG4gICAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSB3ID4+PiAyNjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvZmYgKz0gODtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX3N0cmlwKCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcGFyc2VCYXNlIChzdHIsIHN0YXJ0LCBlbmQsIG11bCkge1xuICAgIHZhciByID0gMDtcbiAgICB2YXIgYiA9IDA7XG4gICAgdmFyIGxlbiA9IE1hdGgubWluKHN0ci5sZW5ndGgsIGVuZCk7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSkgLSA0ODtcblxuICAgICAgciAqPSBtdWw7XG5cbiAgICAgIC8vICdhJ1xuICAgICAgaWYgKGMgPj0gNDkpIHtcbiAgICAgICAgYiA9IGMgLSA0OSArIDB4YTtcblxuICAgICAgLy8gJ0EnXG4gICAgICB9IGVsc2UgaWYgKGMgPj0gMTcpIHtcbiAgICAgICAgYiA9IGMgLSAxNyArIDB4YTtcblxuICAgICAgLy8gJzAnIC0gJzknXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiID0gYztcbiAgICAgIH1cbiAgICAgIGFzc2VydChjID49IDAgJiYgYiA8IG11bCwgJ0ludmFsaWQgY2hhcmFjdGVyJyk7XG4gICAgICByICs9IGI7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9wYXJzZUJhc2UgPSBmdW5jdGlvbiBfcGFyc2VCYXNlIChudW1iZXIsIGJhc2UsIHN0YXJ0KSB7XG4gICAgLy8gSW5pdGlhbGl6ZSBhcyB6ZXJvXG4gICAgdGhpcy53b3JkcyA9IFswXTtcbiAgICB0aGlzLmxlbmd0aCA9IDE7XG5cbiAgICAvLyBGaW5kIGxlbmd0aCBvZiBsaW1iIGluIGJhc2VcbiAgICBmb3IgKHZhciBsaW1iTGVuID0gMCwgbGltYlBvdyA9IDE7IGxpbWJQb3cgPD0gMHgzZmZmZmZmOyBsaW1iUG93ICo9IGJhc2UpIHtcbiAgICAgIGxpbWJMZW4rKztcbiAgICB9XG4gICAgbGltYkxlbi0tO1xuICAgIGxpbWJQb3cgPSAobGltYlBvdyAvIGJhc2UpIHwgMDtcblxuICAgIHZhciB0b3RhbCA9IG51bWJlci5sZW5ndGggLSBzdGFydDtcbiAgICB2YXIgbW9kID0gdG90YWwgJSBsaW1iTGVuO1xuICAgIHZhciBlbmQgPSBNYXRoLm1pbih0b3RhbCwgdG90YWwgLSBtb2QpICsgc3RhcnQ7XG5cbiAgICB2YXIgd29yZCA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IGxpbWJMZW4pIHtcbiAgICAgIHdvcmQgPSBwYXJzZUJhc2UobnVtYmVyLCBpLCBpICsgbGltYkxlbiwgYmFzZSk7XG5cbiAgICAgIHRoaXMuaW11bG4obGltYlBvdyk7XG4gICAgICBpZiAodGhpcy53b3Jkc1swXSArIHdvcmQgPCAweDQwMDAwMDApIHtcbiAgICAgICAgdGhpcy53b3Jkc1swXSArPSB3b3JkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faWFkZG4od29yZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG1vZCAhPT0gMCkge1xuICAgICAgdmFyIHBvdyA9IDE7XG4gICAgICB3b3JkID0gcGFyc2VCYXNlKG51bWJlciwgaSwgbnVtYmVyLmxlbmd0aCwgYmFzZSk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBtb2Q7IGkrKykge1xuICAgICAgICBwb3cgKj0gYmFzZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pbXVsbihwb3cpO1xuICAgICAgaWYgKHRoaXMud29yZHNbMF0gKyB3b3JkIDwgMHg0MDAwMDAwKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gKz0gd29yZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2lhZGRuKHdvcmQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX3N0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5IChkZXN0KSB7XG4gICAgZGVzdC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZXN0LndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXTtcbiAgICB9XG4gICAgZGVzdC5sZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICBkZXN0Lm5lZ2F0aXZlID0gdGhpcy5uZWdhdGl2ZTtcbiAgICBkZXN0LnJlZCA9IHRoaXMucmVkO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1vdmUgKGRlc3QsIHNyYykge1xuICAgIGRlc3Qud29yZHMgPSBzcmMud29yZHM7XG4gICAgZGVzdC5sZW5ndGggPSBzcmMubGVuZ3RoO1xuICAgIGRlc3QubmVnYXRpdmUgPSBzcmMubmVnYXRpdmU7XG4gICAgZGVzdC5yZWQgPSBzcmMucmVkO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9tb3ZlID0gZnVuY3Rpb24gX21vdmUgKGRlc3QpIHtcbiAgICBtb3ZlKGRlc3QsIHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIGNsb25lICgpIHtcbiAgICB2YXIgciA9IG5ldyBCTihudWxsKTtcbiAgICB0aGlzLmNvcHkocik7XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9leHBhbmQgPSBmdW5jdGlvbiBfZXhwYW5kIChzaXplKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoIDwgc2l6ZSkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIFJlbW92ZSBsZWFkaW5nIGAwYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuX3N0cmlwID0gZnVuY3Rpb24gc3RyaXAgKCkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA+IDEgJiYgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICB0aGlzLmxlbmd0aC0tO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX25vcm1TaWduID0gZnVuY3Rpb24gX25vcm1TaWduICgpIHtcbiAgICAvLyAtMCA9IDBcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIENoZWNrIFN5bWJvbC5mb3IgYmVjYXVzZSBub3QgZXZlcnl3aGVyZSB3aGVyZSBTeW1ib2wgZGVmaW5lZFxuICAvLyBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3ltYm9sI0Jyb3dzZXJfY29tcGF0aWJpbGl0eVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIFN5bWJvbC5mb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICB0cnkge1xuICAgICAgQk4ucHJvdG90eXBlW1N5bWJvbC5mb3IoJ25vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tJyldID0gaW5zcGVjdDtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBCTi5wcm90b3R5cGUuaW5zcGVjdCA9IGluc3BlY3Q7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIEJOLnByb3RvdHlwZS5pbnNwZWN0ID0gaW5zcGVjdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICAgIHJldHVybiAodGhpcy5yZWQgPyAnPEJOLVI6ICcgOiAnPEJOOiAnKSArIHRoaXMudG9TdHJpbmcoMTYpICsgJz4nO1xuICB9XG5cbiAgLypcblxuICB2YXIgemVyb3MgPSBbXTtcbiAgdmFyIGdyb3VwU2l6ZXMgPSBbXTtcbiAgdmFyIGdyb3VwQmFzZXMgPSBbXTtcblxuICB2YXIgcyA9ICcnO1xuICB2YXIgaSA9IC0xO1xuICB3aGlsZSAoKytpIDwgQk4ud29yZFNpemUpIHtcbiAgICB6ZXJvc1tpXSA9IHM7XG4gICAgcyArPSAnMCc7XG4gIH1cbiAgZ3JvdXBTaXplc1swXSA9IDA7XG4gIGdyb3VwU2l6ZXNbMV0gPSAwO1xuICBncm91cEJhc2VzWzBdID0gMDtcbiAgZ3JvdXBCYXNlc1sxXSA9IDA7XG4gIHZhciBiYXNlID0gMiAtIDE7XG4gIHdoaWxlICgrK2Jhc2UgPCAzNiArIDEpIHtcbiAgICB2YXIgZ3JvdXBTaXplID0gMDtcbiAgICB2YXIgZ3JvdXBCYXNlID0gMTtcbiAgICB3aGlsZSAoZ3JvdXBCYXNlIDwgKDEgPDwgQk4ud29yZFNpemUpIC8gYmFzZSkge1xuICAgICAgZ3JvdXBCYXNlICo9IGJhc2U7XG4gICAgICBncm91cFNpemUgKz0gMTtcbiAgICB9XG4gICAgZ3JvdXBTaXplc1tiYXNlXSA9IGdyb3VwU2l6ZTtcbiAgICBncm91cEJhc2VzW2Jhc2VdID0gZ3JvdXBCYXNlO1xuICB9XG5cbiAgKi9cblxuICB2YXIgemVyb3MgPSBbXG4gICAgJycsXG4gICAgJzAnLFxuICAgICcwMCcsXG4gICAgJzAwMCcsXG4gICAgJzAwMDAnLFxuICAgICcwMDAwMCcsXG4gICAgJzAwMDAwMCcsXG4gICAgJzAwMDAwMDAnLFxuICAgICcwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnXG4gIF07XG5cbiAgdmFyIGdyb3VwU2l6ZXMgPSBbXG4gICAgMCwgMCxcbiAgICAyNSwgMTYsIDEyLCAxMSwgMTAsIDksIDgsXG4gICAgOCwgNywgNywgNywgNywgNiwgNixcbiAgICA2LCA2LCA2LCA2LCA2LCA1LCA1LFxuICAgIDUsIDUsIDUsIDUsIDUsIDUsIDUsXG4gICAgNSwgNSwgNSwgNSwgNSwgNSwgNVxuICBdO1xuXG4gIHZhciBncm91cEJhc2VzID0gW1xuICAgIDAsIDAsXG4gICAgMzM1NTQ0MzIsIDQzMDQ2NzIxLCAxNjc3NzIxNiwgNDg4MjgxMjUsIDYwNDY2MTc2LCA0MDM1MzYwNywgMTY3NzcyMTYsXG4gICAgNDMwNDY3MjEsIDEwMDAwMDAwLCAxOTQ4NzE3MSwgMzU4MzE4MDgsIDYyNzQ4NTE3LCA3NTI5NTM2LCAxMTM5MDYyNSxcbiAgICAxNjc3NzIxNiwgMjQxMzc1NjksIDM0MDEyMjI0LCA0NzA0NTg4MSwgNjQwMDAwMDAsIDQwODQxMDEsIDUxNTM2MzIsXG4gICAgNjQzNjM0MywgNzk2MjYyNCwgOTc2NTYyNSwgMTE4ODEzNzYsIDE0MzQ4OTA3LCAxNzIxMDM2OCwgMjA1MTExNDksXG4gICAgMjQzMDAwMDAsIDI4NjI5MTUxLCAzMzU1NDQzMiwgMzkxMzUzOTMsIDQ1NDM1NDI0LCA1MjUyMTg3NSwgNjA0NjYxNzZcbiAgXTtcblxuICBCTi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoYmFzZSwgcGFkZGluZykge1xuICAgIGJhc2UgPSBiYXNlIHx8IDEwO1xuICAgIHBhZGRpbmcgPSBwYWRkaW5nIHwgMCB8fCAxO1xuXG4gICAgdmFyIG91dDtcbiAgICBpZiAoYmFzZSA9PT0gMTYgfHwgYmFzZSA9PT0gJ2hleCcpIHtcbiAgICAgIG91dCA9ICcnO1xuICAgICAgdmFyIG9mZiA9IDA7XG4gICAgICB2YXIgY2FycnkgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgICAgdmFyIHdvcmQgPSAoKCh3IDw8IG9mZikgfCBjYXJyeSkgJiAweGZmZmZmZikudG9TdHJpbmcoMTYpO1xuICAgICAgICBjYXJyeSA9ICh3ID4+PiAoMjQgLSBvZmYpKSAmIDB4ZmZmZmZmO1xuICAgICAgICBvZmYgKz0gMjtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhcnJ5ICE9PSAwIHx8IGkgIT09IHRoaXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIG91dCA9IHplcm9zWzYgLSB3b3JkLmxlbmd0aF0gKyB3b3JkICsgb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dCA9IHdvcmQgKyBvdXQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgICBvdXQgPSBjYXJyeS50b1N0cmluZygxNikgKyBvdXQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gKGJhc2UgfCAwKSAmJiBiYXNlID49IDIgJiYgYmFzZSA8PSAzNikge1xuICAgICAgLy8gdmFyIGdyb3VwU2l6ZSA9IE1hdGguZmxvb3IoQk4ud29yZFNpemUgKiBNYXRoLkxOMiAvIE1hdGgubG9nKGJhc2UpKTtcbiAgICAgIHZhciBncm91cFNpemUgPSBncm91cFNpemVzW2Jhc2VdO1xuICAgICAgLy8gdmFyIGdyb3VwQmFzZSA9IE1hdGgucG93KGJhc2UsIGdyb3VwU2l6ZSk7XG4gICAgICB2YXIgZ3JvdXBCYXNlID0gZ3JvdXBCYXNlc1tiYXNlXTtcbiAgICAgIG91dCA9ICcnO1xuICAgICAgdmFyIGMgPSB0aGlzLmNsb25lKCk7XG4gICAgICBjLm5lZ2F0aXZlID0gMDtcbiAgICAgIHdoaWxlICghYy5pc1plcm8oKSkge1xuICAgICAgICB2YXIgciA9IGMubW9kcm4oZ3JvdXBCYXNlKS50b1N0cmluZyhiYXNlKTtcbiAgICAgICAgYyA9IGMuaWRpdm4oZ3JvdXBCYXNlKTtcblxuICAgICAgICBpZiAoIWMuaXNaZXJvKCkpIHtcbiAgICAgICAgICBvdXQgPSB6ZXJvc1tncm91cFNpemUgLSByLmxlbmd0aF0gKyByICsgb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dCA9IHIgKyBvdXQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmlzWmVybygpKSB7XG4gICAgICAgIG91dCA9ICcwJyArIG91dDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChvdXQubGVuZ3RoICUgcGFkZGluZyAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnLScgKyBvdXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIGFzc2VydChmYWxzZSwgJ0Jhc2Ugc2hvdWxkIGJlIGJldHdlZW4gMiBhbmQgMzYnKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9OdW1iZXIgPSBmdW5jdGlvbiB0b051bWJlciAoKSB7XG4gICAgdmFyIHJldCA9IHRoaXMud29yZHNbMF07XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAyKSB7XG4gICAgICByZXQgKz0gdGhpcy53b3Jkc1sxXSAqIDB4NDAwMDAwMDtcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID09PSAzICYmIHRoaXMud29yZHNbMl0gPT09IDB4MDEpIHtcbiAgICAgIC8vIE5PVEU6IGF0IHRoaXMgc3RhZ2UgaXQgaXMga25vd24gdGhhdCB0aGUgdG9wIGJpdCBpcyBzZXRcbiAgICAgIHJldCArPSAweDEwMDAwMDAwMDAwMDAwICsgKHRoaXMud29yZHNbMV0gKiAweDQwMDAwMDApO1xuICAgIH0gZWxzZSBpZiAodGhpcy5sZW5ndGggPiAyKSB7XG4gICAgICBhc3NlcnQoZmFsc2UsICdOdW1iZXIgY2FuIG9ubHkgc2FmZWx5IHN0b3JlIHVwIHRvIDUzIGJpdHMnKTtcbiAgICB9XG4gICAgcmV0dXJuICh0aGlzLm5lZ2F0aXZlICE9PSAwKSA/IC1yZXQgOiByZXQ7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoMTYsIDIpO1xuICB9O1xuXG4gIGlmIChCdWZmZXIpIHtcbiAgICBCTi5wcm90b3R5cGUudG9CdWZmZXIgPSBmdW5jdGlvbiB0b0J1ZmZlciAoZW5kaWFuLCBsZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvQXJyYXlMaWtlKEJ1ZmZlciwgZW5kaWFuLCBsZW5ndGgpO1xuICAgIH07XG4gIH1cblxuICBCTi5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIHRvQXJyYXkgKGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9BcnJheUxpa2UoQXJyYXksIGVuZGlhbiwgbGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgYWxsb2NhdGUgPSBmdW5jdGlvbiBhbGxvY2F0ZSAoQXJyYXlUeXBlLCBzaXplKSB7XG4gICAgaWYgKEFycmF5VHlwZS5hbGxvY1Vuc2FmZSkge1xuICAgICAgcmV0dXJuIEFycmF5VHlwZS5hbGxvY1Vuc2FmZShzaXplKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBBcnJheVR5cGUoc2l6ZSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvQXJyYXlMaWtlID0gZnVuY3Rpb24gdG9BcnJheUxpa2UgKEFycmF5VHlwZSwgZW5kaWFuLCBsZW5ndGgpIHtcbiAgICB0aGlzLl9zdHJpcCgpO1xuXG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0aGlzLmJ5dGVMZW5ndGgoKTtcbiAgICB2YXIgcmVxTGVuZ3RoID0gbGVuZ3RoIHx8IE1hdGgubWF4KDEsIGJ5dGVMZW5ndGgpO1xuICAgIGFzc2VydChieXRlTGVuZ3RoIDw9IHJlcUxlbmd0aCwgJ2J5dGUgYXJyYXkgbG9uZ2VyIHRoYW4gZGVzaXJlZCBsZW5ndGgnKTtcbiAgICBhc3NlcnQocmVxTGVuZ3RoID4gMCwgJ1JlcXVlc3RlZCBhcnJheSBsZW5ndGggPD0gMCcpO1xuXG4gICAgdmFyIHJlcyA9IGFsbG9jYXRlKEFycmF5VHlwZSwgcmVxTGVuZ3RoKTtcbiAgICB2YXIgcG9zdGZpeCA9IGVuZGlhbiA9PT0gJ2xlJyA/ICdMRScgOiAnQkUnO1xuICAgIHRoaXNbJ190b0FycmF5TGlrZScgKyBwb3N0Zml4XShyZXMsIGJ5dGVMZW5ndGgpO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl90b0FycmF5TGlrZUxFID0gZnVuY3Rpb24gX3RvQXJyYXlMaWtlTEUgKHJlcywgYnl0ZUxlbmd0aCkge1xuICAgIHZhciBwb3NpdGlvbiA9IDA7XG4gICAgdmFyIGNhcnJ5ID0gMDtcblxuICAgIGZvciAodmFyIGkgPSAwLCBzaGlmdCA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgd29yZCA9ICh0aGlzLndvcmRzW2ldIDw8IHNoaWZ0KSB8IGNhcnJ5O1xuXG4gICAgICByZXNbcG9zaXRpb24rK10gPSB3b3JkICYgMHhmZjtcbiAgICAgIGlmIChwb3NpdGlvbiA8IHJlcy5sZW5ndGgpIHtcbiAgICAgICAgcmVzW3Bvc2l0aW9uKytdID0gKHdvcmQgPj4gOCkgJiAweGZmO1xuICAgICAgfVxuICAgICAgaWYgKHBvc2l0aW9uIDwgcmVzLmxlbmd0aCkge1xuICAgICAgICByZXNbcG9zaXRpb24rK10gPSAod29yZCA+PiAxNikgJiAweGZmO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2hpZnQgPT09IDYpIHtcbiAgICAgICAgaWYgKHBvc2l0aW9uIDwgcmVzLmxlbmd0aCkge1xuICAgICAgICAgIHJlc1twb3NpdGlvbisrXSA9ICh3b3JkID4+IDI0KSAmIDB4ZmY7XG4gICAgICAgIH1cbiAgICAgICAgY2FycnkgPSAwO1xuICAgICAgICBzaGlmdCA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXJyeSA9IHdvcmQgPj4+IDI0O1xuICAgICAgICBzaGlmdCArPSAyO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwb3NpdGlvbiA8IHJlcy5sZW5ndGgpIHtcbiAgICAgIHJlc1twb3NpdGlvbisrXSA9IGNhcnJ5O1xuXG4gICAgICB3aGlsZSAocG9zaXRpb24gPCByZXMubGVuZ3RoKSB7XG4gICAgICAgIHJlc1twb3NpdGlvbisrXSA9IDA7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fdG9BcnJheUxpa2VCRSA9IGZ1bmN0aW9uIF90b0FycmF5TGlrZUJFIChyZXMsIGJ5dGVMZW5ndGgpIHtcbiAgICB2YXIgcG9zaXRpb24gPSByZXMubGVuZ3RoIC0gMTtcbiAgICB2YXIgY2FycnkgPSAwO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIHNoaWZ0ID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3b3JkID0gKHRoaXMud29yZHNbaV0gPDwgc2hpZnQpIHwgY2Fycnk7XG5cbiAgICAgIHJlc1twb3NpdGlvbi0tXSA9IHdvcmQgJiAweGZmO1xuICAgICAgaWYgKHBvc2l0aW9uID49IDApIHtcbiAgICAgICAgcmVzW3Bvc2l0aW9uLS1dID0gKHdvcmQgPj4gOCkgJiAweGZmO1xuICAgICAgfVxuICAgICAgaWYgKHBvc2l0aW9uID49IDApIHtcbiAgICAgICAgcmVzW3Bvc2l0aW9uLS1dID0gKHdvcmQgPj4gMTYpICYgMHhmZjtcbiAgICAgIH1cblxuICAgICAgaWYgKHNoaWZ0ID09PSA2KSB7XG4gICAgICAgIGlmIChwb3NpdGlvbiA+PSAwKSB7XG4gICAgICAgICAgcmVzW3Bvc2l0aW9uLS1dID0gKHdvcmQgPj4gMjQpICYgMHhmZjtcbiAgICAgICAgfVxuICAgICAgICBjYXJyeSA9IDA7XG4gICAgICAgIHNoaWZ0ID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcnJ5ID0gd29yZCA+Pj4gMjQ7XG4gICAgICAgIHNoaWZ0ICs9IDI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBvc2l0aW9uID49IDApIHtcbiAgICAgIHJlc1twb3NpdGlvbi0tXSA9IGNhcnJ5O1xuXG4gICAgICB3aGlsZSAocG9zaXRpb24gPj0gMCkge1xuICAgICAgICByZXNbcG9zaXRpb24tLV0gPSAwO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBpZiAoTWF0aC5jbHozMikge1xuICAgIEJOLnByb3RvdHlwZS5fY291bnRCaXRzID0gZnVuY3Rpb24gX2NvdW50Qml0cyAodykge1xuICAgICAgcmV0dXJuIDMyIC0gTWF0aC5jbHozMih3KTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIEJOLnByb3RvdHlwZS5fY291bnRCaXRzID0gZnVuY3Rpb24gX2NvdW50Qml0cyAodykge1xuICAgICAgdmFyIHQgPSB3O1xuICAgICAgdmFyIHIgPSAwO1xuICAgICAgaWYgKHQgPj0gMHgxMDAwKSB7XG4gICAgICAgIHIgKz0gMTM7XG4gICAgICAgIHQgPj4+PSAxMztcbiAgICAgIH1cbiAgICAgIGlmICh0ID49IDB4NDApIHtcbiAgICAgICAgciArPSA3O1xuICAgICAgICB0ID4+Pj0gNztcbiAgICAgIH1cbiAgICAgIGlmICh0ID49IDB4OCkge1xuICAgICAgICByICs9IDQ7XG4gICAgICAgIHQgPj4+PSA0O1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHgwMikge1xuICAgICAgICByICs9IDI7XG4gICAgICAgIHQgPj4+PSAyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHIgKyB0O1xuICAgIH07XG4gIH1cblxuICBCTi5wcm90b3R5cGUuX3plcm9CaXRzID0gZnVuY3Rpb24gX3plcm9CaXRzICh3KSB7XG4gICAgLy8gU2hvcnQtY3V0XG4gICAgaWYgKHcgPT09IDApIHJldHVybiAyNjtcblxuICAgIHZhciB0ID0gdztcbiAgICB2YXIgciA9IDA7XG4gICAgaWYgKCh0ICYgMHgxZmZmKSA9PT0gMCkge1xuICAgICAgciArPSAxMztcbiAgICAgIHQgPj4+PSAxMztcbiAgICB9XG4gICAgaWYgKCh0ICYgMHg3ZikgPT09IDApIHtcbiAgICAgIHIgKz0gNztcbiAgICAgIHQgPj4+PSA3O1xuICAgIH1cbiAgICBpZiAoKHQgJiAweGYpID09PSAwKSB7XG4gICAgICByICs9IDQ7XG4gICAgICB0ID4+Pj0gNDtcbiAgICB9XG4gICAgaWYgKCh0ICYgMHgzKSA9PT0gMCkge1xuICAgICAgciArPSAyO1xuICAgICAgdCA+Pj49IDI7XG4gICAgfVxuICAgIGlmICgodCAmIDB4MSkgPT09IDApIHtcbiAgICAgIHIrKztcbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG51bWJlciBvZiB1c2VkIGJpdHMgaW4gYSBCTlxuICBCTi5wcm90b3R5cGUuYml0TGVuZ3RoID0gZnVuY3Rpb24gYml0TGVuZ3RoICgpIHtcbiAgICB2YXIgdyA9IHRoaXMud29yZHNbdGhpcy5sZW5ndGggLSAxXTtcbiAgICB2YXIgaGkgPSB0aGlzLl9jb3VudEJpdHModyk7XG4gICAgcmV0dXJuICh0aGlzLmxlbmd0aCAtIDEpICogMjYgKyBoaTtcbiAgfTtcblxuICBmdW5jdGlvbiB0b0JpdEFycmF5IChudW0pIHtcbiAgICB2YXIgdyA9IG5ldyBBcnJheShudW0uYml0TGVuZ3RoKCkpO1xuXG4gICAgZm9yICh2YXIgYml0ID0gMDsgYml0IDwgdy5sZW5ndGg7IGJpdCsrKSB7XG4gICAgICB2YXIgb2ZmID0gKGJpdCAvIDI2KSB8IDA7XG4gICAgICB2YXIgd2JpdCA9IGJpdCAlIDI2O1xuXG4gICAgICB3W2JpdF0gPSAobnVtLndvcmRzW29mZl0gPj4+IHdiaXQpICYgMHgwMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdztcbiAgfVxuXG4gIC8vIE51bWJlciBvZiB0cmFpbGluZyB6ZXJvIGJpdHNcbiAgQk4ucHJvdG90eXBlLnplcm9CaXRzID0gZnVuY3Rpb24gemVyb0JpdHMgKCkge1xuICAgIGlmICh0aGlzLmlzWmVybygpKSByZXR1cm4gMDtcblxuICAgIHZhciByID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBiID0gdGhpcy5femVyb0JpdHModGhpcy53b3Jkc1tpXSk7XG4gICAgICByICs9IGI7XG4gICAgICBpZiAoYiAhPT0gMjYpIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYnl0ZUxlbmd0aCA9IGZ1bmN0aW9uIGJ5dGVMZW5ndGggKCkge1xuICAgIHJldHVybiBNYXRoLmNlaWwodGhpcy5iaXRMZW5ndGgoKSAvIDgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b1R3b3MgPSBmdW5jdGlvbiB0b1R3b3MgKHdpZHRoKSB7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzLmFicygpLmlub3RuKHdpZHRoKS5pYWRkbigxKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZnJvbVR3b3MgPSBmdW5jdGlvbiBmcm9tVHdvcyAod2lkdGgpIHtcbiAgICBpZiAodGhpcy50ZXN0bih3aWR0aCAtIDEpKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub3RuKHdpZHRoKS5pYWRkbigxKS5pbmVnKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNsb25lKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzTmVnID0gZnVuY3Rpb24gaXNOZWcgKCkge1xuICAgIHJldHVybiB0aGlzLm5lZ2F0aXZlICE9PSAwO1xuICB9O1xuXG4gIC8vIFJldHVybiBuZWdhdGl2ZSBjbG9uZSBvZiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbmVnKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmluZWcgPSBmdW5jdGlvbiBpbmVnICgpIHtcbiAgICBpZiAoIXRoaXMuaXNaZXJvKCkpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgXj0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBPciBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVvciA9IGZ1bmN0aW9uIGl1b3IgKG51bSkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IG51bS5sZW5ndGgpIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSB8IG51bS53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaW9yID0gZnVuY3Rpb24gaW9yIChudW0pIHtcbiAgICBhc3NlcnQoKHRoaXMubmVnYXRpdmUgfCBudW0ubmVnYXRpdmUpID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdW9yKG51bSk7XG4gIH07XG5cbiAgLy8gT3IgYG51bWAgd2l0aCBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLm9yID0gZnVuY3Rpb24gb3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaW9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLmlvcih0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudW9yID0gZnVuY3Rpb24gdW9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml1b3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXVvcih0aGlzKTtcbiAgfTtcblxuICAvLyBBbmQgYG51bWAgd2l0aCBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1YW5kID0gZnVuY3Rpb24gaXVhbmQgKG51bSkge1xuICAgIC8vIGIgPSBtaW4tbGVuZ3RoKG51bSwgdGhpcylcbiAgICB2YXIgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldICYgbnVtLndvcmRzW2ldO1xuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYi5sZW5ndGg7XG5cbiAgICByZXR1cm4gdGhpcy5fc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaWFuZCA9IGZ1bmN0aW9uIGlhbmQgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1YW5kKG51bSk7XG4gIH07XG5cbiAgLy8gQW5kIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5hbmQgPSBmdW5jdGlvbiBhbmQgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaWFuZChudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pYW5kKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51YW5kID0gZnVuY3Rpb24gdWFuZCAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdWFuZChudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdWFuZCh0aGlzKTtcbiAgfTtcblxuICAvLyBYb3IgYG51bWAgd2l0aCBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1eG9yID0gZnVuY3Rpb24gaXV4b3IgKG51bSkge1xuICAgIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgICB2YXIgYTtcbiAgICB2YXIgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldIF4gYi53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICBpZiAodGhpcyAhPT0gYSkge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7XG5cbiAgICByZXR1cm4gdGhpcy5fc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXhvciA9IGZ1bmN0aW9uIGl4b3IgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1eG9yKG51bSk7XG4gIH07XG5cbiAgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS54b3IgPSBmdW5jdGlvbiB4b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXhvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5peG9yKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51eG9yID0gZnVuY3Rpb24gdXhvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXhvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdXhvcih0aGlzKTtcbiAgfTtcblxuICAvLyBOb3QgYGB0aGlzYGAgd2l0aCBgYHdpZHRoYGAgYml0d2lkdGhcbiAgQk4ucHJvdG90eXBlLmlub3RuID0gZnVuY3Rpb24gaW5vdG4gKHdpZHRoKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiB3aWR0aCA9PT0gJ251bWJlcicgJiYgd2lkdGggPj0gMCk7XG5cbiAgICB2YXIgYnl0ZXNOZWVkZWQgPSBNYXRoLmNlaWwod2lkdGggLyAyNikgfCAwO1xuICAgIHZhciBiaXRzTGVmdCA9IHdpZHRoICUgMjY7XG5cbiAgICAvLyBFeHRlbmQgdGhlIGJ1ZmZlciB3aXRoIGxlYWRpbmcgemVyb2VzXG4gICAgdGhpcy5fZXhwYW5kKGJ5dGVzTmVlZGVkKTtcblxuICAgIGlmIChiaXRzTGVmdCA+IDApIHtcbiAgICAgIGJ5dGVzTmVlZGVkLS07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGNvbXBsZXRlIHdvcmRzXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlc05lZWRlZDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gfnRoaXMud29yZHNbaV0gJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHRoZSByZXNpZHVlXG4gICAgaWYgKGJpdHNMZWZ0ID4gMCkge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IH50aGlzLndvcmRzW2ldICYgKDB4M2ZmZmZmZiA+PiAoMjYgLSBiaXRzTGVmdCkpO1xuICAgIH1cblxuICAgIC8vIEFuZCByZW1vdmUgbGVhZGluZyB6ZXJvZXNcbiAgICByZXR1cm4gdGhpcy5fc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubm90biA9IGZ1bmN0aW9uIG5vdG4gKHdpZHRoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbm90bih3aWR0aCk7XG4gIH07XG5cbiAgLy8gU2V0IGBiaXRgIG9mIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc2V0biA9IGZ1bmN0aW9uIHNldG4gKGJpdCwgdmFsKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInICYmIGJpdCA+PSAwKTtcblxuICAgIHZhciBvZmYgPSAoYml0IC8gMjYpIHwgMDtcbiAgICB2YXIgd2JpdCA9IGJpdCAlIDI2O1xuXG4gICAgdGhpcy5fZXhwYW5kKG9mZiArIDEpO1xuXG4gICAgaWYgKHZhbCkge1xuICAgICAgdGhpcy53b3Jkc1tvZmZdID0gdGhpcy53b3Jkc1tvZmZdIHwgKDEgPDwgd2JpdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud29yZHNbb2ZmXSA9IHRoaXMud29yZHNbb2ZmXSAmIH4oMSA8PCB3Yml0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fc3RyaXAoKTtcbiAgfTtcblxuICAvLyBBZGQgYG51bWAgdG8gYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pYWRkID0gZnVuY3Rpb24gaWFkZCAobnVtKSB7XG4gICAgdmFyIHI7XG5cbiAgICAvLyBuZWdhdGl2ZSArIHBvc2l0aXZlXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHIgPSB0aGlzLmlzdWIobnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgXj0gMTtcbiAgICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuXG4gICAgLy8gcG9zaXRpdmUgKyBuZWdhdGl2ZVxuICAgIH0gZWxzZSBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICByID0gdGhpcy5pc3ViKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHIuX25vcm1TaWduKCk7XG4gICAgfVxuXG4gICAgLy8gYS5sZW5ndGggPiBiLmxlbmd0aFxuICAgIHZhciBhLCBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIChiLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSByID4+PiAyNjtcbiAgICB9XG4gICAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9IHIgPj4+IDI2O1xuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoXSA9IGNhcnJ5O1xuICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAvLyBDb3B5IHRoZSByZXN0IG9mIHRoZSB3b3Jkc1xuICAgIH0gZWxzZSBpZiAoYSAhPT0gdGhpcykge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIEFkZCBgbnVtYCB0byBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAobnVtKSB7XG4gICAgdmFyIHJlcztcbiAgICBpZiAobnVtLm5lZ2F0aXZlICE9PSAwICYmIHRoaXMubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICByZXMgPSB0aGlzLnN1YihudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlIF49IDE7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0gZWxzZSBpZiAobnVtLm5lZ2F0aXZlID09PSAwICYmIHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgcmVzID0gbnVtLnN1Yih0aGlzKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGQobnVtKTtcblxuICAgIHJldHVybiBudW0uY2xvbmUoKS5pYWRkKHRoaXMpO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IGBudW1gIGZyb20gYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pc3ViID0gZnVuY3Rpb24gaXN1YiAobnVtKSB7XG4gICAgLy8gdGhpcyAtICgtbnVtKSA9IHRoaXMgKyBudW1cbiAgICBpZiAobnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgdmFyIHIgPSB0aGlzLmlhZGQobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gci5fbm9ybVNpZ24oKTtcblxuICAgIC8vIC10aGlzIC0gbnVtID0gLSh0aGlzICsgbnVtKVxuICAgIH0gZWxzZSBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlhZGQobnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXMuX25vcm1TaWduKCk7XG4gICAgfVxuXG4gICAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlXG4gICAgdmFyIGNtcCA9IHRoaXMuY21wKG51bSk7XG5cbiAgICAvLyBPcHRpbWl6YXRpb24gLSB6ZXJvaWZ5XG4gICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIGEgPiBiXG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGNtcCA+IDApIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSAtIChiLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gciA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICBmb3IgKDsgY2FycnkgIT09IDAgJiYgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHIgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICAvLyBDb3B5IHJlc3Qgb2YgdGhlIHdvcmRzXG4gICAgaWYgKGNhcnJ5ID09PSAwICYmIGkgPCBhLmxlbmd0aCAmJiBhICE9PSB0aGlzKSB7XG4gICAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgaSk7XG5cbiAgICBpZiAoYSAhPT0gdGhpcykge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3N0cmlwKCk7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgYG51bWAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIHN1YiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3ViKG51bSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gc21hbGxNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICBvdXQubmVnYXRpdmUgPSBudW0ubmVnYXRpdmUgXiBzZWxmLm5lZ2F0aXZlO1xuICAgIHZhciBsZW4gPSAoc2VsZi5sZW5ndGggKyBudW0ubGVuZ3RoKSB8IDA7XG4gICAgb3V0Lmxlbmd0aCA9IGxlbjtcbiAgICBsZW4gPSAobGVuIC0gMSkgfCAwO1xuXG4gICAgLy8gUGVlbCBvbmUgaXRlcmF0aW9uIChjb21waWxlciBjYW4ndCBkbyBpdCwgYmVjYXVzZSBvZiBjb2RlIGNvbXBsZXhpdHkpXG4gICAgdmFyIGEgPSBzZWxmLndvcmRzWzBdIHwgMDtcbiAgICB2YXIgYiA9IG51bS53b3Jkc1swXSB8IDA7XG4gICAgdmFyIHIgPSBhICogYjtcblxuICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgdmFyIGNhcnJ5ID0gKHIgLyAweDQwMDAwMDApIHwgMDtcbiAgICBvdXQud29yZHNbMF0gPSBsbztcblxuICAgIGZvciAodmFyIGsgPSAxOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgbmNhcnJ5YCxcbiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmXG4gICAgICB2YXIgbmNhcnJ5ID0gY2FycnkgPj4+IDI2O1xuICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7XG4gICAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gc2VsZi5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgICAgdmFyIGkgPSAoayAtIGopIHwgMDtcbiAgICAgICAgYSA9IHNlbGYud29yZHNbaV0gfCAwO1xuICAgICAgICBiID0gbnVtLndvcmRzW2pdIHwgMDtcbiAgICAgICAgciA9IGEgKiBiICsgcndvcmQ7XG4gICAgICAgIG5jYXJyeSArPSAociAvIDB4NDAwMDAwMCkgfCAwO1xuICAgICAgICByd29yZCA9IHIgJiAweDNmZmZmZmY7XG4gICAgICB9XG4gICAgICBvdXQud29yZHNba10gPSByd29yZCB8IDA7XG4gICAgICBjYXJyeSA9IG5jYXJyeSB8IDA7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgb3V0LndvcmRzW2tdID0gY2FycnkgfCAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubGVuZ3RoLS07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5fc3RyaXAoKTtcbiAgfVxuXG4gIC8vIFRPRE8oaW5kdXRueSk6IGl0IG1heSBiZSByZWFzb25hYmxlIHRvIG9taXQgaXQgZm9yIHVzZXJzIHdobyBkb24ndCBuZWVkXG4gIC8vIHRvIHdvcmsgd2l0aCAyNTYtYml0IG51bWJlcnMsIG90aGVyd2lzZSBpdCBnaXZlcyAyMCUgaW1wcm92ZW1lbnQgZm9yIDI1Ni1iaXRcbiAgLy8gbXVsdGlwbGljYXRpb24gKGxpa2UgZWxsaXB0aWMgc2VjcDI1NmsxKS5cbiAgdmFyIGNvbWIxME11bFRvID0gZnVuY3Rpb24gY29tYjEwTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgdmFyIGEgPSBzZWxmLndvcmRzO1xuICAgIHZhciBiID0gbnVtLndvcmRzO1xuICAgIHZhciBvID0gb3V0LndvcmRzO1xuICAgIHZhciBjID0gMDtcbiAgICB2YXIgbG87XG4gICAgdmFyIG1pZDtcbiAgICB2YXIgaGk7XG4gICAgdmFyIGEwID0gYVswXSB8IDA7XG4gICAgdmFyIGFsMCA9IGEwICYgMHgxZmZmO1xuICAgIHZhciBhaDAgPSBhMCA+Pj4gMTM7XG4gICAgdmFyIGExID0gYVsxXSB8IDA7XG4gICAgdmFyIGFsMSA9IGExICYgMHgxZmZmO1xuICAgIHZhciBhaDEgPSBhMSA+Pj4gMTM7XG4gICAgdmFyIGEyID0gYVsyXSB8IDA7XG4gICAgdmFyIGFsMiA9IGEyICYgMHgxZmZmO1xuICAgIHZhciBhaDIgPSBhMiA+Pj4gMTM7XG4gICAgdmFyIGEzID0gYVszXSB8IDA7XG4gICAgdmFyIGFsMyA9IGEzICYgMHgxZmZmO1xuICAgIHZhciBhaDMgPSBhMyA+Pj4gMTM7XG4gICAgdmFyIGE0ID0gYVs0XSB8IDA7XG4gICAgdmFyIGFsNCA9IGE0ICYgMHgxZmZmO1xuICAgIHZhciBhaDQgPSBhNCA+Pj4gMTM7XG4gICAgdmFyIGE1ID0gYVs1XSB8IDA7XG4gICAgdmFyIGFsNSA9IGE1ICYgMHgxZmZmO1xuICAgIHZhciBhaDUgPSBhNSA+Pj4gMTM7XG4gICAgdmFyIGE2ID0gYVs2XSB8IDA7XG4gICAgdmFyIGFsNiA9IGE2ICYgMHgxZmZmO1xuICAgIHZhciBhaDYgPSBhNiA+Pj4gMTM7XG4gICAgdmFyIGE3ID0gYVs3XSB8IDA7XG4gICAgdmFyIGFsNyA9IGE3ICYgMHgxZmZmO1xuICAgIHZhciBhaDcgPSBhNyA+Pj4gMTM7XG4gICAgdmFyIGE4ID0gYVs4XSB8IDA7XG4gICAgdmFyIGFsOCA9IGE4ICYgMHgxZmZmO1xuICAgIHZhciBhaDggPSBhOCA+Pj4gMTM7XG4gICAgdmFyIGE5ID0gYVs5XSB8IDA7XG4gICAgdmFyIGFsOSA9IGE5ICYgMHgxZmZmO1xuICAgIHZhciBhaDkgPSBhOSA+Pj4gMTM7XG4gICAgdmFyIGIwID0gYlswXSB8IDA7XG4gICAgdmFyIGJsMCA9IGIwICYgMHgxZmZmO1xuICAgIHZhciBiaDAgPSBiMCA+Pj4gMTM7XG4gICAgdmFyIGIxID0gYlsxXSB8IDA7XG4gICAgdmFyIGJsMSA9IGIxICYgMHgxZmZmO1xuICAgIHZhciBiaDEgPSBiMSA+Pj4gMTM7XG4gICAgdmFyIGIyID0gYlsyXSB8IDA7XG4gICAgdmFyIGJsMiA9IGIyICYgMHgxZmZmO1xuICAgIHZhciBiaDIgPSBiMiA+Pj4gMTM7XG4gICAgdmFyIGIzID0gYlszXSB8IDA7XG4gICAgdmFyIGJsMyA9IGIzICYgMHgxZmZmO1xuICAgIHZhciBiaDMgPSBiMyA+Pj4gMTM7XG4gICAgdmFyIGI0ID0gYls0XSB8IDA7XG4gICAgdmFyIGJsNCA9IGI0ICYgMHgxZmZmO1xuICAgIHZhciBiaDQgPSBiNCA+Pj4gMTM7XG4gICAgdmFyIGI1ID0gYls1XSB8IDA7XG4gICAgdmFyIGJsNSA9IGI1ICYgMHgxZmZmO1xuICAgIHZhciBiaDUgPSBiNSA+Pj4gMTM7XG4gICAgdmFyIGI2ID0gYls2XSB8IDA7XG4gICAgdmFyIGJsNiA9IGI2ICYgMHgxZmZmO1xuICAgIHZhciBiaDYgPSBiNiA+Pj4gMTM7XG4gICAgdmFyIGI3ID0gYls3XSB8IDA7XG4gICAgdmFyIGJsNyA9IGI3ICYgMHgxZmZmO1xuICAgIHZhciBiaDcgPSBiNyA+Pj4gMTM7XG4gICAgdmFyIGI4ID0gYls4XSB8IDA7XG4gICAgdmFyIGJsOCA9IGI4ICYgMHgxZmZmO1xuICAgIHZhciBiaDggPSBiOCA+Pj4gMTM7XG4gICAgdmFyIGI5ID0gYls5XSB8IDA7XG4gICAgdmFyIGJsOSA9IGI5ICYgMHgxZmZmO1xuICAgIHZhciBiaDkgPSBiOSA+Pj4gMTM7XG5cbiAgICBvdXQubmVnYXRpdmUgPSBzZWxmLm5lZ2F0aXZlIF4gbnVtLm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSAxOTtcbiAgICAvKiBrID0gMCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMCwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwwLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgwLCBiaDApO1xuICAgIHZhciB3MCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzAgPj4+IDI2KSkgfCAwO1xuICAgIHcwICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMSwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwxLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgxLCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMSkpIHwgMDtcbiAgICB2YXIgdzEgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxID4+PiAyNikpIHwgMDtcbiAgICB3MSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDIgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDIsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMiwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMiwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmgyKSkgfCAwO1xuICAgIHZhciB3MiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzIgPj4+IDI2KSkgfCAwO1xuICAgIHcyICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMywgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwzLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgzLCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmgzKSkgfCAwO1xuICAgIHZhciB3MyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzMgPj4+IDI2KSkgfCAwO1xuICAgIHczICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNCwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw0LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg0LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNCkpIHwgMDtcbiAgICB2YXIgdzQgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc0ID4+PiAyNikpIHwgMDtcbiAgICB3NCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDUgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDUsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg1KSkgfCAwO1xuICAgIHZhciB3NSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzUgPj4+IDI2KSkgfCAwO1xuICAgIHc1ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNiwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw2LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg2LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg2KSkgfCAwO1xuICAgIHZhciB3NiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzYgPj4+IDI2KSkgfCAwO1xuICAgIHc2ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNywgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw3LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg3LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNykpIHwgMDtcbiAgICB2YXIgdzcgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc3ID4+PiAyNikpIHwgMDtcbiAgICB3NyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDggKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDgsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOCwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg4KSkgfCAwO1xuICAgIHZhciB3OCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzggPj4+IDI2KSkgfCAwO1xuICAgIHc4ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gOSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg5KSkgfCAwO1xuICAgIHZhciB3OSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzkgPj4+IDI2KSkgfCAwO1xuICAgIHc5ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTAgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMSk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgxKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwxKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgxKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTAgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMCA+Pj4gMjYpKSB8IDA7XG4gICAgdzEwICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTEgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMik7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgyKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwyKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgyKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzExID4+PiAyNikpIHwgMDtcbiAgICB3MTEgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwzKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDMpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDMpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDMpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg5KSkgfCAwO1xuICAgIHZhciB3MTIgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMiA+Pj4gMjYpKSB8IDA7XG4gICAgdzEyICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTMgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg0KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw0KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg0KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTMgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMyA+Pj4gMjYpKSB8IDA7XG4gICAgdzEzICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTQgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNSk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg1KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw1KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg1KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE0ID4+PiAyNikpIHwgMDtcbiAgICB3MTQgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw2KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDYpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDYpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDYpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTUgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNSA+Pj4gMjYpKSB8IDA7XG4gICAgdzE1ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTYgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNyk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg3KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw3KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg3KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg5KSkgfCAwO1xuICAgIHZhciB3MTYgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNiA+Pj4gMjYpKSB8IDA7XG4gICAgdzE2ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTcgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsOCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg4KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw4KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg4KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE3ID4+PiAyNikpIHwgMDtcbiAgICB3MTcgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxOCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw5KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDkpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDkpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDkpO1xuICAgIHZhciB3MTggPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxOCA+Pj4gMjYpKSB8IDA7XG4gICAgdzE4ICY9IDB4M2ZmZmZmZjtcbiAgICBvWzBdID0gdzA7XG4gICAgb1sxXSA9IHcxO1xuICAgIG9bMl0gPSB3MjtcbiAgICBvWzNdID0gdzM7XG4gICAgb1s0XSA9IHc0O1xuICAgIG9bNV0gPSB3NTtcbiAgICBvWzZdID0gdzY7XG4gICAgb1s3XSA9IHc3O1xuICAgIG9bOF0gPSB3ODtcbiAgICBvWzldID0gdzk7XG4gICAgb1sxMF0gPSB3MTA7XG4gICAgb1sxMV0gPSB3MTE7XG4gICAgb1sxMl0gPSB3MTI7XG4gICAgb1sxM10gPSB3MTM7XG4gICAgb1sxNF0gPSB3MTQ7XG4gICAgb1sxNV0gPSB3MTU7XG4gICAgb1sxNl0gPSB3MTY7XG4gICAgb1sxN10gPSB3MTc7XG4gICAgb1sxOF0gPSB3MTg7XG4gICAgaWYgKGMgIT09IDApIHtcbiAgICAgIG9bMTldID0gYztcbiAgICAgIG91dC5sZW5ndGgrKztcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbiAgfTtcblxuICAvLyBQb2x5ZmlsbCBjb21iXG4gIGlmICghTWF0aC5pbXVsKSB7XG4gICAgY29tYjEwTXVsVG8gPSBzbWFsbE11bFRvO1xuICB9XG5cbiAgZnVuY3Rpb24gYmlnTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgb3V0Lm5lZ2F0aXZlID0gbnVtLm5lZ2F0aXZlIF4gc2VsZi5uZWdhdGl2ZTtcbiAgICBvdXQubGVuZ3RoID0gc2VsZi5sZW5ndGggKyBudW0ubGVuZ3RoO1xuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICB2YXIgaG5jYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCBvdXQubGVuZ3RoIC0gMTsgaysrKSB7XG4gICAgICAvLyBTdW0gYWxsIHdvcmRzIHdpdGggdGhlIHNhbWUgYGkgKyBqID0ga2AgYW5kIGFjY3VtdWxhdGUgYG5jYXJyeWAsXG4gICAgICAvLyBub3RlIHRoYXQgbmNhcnJ5IGNvdWxkIGJlID49IDB4M2ZmZmZmZlxuICAgICAgdmFyIG5jYXJyeSA9IGhuY2Fycnk7XG4gICAgICBobmNhcnJ5ID0gMDtcbiAgICAgIHZhciByd29yZCA9IGNhcnJ5ICYgMHgzZmZmZmZmO1xuICAgICAgdmFyIG1heEogPSBNYXRoLm1pbihrLCBudW0ubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBqID0gTWF0aC5tYXgoMCwgayAtIHNlbGYubGVuZ3RoICsgMSk7IGogPD0gbWF4SjsgaisrKSB7XG4gICAgICAgIHZhciBpID0gayAtIGo7XG4gICAgICAgIHZhciBhID0gc2VsZi53b3Jkc1tpXSB8IDA7XG4gICAgICAgIHZhciBiID0gbnVtLndvcmRzW2pdIHwgMDtcbiAgICAgICAgdmFyIHIgPSBhICogYjtcblxuICAgICAgICB2YXIgbG8gPSByICYgMHgzZmZmZmZmO1xuICAgICAgICBuY2FycnkgPSAobmNhcnJ5ICsgKChyIC8gMHg0MDAwMDAwKSB8IDApKSB8IDA7XG4gICAgICAgIGxvID0gKGxvICsgcndvcmQpIHwgMDtcbiAgICAgICAgcndvcmQgPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICAgICAgbmNhcnJ5ID0gKG5jYXJyeSArIChsbyA+Pj4gMjYpKSB8IDA7XG5cbiAgICAgICAgaG5jYXJyeSArPSBuY2FycnkgPj4+IDI2O1xuICAgICAgICBuY2FycnkgJj0gMHgzZmZmZmZmO1xuICAgICAgfVxuICAgICAgb3V0LndvcmRzW2tdID0gcndvcmQ7XG4gICAgICBjYXJyeSA9IG5jYXJyeTtcbiAgICAgIG5jYXJyeSA9IGhuY2Fycnk7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgb3V0LndvcmRzW2tdID0gY2Fycnk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dC5sZW5ndGgtLTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0Ll9zdHJpcCgpO1xuICB9XG5cbiAgZnVuY3Rpb24ganVtYm9NdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICAvLyBUZW1wb3JhcnkgZGlzYWJsZSwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L2JuLmpzL2lzc3Vlcy8yMTFcbiAgICAvLyB2YXIgZmZ0bSA9IG5ldyBGRlRNKCk7XG4gICAgLy8gcmV0dXJuIGZmdG0ubXVscChzZWxmLCBudW0sIG91dCk7XG4gICAgcmV0dXJuIGJpZ011bFRvKHNlbGYsIG51bSwgb3V0KTtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5tdWxUbyA9IGZ1bmN0aW9uIG11bFRvIChudW0sIG91dCkge1xuICAgIHZhciByZXM7XG4gICAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aDtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEwICYmIG51bS5sZW5ndGggPT09IDEwKSB7XG4gICAgICByZXMgPSBjb21iMTBNdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfSBlbHNlIGlmIChsZW4gPCA2Mykge1xuICAgICAgcmVzID0gc21hbGxNdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfSBlbHNlIGlmIChsZW4gPCAxMDI0KSB7XG4gICAgICByZXMgPSBiaWdNdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcyA9IGp1bWJvTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gQ29vbGV5LVR1a2V5IGFsZ29yaXRobSBmb3IgRkZUXG4gIC8vIHNsaWdodGx5IHJldmlzaXRlZCB0byByZWx5IG9uIGxvb3BpbmcgaW5zdGVhZCBvZiByZWN1cnNpb25cblxuICBmdW5jdGlvbiBGRlRNICh4LCB5KSB7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICB9XG5cbiAgRkZUTS5wcm90b3R5cGUubWFrZVJCVCA9IGZ1bmN0aW9uIG1ha2VSQlQgKE4pIHtcbiAgICB2YXIgdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbCA9IEJOLnByb3RvdHlwZS5fY291bnRCaXRzKE4pIC0gMTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgdFtpXSA9IHRoaXMucmV2QmluKGksIGwsIE4pO1xuICAgIH1cblxuICAgIHJldHVybiB0O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYmluYXJ5LXJldmVyc2VkIHJlcHJlc2VudGF0aW9uIG9mIGB4YFxuICBGRlRNLnByb3RvdHlwZS5yZXZCaW4gPSBmdW5jdGlvbiByZXZCaW4gKHgsIGwsIE4pIHtcbiAgICBpZiAoeCA9PT0gMCB8fCB4ID09PSBOIC0gMSkgcmV0dXJuIHg7XG5cbiAgICB2YXIgcmIgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICByYiB8PSAoeCAmIDEpIDw8IChsIC0gaSAtIDEpO1xuICAgICAgeCA+Pj0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmI7XG4gIH07XG5cbiAgLy8gUGVyZm9ybXMgXCJ0d2VlZGxpbmdcIiBwaGFzZSwgdGhlcmVmb3JlICdlbXVsYXRpbmcnXG4gIC8vIGJlaGF2aW91ciBvZiB0aGUgcmVjdXJzaXZlIGFsZ29yaXRobVxuICBGRlRNLnByb3RvdHlwZS5wZXJtdXRlID0gZnVuY3Rpb24gcGVybXV0ZSAocmJ0LCByd3MsIGl3cywgcnR3cywgaXR3cywgTikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICBydHdzW2ldID0gcndzW3JidFtpXV07XG4gICAgICBpdHdzW2ldID0gaXdzW3JidFtpXV07XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLnRyYW5zZm9ybSA9IGZ1bmN0aW9uIHRyYW5zZm9ybSAocndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4sIHJidCkge1xuICAgIHRoaXMucGVybXV0ZShyYnQsIHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOKTtcblxuICAgIGZvciAodmFyIHMgPSAxOyBzIDwgTjsgcyA8PD0gMSkge1xuICAgICAgdmFyIGwgPSBzIDw8IDE7XG5cbiAgICAgIHZhciBydHdkZiA9IE1hdGguY29zKDIgKiBNYXRoLlBJIC8gbCk7XG4gICAgICB2YXIgaXR3ZGYgPSBNYXRoLnNpbigyICogTWF0aC5QSSAvIGwpO1xuXG4gICAgICBmb3IgKHZhciBwID0gMDsgcCA8IE47IHAgKz0gbCkge1xuICAgICAgICB2YXIgcnR3ZGZfID0gcnR3ZGY7XG4gICAgICAgIHZhciBpdHdkZl8gPSBpdHdkZjtcblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHM7IGorKykge1xuICAgICAgICAgIHZhciByZSA9IHJ0d3NbcCArIGpdO1xuICAgICAgICAgIHZhciBpZSA9IGl0d3NbcCArIGpdO1xuXG4gICAgICAgICAgdmFyIHJvID0gcnR3c1twICsgaiArIHNdO1xuICAgICAgICAgIHZhciBpbyA9IGl0d3NbcCArIGogKyBzXTtcblxuICAgICAgICAgIHZhciByeCA9IHJ0d2RmXyAqIHJvIC0gaXR3ZGZfICogaW87XG5cbiAgICAgICAgICBpbyA9IHJ0d2RmXyAqIGlvICsgaXR3ZGZfICogcm87XG4gICAgICAgICAgcm8gPSByeDtcblxuICAgICAgICAgIHJ0d3NbcCArIGpdID0gcmUgKyBybztcbiAgICAgICAgICBpdHdzW3AgKyBqXSA9IGllICsgaW87XG5cbiAgICAgICAgICBydHdzW3AgKyBqICsgc10gPSByZSAtIHJvO1xuICAgICAgICAgIGl0d3NbcCArIGogKyBzXSA9IGllIC0gaW87XG5cbiAgICAgICAgICAvKiBqc2hpbnQgbWF4ZGVwdGggOiBmYWxzZSAqL1xuICAgICAgICAgIGlmIChqICE9PSBsKSB7XG4gICAgICAgICAgICByeCA9IHJ0d2RmICogcnR3ZGZfIC0gaXR3ZGYgKiBpdHdkZl87XG5cbiAgICAgICAgICAgIGl0d2RmXyA9IHJ0d2RmICogaXR3ZGZfICsgaXR3ZGYgKiBydHdkZl87XG4gICAgICAgICAgICBydHdkZl8gPSByeDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuZ3Vlc3NMZW4xM2IgPSBmdW5jdGlvbiBndWVzc0xlbjEzYiAobiwgbSkge1xuICAgIHZhciBOID0gTWF0aC5tYXgobSwgbikgfCAxO1xuICAgIHZhciBvZGQgPSBOICYgMTtcbiAgICB2YXIgaSA9IDA7XG4gICAgZm9yIChOID0gTiAvIDIgfCAwOyBOOyBOID0gTiA+Pj4gMSkge1xuICAgICAgaSsrO1xuICAgIH1cblxuICAgIHJldHVybiAxIDw8IGkgKyAxICsgb2RkO1xuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLmNvbmp1Z2F0ZSA9IGZ1bmN0aW9uIGNvbmp1Z2F0ZSAocndzLCBpd3MsIE4pIHtcbiAgICBpZiAoTiA8PSAxKSByZXR1cm47XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE4gLyAyOyBpKyspIHtcbiAgICAgIHZhciB0ID0gcndzW2ldO1xuXG4gICAgICByd3NbaV0gPSByd3NbTiAtIGkgLSAxXTtcbiAgICAgIHJ3c1tOIC0gaSAtIDFdID0gdDtcblxuICAgICAgdCA9IGl3c1tpXTtcblxuICAgICAgaXdzW2ldID0gLWl3c1tOIC0gaSAtIDFdO1xuICAgICAgaXdzW04gLSBpIC0gMV0gPSAtdDtcbiAgICB9XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUubm9ybWFsaXplMTNiID0gZnVuY3Rpb24gbm9ybWFsaXplMTNiICh3cywgTikge1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOIC8gMjsgaSsrKSB7XG4gICAgICB2YXIgdyA9IE1hdGgucm91bmQod3NbMiAqIGkgKyAxXSAvIE4pICogMHgyMDAwICtcbiAgICAgICAgTWF0aC5yb3VuZCh3c1syICogaV0gLyBOKSArXG4gICAgICAgIGNhcnJ5O1xuXG4gICAgICB3c1tpXSA9IHcgJiAweDNmZmZmZmY7XG5cbiAgICAgIGlmICh3IDwgMHg0MDAwMDAwKSB7XG4gICAgICAgIGNhcnJ5ID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcnJ5ID0gdyAvIDB4NDAwMDAwMCB8IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHdzO1xuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLmNvbnZlcnQxM2IgPSBmdW5jdGlvbiBjb252ZXJ0MTNiICh3cywgbGVuLCByd3MsIE4pIHtcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNhcnJ5ID0gY2FycnkgKyAod3NbaV0gfCAwKTtcblxuICAgICAgcndzWzIgKiBpXSA9IGNhcnJ5ICYgMHgxZmZmOyBjYXJyeSA9IGNhcnJ5ID4+PiAxMztcbiAgICAgIHJ3c1syICogaSArIDFdID0gY2FycnkgJiAweDFmZmY7IGNhcnJ5ID0gY2FycnkgPj4+IDEzO1xuICAgIH1cblxuICAgIC8vIFBhZCB3aXRoIHplcm9lc1xuICAgIGZvciAoaSA9IDIgKiBsZW47IGkgPCBOOyArK2kpIHtcbiAgICAgIHJ3c1tpXSA9IDA7XG4gICAgfVxuXG4gICAgYXNzZXJ0KGNhcnJ5ID09PSAwKTtcbiAgICBhc3NlcnQoKGNhcnJ5ICYgfjB4MWZmZikgPT09IDApO1xuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLnN0dWIgPSBmdW5jdGlvbiBzdHViIChOKSB7XG4gICAgdmFyIHBoID0gbmV3IEFycmF5KE4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICBwaFtpXSA9IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBoO1xuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLm11bHAgPSBmdW5jdGlvbiBtdWxwICh4LCB5LCBvdXQpIHtcbiAgICB2YXIgTiA9IDIgKiB0aGlzLmd1ZXNzTGVuMTNiKHgubGVuZ3RoLCB5Lmxlbmd0aCk7XG5cbiAgICB2YXIgcmJ0ID0gdGhpcy5tYWtlUkJUKE4pO1xuXG4gICAgdmFyIF8gPSB0aGlzLnN0dWIoTik7XG5cbiAgICB2YXIgcndzID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciByd3N0ID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBpd3N0ID0gbmV3IEFycmF5KE4pO1xuXG4gICAgdmFyIG5yd3MgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIG5yd3N0ID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBuaXdzdCA9IG5ldyBBcnJheShOKTtcblxuICAgIHZhciBybXdzID0gb3V0LndvcmRzO1xuICAgIHJtd3MubGVuZ3RoID0gTjtcblxuICAgIHRoaXMuY29udmVydDEzYih4LndvcmRzLCB4Lmxlbmd0aCwgcndzLCBOKTtcbiAgICB0aGlzLmNvbnZlcnQxM2IoeS53b3JkcywgeS5sZW5ndGgsIG5yd3MsIE4pO1xuXG4gICAgdGhpcy50cmFuc2Zvcm0ocndzLCBfLCByd3N0LCBpd3N0LCBOLCByYnQpO1xuICAgIHRoaXMudHJhbnNmb3JtKG5yd3MsIF8sIG5yd3N0LCBuaXdzdCwgTiwgcmJ0KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICB2YXIgcnggPSByd3N0W2ldICogbnJ3c3RbaV0gLSBpd3N0W2ldICogbml3c3RbaV07XG4gICAgICBpd3N0W2ldID0gcndzdFtpXSAqIG5pd3N0W2ldICsgaXdzdFtpXSAqIG5yd3N0W2ldO1xuICAgICAgcndzdFtpXSA9IHJ4O1xuICAgIH1cblxuICAgIHRoaXMuY29uanVnYXRlKHJ3c3QsIGl3c3QsIE4pO1xuICAgIHRoaXMudHJhbnNmb3JtKHJ3c3QsIGl3c3QsIHJtd3MsIF8sIE4sIHJidCk7XG4gICAgdGhpcy5jb25qdWdhdGUocm13cywgXywgTik7XG4gICAgdGhpcy5ub3JtYWxpemUxM2Iocm13cywgTik7XG5cbiAgICBvdXQubmVnYXRpdmUgPSB4Lm5lZ2F0aXZlIF4geS5uZWdhdGl2ZTtcbiAgICBvdXQubGVuZ3RoID0geC5sZW5ndGggKyB5Lmxlbmd0aDtcbiAgICByZXR1cm4gb3V0Ll9zdHJpcCgpO1xuICB9O1xuXG4gIC8vIE11bHRpcGx5IGB0aGlzYCBieSBgbnVtYFxuICBCTi5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChudW0pIHtcbiAgICB2YXIgb3V0ID0gbmV3IEJOKG51bGwpO1xuICAgIG91dC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCArIG51bS5sZW5ndGgpO1xuICAgIHJldHVybiB0aGlzLm11bFRvKG51bSwgb3V0KTtcbiAgfTtcblxuICAvLyBNdWx0aXBseSBlbXBsb3lpbmcgRkZUXG4gIEJOLnByb3RvdHlwZS5tdWxmID0gZnVuY3Rpb24gbXVsZiAobnVtKSB7XG4gICAgdmFyIG91dCA9IG5ldyBCTihudWxsKTtcbiAgICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgICByZXR1cm4ganVtYm9NdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gIH07XG5cbiAgLy8gSW4tcGxhY2UgTXVsdGlwbGljYXRpb25cbiAgQk4ucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLm11bFRvKG51bSwgdGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmltdWxuID0gZnVuY3Rpb24gaW11bG4gKG51bSkge1xuICAgIHZhciBpc05lZ051bSA9IG51bSA8IDA7XG4gICAgaWYgKGlzTmVnTnVtKSBudW0gPSAtbnVtO1xuXG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcblxuICAgIC8vIENhcnJ5XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3ID0gKHRoaXMud29yZHNbaV0gfCAwKSAqIG51bTtcbiAgICAgIHZhciBsbyA9ICh3ICYgMHgzZmZmZmZmKSArIChjYXJyeSAmIDB4M2ZmZmZmZik7XG4gICAgICBjYXJyeSA+Pj0gMjY7XG4gICAgICBjYXJyeSArPSAodyAvIDB4NDAwMDAwMCkgfCAwO1xuICAgICAgLy8gTk9URTogbG8gaXMgMjdiaXQgbWF4aW11bVxuICAgICAgY2FycnkgKz0gbG8gPj4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IGxvICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IGNhcnJ5O1xuICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICB9XG5cbiAgICByZXR1cm4gaXNOZWdOdW0gPyB0aGlzLmluZWcoKSA6IHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm11bG4gPSBmdW5jdGlvbiBtdWxuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltdWxuKG51bSk7XG4gIH07XG5cbiAgLy8gYHRoaXNgICogYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zcXIgPSBmdW5jdGlvbiBzcXIgKCkge1xuICAgIHJldHVybiB0aGlzLm11bCh0aGlzKTtcbiAgfTtcblxuICAvLyBgdGhpc2AgKiBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLmlzcXIgPSBmdW5jdGlvbiBpc3FyICgpIHtcbiAgICByZXR1cm4gdGhpcy5pbXVsKHRoaXMuY2xvbmUoKSk7XG4gIH07XG5cbiAgLy8gTWF0aC5wb3coYHRoaXNgLCBgbnVtYClcbiAgQk4ucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uIHBvdyAobnVtKSB7XG4gICAgdmFyIHcgPSB0b0JpdEFycmF5KG51bSk7XG4gICAgaWYgKHcubGVuZ3RoID09PSAwKSByZXR1cm4gbmV3IEJOKDEpO1xuXG4gICAgLy8gU2tpcCBsZWFkaW5nIHplcm9lc1xuICAgIHZhciByZXMgPSB0aGlzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdy5sZW5ndGg7IGkrKywgcmVzID0gcmVzLnNxcigpKSB7XG4gICAgICBpZiAod1tpXSAhPT0gMCkgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKCsraSA8IHcubGVuZ3RoKSB7XG4gICAgICBmb3IgKHZhciBxID0gcmVzLnNxcigpOyBpIDwgdy5sZW5ndGg7IGkrKywgcSA9IHEuc3FyKCkpIHtcbiAgICAgICAgaWYgKHdbaV0gPT09IDApIGNvbnRpbnVlO1xuXG4gICAgICAgIHJlcyA9IHJlcy5tdWwocSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBTaGlmdC1sZWZ0IGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdXNobG4gPSBmdW5jdGlvbiBpdXNobG4gKGJpdHMpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7XG4gICAgdmFyIGNhcnJ5TWFzayA9ICgweDNmZmZmZmYgPj4+ICgyNiAtIHIpKSA8PCAoMjYgLSByKTtcbiAgICB2YXIgaTtcblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICB2YXIgY2FycnkgPSAwO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbmV3Q2FycnkgPSB0aGlzLndvcmRzW2ldICYgY2FycnlNYXNrO1xuICAgICAgICB2YXIgYyA9ICgodGhpcy53b3Jkc1tpXSB8IDApIC0gbmV3Q2FycnkpIDw8IHI7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBjIHwgY2Fycnk7XG4gICAgICAgIGNhcnJ5ID0gbmV3Q2FycnkgPj4+ICgyNiAtIHIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2FycnkpIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGNhcnJ5O1xuICAgICAgICB0aGlzLmxlbmd0aCsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzICE9PSAwKSB7XG4gICAgICBmb3IgKGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIHNdID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgaSA8IHM7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5sZW5ndGggKz0gcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNobG4gPSBmdW5jdGlvbiBpc2hsbiAoYml0cykge1xuICAgIC8vIFRPRE8oaW5kdXRueSk6IGltcGxlbWVudCBtZVxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXNobG4oYml0cyk7XG4gIH07XG5cbiAgLy8gU2hpZnQtcmlnaHQgaW4tcGxhY2VcbiAgLy8gTk9URTogYGhpbnRgIGlzIGEgbG93ZXN0IGJpdCBiZWZvcmUgdHJhaWxpbmcgemVyb2VzXG4gIC8vIE5PVEU6IGlmIGBleHRlbmRlZGAgaXMgcHJlc2VudCAtIGl0IHdpbGwgYmUgZmlsbGVkIHdpdGggZGVzdHJveWVkIGJpdHNcbiAgQk4ucHJvdG90eXBlLml1c2hybiA9IGZ1bmN0aW9uIGl1c2hybiAoYml0cywgaGludCwgZXh0ZW5kZWQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIGg7XG4gICAgaWYgKGhpbnQpIHtcbiAgICAgIGggPSAoaGludCAtIChoaW50ICUgMjYpKSAvIDI2O1xuICAgIH0gZWxzZSB7XG4gICAgICBoID0gMDtcbiAgICB9XG5cbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IE1hdGgubWluKChiaXRzIC0gcikgLyAyNiwgdGhpcy5sZW5ndGgpO1xuICAgIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gKCgweDNmZmZmZmYgPj4+IHIpIDw8IHIpO1xuICAgIHZhciBtYXNrZWRXb3JkcyA9IGV4dGVuZGVkO1xuXG4gICAgaCAtPSBzO1xuICAgIGggPSBNYXRoLm1heCgwLCBoKTtcblxuICAgIC8vIEV4dGVuZGVkIG1vZGUsIGNvcHkgbWFza2VkIHBhcnRcbiAgICBpZiAobWFza2VkV29yZHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgczsgaSsrKSB7XG4gICAgICAgIG1hc2tlZFdvcmRzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICAgIG1hc2tlZFdvcmRzLmxlbmd0aCA9IHM7XG4gICAgfVxuXG4gICAgaWYgKHMgPT09IDApIHtcbiAgICAgIC8vIE5vLW9wLCB3ZSBzaG91bGQgbm90IG1vdmUgYW55dGhpbmcgYXQgYWxsXG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA+IHMpIHtcbiAgICAgIHRoaXMubGVuZ3RoIC09IHM7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpICsgc107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDAgJiYgKGNhcnJ5ICE9PSAwIHx8IGkgPj0gaCk7IGktLSkge1xuICAgICAgdmFyIHdvcmQgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAoY2FycnkgPDwgKDI2IC0gcikpIHwgKHdvcmQgPj4+IHIpO1xuICAgICAgY2FycnkgPSB3b3JkICYgbWFzaztcbiAgICB9XG5cbiAgICAvLyBQdXNoIGNhcnJpZWQgYml0cyBhcyBhIG1hc2tcbiAgICBpZiAobWFza2VkV29yZHMgJiYgY2FycnkgIT09IDApIHtcbiAgICAgIG1hc2tlZFdvcmRzLndvcmRzW21hc2tlZFdvcmRzLmxlbmd0aCsrXSA9IGNhcnJ5O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3N0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzaHJuID0gZnVuY3Rpb24gaXNocm4gKGJpdHMsIGhpbnQsIGV4dGVuZGVkKSB7XG4gICAgLy8gVE9ETyhpbmR1dG55KTogaW1wbGVtZW50IG1lXG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1c2hybihiaXRzLCBoaW50LCBleHRlbmRlZCk7XG4gIH07XG5cbiAgLy8gU2hpZnQtbGVmdFxuICBCTi5wcm90b3R5cGUuc2hsbiA9IGZ1bmN0aW9uIHNobG4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzaGxuKGJpdHMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51c2hsbiA9IGZ1bmN0aW9uIHVzaGxuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXNobG4oYml0cyk7XG4gIH07XG5cbiAgLy8gU2hpZnQtcmlnaHRcbiAgQk4ucHJvdG90eXBlLnNocm4gPSBmdW5jdGlvbiBzaHJuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc2hybihiaXRzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudXNocm4gPSBmdW5jdGlvbiB1c2hybiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXVzaHJuKGJpdHMpO1xuICB9O1xuXG4gIC8vIFRlc3QgaWYgbiBiaXQgaXMgc2V0XG4gIEJOLnByb3RvdHlwZS50ZXN0biA9IGZ1bmN0aW9uIHRlc3RuIChiaXQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicgJiYgYml0ID49IDApO1xuICAgIHZhciByID0gYml0ICUgMjY7XG4gICAgdmFyIHMgPSAoYml0IC0gcikgLyAyNjtcbiAgICB2YXIgcSA9IDEgPDwgcjtcblxuICAgIC8vIEZhc3QgY2FzZTogYml0IGlzIG11Y2ggaGlnaGVyIHRoYW4gYWxsIGV4aXN0aW5nIHdvcmRzXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHJldHVybiBmYWxzZTtcblxuICAgIC8vIENoZWNrIGJpdCBhbmQgcmV0dXJuXG4gICAgdmFyIHcgPSB0aGlzLndvcmRzW3NdO1xuXG4gICAgcmV0dXJuICEhKHcgJiBxKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gb25seSBsb3dlcnMgYml0cyBvZiBudW1iZXIgKGluLXBsYWNlKVxuICBCTi5wcm90b3R5cGUuaW1hc2tuID0gZnVuY3Rpb24gaW1hc2tuIChiaXRzKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApO1xuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gKGJpdHMgLSByKSAvIDI2O1xuXG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDAsICdpbWFza24gd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlIG51bWJlcnMnKTtcblxuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgcysrO1xuICAgIH1cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGgubWluKHMsIHRoaXMubGVuZ3RoKTtcblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICB2YXIgbWFzayA9IDB4M2ZmZmZmZiBeICgoMHgzZmZmZmZmID4+PiByKSA8PCByKTtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGggLSAxXSAmPSBtYXNrO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9zdHJpcCgpO1xuICB9O1xuXG4gIC8vIFJldHVybiBvbmx5IGxvd2VycyBiaXRzIG9mIG51bWJlclxuICBCTi5wcm90b3R5cGUubWFza24gPSBmdW5jdGlvbiBtYXNrbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW1hc2tuKGJpdHMpO1xuICB9O1xuXG4gIC8vIEFkZCBwbGFpbiBudW1iZXIgYG51bWAgdG8gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5pYWRkbiA9IGZ1bmN0aW9uIGlhZGRuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pc3VibigtbnVtKTtcblxuICAgIC8vIFBvc3NpYmxlIHNpZ24gY2hhbmdlXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiAodGhpcy53b3Jkc1swXSB8IDApIDw9IG51bSkge1xuICAgICAgICB0aGlzLndvcmRzWzBdID0gbnVtIC0gKHRoaXMud29yZHNbMF0gfCAwKTtcbiAgICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaXN1Ym4obnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhvdXQgY2hlY2tzXG4gICAgcmV0dXJuIHRoaXMuX2lhZGRuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pYWRkbiA9IGZ1bmN0aW9uIF9pYWRkbiAobnVtKSB7XG4gICAgdGhpcy53b3Jkc1swXSArPSBudW07XG5cbiAgICAvLyBDYXJyeVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggJiYgdGhpcy53b3Jkc1tpXSA+PSAweDQwMDAwMDA7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSAtPSAweDQwMDAwMDA7XG4gICAgICBpZiAoaSA9PT0gdGhpcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdKys7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkgKyAxKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IHBsYWluIG51bWJlciBgbnVtYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuaXN1Ym4gPSBmdW5jdGlvbiBpc3VibiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcbiAgICBpZiAobnVtIDwgMCkgcmV0dXJuIHRoaXMuaWFkZG4oLW51bSk7XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlhZGRuKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMud29yZHNbMF0gLT0gbnVtO1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxICYmIHRoaXMud29yZHNbMF0gPCAwKSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gLXRoaXMud29yZHNbMF07XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ2FycnlcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggJiYgdGhpcy53b3Jkc1tpXSA8IDA7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldICs9IDB4NDAwMDAwMDtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0gLT0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYWRkbiA9IGZ1bmN0aW9uIGFkZG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWFkZG4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuc3VibiA9IGZ1bmN0aW9uIHN1Ym4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXN1Ym4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaWFicyA9IGZ1bmN0aW9uIGlhYnMgKCkge1xuICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmFicyA9IGZ1bmN0aW9uIGFicyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWJzKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pc2hsbnN1Ym11bCA9IGZ1bmN0aW9uIF9pc2hsbnN1Ym11bCAobnVtLCBtdWwsIHNoaWZ0KSB7XG4gICAgdmFyIGxlbiA9IG51bS5sZW5ndGggKyBzaGlmdDtcbiAgICB2YXIgaTtcblxuICAgIHRoaXMuX2V4cGFuZChsZW4pO1xuXG4gICAgdmFyIHc7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3ID0gKHRoaXMud29yZHNbaSArIHNoaWZ0XSB8IDApICsgY2Fycnk7XG4gICAgICB2YXIgcmlnaHQgPSAobnVtLndvcmRzW2ldIHwgMCkgKiBtdWw7XG4gICAgICB3IC09IHJpZ2h0ICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSAodyA+PiAyNikgLSAoKHJpZ2h0IC8gMHg0MDAwMDAwKSB8IDApO1xuICAgICAgdGhpcy53b3Jkc1tpICsgc2hpZnRdID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgZm9yICg7IGkgPCB0aGlzLmxlbmd0aCAtIHNoaWZ0OyBpKyspIHtcbiAgICAgIHcgPSAodGhpcy53b3Jkc1tpICsgc2hpZnRdIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaSArIHNoaWZ0XSA9IHcgJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgaWYgKGNhcnJ5ID09PSAwKSByZXR1cm4gdGhpcy5fc3RyaXAoKTtcblxuICAgIC8vIFN1YnRyYWN0aW9uIG92ZXJmbG93XG4gICAgYXNzZXJ0KGNhcnJ5ID09PSAtMSk7XG4gICAgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3ID0gLSh0aGlzLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICB0aGlzLm5lZ2F0aXZlID0gMTtcblxuICAgIHJldHVybiB0aGlzLl9zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fd29yZERpdiA9IGZ1bmN0aW9uIF93b3JkRGl2IChudW0sIG1vZGUpIHtcbiAgICB2YXIgc2hpZnQgPSB0aGlzLmxlbmd0aCAtIG51bS5sZW5ndGg7XG5cbiAgICB2YXIgYSA9IHRoaXMuY2xvbmUoKTtcbiAgICB2YXIgYiA9IG51bTtcblxuICAgIC8vIE5vcm1hbGl6ZVxuICAgIHZhciBiaGkgPSBiLndvcmRzW2IubGVuZ3RoIC0gMV0gfCAwO1xuICAgIHZhciBiaGlCaXRzID0gdGhpcy5fY291bnRCaXRzKGJoaSk7XG4gICAgc2hpZnQgPSAyNiAtIGJoaUJpdHM7XG4gICAgaWYgKHNoaWZ0ICE9PSAwKSB7XG4gICAgICBiID0gYi51c2hsbihzaGlmdCk7XG4gICAgICBhLml1c2hsbihzaGlmdCk7XG4gICAgICBiaGkgPSBiLndvcmRzW2IubGVuZ3RoIC0gMV0gfCAwO1xuICAgIH1cblxuICAgIC8vIEluaXRpYWxpemUgcXVvdGllbnRcbiAgICB2YXIgbSA9IGEubGVuZ3RoIC0gYi5sZW5ndGg7XG4gICAgdmFyIHE7XG5cbiAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgIHEgPSBuZXcgQk4obnVsbCk7XG4gICAgICBxLmxlbmd0aCA9IG0gKyAxO1xuICAgICAgcS53b3JkcyA9IG5ldyBBcnJheShxLmxlbmd0aCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcS53b3Jkc1tpXSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRpZmYgPSBhLmNsb25lKCkuX2lzaGxuc3VibXVsKGIsIDEsIG0pO1xuICAgIGlmIChkaWZmLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICBhID0gZGlmZjtcbiAgICAgIGlmIChxKSB7XG4gICAgICAgIHEud29yZHNbbV0gPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGogPSBtIC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgIHZhciBxaiA9IChhLndvcmRzW2IubGVuZ3RoICsgal0gfCAwKSAqIDB4NDAwMDAwMCArXG4gICAgICAgIChhLndvcmRzW2IubGVuZ3RoICsgaiAtIDFdIHwgMCk7XG5cbiAgICAgIC8vIE5PVEU6IChxaiAvIGJoaSkgaXMgKDB4M2ZmZmZmZiAqIDB4NDAwMDAwMCArIDB4M2ZmZmZmZikgLyAweDIwMDAwMDAgbWF4XG4gICAgICAvLyAoMHg3ZmZmZmZmKVxuICAgICAgcWogPSBNYXRoLm1pbigocWogLyBiaGkpIHwgMCwgMHgzZmZmZmZmKTtcblxuICAgICAgYS5faXNobG5zdWJtdWwoYiwgcWosIGopO1xuICAgICAgd2hpbGUgKGEubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgcWotLTtcbiAgICAgICAgYS5uZWdhdGl2ZSA9IDA7XG4gICAgICAgIGEuX2lzaGxuc3VibXVsKGIsIDEsIGopO1xuICAgICAgICBpZiAoIWEuaXNaZXJvKCkpIHtcbiAgICAgICAgICBhLm5lZ2F0aXZlIF49IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChxKSB7XG4gICAgICAgIHEud29yZHNbal0gPSBxajtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHEpIHtcbiAgICAgIHEuX3N0cmlwKCk7XG4gICAgfVxuICAgIGEuX3N0cmlwKCk7XG5cbiAgICAvLyBEZW5vcm1hbGl6ZVxuICAgIGlmIChtb2RlICE9PSAnZGl2JyAmJiBzaGlmdCAhPT0gMCkge1xuICAgICAgYS5pdXNocm4oc2hpZnQpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBkaXY6IHEgfHwgbnVsbCxcbiAgICAgIG1vZDogYVxuICAgIH07XG4gIH07XG5cbiAgLy8gTk9URTogMSkgYG1vZGVgIGNhbiBiZSBzZXQgdG8gYG1vZGAgdG8gcmVxdWVzdCBtb2Qgb25seSxcbiAgLy8gICAgICAgdG8gYGRpdmAgdG8gcmVxdWVzdCBkaXYgb25seSwgb3IgYmUgYWJzZW50IHRvXG4gIC8vICAgICAgIHJlcXVlc3QgYm90aCBkaXYgJiBtb2RcbiAgLy8gICAgICAgMikgYHBvc2l0aXZlYCBpcyB0cnVlIGlmIHVuc2lnbmVkIG1vZCBpcyByZXF1ZXN0ZWRcbiAgQk4ucHJvdG90eXBlLmRpdm1vZCA9IGZ1bmN0aW9uIGRpdm1vZCAobnVtLCBtb2RlLCBwb3NpdGl2ZSkge1xuICAgIGFzc2VydCghbnVtLmlzWmVybygpKTtcblxuICAgIGlmICh0aGlzLmlzWmVybygpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IG5ldyBCTigwKSxcbiAgICAgICAgbW9kOiBuZXcgQk4oMClcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGRpdiwgbW9kLCByZXM7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0sIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgICAgZGl2ID0gcmVzLmRpdi5uZWcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGUgIT09ICdkaXYnKSB7XG4gICAgICAgIG1vZCA9IHJlcy5tb2QubmVnKCk7XG4gICAgICAgIGlmIChwb3NpdGl2ZSAmJiBtb2QubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgICBtb2QuaWFkZChudW0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogZGl2LFxuICAgICAgICBtb2Q6IG1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgICBkaXYgPSByZXMuZGl2Lm5lZygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IGRpdixcbiAgICAgICAgbW9kOiByZXMubW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICgodGhpcy5uZWdhdGl2ZSAmIG51bS5uZWdhdGl2ZSkgIT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMubmVnKCkuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnZGl2Jykge1xuICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgICAgbW9kLmlzdWIobnVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IHJlcy5kaXYsXG4gICAgICAgIG1vZDogbW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEJvdGggbnVtYmVycyBhcmUgcG9zaXRpdmUgYXQgdGhpcyBwb2ludFxuXG4gICAgLy8gU3RyaXAgYm90aCBudW1iZXJzIHRvIGFwcHJveGltYXRlIHNoaWZ0IHZhbHVlXG4gICAgaWYgKG51bS5sZW5ndGggPiB0aGlzLmxlbmd0aCB8fCB0aGlzLmNtcChudW0pIDwgMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBuZXcgQk4oMCksXG4gICAgICAgIG1vZDogdGhpc1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBWZXJ5IHNob3J0IHJlZHVjdGlvblxuICAgIGlmIChudW0ubGVuZ3RoID09PSAxKSB7XG4gICAgICBpZiAobW9kZSA9PT0gJ2RpdicpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXY6IHRoaXMuZGl2bihudW0ud29yZHNbMF0pLFxuICAgICAgICAgIG1vZDogbnVsbFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAobW9kZSA9PT0gJ21vZCcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXY6IG51bGwsXG4gICAgICAgICAgbW9kOiBuZXcgQk4odGhpcy5tb2RybihudW0ud29yZHNbMF0pKVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IHRoaXMuZGl2bihudW0ud29yZHNbMF0pLFxuICAgICAgICBtb2Q6IG5ldyBCTih0aGlzLm1vZHJuKG51bS53b3Jkc1swXSkpXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl93b3JkRGl2KG51bSwgbW9kZSk7XG4gIH07XG5cbiAgLy8gRmluZCBgdGhpc2AgLyBgbnVtYFxuICBCTi5wcm90b3R5cGUuZGl2ID0gZnVuY3Rpb24gZGl2IChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnZGl2JywgZmFsc2UpLmRpdjtcbiAgfTtcblxuICAvLyBGaW5kIGB0aGlzYCAlIGBudW1gXG4gIEJOLnByb3RvdHlwZS5tb2QgPSBmdW5jdGlvbiBtb2QgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdtb2QnLCBmYWxzZSkubW9kO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51bW9kID0gZnVuY3Rpb24gdW1vZCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ21vZCcsIHRydWUpLm1vZDtcbiAgfTtcblxuICAvLyBGaW5kIFJvdW5kKGB0aGlzYCAvIGBudW1gKVxuICBCTi5wcm90b3R5cGUuZGl2Um91bmQgPSBmdW5jdGlvbiBkaXZSb3VuZCAobnVtKSB7XG4gICAgdmFyIGRtID0gdGhpcy5kaXZtb2QobnVtKTtcblxuICAgIC8vIEZhc3QgY2FzZSAtIGV4YWN0IGRpdmlzaW9uXG4gICAgaWYgKGRtLm1vZC5pc1plcm8oKSkgcmV0dXJuIGRtLmRpdjtcblxuICAgIHZhciBtb2QgPSBkbS5kaXYubmVnYXRpdmUgIT09IDAgPyBkbS5tb2QuaXN1YihudW0pIDogZG0ubW9kO1xuXG4gICAgdmFyIGhhbGYgPSBudW0udXNocm4oMSk7XG4gICAgdmFyIHIyID0gbnVtLmFuZGxuKDEpO1xuICAgIHZhciBjbXAgPSBtb2QuY21wKGhhbGYpO1xuXG4gICAgLy8gUm91bmQgZG93blxuICAgIGlmIChjbXAgPCAwIHx8IChyMiA9PT0gMSAmJiBjbXAgPT09IDApKSByZXR1cm4gZG0uZGl2O1xuXG4gICAgLy8gUm91bmQgdXBcbiAgICByZXR1cm4gZG0uZGl2Lm5lZ2F0aXZlICE9PSAwID8gZG0uZGl2LmlzdWJuKDEpIDogZG0uZGl2LmlhZGRuKDEpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5tb2RybiA9IGZ1bmN0aW9uIG1vZHJuIChudW0pIHtcbiAgICB2YXIgaXNOZWdOdW0gPSBudW0gPCAwO1xuICAgIGlmIChpc05lZ051bSkgbnVtID0gLW51bTtcblxuICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmKTtcbiAgICB2YXIgcCA9ICgxIDw8IDI2KSAlIG51bTtcblxuICAgIHZhciBhY2MgPSAwO1xuICAgIGZvciAodmFyIGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBhY2MgPSAocCAqIGFjYyArICh0aGlzLndvcmRzW2ldIHwgMCkpICUgbnVtO1xuICAgIH1cblxuICAgIHJldHVybiBpc05lZ051bSA/IC1hY2MgOiBhY2M7XG4gIH07XG5cbiAgLy8gV0FSTklORzogREVQUkVDQVRFRFxuICBCTi5wcm90b3R5cGUubW9kbiA9IGZ1bmN0aW9uIG1vZG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLm1vZHJuKG51bSk7XG4gIH07XG5cbiAgLy8gSW4tcGxhY2UgZGl2aXNpb24gYnkgbnVtYmVyXG4gIEJOLnByb3RvdHlwZS5pZGl2biA9IGZ1bmN0aW9uIGlkaXZuIChudW0pIHtcbiAgICB2YXIgaXNOZWdOdW0gPSBudW0gPCAwO1xuICAgIGlmIChpc05lZ051bSkgbnVtID0gLW51bTtcblxuICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmKTtcblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciB3ID0gKHRoaXMud29yZHNbaV0gfCAwKSArIGNhcnJ5ICogMHg0MDAwMDAwO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9ICh3IC8gbnVtKSB8IDA7XG4gICAgICBjYXJyeSA9IHcgJSBudW07XG4gICAgfVxuXG4gICAgdGhpcy5fc3RyaXAoKTtcbiAgICByZXR1cm4gaXNOZWdOdW0gPyB0aGlzLmluZWcoKSA6IHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmRpdm4gPSBmdW5jdGlvbiBkaXZuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlkaXZuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVnY2QgPSBmdW5jdGlvbiBlZ2NkIChwKSB7XG4gICAgYXNzZXJ0KHAubmVnYXRpdmUgPT09IDApO1xuICAgIGFzc2VydCghcC5pc1plcm8oKSk7XG5cbiAgICB2YXIgeCA9IHRoaXM7XG4gICAgdmFyIHkgPSBwLmNsb25lKCk7XG5cbiAgICBpZiAoeC5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgeCA9IHgudW1vZChwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgeCA9IHguY2xvbmUoKTtcbiAgICB9XG5cbiAgICAvLyBBICogeCArIEIgKiB5ID0geFxuICAgIHZhciBBID0gbmV3IEJOKDEpO1xuICAgIHZhciBCID0gbmV3IEJOKDApO1xuXG4gICAgLy8gQyAqIHggKyBEICogeSA9IHlcbiAgICB2YXIgQyA9IG5ldyBCTigwKTtcbiAgICB2YXIgRCA9IG5ldyBCTigxKTtcblxuICAgIHZhciBnID0gMDtcblxuICAgIHdoaWxlICh4LmlzRXZlbigpICYmIHkuaXNFdmVuKCkpIHtcbiAgICAgIHguaXVzaHJuKDEpO1xuICAgICAgeS5pdXNocm4oMSk7XG4gICAgICArK2c7XG4gICAgfVxuXG4gICAgdmFyIHlwID0geS5jbG9uZSgpO1xuICAgIHZhciB4cCA9IHguY2xvbmUoKTtcblxuICAgIHdoaWxlICgheC5pc1plcm8oKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGltID0gMTsgKHgud29yZHNbMF0gJiBpbSkgPT09IDAgJiYgaSA8IDI2OyArK2ksIGltIDw8PSAxKTtcbiAgICAgIGlmIChpID4gMCkge1xuICAgICAgICB4Lml1c2hybihpKTtcbiAgICAgICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgICAgICBpZiAoQS5pc09kZCgpIHx8IEIuaXNPZGQoKSkge1xuICAgICAgICAgICAgQS5pYWRkKHlwKTtcbiAgICAgICAgICAgIEIuaXN1Yih4cCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgQS5pdXNocm4oMSk7XG4gICAgICAgICAgQi5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaiA9IDAsIGptID0gMTsgKHkud29yZHNbMF0gJiBqbSkgPT09IDAgJiYgaiA8IDI2OyArK2osIGptIDw8PSAxKTtcbiAgICAgIGlmIChqID4gMCkge1xuICAgICAgICB5Lml1c2hybihqKTtcbiAgICAgICAgd2hpbGUgKGotLSA+IDApIHtcbiAgICAgICAgICBpZiAoQy5pc09kZCgpIHx8IEQuaXNPZGQoKSkge1xuICAgICAgICAgICAgQy5pYWRkKHlwKTtcbiAgICAgICAgICAgIEQuaXN1Yih4cCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgQy5pdXNocm4oMSk7XG4gICAgICAgICAgRC5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHguY21wKHkpID49IDApIHtcbiAgICAgICAgeC5pc3ViKHkpO1xuICAgICAgICBBLmlzdWIoQyk7XG4gICAgICAgIEIuaXN1YihEKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHkuaXN1Yih4KTtcbiAgICAgICAgQy5pc3ViKEEpO1xuICAgICAgICBELmlzdWIoQik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGE6IEMsXG4gICAgICBiOiBELFxuICAgICAgZ2NkOiB5Lml1c2hsbihnKVxuICAgIH07XG4gIH07XG5cbiAgLy8gVGhpcyBpcyByZWR1Y2VkIGluY2FybmF0aW9uIG9mIHRoZSBiaW5hcnkgRUVBXG4gIC8vIGFib3ZlLCBkZXNpZ25hdGVkIHRvIGludmVydCBtZW1iZXJzIG9mIHRoZVxuICAvLyBfcHJpbWVfIGZpZWxkcyBGKHApIGF0IGEgbWF4aW1hbCBzcGVlZFxuICBCTi5wcm90b3R5cGUuX2ludm1wID0gZnVuY3Rpb24gX2ludm1wIChwKSB7XG4gICAgYXNzZXJ0KHAubmVnYXRpdmUgPT09IDApO1xuICAgIGFzc2VydCghcC5pc1plcm8oKSk7XG5cbiAgICB2YXIgYSA9IHRoaXM7XG4gICAgdmFyIGIgPSBwLmNsb25lKCk7XG5cbiAgICBpZiAoYS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgYSA9IGEudW1vZChwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IGEuY2xvbmUoKTtcbiAgICB9XG5cbiAgICB2YXIgeDEgPSBuZXcgQk4oMSk7XG4gICAgdmFyIHgyID0gbmV3IEJOKDApO1xuXG4gICAgdmFyIGRlbHRhID0gYi5jbG9uZSgpO1xuXG4gICAgd2hpbGUgKGEuY21wbigxKSA+IDAgJiYgYi5jbXBuKDEpID4gMCkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGltID0gMTsgKGEud29yZHNbMF0gJiBpbSkgPT09IDAgJiYgaSA8IDI2OyArK2ksIGltIDw8PSAxKTtcbiAgICAgIGlmIChpID4gMCkge1xuICAgICAgICBhLml1c2hybihpKTtcbiAgICAgICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgICAgICBpZiAoeDEuaXNPZGQoKSkge1xuICAgICAgICAgICAgeDEuaWFkZChkZWx0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgeDEuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGogPSAwLCBqbSA9IDE7IChiLndvcmRzWzBdICYgam0pID09PSAwICYmIGogPCAyNjsgKytqLCBqbSA8PD0gMSk7XG4gICAgICBpZiAoaiA+IDApIHtcbiAgICAgICAgYi5pdXNocm4oaik7XG4gICAgICAgIHdoaWxlIChqLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKHgyLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIHgyLmlhZGQoZGVsdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHgyLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYS5jbXAoYikgPj0gMCkge1xuICAgICAgICBhLmlzdWIoYik7XG4gICAgICAgIHgxLmlzdWIoeDIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYi5pc3ViKGEpO1xuICAgICAgICB4Mi5pc3ViKHgxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcmVzO1xuICAgIGlmIChhLmNtcG4oMSkgPT09IDApIHtcbiAgICAgIHJlcyA9IHgxO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMgPSB4MjtcbiAgICB9XG5cbiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMuaWFkZChwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5nY2QgPSBmdW5jdGlvbiBnY2QgKG51bSkge1xuICAgIGlmICh0aGlzLmlzWmVybygpKSByZXR1cm4gbnVtLmFicygpO1xuICAgIGlmIChudW0uaXNaZXJvKCkpIHJldHVybiB0aGlzLmFicygpO1xuXG4gICAgdmFyIGEgPSB0aGlzLmNsb25lKCk7XG4gICAgdmFyIGIgPSBudW0uY2xvbmUoKTtcbiAgICBhLm5lZ2F0aXZlID0gMDtcbiAgICBiLm5lZ2F0aXZlID0gMDtcblxuICAgIC8vIFJlbW92ZSBjb21tb24gZmFjdG9yIG9mIHR3b1xuICAgIGZvciAodmFyIHNoaWZ0ID0gMDsgYS5pc0V2ZW4oKSAmJiBiLmlzRXZlbigpOyBzaGlmdCsrKSB7XG4gICAgICBhLml1c2hybigxKTtcbiAgICAgIGIuaXVzaHJuKDEpO1xuICAgIH1cblxuICAgIGRvIHtcbiAgICAgIHdoaWxlIChhLmlzRXZlbigpKSB7XG4gICAgICAgIGEuaXVzaHJuKDEpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKGIuaXNFdmVuKCkpIHtcbiAgICAgICAgYi5pdXNocm4oMSk7XG4gICAgICB9XG5cbiAgICAgIHZhciByID0gYS5jbXAoYik7XG4gICAgICBpZiAociA8IDApIHtcbiAgICAgICAgLy8gU3dhcCBgYWAgYW5kIGBiYCB0byBtYWtlIGBhYCBhbHdheXMgYmlnZ2VyIHRoYW4gYGJgXG4gICAgICAgIHZhciB0ID0gYTtcbiAgICAgICAgYSA9IGI7XG4gICAgICAgIGIgPSB0O1xuICAgICAgfSBlbHNlIGlmIChyID09PSAwIHx8IGIuY21wbigxKSA9PT0gMCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgYS5pc3ViKGIpO1xuICAgIH0gd2hpbGUgKHRydWUpO1xuXG4gICAgcmV0dXJuIGIuaXVzaGxuKHNoaWZ0KTtcbiAgfTtcblxuICAvLyBJbnZlcnQgbnVtYmVyIGluIHRoZSBmaWVsZCBGKG51bSlcbiAgQk4ucHJvdG90eXBlLmludm0gPSBmdW5jdGlvbiBpbnZtIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5lZ2NkKG51bSkuYS51bW9kKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzRXZlbiA9IGZ1bmN0aW9uIGlzRXZlbiAoKSB7XG4gICAgcmV0dXJuICh0aGlzLndvcmRzWzBdICYgMSkgPT09IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzT2RkID0gZnVuY3Rpb24gaXNPZGQgKCkge1xuICAgIHJldHVybiAodGhpcy53b3Jkc1swXSAmIDEpID09PSAxO1xuICB9O1xuXG4gIC8vIEFuZCBmaXJzdCB3b3JkIGFuZCBudW1cbiAgQk4ucHJvdG90eXBlLmFuZGxuID0gZnVuY3Rpb24gYW5kbG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLndvcmRzWzBdICYgbnVtO1xuICB9O1xuXG4gIC8vIEluY3JlbWVudCBhdCB0aGUgYml0IHBvc2l0aW9uIGluLWxpbmVcbiAgQk4ucHJvdG90eXBlLmJpbmNuID0gZnVuY3Rpb24gYmluY24gKGJpdCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyk7XG4gICAgdmFyIHIgPSBiaXQgJSAyNjtcbiAgICB2YXIgcyA9IChiaXQgLSByKSAvIDI2O1xuICAgIHZhciBxID0gMSA8PCByO1xuXG4gICAgLy8gRmFzdCBjYXNlOiBiaXQgaXMgbXVjaCBoaWdoZXIgdGhhbiBhbGwgZXhpc3Rpbmcgd29yZHNcbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykge1xuICAgICAgdGhpcy5fZXhwYW5kKHMgKyAxKTtcbiAgICAgIHRoaXMud29yZHNbc10gfD0gcTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBiaXQgYW5kIHByb3BhZ2F0ZSwgaWYgbmVlZGVkXG4gICAgdmFyIGNhcnJ5ID0gcTtcbiAgICBmb3IgKHZhciBpID0gczsgY2FycnkgIT09IDAgJiYgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1tpXSB8IDA7XG4gICAgICB3ICs9IGNhcnJ5O1xuICAgICAgY2FycnkgPSB3ID4+PiAyNjtcbiAgICAgIHcgJj0gMHgzZmZmZmZmO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHc7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IGNhcnJ5O1xuICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzWmVybyA9IGZ1bmN0aW9uIGlzWmVybyAoKSB7XG4gICAgcmV0dXJuIHRoaXMubGVuZ3RoID09PSAxICYmIHRoaXMud29yZHNbMF0gPT09IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmNtcG4gPSBmdW5jdGlvbiBjbXBuIChudW0pIHtcbiAgICB2YXIgbmVnYXRpdmUgPSBudW0gPCAwO1xuXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgIW5lZ2F0aXZlKSByZXR1cm4gLTE7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbmVnYXRpdmUpIHJldHVybiAxO1xuXG4gICAgdGhpcy5fc3RyaXAoKTtcblxuICAgIHZhciByZXM7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMSkge1xuICAgICAgcmVzID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG5lZ2F0aXZlKSB7XG4gICAgICAgIG51bSA9IC1udW07XG4gICAgICB9XG5cbiAgICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmLCAnTnVtYmVyIGlzIHRvbyBiaWcnKTtcblxuICAgICAgdmFyIHcgPSB0aGlzLndvcmRzWzBdIHwgMDtcbiAgICAgIHJlcyA9IHcgPT09IG51bSA/IDAgOiB3IDwgbnVtID8gLTEgOiAxO1xuICAgIH1cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIC1yZXMgfCAwO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gQ29tcGFyZSB0d28gbnVtYmVycyBhbmQgcmV0dXJuOlxuICAvLyAxIC0gaWYgYHRoaXNgID4gYG51bWBcbiAgLy8gMCAtIGlmIGB0aGlzYCA9PSBgbnVtYFxuICAvLyAtMSAtIGlmIGB0aGlzYCA8IGBudW1gXG4gIEJOLnByb3RvdHlwZS5jbXAgPSBmdW5jdGlvbiBjbXAgKG51bSkge1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkgcmV0dXJuIC0xO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG51bS5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIDE7XG5cbiAgICB2YXIgcmVzID0gdGhpcy51Y21wKG51bSk7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIFVuc2lnbmVkIGNvbXBhcmlzb25cbiAgQk4ucHJvdG90eXBlLnVjbXAgPSBmdW5jdGlvbiB1Y21wIChudW0pIHtcbiAgICAvLyBBdCB0aGlzIHBvaW50IGJvdGggbnVtYmVycyBoYXZlIHRoZSBzYW1lIHNpZ25cbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gMTtcbiAgICBpZiAodGhpcy5sZW5ndGggPCBudW0ubGVuZ3RoKSByZXR1cm4gLTE7XG5cbiAgICB2YXIgcmVzID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGEgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHZhciBiID0gbnVtLndvcmRzW2ldIHwgMDtcblxuICAgICAgaWYgKGEgPT09IGIpIGNvbnRpbnVlO1xuICAgICAgaWYgKGEgPCBiKSB7XG4gICAgICAgIHJlcyA9IC0xO1xuICAgICAgfSBlbHNlIGlmIChhID4gYikge1xuICAgICAgICByZXMgPSAxO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0biA9IGZ1bmN0aW9uIGd0biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAxO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndCA9IGZ1bmN0aW9uIGd0IChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RlbiA9IGZ1bmN0aW9uIGd0ZW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA+PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndGUgPSBmdW5jdGlvbiBndGUgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID49IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0biA9IGZ1bmN0aW9uIGx0biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAtMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHQgPSBmdW5jdGlvbiBsdCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IC0xO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdGVuID0gZnVuY3Rpb24gbHRlbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pIDw9IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ZSA9IGZ1bmN0aW9uIGx0ZSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPD0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZXFuID0gZnVuY3Rpb24gZXFuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPT09IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAwO1xuICB9O1xuXG4gIC8vXG4gIC8vIEEgcmVkdWNlIGNvbnRleHQsIGNvdWxkIGJlIHVzaW5nIG1vbnRnb21lcnkgb3Igc29tZXRoaW5nIGJldHRlciwgZGVwZW5kaW5nXG4gIC8vIG9uIHRoZSBgbWAgaXRzZWxmLlxuICAvL1xuICBCTi5yZWQgPSBmdW5jdGlvbiByZWQgKG51bSkge1xuICAgIHJldHVybiBuZXcgUmVkKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvUmVkID0gZnVuY3Rpb24gdG9SZWQgKGN0eCkge1xuICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIHJldHVybiBjdHguY29udmVydFRvKHRoaXMpLl9mb3JjZVJlZChjdHgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mcm9tUmVkID0gZnVuY3Rpb24gZnJvbVJlZCAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAnZnJvbVJlZCB3b3JrcyBvbmx5IHdpdGggbnVtYmVycyBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIHJldHVybiB0aGlzLnJlZC5jb252ZXJ0RnJvbSh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2ZvcmNlUmVkID0gZnVuY3Rpb24gX2ZvcmNlUmVkIChjdHgpIHtcbiAgICB0aGlzLnJlZCA9IGN0eDtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZm9yY2VSZWQgPSBmdW5jdGlvbiBmb3JjZVJlZCAoY3R4KSB7XG4gICAgYXNzZXJ0KCF0aGlzLnJlZCwgJ0FscmVhZHkgYSBudW1iZXIgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICByZXR1cm4gdGhpcy5fZm9yY2VSZWQoY3R4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkQWRkID0gZnVuY3Rpb24gcmVkQWRkIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmFkZCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJQWRkID0gZnVuY3Rpb24gcmVkSUFkZCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSUFkZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaWFkZCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTdWIgPSBmdW5jdGlvbiByZWRTdWIgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3ViKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElTdWIgPSBmdW5jdGlvbiByZWRJU3ViIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJU3ViIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pc3ViKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFNobCA9IGZ1bmN0aW9uIHJlZFNobCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU2hsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zaGwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkTXVsID0gZnVuY3Rpb24gcmVkTXVsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTtcbiAgICByZXR1cm4gdGhpcy5yZWQubXVsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElNdWwgPSBmdW5jdGlvbiByZWRJTXVsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaW11bCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTcXIgPSBmdW5jdGlvbiByZWRTcXIgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3FyKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJU3FyID0gZnVuY3Rpb24gcmVkSVNxciAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSVNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaXNxcih0aGlzKTtcbiAgfTtcblxuICAvLyBTcXVhcmUgcm9vdCBvdmVyIHBcbiAgQk4ucHJvdG90eXBlLnJlZFNxcnQgPSBmdW5jdGlvbiByZWRTcXJ0ICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXJ0IHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zcXJ0KHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJbnZtID0gZnVuY3Rpb24gcmVkSW52bSAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSW52bSB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaW52bSh0aGlzKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gbmVnYXRpdmUgY2xvbmUgb2YgYHRoaXNgICUgYHJlZCBtb2R1bG9gXG4gIEJOLnByb3RvdHlwZS5yZWROZWcgPSBmdW5jdGlvbiByZWROZWcgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE5lZyB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQubmVnKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRQb3cgPSBmdW5jdGlvbiByZWRQb3cgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCAmJiAhbnVtLnJlZCwgJ3JlZFBvdyhub3JtYWxOdW0pJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnBvdyh0aGlzLCBudW0pO1xuICB9O1xuXG4gIC8vIFByaW1lIG51bWJlcnMgd2l0aCBlZmZpY2llbnQgcmVkdWN0aW9uXG4gIHZhciBwcmltZXMgPSB7XG4gICAgazI1NjogbnVsbCxcbiAgICBwMjI0OiBudWxsLFxuICAgIHAxOTI6IG51bGwsXG4gICAgcDI1NTE5OiBudWxsXG4gIH07XG5cbiAgLy8gUHNldWRvLU1lcnNlbm5lIHByaW1lXG4gIGZ1bmN0aW9uIE1QcmltZSAobmFtZSwgcCkge1xuICAgIC8vIFAgPSAyIF4gTiAtIEtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMucCA9IG5ldyBCTihwLCAxNik7XG4gICAgdGhpcy5uID0gdGhpcy5wLmJpdExlbmd0aCgpO1xuICAgIHRoaXMuayA9IG5ldyBCTigxKS5pdXNobG4odGhpcy5uKS5pc3ViKHRoaXMucCk7XG5cbiAgICB0aGlzLnRtcCA9IHRoaXMuX3RtcCgpO1xuICB9XG5cbiAgTVByaW1lLnByb3RvdHlwZS5fdG1wID0gZnVuY3Rpb24gX3RtcCAoKSB7XG4gICAgdmFyIHRtcCA9IG5ldyBCTihudWxsKTtcbiAgICB0bXAud29yZHMgPSBuZXcgQXJyYXkoTWF0aC5jZWlsKHRoaXMubiAvIDEzKSk7XG4gICAgcmV0dXJuIHRtcDtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLmlyZWR1Y2UgPSBmdW5jdGlvbiBpcmVkdWNlIChudW0pIHtcbiAgICAvLyBBc3N1bWVzIHRoYXQgYG51bWAgaXMgbGVzcyB0aGFuIGBQXjJgXG4gICAgLy8gbnVtID0gSEkgKiAoMiBeIE4gLSBLKSArIEhJICogSyArIExPID0gSEkgKiBLICsgTE8gKG1vZCBQKVxuICAgIHZhciByID0gbnVtO1xuICAgIHZhciBybGVuO1xuXG4gICAgZG8ge1xuICAgICAgdGhpcy5zcGxpdChyLCB0aGlzLnRtcCk7XG4gICAgICByID0gdGhpcy5pbXVsSyhyKTtcbiAgICAgIHIgPSByLmlhZGQodGhpcy50bXApO1xuICAgICAgcmxlbiA9IHIuYml0TGVuZ3RoKCk7XG4gICAgfSB3aGlsZSAocmxlbiA+IHRoaXMubik7XG5cbiAgICB2YXIgY21wID0gcmxlbiA8IHRoaXMubiA/IC0xIDogci51Y21wKHRoaXMucCk7XG4gICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgci53b3Jkc1swXSA9IDA7XG4gICAgICByLmxlbmd0aCA9IDE7XG4gICAgfSBlbHNlIGlmIChjbXAgPiAwKSB7XG4gICAgICByLmlzdWIodGhpcy5wKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHIuc3RyaXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyByIGlzIGEgQk4gdjQgaW5zdGFuY2VcbiAgICAgICAgci5zdHJpcCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gciBpcyBhIEJOIHY1IGluc3RhbmNlXG4gICAgICAgIHIuX3N0cmlwKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIHNwbGl0IChpbnB1dCwgb3V0KSB7XG4gICAgaW5wdXQuaXVzaHJuKHRoaXMubiwgMCwgb3V0KTtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIHJldHVybiBudW0uaW11bCh0aGlzLmspO1xuICB9O1xuXG4gIGZ1bmN0aW9uIEsyNTYgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdrMjU2JyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmMyZicpO1xuICB9XG4gIGluaGVyaXRzKEsyNTYsIE1QcmltZSk7XG5cbiAgSzI1Ni5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdCAoaW5wdXQsIG91dHB1dCkge1xuICAgIC8vIDI1NiA9IDkgKiAyNiArIDIyXG4gICAgdmFyIG1hc2sgPSAweDNmZmZmZjtcblxuICAgIHZhciBvdXRMZW4gPSBNYXRoLm1pbihpbnB1dC5sZW5ndGgsIDkpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3V0TGVuOyBpKyspIHtcbiAgICAgIG91dHB1dC53b3Jkc1tpXSA9IGlucHV0LndvcmRzW2ldO1xuICAgIH1cbiAgICBvdXRwdXQubGVuZ3RoID0gb3V0TGVuO1xuXG4gICAgaWYgKGlucHV0Lmxlbmd0aCA8PSA5KSB7XG4gICAgICBpbnB1dC53b3Jkc1swXSA9IDA7XG4gICAgICBpbnB1dC5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFNoaWZ0IGJ5IDkgbGltYnNcbiAgICB2YXIgcHJldiA9IGlucHV0LndvcmRzWzldO1xuICAgIG91dHB1dC53b3Jkc1tvdXRwdXQubGVuZ3RoKytdID0gcHJldiAmIG1hc2s7XG5cbiAgICBmb3IgKGkgPSAxMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbmV4dCA9IGlucHV0LndvcmRzW2ldIHwgMDtcbiAgICAgIGlucHV0LndvcmRzW2kgLSAxMF0gPSAoKG5leHQgJiBtYXNrKSA8PCA0KSB8IChwcmV2ID4+PiAyMik7XG4gICAgICBwcmV2ID0gbmV4dDtcbiAgICB9XG4gICAgcHJldiA+Pj49IDIyO1xuICAgIGlucHV0LndvcmRzW2kgLSAxMF0gPSBwcmV2O1xuICAgIGlmIChwcmV2ID09PSAwICYmIGlucHV0Lmxlbmd0aCA+IDEwKSB7XG4gICAgICBpbnB1dC5sZW5ndGggLT0gMTA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlucHV0Lmxlbmd0aCAtPSA5O1xuICAgIH1cbiAgfTtcblxuICBLMjU2LnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICAvLyBLID0gMHgxMDAwMDAzZDEgPSBbIDB4NDAsIDB4M2QxIF1cbiAgICBudW0ud29yZHNbbnVtLmxlbmd0aF0gPSAwO1xuICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoICsgMV0gPSAwO1xuICAgIG51bS5sZW5ndGggKz0gMjtcblxuICAgIC8vIGJvdW5kZWQgYXQ6IDB4NDAgKiAweDNmZmZmZmYgKyAweDNkMCA9IDB4MTAwMDAwMzkwXG4gICAgdmFyIGxvID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSBudW0ud29yZHNbaV0gfCAwO1xuICAgICAgbG8gKz0gdyAqIDB4M2QxO1xuICAgICAgbnVtLndvcmRzW2ldID0gbG8gJiAweDNmZmZmZmY7XG4gICAgICBsbyA9IHcgKiAweDQwICsgKChsbyAvIDB4NDAwMDAwMCkgfCAwKTtcbiAgICB9XG5cbiAgICAvLyBGYXN0IGxlbmd0aCByZWR1Y3Rpb25cbiAgICBpZiAobnVtLndvcmRzW251bS5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgbnVtLmxlbmd0aC0tO1xuICAgICAgaWYgKG51bS53b3Jkc1tudW0ubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgICAgbnVtLmxlbmd0aC0tO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVtO1xuICB9O1xuXG4gIGZ1bmN0aW9uIFAyMjQgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdwMjI0JyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMScpO1xuICB9XG4gIGluaGVyaXRzKFAyMjQsIE1QcmltZSk7XG5cbiAgZnVuY3Rpb24gUDE5MiAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ3AxOTInLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIGZmZmZmZmZmJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDE5MiwgTVByaW1lKTtcblxuICBmdW5jdGlvbiBQMjU1MTkgKCkge1xuICAgIC8vIDIgXiAyNTUgLSAxOVxuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICcyNTUxOScsXG4gICAgICAnN2ZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZlZCcpO1xuICB9XG4gIGluaGVyaXRzKFAyNTUxOSwgTVByaW1lKTtcblxuICBQMjU1MTkucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIC8vIEsgPSAweDEzXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGhpID0gKG51bS53b3Jkc1tpXSB8IDApICogMHgxMyArIGNhcnJ5O1xuICAgICAgdmFyIGxvID0gaGkgJiAweDNmZmZmZmY7XG4gICAgICBoaSA+Pj49IDI2O1xuXG4gICAgICBudW0ud29yZHNbaV0gPSBsbztcbiAgICAgIGNhcnJ5ID0gaGk7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgbnVtLndvcmRzW251bS5sZW5ndGgrK10gPSBjYXJyeTtcbiAgICB9XG4gICAgcmV0dXJuIG51bTtcbiAgfTtcblxuICAvLyBFeHBvcnRlZCBtb3N0bHkgZm9yIHRlc3RpbmcgcHVycG9zZXMsIHVzZSBwbGFpbiBuYW1lIGluc3RlYWRcbiAgQk4uX3ByaW1lID0gZnVuY3Rpb24gcHJpbWUgKG5hbWUpIHtcbiAgICAvLyBDYWNoZWQgdmVyc2lvbiBvZiBwcmltZVxuICAgIGlmIChwcmltZXNbbmFtZV0pIHJldHVybiBwcmltZXNbbmFtZV07XG5cbiAgICB2YXIgcHJpbWU7XG4gICAgaWYgKG5hbWUgPT09ICdrMjU2Jykge1xuICAgICAgcHJpbWUgPSBuZXcgSzI1NigpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AyMjQnKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMjI0KCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDE5MicpIHtcbiAgICAgIHByaW1lID0gbmV3IFAxOTIoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMjU1MTknKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMjU1MTkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHByaW1lICcgKyBuYW1lKTtcbiAgICB9XG4gICAgcHJpbWVzW25hbWVdID0gcHJpbWU7XG5cbiAgICByZXR1cm4gcHJpbWU7XG4gIH07XG5cbiAgLy9cbiAgLy8gQmFzZSByZWR1Y3Rpb24gZW5naW5lXG4gIC8vXG4gIGZ1bmN0aW9uIFJlZCAobSkge1xuICAgIGlmICh0eXBlb2YgbSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciBwcmltZSA9IEJOLl9wcmltZShtKTtcbiAgICAgIHRoaXMubSA9IHByaW1lLnA7XG4gICAgICB0aGlzLnByaW1lID0gcHJpbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2VydChtLmd0bigxKSwgJ21vZHVsdXMgbXVzdCBiZSBncmVhdGVyIHRoYW4gMScpO1xuICAgICAgdGhpcy5tID0gbTtcbiAgICAgIHRoaXMucHJpbWUgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIFJlZC5wcm90b3R5cGUuX3ZlcmlmeTEgPSBmdW5jdGlvbiBfdmVyaWZ5MSAoYSkge1xuICAgIGFzc2VydChhLm5lZ2F0aXZlID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICBhc3NlcnQoYS5yZWQsICdyZWQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5fdmVyaWZ5MiA9IGZ1bmN0aW9uIF92ZXJpZnkyIChhLCBiKSB7XG4gICAgYXNzZXJ0KChhLm5lZ2F0aXZlIHwgYi5uZWdhdGl2ZSkgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIGFzc2VydChhLnJlZCAmJiBhLnJlZCA9PT0gYi5yZWQsXG4gICAgICAncmVkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW1vZCA9IGZ1bmN0aW9uIGltb2QgKGEpIHtcbiAgICBpZiAodGhpcy5wcmltZSkgcmV0dXJuIHRoaXMucHJpbWUuaXJlZHVjZShhKS5fZm9yY2VSZWQodGhpcyk7XG5cbiAgICBtb3ZlKGEsIGEudW1vZCh0aGlzLm0pLl9mb3JjZVJlZCh0aGlzKSk7XG4gICAgcmV0dXJuIGE7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcgKGEpIHtcbiAgICBpZiAoYS5pc1plcm8oKSkge1xuICAgICAgcmV0dXJuIGEuY2xvbmUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5tLnN1YihhKS5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuYWRkKGIpO1xuICAgIGlmIChyZXMuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzLmlzdWIodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pYWRkID0gZnVuY3Rpb24gaWFkZCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5pYWRkKGIpO1xuICAgIGlmIChyZXMuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzLmlzdWIodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIHN1YiAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5zdWIoYik7XG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pc3ViID0gZnVuY3Rpb24gaXN1YiAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5pc3ViKGIpO1xuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zaGwgPSBmdW5jdGlvbiBzaGwgKGEsIG51bSkge1xuICAgIHRoaXMuX3ZlcmlmeTEoYSk7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLnVzaGxuKG51bSkpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS5pbXVsKGIpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLm11bChiKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pc3FyID0gZnVuY3Rpb24gaXNxciAoYSkge1xuICAgIHJldHVybiB0aGlzLmltdWwoYSwgYS5jbG9uZSgpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNxciA9IGZ1bmN0aW9uIHNxciAoYSkge1xuICAgIHJldHVybiB0aGlzLm11bChhLCBhKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNxcnQgPSBmdW5jdGlvbiBzcXJ0IChhKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkpIHJldHVybiBhLmNsb25lKCk7XG5cbiAgICB2YXIgbW9kMyA9IHRoaXMubS5hbmRsbigzKTtcbiAgICBhc3NlcnQobW9kMyAlIDIgPT09IDEpO1xuXG4gICAgLy8gRmFzdCBjYXNlXG4gICAgaWYgKG1vZDMgPT09IDMpIHtcbiAgICAgIHZhciBwb3cgPSB0aGlzLm0uYWRkKG5ldyBCTigxKSkuaXVzaHJuKDIpO1xuICAgICAgcmV0dXJuIHRoaXMucG93KGEsIHBvdyk7XG4gICAgfVxuXG4gICAgLy8gVG9uZWxsaS1TaGFua3MgYWxnb3JpdGhtIChUb3RhbGx5IHVub3B0aW1pemVkIGFuZCBzbG93KVxuICAgIC8vXG4gICAgLy8gRmluZCBRIGFuZCBTLCB0aGF0IFEgKiAyIF4gUyA9IChQIC0gMSlcbiAgICB2YXIgcSA9IHRoaXMubS5zdWJuKDEpO1xuICAgIHZhciBzID0gMDtcbiAgICB3aGlsZSAoIXEuaXNaZXJvKCkgJiYgcS5hbmRsbigxKSA9PT0gMCkge1xuICAgICAgcysrO1xuICAgICAgcS5pdXNocm4oMSk7XG4gICAgfVxuICAgIGFzc2VydCghcS5pc1plcm8oKSk7XG5cbiAgICB2YXIgb25lID0gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIHZhciBuT25lID0gb25lLnJlZE5lZygpO1xuXG4gICAgLy8gRmluZCBxdWFkcmF0aWMgbm9uLXJlc2lkdWVcbiAgICAvLyBOT1RFOiBNYXggaXMgc3VjaCBiZWNhdXNlIG9mIGdlbmVyYWxpemVkIFJpZW1hbm4gaHlwb3RoZXNpcy5cbiAgICB2YXIgbHBvdyA9IHRoaXMubS5zdWJuKDEpLml1c2hybigxKTtcbiAgICB2YXIgeiA9IHRoaXMubS5iaXRMZW5ndGgoKTtcbiAgICB6ID0gbmV3IEJOKDIgKiB6ICogeikudG9SZWQodGhpcyk7XG5cbiAgICB3aGlsZSAodGhpcy5wb3coeiwgbHBvdykuY21wKG5PbmUpICE9PSAwKSB7XG4gICAgICB6LnJlZElBZGQobk9uZSk7XG4gICAgfVxuXG4gICAgdmFyIGMgPSB0aGlzLnBvdyh6LCBxKTtcbiAgICB2YXIgciA9IHRoaXMucG93KGEsIHEuYWRkbigxKS5pdXNocm4oMSkpO1xuICAgIHZhciB0ID0gdGhpcy5wb3coYSwgcSk7XG4gICAgdmFyIG0gPSBzO1xuICAgIHdoaWxlICh0LmNtcChvbmUpICE9PSAwKSB7XG4gICAgICB2YXIgdG1wID0gdDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyB0bXAuY21wKG9uZSkgIT09IDA7IGkrKykge1xuICAgICAgICB0bXAgPSB0bXAucmVkU3FyKCk7XG4gICAgICB9XG4gICAgICBhc3NlcnQoaSA8IG0pO1xuICAgICAgdmFyIGIgPSB0aGlzLnBvdyhjLCBuZXcgQk4oMSkuaXVzaGxuKG0gLSBpIC0gMSkpO1xuXG4gICAgICByID0gci5yZWRNdWwoYik7XG4gICAgICBjID0gYi5yZWRTcXIoKTtcbiAgICAgIHQgPSB0LnJlZE11bChjKTtcbiAgICAgIG0gPSBpO1xuICAgIH1cblxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKGEpIHtcbiAgICB2YXIgaW52ID0gYS5faW52bXAodGhpcy5tKTtcbiAgICBpZiAoaW52Lm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBpbnYubmVnYXRpdmUgPSAwO1xuICAgICAgcmV0dXJuIHRoaXMuaW1vZChpbnYpLnJlZE5lZygpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5pbW9kKGludik7XG4gICAgfVxuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUucG93ID0gZnVuY3Rpb24gcG93IChhLCBudW0pIHtcbiAgICBpZiAobnVtLmlzWmVybygpKSByZXR1cm4gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIGlmIChudW0uY21wbigxKSA9PT0gMCkgcmV0dXJuIGEuY2xvbmUoKTtcblxuICAgIHZhciB3aW5kb3dTaXplID0gNDtcbiAgICB2YXIgd25kID0gbmV3IEFycmF5KDEgPDwgd2luZG93U2l6ZSk7XG4gICAgd25kWzBdID0gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIHduZFsxXSA9IGE7XG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCB3bmQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHduZFtpXSA9IHRoaXMubXVsKHduZFtpIC0gMV0sIGEpO1xuICAgIH1cblxuICAgIHZhciByZXMgPSB3bmRbMF07XG4gICAgdmFyIGN1cnJlbnQgPSAwO1xuICAgIHZhciBjdXJyZW50TGVuID0gMDtcbiAgICB2YXIgc3RhcnQgPSBudW0uYml0TGVuZ3RoKCkgJSAyNjtcbiAgICBpZiAoc3RhcnQgPT09IDApIHtcbiAgICAgIHN0YXJ0ID0gMjY7XG4gICAgfVxuXG4gICAgZm9yIChpID0gbnVtLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgd29yZCA9IG51bS53b3Jkc1tpXTtcbiAgICAgIGZvciAodmFyIGogPSBzdGFydCAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICAgIHZhciBiaXQgPSAod29yZCA+PiBqKSAmIDE7XG4gICAgICAgIGlmIChyZXMgIT09IHduZFswXSkge1xuICAgICAgICAgIHJlcyA9IHRoaXMuc3FyKHJlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYml0ID09PSAwICYmIGN1cnJlbnQgPT09IDApIHtcbiAgICAgICAgICBjdXJyZW50TGVuID0gMDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnQgPDw9IDE7XG4gICAgICAgIGN1cnJlbnQgfD0gYml0O1xuICAgICAgICBjdXJyZW50TGVuKys7XG4gICAgICAgIGlmIChjdXJyZW50TGVuICE9PSB3aW5kb3dTaXplICYmIChpICE9PSAwIHx8IGogIT09IDApKSBjb250aW51ZTtcblxuICAgICAgICByZXMgPSB0aGlzLm11bChyZXMsIHduZFtjdXJyZW50XSk7XG4gICAgICAgIGN1cnJlbnRMZW4gPSAwO1xuICAgICAgICBjdXJyZW50ID0gMDtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gMjY7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmNvbnZlcnRUbyA9IGZ1bmN0aW9uIGNvbnZlcnRUbyAobnVtKSB7XG4gICAgdmFyIHIgPSBudW0udW1vZCh0aGlzLm0pO1xuXG4gICAgcmV0dXJuIHIgPT09IG51bSA/IHIuY2xvbmUoKSA6IHI7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5jb252ZXJ0RnJvbSA9IGZ1bmN0aW9uIGNvbnZlcnRGcm9tIChudW0pIHtcbiAgICB2YXIgcmVzID0gbnVtLmNsb25lKCk7XG4gICAgcmVzLnJlZCA9IG51bGw7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvL1xuICAvLyBNb250Z29tZXJ5IG1ldGhvZCBlbmdpbmVcbiAgLy9cblxuICBCTi5tb250ID0gZnVuY3Rpb24gbW9udCAobnVtKSB7XG4gICAgcmV0dXJuIG5ldyBNb250KG51bSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gTW9udCAobSkge1xuICAgIFJlZC5jYWxsKHRoaXMsIG0pO1xuXG4gICAgdGhpcy5zaGlmdCA9IHRoaXMubS5iaXRMZW5ndGgoKTtcbiAgICBpZiAodGhpcy5zaGlmdCAlIDI2ICE9PSAwKSB7XG4gICAgICB0aGlzLnNoaWZ0ICs9IDI2IC0gKHRoaXMuc2hpZnQgJSAyNik7XG4gICAgfVxuXG4gICAgdGhpcy5yID0gbmV3IEJOKDEpLml1c2hsbih0aGlzLnNoaWZ0KTtcbiAgICB0aGlzLnIyID0gdGhpcy5pbW9kKHRoaXMuci5zcXIoKSk7XG4gICAgdGhpcy5yaW52ID0gdGhpcy5yLl9pbnZtcCh0aGlzLm0pO1xuXG4gICAgdGhpcy5taW52ID0gdGhpcy5yaW52Lm11bCh0aGlzLnIpLmlzdWJuKDEpLmRpdih0aGlzLm0pO1xuICAgIHRoaXMubWludiA9IHRoaXMubWludi51bW9kKHRoaXMucik7XG4gICAgdGhpcy5taW52ID0gdGhpcy5yLnN1Yih0aGlzLm1pbnYpO1xuICB9XG4gIGluaGVyaXRzKE1vbnQsIFJlZCk7XG5cbiAgTW9udC5wcm90b3R5cGUuY29udmVydFRvID0gZnVuY3Rpb24gY29udmVydFRvIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5pbW9kKG51bS51c2hsbih0aGlzLnNoaWZ0KSk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuY29udmVydEZyb20gPSBmdW5jdGlvbiBjb252ZXJ0RnJvbSAobnVtKSB7XG4gICAgdmFyIHIgPSB0aGlzLmltb2QobnVtLm11bCh0aGlzLnJpbnYpKTtcbiAgICByLnJlZCA9IG51bGw7XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwgKGEsIGIpIHtcbiAgICBpZiAoYS5pc1plcm8oKSB8fCBiLmlzWmVybygpKSB7XG4gICAgICBhLndvcmRzWzBdID0gMDtcbiAgICAgIGEubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybiBhO1xuICAgIH1cblxuICAgIHZhciB0ID0gYS5pbXVsKGIpO1xuICAgIHZhciBjID0gdC5tYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5taW52KS5pbWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubSk7XG4gICAgdmFyIHUgPSB0LmlzdWIoYykuaXVzaHJuKHRoaXMuc2hpZnQpO1xuICAgIHZhciByZXMgPSB1O1xuXG4gICAgaWYgKHUuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzID0gdS5pc3ViKHRoaXMubSk7XG4gICAgfSBlbHNlIGlmICh1LmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMgPSB1LmlhZGQodGhpcy5tKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKGEsIGIpIHtcbiAgICBpZiAoYS5pc1plcm8oKSB8fCBiLmlzWmVybygpKSByZXR1cm4gbmV3IEJOKDApLl9mb3JjZVJlZCh0aGlzKTtcblxuICAgIHZhciB0ID0gYS5tdWwoYik7XG4gICAgdmFyIGMgPSB0Lm1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm1pbnYpLmltYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5tKTtcbiAgICB2YXIgdSA9IHQuaXN1YihjKS5pdXNocm4odGhpcy5zaGlmdCk7XG4gICAgdmFyIHJlcyA9IHU7XG4gICAgaWYgKHUuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzID0gdS5pc3ViKHRoaXMubSk7XG4gICAgfSBlbHNlIGlmICh1LmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMgPSB1LmlhZGQodGhpcy5tKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAoYSkge1xuICAgIC8vIChBUileLTEgKiBSXjIgPSAoQV4tMSAqIFJeLTEpICogUl4yID0gQV4tMSAqIFJcbiAgICB2YXIgcmVzID0gdGhpcy5pbW9kKGEuX2ludm1wKHRoaXMubSkubXVsKHRoaXMucjIpKTtcbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcbn0pKHR5cGVvZiBtb2R1bGUgPT09ICd1bmRlZmluZWQnIHx8IG1vZHVsZSwgdGhpcyk7XG4iLCIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE4IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcygpIHtcblx0XHR2YXIgY2xhc3NlcyA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoIWFyZykgY29udGludWU7XG5cblx0XHRcdHZhciBhcmdUeXBlID0gdHlwZW9mIGFyZztcblxuXHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnIHx8IGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChhcmcpO1xuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcblx0XHRcdFx0aWYgKGFyZy5sZW5ndGgpIHtcblx0XHRcdFx0XHR2YXIgaW5uZXIgPSBjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZyk7XG5cdFx0XHRcdFx0aWYgKGlubmVyKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goaW5uZXIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRpZiAoYXJnLnRvU3RyaW5nID09PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKSB7XG5cdFx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdFx0aWYgKGhhc093bi5jYWxsKGFyZywga2V5KSAmJiBhcmdba2V5XSkge1xuXHRcdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goa2V5KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZy50b1N0cmluZygpKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdGNsYXNzTmFtZXMuZGVmYXVsdCA9IGNsYXNzTmFtZXM7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiIsInZhciBoYXNoID0gZXhwb3J0cztcblxuaGFzaC51dGlscyA9IHJlcXVpcmUoJy4vaGFzaC91dGlscycpO1xuaGFzaC5jb21tb24gPSByZXF1aXJlKCcuL2hhc2gvY29tbW9uJyk7XG5oYXNoLnNoYSA9IHJlcXVpcmUoJy4vaGFzaC9zaGEnKTtcbmhhc2gucmlwZW1kID0gcmVxdWlyZSgnLi9oYXNoL3JpcGVtZCcpO1xuaGFzaC5obWFjID0gcmVxdWlyZSgnLi9oYXNoL2htYWMnKTtcblxuLy8gUHJveHkgaGFzaCBmdW5jdGlvbnMgdG8gdGhlIG1haW4gb2JqZWN0XG5oYXNoLnNoYTEgPSBoYXNoLnNoYS5zaGExO1xuaGFzaC5zaGEyNTYgPSBoYXNoLnNoYS5zaGEyNTY7XG5oYXNoLnNoYTIyNCA9IGhhc2guc2hhLnNoYTIyNDtcbmhhc2guc2hhMzg0ID0gaGFzaC5zaGEuc2hhMzg0O1xuaGFzaC5zaGE1MTIgPSBoYXNoLnNoYS5zaGE1MTI7XG5oYXNoLnJpcGVtZDE2MCA9IGhhc2gucmlwZW1kLnJpcGVtZDE2MDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcblxuZnVuY3Rpb24gQmxvY2tIYXNoKCkge1xuICB0aGlzLnBlbmRpbmcgPSBudWxsO1xuICB0aGlzLnBlbmRpbmdUb3RhbCA9IDA7XG4gIHRoaXMuYmxvY2tTaXplID0gdGhpcy5jb25zdHJ1Y3Rvci5ibG9ja1NpemU7XG4gIHRoaXMub3V0U2l6ZSA9IHRoaXMuY29uc3RydWN0b3Iub3V0U2l6ZTtcbiAgdGhpcy5obWFjU3RyZW5ndGggPSB0aGlzLmNvbnN0cnVjdG9yLmhtYWNTdHJlbmd0aDtcbiAgdGhpcy5wYWRMZW5ndGggPSB0aGlzLmNvbnN0cnVjdG9yLnBhZExlbmd0aCAvIDg7XG4gIHRoaXMuZW5kaWFuID0gJ2JpZyc7XG5cbiAgdGhpcy5fZGVsdGE4ID0gdGhpcy5ibG9ja1NpemUgLyA4O1xuICB0aGlzLl9kZWx0YTMyID0gdGhpcy5ibG9ja1NpemUgLyAzMjtcbn1cbmV4cG9ydHMuQmxvY2tIYXNoID0gQmxvY2tIYXNoO1xuXG5CbG9ja0hhc2gucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShtc2csIGVuYykge1xuICAvLyBDb252ZXJ0IG1lc3NhZ2UgdG8gYXJyYXksIHBhZCBpdCwgYW5kIGpvaW4gaW50byAzMmJpdCBibG9ja3NcbiAgbXNnID0gdXRpbHMudG9BcnJheShtc2csIGVuYyk7XG4gIGlmICghdGhpcy5wZW5kaW5nKVxuICAgIHRoaXMucGVuZGluZyA9IG1zZztcbiAgZWxzZVxuICAgIHRoaXMucGVuZGluZyA9IHRoaXMucGVuZGluZy5jb25jYXQobXNnKTtcbiAgdGhpcy5wZW5kaW5nVG90YWwgKz0gbXNnLmxlbmd0aDtcblxuICAvLyBFbm91Z2ggZGF0YSwgdHJ5IHVwZGF0aW5nXG4gIGlmICh0aGlzLnBlbmRpbmcubGVuZ3RoID49IHRoaXMuX2RlbHRhOCkge1xuICAgIG1zZyA9IHRoaXMucGVuZGluZztcblxuICAgIC8vIFByb2Nlc3MgcGVuZGluZyBkYXRhIGluIGJsb2Nrc1xuICAgIHZhciByID0gbXNnLmxlbmd0aCAlIHRoaXMuX2RlbHRhODtcbiAgICB0aGlzLnBlbmRpbmcgPSBtc2cuc2xpY2UobXNnLmxlbmd0aCAtIHIsIG1zZy5sZW5ndGgpO1xuICAgIGlmICh0aGlzLnBlbmRpbmcubGVuZ3RoID09PSAwKVxuICAgICAgdGhpcy5wZW5kaW5nID0gbnVsbDtcblxuICAgIG1zZyA9IHV0aWxzLmpvaW4zMihtc2csIDAsIG1zZy5sZW5ndGggLSByLCB0aGlzLmVuZGlhbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpICs9IHRoaXMuX2RlbHRhMzIpXG4gICAgICB0aGlzLl91cGRhdGUobXNnLCBpLCBpICsgdGhpcy5fZGVsdGEzMik7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbkJsb2NrSGFzaC5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICB0aGlzLnVwZGF0ZSh0aGlzLl9wYWQoKSk7XG4gIGFzc2VydCh0aGlzLnBlbmRpbmcgPT09IG51bGwpO1xuXG4gIHJldHVybiB0aGlzLl9kaWdlc3QoZW5jKTtcbn07XG5cbkJsb2NrSGFzaC5wcm90b3R5cGUuX3BhZCA9IGZ1bmN0aW9uIHBhZCgpIHtcbiAgdmFyIGxlbiA9IHRoaXMucGVuZGluZ1RvdGFsO1xuICB2YXIgYnl0ZXMgPSB0aGlzLl9kZWx0YTg7XG4gIHZhciBrID0gYnl0ZXMgLSAoKGxlbiArIHRoaXMucGFkTGVuZ3RoKSAlIGJ5dGVzKTtcbiAgdmFyIHJlcyA9IG5ldyBBcnJheShrICsgdGhpcy5wYWRMZW5ndGgpO1xuICByZXNbMF0gPSAweDgwO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGs7IGkrKylcbiAgICByZXNbaV0gPSAwO1xuXG4gIC8vIEFwcGVuZCBsZW5ndGhcbiAgbGVuIDw8PSAzO1xuICBpZiAodGhpcy5lbmRpYW4gPT09ICdiaWcnKSB7XG4gICAgZm9yICh2YXIgdCA9IDg7IHQgPCB0aGlzLnBhZExlbmd0aDsgdCsrKVxuICAgICAgcmVzW2krK10gPSAwO1xuXG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gKGxlbiA+Pj4gMjQpICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDE2KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiA4KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSBsZW4gJiAweGZmO1xuICB9IGVsc2Uge1xuICAgIHJlc1tpKytdID0gbGVuICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDgpICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDE2KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiAyNCkgJiAweGZmO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcblxuICAgIGZvciAodCA9IDg7IHQgPCB0aGlzLnBhZExlbmd0aDsgdCsrKVxuICAgICAgcmVzW2krK10gPSAwO1xuICB9XG5cbiAgcmV0dXJuIHJlcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG5cbmZ1bmN0aW9uIEhtYWMoaGFzaCwga2V5LCBlbmMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEhtYWMpKVxuICAgIHJldHVybiBuZXcgSG1hYyhoYXNoLCBrZXksIGVuYyk7XG4gIHRoaXMuSGFzaCA9IGhhc2g7XG4gIHRoaXMuYmxvY2tTaXplID0gaGFzaC5ibG9ja1NpemUgLyA4O1xuICB0aGlzLm91dFNpemUgPSBoYXNoLm91dFNpemUgLyA4O1xuICB0aGlzLmlubmVyID0gbnVsbDtcbiAgdGhpcy5vdXRlciA9IG51bGw7XG5cbiAgdGhpcy5faW5pdCh1dGlscy50b0FycmF5KGtleSwgZW5jKSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEhtYWM7XG5cbkhtYWMucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gaW5pdChrZXkpIHtcbiAgLy8gU2hvcnRlbiBrZXksIGlmIG5lZWRlZFxuICBpZiAoa2V5Lmxlbmd0aCA+IHRoaXMuYmxvY2tTaXplKVxuICAgIGtleSA9IG5ldyB0aGlzLkhhc2goKS51cGRhdGUoa2V5KS5kaWdlc3QoKTtcbiAgYXNzZXJ0KGtleS5sZW5ndGggPD0gdGhpcy5ibG9ja1NpemUpO1xuXG4gIC8vIEFkZCBwYWRkaW5nIHRvIGtleVxuICBmb3IgKHZhciBpID0ga2V5Lmxlbmd0aDsgaSA8IHRoaXMuYmxvY2tTaXplOyBpKyspXG4gICAga2V5LnB1c2goMCk7XG5cbiAgZm9yIChpID0gMDsgaSA8IGtleS5sZW5ndGg7IGkrKylcbiAgICBrZXlbaV0gXj0gMHgzNjtcbiAgdGhpcy5pbm5lciA9IG5ldyB0aGlzLkhhc2goKS51cGRhdGUoa2V5KTtcblxuICAvLyAweDM2IF4gMHg1YyA9IDB4NmFcbiAgZm9yIChpID0gMDsgaSA8IGtleS5sZW5ndGg7IGkrKylcbiAgICBrZXlbaV0gXj0gMHg2YTtcbiAgdGhpcy5vdXRlciA9IG5ldyB0aGlzLkhhc2goKS51cGRhdGUoa2V5KTtcbn07XG5cbkhtYWMucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShtc2csIGVuYykge1xuICB0aGlzLmlubmVyLnVwZGF0ZShtc2csIGVuYyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuSG1hYy5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICB0aGlzLm91dGVyLnVwZGF0ZSh0aGlzLmlubmVyLmRpZ2VzdCgpKTtcbiAgcmV0dXJuIHRoaXMub3V0ZXIuZGlnZXN0KGVuYyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgY29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24nKTtcblxudmFyIHJvdGwzMiA9IHV0aWxzLnJvdGwzMjtcbnZhciBzdW0zMiA9IHV0aWxzLnN1bTMyO1xudmFyIHN1bTMyXzMgPSB1dGlscy5zdW0zMl8zO1xudmFyIHN1bTMyXzQgPSB1dGlscy5zdW0zMl80O1xudmFyIEJsb2NrSGFzaCA9IGNvbW1vbi5CbG9ja0hhc2g7XG5cbmZ1bmN0aW9uIFJJUEVNRDE2MCgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJJUEVNRDE2MCkpXG4gICAgcmV0dXJuIG5ldyBSSVBFTUQxNjAoKTtcblxuICBCbG9ja0hhc2guY2FsbCh0aGlzKTtcblxuICB0aGlzLmggPSBbIDB4Njc0NTIzMDEsIDB4ZWZjZGFiODksIDB4OThiYWRjZmUsIDB4MTAzMjU0NzYsIDB4YzNkMmUxZjAgXTtcbiAgdGhpcy5lbmRpYW4gPSAnbGl0dGxlJztcbn1cbnV0aWxzLmluaGVyaXRzKFJJUEVNRDE2MCwgQmxvY2tIYXNoKTtcbmV4cG9ydHMucmlwZW1kMTYwID0gUklQRU1EMTYwO1xuXG5SSVBFTUQxNjAuYmxvY2tTaXplID0gNTEyO1xuUklQRU1EMTYwLm91dFNpemUgPSAxNjA7XG5SSVBFTUQxNjAuaG1hY1N0cmVuZ3RoID0gMTkyO1xuUklQRU1EMTYwLnBhZExlbmd0aCA9IDY0O1xuXG5SSVBFTUQxNjAucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUobXNnLCBzdGFydCkge1xuICB2YXIgQSA9IHRoaXMuaFswXTtcbiAgdmFyIEIgPSB0aGlzLmhbMV07XG4gIHZhciBDID0gdGhpcy5oWzJdO1xuICB2YXIgRCA9IHRoaXMuaFszXTtcbiAgdmFyIEUgPSB0aGlzLmhbNF07XG4gIHZhciBBaCA9IEE7XG4gIHZhciBCaCA9IEI7XG4gIHZhciBDaCA9IEM7XG4gIHZhciBEaCA9IEQ7XG4gIHZhciBFaCA9IEU7XG4gIGZvciAodmFyIGogPSAwOyBqIDwgODA7IGorKykge1xuICAgIHZhciBUID0gc3VtMzIoXG4gICAgICByb3RsMzIoXG4gICAgICAgIHN1bTMyXzQoQSwgZihqLCBCLCBDLCBEKSwgbXNnW3Jbal0gKyBzdGFydF0sIEsoaikpLFxuICAgICAgICBzW2pdKSxcbiAgICAgIEUpO1xuICAgIEEgPSBFO1xuICAgIEUgPSBEO1xuICAgIEQgPSByb3RsMzIoQywgMTApO1xuICAgIEMgPSBCO1xuICAgIEIgPSBUO1xuICAgIFQgPSBzdW0zMihcbiAgICAgIHJvdGwzMihcbiAgICAgICAgc3VtMzJfNChBaCwgZig3OSAtIGosIEJoLCBDaCwgRGgpLCBtc2dbcmhbal0gKyBzdGFydF0sIEtoKGopKSxcbiAgICAgICAgc2hbal0pLFxuICAgICAgRWgpO1xuICAgIEFoID0gRWg7XG4gICAgRWggPSBEaDtcbiAgICBEaCA9IHJvdGwzMihDaCwgMTApO1xuICAgIENoID0gQmg7XG4gICAgQmggPSBUO1xuICB9XG4gIFQgPSBzdW0zMl8zKHRoaXMuaFsxXSwgQywgRGgpO1xuICB0aGlzLmhbMV0gPSBzdW0zMl8zKHRoaXMuaFsyXSwgRCwgRWgpO1xuICB0aGlzLmhbMl0gPSBzdW0zMl8zKHRoaXMuaFszXSwgRSwgQWgpO1xuICB0aGlzLmhbM10gPSBzdW0zMl8zKHRoaXMuaFs0XSwgQSwgQmgpO1xuICB0aGlzLmhbNF0gPSBzdW0zMl8zKHRoaXMuaFswXSwgQiwgQ2gpO1xuICB0aGlzLmhbMF0gPSBUO1xufTtcblxuUklQRU1EMTYwLnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmgsICdsaXR0bGUnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaCwgJ2xpdHRsZScpO1xufTtcblxuZnVuY3Rpb24gZihqLCB4LCB5LCB6KSB7XG4gIGlmIChqIDw9IDE1KVxuICAgIHJldHVybiB4IF4geSBeIHo7XG4gIGVsc2UgaWYgKGogPD0gMzEpXG4gICAgcmV0dXJuICh4ICYgeSkgfCAoKH54KSAmIHopO1xuICBlbHNlIGlmIChqIDw9IDQ3KVxuICAgIHJldHVybiAoeCB8ICh+eSkpIF4gejtcbiAgZWxzZSBpZiAoaiA8PSA2MylcbiAgICByZXR1cm4gKHggJiB6KSB8ICh5ICYgKH56KSk7XG4gIGVsc2VcbiAgICByZXR1cm4geCBeICh5IHwgKH56KSk7XG59XG5cbmZ1bmN0aW9uIEsoaikge1xuICBpZiAoaiA8PSAxNSlcbiAgICByZXR1cm4gMHgwMDAwMDAwMDtcbiAgZWxzZSBpZiAoaiA8PSAzMSlcbiAgICByZXR1cm4gMHg1YTgyNzk5OTtcbiAgZWxzZSBpZiAoaiA8PSA0NylcbiAgICByZXR1cm4gMHg2ZWQ5ZWJhMTtcbiAgZWxzZSBpZiAoaiA8PSA2MylcbiAgICByZXR1cm4gMHg4ZjFiYmNkYztcbiAgZWxzZVxuICAgIHJldHVybiAweGE5NTNmZDRlO1xufVxuXG5mdW5jdGlvbiBLaChqKSB7XG4gIGlmIChqIDw9IDE1KVxuICAgIHJldHVybiAweDUwYTI4YmU2O1xuICBlbHNlIGlmIChqIDw9IDMxKVxuICAgIHJldHVybiAweDVjNGRkMTI0O1xuICBlbHNlIGlmIChqIDw9IDQ3KVxuICAgIHJldHVybiAweDZkNzAzZWYzO1xuICBlbHNlIGlmIChqIDw9IDYzKVxuICAgIHJldHVybiAweDdhNmQ3NmU5O1xuICBlbHNlXG4gICAgcmV0dXJuIDB4MDAwMDAwMDA7XG59XG5cbnZhciByID0gW1xuICAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyLCAxMywgMTQsIDE1LFxuICA3LCA0LCAxMywgMSwgMTAsIDYsIDE1LCAzLCAxMiwgMCwgOSwgNSwgMiwgMTQsIDExLCA4LFxuICAzLCAxMCwgMTQsIDQsIDksIDE1LCA4LCAxLCAyLCA3LCAwLCA2LCAxMywgMTEsIDUsIDEyLFxuICAxLCA5LCAxMSwgMTAsIDAsIDgsIDEyLCA0LCAxMywgMywgNywgMTUsIDE0LCA1LCA2LCAyLFxuICA0LCAwLCA1LCA5LCA3LCAxMiwgMiwgMTAsIDE0LCAxLCAzLCA4LCAxMSwgNiwgMTUsIDEzXG5dO1xuXG52YXIgcmggPSBbXG4gIDUsIDE0LCA3LCAwLCA5LCAyLCAxMSwgNCwgMTMsIDYsIDE1LCA4LCAxLCAxMCwgMywgMTIsXG4gIDYsIDExLCAzLCA3LCAwLCAxMywgNSwgMTAsIDE0LCAxNSwgOCwgMTIsIDQsIDksIDEsIDIsXG4gIDE1LCA1LCAxLCAzLCA3LCAxNCwgNiwgOSwgMTEsIDgsIDEyLCAyLCAxMCwgMCwgNCwgMTMsXG4gIDgsIDYsIDQsIDEsIDMsIDExLCAxNSwgMCwgNSwgMTIsIDIsIDEzLCA5LCA3LCAxMCwgMTQsXG4gIDEyLCAxNSwgMTAsIDQsIDEsIDUsIDgsIDcsIDYsIDIsIDEzLCAxNCwgMCwgMywgOSwgMTFcbl07XG5cbnZhciBzID0gW1xuICAxMSwgMTQsIDE1LCAxMiwgNSwgOCwgNywgOSwgMTEsIDEzLCAxNCwgMTUsIDYsIDcsIDksIDgsXG4gIDcsIDYsIDgsIDEzLCAxMSwgOSwgNywgMTUsIDcsIDEyLCAxNSwgOSwgMTEsIDcsIDEzLCAxMixcbiAgMTEsIDEzLCA2LCA3LCAxNCwgOSwgMTMsIDE1LCAxNCwgOCwgMTMsIDYsIDUsIDEyLCA3LCA1LFxuICAxMSwgMTIsIDE0LCAxNSwgMTQsIDE1LCA5LCA4LCA5LCAxNCwgNSwgNiwgOCwgNiwgNSwgMTIsXG4gIDksIDE1LCA1LCAxMSwgNiwgOCwgMTMsIDEyLCA1LCAxMiwgMTMsIDE0LCAxMSwgOCwgNSwgNlxuXTtcblxudmFyIHNoID0gW1xuICA4LCA5LCA5LCAxMSwgMTMsIDE1LCAxNSwgNSwgNywgNywgOCwgMTEsIDE0LCAxNCwgMTIsIDYsXG4gIDksIDEzLCAxNSwgNywgMTIsIDgsIDksIDExLCA3LCA3LCAxMiwgNywgNiwgMTUsIDEzLCAxMSxcbiAgOSwgNywgMTUsIDExLCA4LCA2LCA2LCAxNCwgMTIsIDEzLCA1LCAxNCwgMTMsIDEzLCA3LCA1LFxuICAxNSwgNSwgOCwgMTEsIDE0LCAxNCwgNiwgMTQsIDYsIDksIDEyLCA5LCAxMiwgNSwgMTUsIDgsXG4gIDgsIDUsIDEyLCA5LCAxMiwgNSwgMTQsIDYsIDgsIDEzLCA2LCA1LCAxNSwgMTMsIDExLCAxMVxuXTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5zaGExID0gcmVxdWlyZSgnLi9zaGEvMScpO1xuZXhwb3J0cy5zaGEyMjQgPSByZXF1aXJlKCcuL3NoYS8yMjQnKTtcbmV4cG9ydHMuc2hhMjU2ID0gcmVxdWlyZSgnLi9zaGEvMjU2Jyk7XG5leHBvcnRzLnNoYTM4NCA9IHJlcXVpcmUoJy4vc2hhLzM4NCcpO1xuZXhwb3J0cy5zaGE1MTIgPSByZXF1aXJlKCcuL3NoYS81MTInKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBjb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcbnZhciBzaGFDb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbicpO1xuXG52YXIgcm90bDMyID0gdXRpbHMucm90bDMyO1xudmFyIHN1bTMyID0gdXRpbHMuc3VtMzI7XG52YXIgc3VtMzJfNSA9IHV0aWxzLnN1bTMyXzU7XG52YXIgZnRfMSA9IHNoYUNvbW1vbi5mdF8xO1xudmFyIEJsb2NrSGFzaCA9IGNvbW1vbi5CbG9ja0hhc2g7XG5cbnZhciBzaGExX0sgPSBbXG4gIDB4NUE4Mjc5OTksIDB4NkVEOUVCQTEsXG4gIDB4OEYxQkJDREMsIDB4Q0E2MkMxRDZcbl07XG5cbmZ1bmN0aW9uIFNIQTEoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTSEExKSlcbiAgICByZXR1cm4gbmV3IFNIQTEoKTtcblxuICBCbG9ja0hhc2guY2FsbCh0aGlzKTtcbiAgdGhpcy5oID0gW1xuICAgIDB4Njc0NTIzMDEsIDB4ZWZjZGFiODksIDB4OThiYWRjZmUsXG4gICAgMHgxMDMyNTQ3NiwgMHhjM2QyZTFmMCBdO1xuICB0aGlzLlcgPSBuZXcgQXJyYXkoODApO1xufVxuXG51dGlscy5pbmhlcml0cyhTSEExLCBCbG9ja0hhc2gpO1xubW9kdWxlLmV4cG9ydHMgPSBTSEExO1xuXG5TSEExLmJsb2NrU2l6ZSA9IDUxMjtcblNIQTEub3V0U2l6ZSA9IDE2MDtcblNIQTEuaG1hY1N0cmVuZ3RoID0gODA7XG5TSEExLnBhZExlbmd0aCA9IDY0O1xuXG5TSEExLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gX3VwZGF0ZShtc2csIHN0YXJ0KSB7XG4gIHZhciBXID0gdGhpcy5XO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKylcbiAgICBXW2ldID0gbXNnW3N0YXJ0ICsgaV07XG5cbiAgZm9yKDsgaSA8IFcubGVuZ3RoOyBpKyspXG4gICAgV1tpXSA9IHJvdGwzMihXW2kgLSAzXSBeIFdbaSAtIDhdIF4gV1tpIC0gMTRdIF4gV1tpIC0gMTZdLCAxKTtcblxuICB2YXIgYSA9IHRoaXMuaFswXTtcbiAgdmFyIGIgPSB0aGlzLmhbMV07XG4gIHZhciBjID0gdGhpcy5oWzJdO1xuICB2YXIgZCA9IHRoaXMuaFszXTtcbiAgdmFyIGUgPSB0aGlzLmhbNF07XG5cbiAgZm9yIChpID0gMDsgaSA8IFcubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcyA9IH5+KGkgLyAyMCk7XG4gICAgdmFyIHQgPSBzdW0zMl81KHJvdGwzMihhLCA1KSwgZnRfMShzLCBiLCBjLCBkKSwgZSwgV1tpXSwgc2hhMV9LW3NdKTtcbiAgICBlID0gZDtcbiAgICBkID0gYztcbiAgICBjID0gcm90bDMyKGIsIDMwKTtcbiAgICBiID0gYTtcbiAgICBhID0gdDtcbiAgfVxuXG4gIHRoaXMuaFswXSA9IHN1bTMyKHRoaXMuaFswXSwgYSk7XG4gIHRoaXMuaFsxXSA9IHN1bTMyKHRoaXMuaFsxXSwgYik7XG4gIHRoaXMuaFsyXSA9IHN1bTMyKHRoaXMuaFsyXSwgYyk7XG4gIHRoaXMuaFszXSA9IHN1bTMyKHRoaXMuaFszXSwgZCk7XG4gIHRoaXMuaFs0XSA9IHN1bTMyKHRoaXMuaFs0XSwgZSk7XG59O1xuXG5TSEExLnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmgsICdiaWcnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaCwgJ2JpZycpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBTSEEyNTYgPSByZXF1aXJlKCcuLzI1NicpO1xuXG5mdW5jdGlvbiBTSEEyMjQoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTSEEyMjQpKVxuICAgIHJldHVybiBuZXcgU0hBMjI0KCk7XG5cbiAgU0hBMjU2LmNhbGwodGhpcyk7XG4gIHRoaXMuaCA9IFtcbiAgICAweGMxMDU5ZWQ4LCAweDM2N2NkNTA3LCAweDMwNzBkZDE3LCAweGY3MGU1OTM5LFxuICAgIDB4ZmZjMDBiMzEsIDB4Njg1ODE1MTEsIDB4NjRmOThmYTcsIDB4YmVmYTRmYTQgXTtcbn1cbnV0aWxzLmluaGVyaXRzKFNIQTIyNCwgU0hBMjU2KTtcbm1vZHVsZS5leHBvcnRzID0gU0hBMjI0O1xuXG5TSEEyMjQuYmxvY2tTaXplID0gNTEyO1xuU0hBMjI0Lm91dFNpemUgPSAyMjQ7XG5TSEEyMjQuaG1hY1N0cmVuZ3RoID0gMTkyO1xuU0hBMjI0LnBhZExlbmd0aCA9IDY0O1xuXG5TSEEyMjQucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIC8vIEp1c3QgdHJ1bmNhdGUgb3V0cHV0XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaC5zbGljZSgwLCA3KSwgJ2JpZycpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLnNsaWNlKDAsIDcpLCAnYmlnJyk7XG59O1xuXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgY29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7XG52YXIgc2hhQ29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24nKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG5cbnZhciBzdW0zMiA9IHV0aWxzLnN1bTMyO1xudmFyIHN1bTMyXzQgPSB1dGlscy5zdW0zMl80O1xudmFyIHN1bTMyXzUgPSB1dGlscy5zdW0zMl81O1xudmFyIGNoMzIgPSBzaGFDb21tb24uY2gzMjtcbnZhciBtYWozMiA9IHNoYUNvbW1vbi5tYWozMjtcbnZhciBzMF8yNTYgPSBzaGFDb21tb24uczBfMjU2O1xudmFyIHMxXzI1NiA9IHNoYUNvbW1vbi5zMV8yNTY7XG52YXIgZzBfMjU2ID0gc2hhQ29tbW9uLmcwXzI1NjtcbnZhciBnMV8yNTYgPSBzaGFDb21tb24uZzFfMjU2O1xuXG52YXIgQmxvY2tIYXNoID0gY29tbW9uLkJsb2NrSGFzaDtcblxudmFyIHNoYTI1Nl9LID0gW1xuICAweDQyOGEyZjk4LCAweDcxMzc0NDkxLCAweGI1YzBmYmNmLCAweGU5YjVkYmE1LFxuICAweDM5NTZjMjViLCAweDU5ZjExMWYxLCAweDkyM2Y4MmE0LCAweGFiMWM1ZWQ1LFxuICAweGQ4MDdhYTk4LCAweDEyODM1YjAxLCAweDI0MzE4NWJlLCAweDU1MGM3ZGMzLFxuICAweDcyYmU1ZDc0LCAweDgwZGViMWZlLCAweDliZGMwNmE3LCAweGMxOWJmMTc0LFxuICAweGU0OWI2OWMxLCAweGVmYmU0Nzg2LCAweDBmYzE5ZGM2LCAweDI0MGNhMWNjLFxuICAweDJkZTkyYzZmLCAweDRhNzQ4NGFhLCAweDVjYjBhOWRjLCAweDc2Zjk4OGRhLFxuICAweDk4M2U1MTUyLCAweGE4MzFjNjZkLCAweGIwMDMyN2M4LCAweGJmNTk3ZmM3LFxuICAweGM2ZTAwYmYzLCAweGQ1YTc5MTQ3LCAweDA2Y2E2MzUxLCAweDE0MjkyOTY3LFxuICAweDI3YjcwYTg1LCAweDJlMWIyMTM4LCAweDRkMmM2ZGZjLCAweDUzMzgwZDEzLFxuICAweDY1MGE3MzU0LCAweDc2NmEwYWJiLCAweDgxYzJjOTJlLCAweDkyNzIyYzg1LFxuICAweGEyYmZlOGExLCAweGE4MWE2NjRiLCAweGMyNGI4YjcwLCAweGM3NmM1MWEzLFxuICAweGQxOTJlODE5LCAweGQ2OTkwNjI0LCAweGY0MGUzNTg1LCAweDEwNmFhMDcwLFxuICAweDE5YTRjMTE2LCAweDFlMzc2YzA4LCAweDI3NDg3NzRjLCAweDM0YjBiY2I1LFxuICAweDM5MWMwY2IzLCAweDRlZDhhYTRhLCAweDViOWNjYTRmLCAweDY4MmU2ZmYzLFxuICAweDc0OGY4MmVlLCAweDc4YTU2MzZmLCAweDg0Yzg3ODE0LCAweDhjYzcwMjA4LFxuICAweDkwYmVmZmZhLCAweGE0NTA2Y2ViLCAweGJlZjlhM2Y3LCAweGM2NzE3OGYyXG5dO1xuXG5mdW5jdGlvbiBTSEEyNTYoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTSEEyNTYpKVxuICAgIHJldHVybiBuZXcgU0hBMjU2KCk7XG5cbiAgQmxvY2tIYXNoLmNhbGwodGhpcyk7XG4gIHRoaXMuaCA9IFtcbiAgICAweDZhMDllNjY3LCAweGJiNjdhZTg1LCAweDNjNmVmMzcyLCAweGE1NGZmNTNhLFxuICAgIDB4NTEwZTUyN2YsIDB4OWIwNTY4OGMsIDB4MWY4M2Q5YWIsIDB4NWJlMGNkMTlcbiAgXTtcbiAgdGhpcy5rID0gc2hhMjU2X0s7XG4gIHRoaXMuVyA9IG5ldyBBcnJheSg2NCk7XG59XG51dGlscy5pbmhlcml0cyhTSEEyNTYsIEJsb2NrSGFzaCk7XG5tb2R1bGUuZXhwb3J0cyA9IFNIQTI1NjtcblxuU0hBMjU2LmJsb2NrU2l6ZSA9IDUxMjtcblNIQTI1Ni5vdXRTaXplID0gMjU2O1xuU0hBMjU2LmhtYWNTdHJlbmd0aCA9IDE5MjtcblNIQTI1Ni5wYWRMZW5ndGggPSA2NDtcblxuU0hBMjU2LnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gX3VwZGF0ZShtc2csIHN0YXJ0KSB7XG4gIHZhciBXID0gdGhpcy5XO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKylcbiAgICBXW2ldID0gbXNnW3N0YXJ0ICsgaV07XG4gIGZvciAoOyBpIDwgVy5sZW5ndGg7IGkrKylcbiAgICBXW2ldID0gc3VtMzJfNChnMV8yNTYoV1tpIC0gMl0pLCBXW2kgLSA3XSwgZzBfMjU2KFdbaSAtIDE1XSksIFdbaSAtIDE2XSk7XG5cbiAgdmFyIGEgPSB0aGlzLmhbMF07XG4gIHZhciBiID0gdGhpcy5oWzFdO1xuICB2YXIgYyA9IHRoaXMuaFsyXTtcbiAgdmFyIGQgPSB0aGlzLmhbM107XG4gIHZhciBlID0gdGhpcy5oWzRdO1xuICB2YXIgZiA9IHRoaXMuaFs1XTtcbiAgdmFyIGcgPSB0aGlzLmhbNl07XG4gIHZhciBoID0gdGhpcy5oWzddO1xuXG4gIGFzc2VydCh0aGlzLmsubGVuZ3RoID09PSBXLmxlbmd0aCk7XG4gIGZvciAoaSA9IDA7IGkgPCBXLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIFQxID0gc3VtMzJfNShoLCBzMV8yNTYoZSksIGNoMzIoZSwgZiwgZyksIHRoaXMua1tpXSwgV1tpXSk7XG4gICAgdmFyIFQyID0gc3VtMzIoczBfMjU2KGEpLCBtYWozMihhLCBiLCBjKSk7XG4gICAgaCA9IGc7XG4gICAgZyA9IGY7XG4gICAgZiA9IGU7XG4gICAgZSA9IHN1bTMyKGQsIFQxKTtcbiAgICBkID0gYztcbiAgICBjID0gYjtcbiAgICBiID0gYTtcbiAgICBhID0gc3VtMzIoVDEsIFQyKTtcbiAgfVxuXG4gIHRoaXMuaFswXSA9IHN1bTMyKHRoaXMuaFswXSwgYSk7XG4gIHRoaXMuaFsxXSA9IHN1bTMyKHRoaXMuaFsxXSwgYik7XG4gIHRoaXMuaFsyXSA9IHN1bTMyKHRoaXMuaFsyXSwgYyk7XG4gIHRoaXMuaFszXSA9IHN1bTMyKHRoaXMuaFszXSwgZCk7XG4gIHRoaXMuaFs0XSA9IHN1bTMyKHRoaXMuaFs0XSwgZSk7XG4gIHRoaXMuaFs1XSA9IHN1bTMyKHRoaXMuaFs1XSwgZik7XG4gIHRoaXMuaFs2XSA9IHN1bTMyKHRoaXMuaFs2XSwgZyk7XG4gIHRoaXMuaFs3XSA9IHN1bTMyKHRoaXMuaFs3XSwgaCk7XG59O1xuXG5TSEEyNTYucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaCwgJ2JpZycpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLCAnYmlnJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG52YXIgU0hBNTEyID0gcmVxdWlyZSgnLi81MTInKTtcblxuZnVuY3Rpb24gU0hBMzg0KCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU0hBMzg0KSlcbiAgICByZXR1cm4gbmV3IFNIQTM4NCgpO1xuXG4gIFNIQTUxMi5jYWxsKHRoaXMpO1xuICB0aGlzLmggPSBbXG4gICAgMHhjYmJiOWQ1ZCwgMHhjMTA1OWVkOCxcbiAgICAweDYyOWEyOTJhLCAweDM2N2NkNTA3LFxuICAgIDB4OTE1OTAxNWEsIDB4MzA3MGRkMTcsXG4gICAgMHgxNTJmZWNkOCwgMHhmNzBlNTkzOSxcbiAgICAweDY3MzMyNjY3LCAweGZmYzAwYjMxLFxuICAgIDB4OGViNDRhODcsIDB4Njg1ODE1MTEsXG4gICAgMHhkYjBjMmUwZCwgMHg2NGY5OGZhNyxcbiAgICAweDQ3YjU0ODFkLCAweGJlZmE0ZmE0IF07XG59XG51dGlscy5pbmhlcml0cyhTSEEzODQsIFNIQTUxMik7XG5tb2R1bGUuZXhwb3J0cyA9IFNIQTM4NDtcblxuU0hBMzg0LmJsb2NrU2l6ZSA9IDEwMjQ7XG5TSEEzODQub3V0U2l6ZSA9IDM4NDtcblNIQTM4NC5obWFjU3RyZW5ndGggPSAxOTI7XG5TSEEzODQucGFkTGVuZ3RoID0gMTI4O1xuXG5TSEEzODQucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaC5zbGljZSgwLCAxMiksICdiaWcnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaC5zbGljZSgwLCAxMiksICdiaWcnKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgY29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xuXG52YXIgcm90cjY0X2hpID0gdXRpbHMucm90cjY0X2hpO1xudmFyIHJvdHI2NF9sbyA9IHV0aWxzLnJvdHI2NF9sbztcbnZhciBzaHI2NF9oaSA9IHV0aWxzLnNocjY0X2hpO1xudmFyIHNocjY0X2xvID0gdXRpbHMuc2hyNjRfbG87XG52YXIgc3VtNjQgPSB1dGlscy5zdW02NDtcbnZhciBzdW02NF9oaSA9IHV0aWxzLnN1bTY0X2hpO1xudmFyIHN1bTY0X2xvID0gdXRpbHMuc3VtNjRfbG87XG52YXIgc3VtNjRfNF9oaSA9IHV0aWxzLnN1bTY0XzRfaGk7XG52YXIgc3VtNjRfNF9sbyA9IHV0aWxzLnN1bTY0XzRfbG87XG52YXIgc3VtNjRfNV9oaSA9IHV0aWxzLnN1bTY0XzVfaGk7XG52YXIgc3VtNjRfNV9sbyA9IHV0aWxzLnN1bTY0XzVfbG87XG5cbnZhciBCbG9ja0hhc2ggPSBjb21tb24uQmxvY2tIYXNoO1xuXG52YXIgc2hhNTEyX0sgPSBbXG4gIDB4NDI4YTJmOTgsIDB4ZDcyOGFlMjIsIDB4NzEzNzQ0OTEsIDB4MjNlZjY1Y2QsXG4gIDB4YjVjMGZiY2YsIDB4ZWM0ZDNiMmYsIDB4ZTliNWRiYTUsIDB4ODE4OWRiYmMsXG4gIDB4Mzk1NmMyNWIsIDB4ZjM0OGI1MzgsIDB4NTlmMTExZjEsIDB4YjYwNWQwMTksXG4gIDB4OTIzZjgyYTQsIDB4YWYxOTRmOWIsIDB4YWIxYzVlZDUsIDB4ZGE2ZDgxMTgsXG4gIDB4ZDgwN2FhOTgsIDB4YTMwMzAyNDIsIDB4MTI4MzViMDEsIDB4NDU3MDZmYmUsXG4gIDB4MjQzMTg1YmUsIDB4NGVlNGIyOGMsIDB4NTUwYzdkYzMsIDB4ZDVmZmI0ZTIsXG4gIDB4NzJiZTVkNzQsIDB4ZjI3Yjg5NmYsIDB4ODBkZWIxZmUsIDB4M2IxNjk2YjEsXG4gIDB4OWJkYzA2YTcsIDB4MjVjNzEyMzUsIDB4YzE5YmYxNzQsIDB4Y2Y2OTI2OTQsXG4gIDB4ZTQ5YjY5YzEsIDB4OWVmMTRhZDIsIDB4ZWZiZTQ3ODYsIDB4Mzg0ZjI1ZTMsXG4gIDB4MGZjMTlkYzYsIDB4OGI4Y2Q1YjUsIDB4MjQwY2ExY2MsIDB4NzdhYzljNjUsXG4gIDB4MmRlOTJjNmYsIDB4NTkyYjAyNzUsIDB4NGE3NDg0YWEsIDB4NmVhNmU0ODMsXG4gIDB4NWNiMGE5ZGMsIDB4YmQ0MWZiZDQsIDB4NzZmOTg4ZGEsIDB4ODMxMTUzYjUsXG4gIDB4OTgzZTUxNTIsIDB4ZWU2NmRmYWIsIDB4YTgzMWM2NmQsIDB4MmRiNDMyMTAsXG4gIDB4YjAwMzI3YzgsIDB4OThmYjIxM2YsIDB4YmY1OTdmYzcsIDB4YmVlZjBlZTQsXG4gIDB4YzZlMDBiZjMsIDB4M2RhODhmYzIsIDB4ZDVhNzkxNDcsIDB4OTMwYWE3MjUsXG4gIDB4MDZjYTYzNTEsIDB4ZTAwMzgyNmYsIDB4MTQyOTI5NjcsIDB4MGEwZTZlNzAsXG4gIDB4MjdiNzBhODUsIDB4NDZkMjJmZmMsIDB4MmUxYjIxMzgsIDB4NWMyNmM5MjYsXG4gIDB4NGQyYzZkZmMsIDB4NWFjNDJhZWQsIDB4NTMzODBkMTMsIDB4OWQ5NWIzZGYsXG4gIDB4NjUwYTczNTQsIDB4OGJhZjYzZGUsIDB4NzY2YTBhYmIsIDB4M2M3N2IyYTgsXG4gIDB4ODFjMmM5MmUsIDB4NDdlZGFlZTYsIDB4OTI3MjJjODUsIDB4MTQ4MjM1M2IsXG4gIDB4YTJiZmU4YTEsIDB4NGNmMTAzNjQsIDB4YTgxYTY2NGIsIDB4YmM0MjMwMDEsXG4gIDB4YzI0YjhiNzAsIDB4ZDBmODk3OTEsIDB4Yzc2YzUxYTMsIDB4MDY1NGJlMzAsXG4gIDB4ZDE5MmU4MTksIDB4ZDZlZjUyMTgsIDB4ZDY5OTA2MjQsIDB4NTU2NWE5MTAsXG4gIDB4ZjQwZTM1ODUsIDB4NTc3MTIwMmEsIDB4MTA2YWEwNzAsIDB4MzJiYmQxYjgsXG4gIDB4MTlhNGMxMTYsIDB4YjhkMmQwYzgsIDB4MWUzNzZjMDgsIDB4NTE0MWFiNTMsXG4gIDB4Mjc0ODc3NGMsIDB4ZGY4ZWViOTksIDB4MzRiMGJjYjUsIDB4ZTE5YjQ4YTgsXG4gIDB4MzkxYzBjYjMsIDB4YzVjOTVhNjMsIDB4NGVkOGFhNGEsIDB4ZTM0MThhY2IsXG4gIDB4NWI5Y2NhNGYsIDB4Nzc2M2UzNzMsIDB4NjgyZTZmZjMsIDB4ZDZiMmI4YTMsXG4gIDB4NzQ4ZjgyZWUsIDB4NWRlZmIyZmMsIDB4NzhhNTYzNmYsIDB4NDMxNzJmNjAsXG4gIDB4ODRjODc4MTQsIDB4YTFmMGFiNzIsIDB4OGNjNzAyMDgsIDB4MWE2NDM5ZWMsXG4gIDB4OTBiZWZmZmEsIDB4MjM2MzFlMjgsIDB4YTQ1MDZjZWIsIDB4ZGU4MmJkZTksXG4gIDB4YmVmOWEzZjcsIDB4YjJjNjc5MTUsIDB4YzY3MTc4ZjIsIDB4ZTM3MjUzMmIsXG4gIDB4Y2EyNzNlY2UsIDB4ZWEyNjYxOWMsIDB4ZDE4NmI4YzcsIDB4MjFjMGMyMDcsXG4gIDB4ZWFkYTdkZDYsIDB4Y2RlMGViMWUsIDB4ZjU3ZDRmN2YsIDB4ZWU2ZWQxNzgsXG4gIDB4MDZmMDY3YWEsIDB4NzIxNzZmYmEsIDB4MGE2MzdkYzUsIDB4YTJjODk4YTYsXG4gIDB4MTEzZjk4MDQsIDB4YmVmOTBkYWUsIDB4MWI3MTBiMzUsIDB4MTMxYzQ3MWIsXG4gIDB4MjhkYjc3ZjUsIDB4MjMwNDdkODQsIDB4MzJjYWFiN2IsIDB4NDBjNzI0OTMsXG4gIDB4M2M5ZWJlMGEsIDB4MTVjOWJlYmMsIDB4NDMxZDY3YzQsIDB4OWMxMDBkNGMsXG4gIDB4NGNjNWQ0YmUsIDB4Y2IzZTQyYjYsIDB4NTk3ZjI5OWMsIDB4ZmM2NTdlMmEsXG4gIDB4NWZjYjZmYWIsIDB4M2FkNmZhZWMsIDB4NmM0NDE5OGMsIDB4NGE0NzU4MTdcbl07XG5cbmZ1bmN0aW9uIFNIQTUxMigpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTUxMikpXG4gICAgcmV0dXJuIG5ldyBTSEE1MTIoKTtcblxuICBCbG9ja0hhc2guY2FsbCh0aGlzKTtcbiAgdGhpcy5oID0gW1xuICAgIDB4NmEwOWU2NjcsIDB4ZjNiY2M5MDgsXG4gICAgMHhiYjY3YWU4NSwgMHg4NGNhYTczYixcbiAgICAweDNjNmVmMzcyLCAweGZlOTRmODJiLFxuICAgIDB4YTU0ZmY1M2EsIDB4NWYxZDM2ZjEsXG4gICAgMHg1MTBlNTI3ZiwgMHhhZGU2ODJkMSxcbiAgICAweDliMDU2ODhjLCAweDJiM2U2YzFmLFxuICAgIDB4MWY4M2Q5YWIsIDB4ZmI0MWJkNmIsXG4gICAgMHg1YmUwY2QxOSwgMHgxMzdlMjE3OSBdO1xuICB0aGlzLmsgPSBzaGE1MTJfSztcbiAgdGhpcy5XID0gbmV3IEFycmF5KDE2MCk7XG59XG51dGlscy5pbmhlcml0cyhTSEE1MTIsIEJsb2NrSGFzaCk7XG5tb2R1bGUuZXhwb3J0cyA9IFNIQTUxMjtcblxuU0hBNTEyLmJsb2NrU2l6ZSA9IDEwMjQ7XG5TSEE1MTIub3V0U2l6ZSA9IDUxMjtcblNIQTUxMi5obWFjU3RyZW5ndGggPSAxOTI7XG5TSEE1MTIucGFkTGVuZ3RoID0gMTI4O1xuXG5TSEE1MTIucHJvdG90eXBlLl9wcmVwYXJlQmxvY2sgPSBmdW5jdGlvbiBfcHJlcGFyZUJsb2NrKG1zZywgc3RhcnQpIHtcbiAgdmFyIFcgPSB0aGlzLlc7XG5cbiAgLy8gMzIgeCAzMmJpdCB3b3Jkc1xuICBmb3IgKHZhciBpID0gMDsgaSA8IDMyOyBpKyspXG4gICAgV1tpXSA9IG1zZ1tzdGFydCArIGldO1xuICBmb3IgKDsgaSA8IFcubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB2YXIgYzBfaGkgPSBnMV81MTJfaGkoV1tpIC0gNF0sIFdbaSAtIDNdKTsgIC8vIGkgLSAyXG4gICAgdmFyIGMwX2xvID0gZzFfNTEyX2xvKFdbaSAtIDRdLCBXW2kgLSAzXSk7XG4gICAgdmFyIGMxX2hpID0gV1tpIC0gMTRdOyAgLy8gaSAtIDdcbiAgICB2YXIgYzFfbG8gPSBXW2kgLSAxM107XG4gICAgdmFyIGMyX2hpID0gZzBfNTEyX2hpKFdbaSAtIDMwXSwgV1tpIC0gMjldKTsgIC8vIGkgLSAxNVxuICAgIHZhciBjMl9sbyA9IGcwXzUxMl9sbyhXW2kgLSAzMF0sIFdbaSAtIDI5XSk7XG4gICAgdmFyIGMzX2hpID0gV1tpIC0gMzJdOyAgLy8gaSAtIDE2XG4gICAgdmFyIGMzX2xvID0gV1tpIC0gMzFdO1xuXG4gICAgV1tpXSA9IHN1bTY0XzRfaGkoXG4gICAgICBjMF9oaSwgYzBfbG8sXG4gICAgICBjMV9oaSwgYzFfbG8sXG4gICAgICBjMl9oaSwgYzJfbG8sXG4gICAgICBjM19oaSwgYzNfbG8pO1xuICAgIFdbaSArIDFdID0gc3VtNjRfNF9sbyhcbiAgICAgIGMwX2hpLCBjMF9sbyxcbiAgICAgIGMxX2hpLCBjMV9sbyxcbiAgICAgIGMyX2hpLCBjMl9sbyxcbiAgICAgIGMzX2hpLCBjM19sbyk7XG4gIH1cbn07XG5cblNIQTUxMi5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIF91cGRhdGUobXNnLCBzdGFydCkge1xuICB0aGlzLl9wcmVwYXJlQmxvY2sobXNnLCBzdGFydCk7XG5cbiAgdmFyIFcgPSB0aGlzLlc7XG5cbiAgdmFyIGFoID0gdGhpcy5oWzBdO1xuICB2YXIgYWwgPSB0aGlzLmhbMV07XG4gIHZhciBiaCA9IHRoaXMuaFsyXTtcbiAgdmFyIGJsID0gdGhpcy5oWzNdO1xuICB2YXIgY2ggPSB0aGlzLmhbNF07XG4gIHZhciBjbCA9IHRoaXMuaFs1XTtcbiAgdmFyIGRoID0gdGhpcy5oWzZdO1xuICB2YXIgZGwgPSB0aGlzLmhbN107XG4gIHZhciBlaCA9IHRoaXMuaFs4XTtcbiAgdmFyIGVsID0gdGhpcy5oWzldO1xuICB2YXIgZmggPSB0aGlzLmhbMTBdO1xuICB2YXIgZmwgPSB0aGlzLmhbMTFdO1xuICB2YXIgZ2ggPSB0aGlzLmhbMTJdO1xuICB2YXIgZ2wgPSB0aGlzLmhbMTNdO1xuICB2YXIgaGggPSB0aGlzLmhbMTRdO1xuICB2YXIgaGwgPSB0aGlzLmhbMTVdO1xuXG4gIGFzc2VydCh0aGlzLmsubGVuZ3RoID09PSBXLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgVy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHZhciBjMF9oaSA9IGhoO1xuICAgIHZhciBjMF9sbyA9IGhsO1xuICAgIHZhciBjMV9oaSA9IHMxXzUxMl9oaShlaCwgZWwpO1xuICAgIHZhciBjMV9sbyA9IHMxXzUxMl9sbyhlaCwgZWwpO1xuICAgIHZhciBjMl9oaSA9IGNoNjRfaGkoZWgsIGVsLCBmaCwgZmwsIGdoLCBnbCk7XG4gICAgdmFyIGMyX2xvID0gY2g2NF9sbyhlaCwgZWwsIGZoLCBmbCwgZ2gsIGdsKTtcbiAgICB2YXIgYzNfaGkgPSB0aGlzLmtbaV07XG4gICAgdmFyIGMzX2xvID0gdGhpcy5rW2kgKyAxXTtcbiAgICB2YXIgYzRfaGkgPSBXW2ldO1xuICAgIHZhciBjNF9sbyA9IFdbaSArIDFdO1xuXG4gICAgdmFyIFQxX2hpID0gc3VtNjRfNV9oaShcbiAgICAgIGMwX2hpLCBjMF9sbyxcbiAgICAgIGMxX2hpLCBjMV9sbyxcbiAgICAgIGMyX2hpLCBjMl9sbyxcbiAgICAgIGMzX2hpLCBjM19sbyxcbiAgICAgIGM0X2hpLCBjNF9sbyk7XG4gICAgdmFyIFQxX2xvID0gc3VtNjRfNV9sbyhcbiAgICAgIGMwX2hpLCBjMF9sbyxcbiAgICAgIGMxX2hpLCBjMV9sbyxcbiAgICAgIGMyX2hpLCBjMl9sbyxcbiAgICAgIGMzX2hpLCBjM19sbyxcbiAgICAgIGM0X2hpLCBjNF9sbyk7XG5cbiAgICBjMF9oaSA9IHMwXzUxMl9oaShhaCwgYWwpO1xuICAgIGMwX2xvID0gczBfNTEyX2xvKGFoLCBhbCk7XG4gICAgYzFfaGkgPSBtYWo2NF9oaShhaCwgYWwsIGJoLCBibCwgY2gsIGNsKTtcbiAgICBjMV9sbyA9IG1hajY0X2xvKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wpO1xuXG4gICAgdmFyIFQyX2hpID0gc3VtNjRfaGkoYzBfaGksIGMwX2xvLCBjMV9oaSwgYzFfbG8pO1xuICAgIHZhciBUMl9sbyA9IHN1bTY0X2xvKGMwX2hpLCBjMF9sbywgYzFfaGksIGMxX2xvKTtcblxuICAgIGhoID0gZ2g7XG4gICAgaGwgPSBnbDtcblxuICAgIGdoID0gZmg7XG4gICAgZ2wgPSBmbDtcblxuICAgIGZoID0gZWg7XG4gICAgZmwgPSBlbDtcblxuICAgIGVoID0gc3VtNjRfaGkoZGgsIGRsLCBUMV9oaSwgVDFfbG8pO1xuICAgIGVsID0gc3VtNjRfbG8oZGwsIGRsLCBUMV9oaSwgVDFfbG8pO1xuXG4gICAgZGggPSBjaDtcbiAgICBkbCA9IGNsO1xuXG4gICAgY2ggPSBiaDtcbiAgICBjbCA9IGJsO1xuXG4gICAgYmggPSBhaDtcbiAgICBibCA9IGFsO1xuXG4gICAgYWggPSBzdW02NF9oaShUMV9oaSwgVDFfbG8sIFQyX2hpLCBUMl9sbyk7XG4gICAgYWwgPSBzdW02NF9sbyhUMV9oaSwgVDFfbG8sIFQyX2hpLCBUMl9sbyk7XG4gIH1cblxuICBzdW02NCh0aGlzLmgsIDAsIGFoLCBhbCk7XG4gIHN1bTY0KHRoaXMuaCwgMiwgYmgsIGJsKTtcbiAgc3VtNjQodGhpcy5oLCA0LCBjaCwgY2wpO1xuICBzdW02NCh0aGlzLmgsIDYsIGRoLCBkbCk7XG4gIHN1bTY0KHRoaXMuaCwgOCwgZWgsIGVsKTtcbiAgc3VtNjQodGhpcy5oLCAxMCwgZmgsIGZsKTtcbiAgc3VtNjQodGhpcy5oLCAxMiwgZ2gsIGdsKTtcbiAgc3VtNjQodGhpcy5oLCAxNCwgaGgsIGhsKTtcbn07XG5cblNIQTUxMi5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLCAnYmlnJyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmgsICdiaWcnKTtcbn07XG5cbmZ1bmN0aW9uIGNoNjRfaGkoeGgsIHhsLCB5aCwgeWwsIHpoKSB7XG4gIHZhciByID0gKHhoICYgeWgpIF4gKCh+eGgpICYgemgpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGNoNjRfbG8oeGgsIHhsLCB5aCwgeWwsIHpoLCB6bCkge1xuICB2YXIgciA9ICh4bCAmIHlsKSBeICgofnhsKSAmIHpsKTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBtYWo2NF9oaSh4aCwgeGwsIHloLCB5bCwgemgpIHtcbiAgdmFyIHIgPSAoeGggJiB5aCkgXiAoeGggJiB6aCkgXiAoeWggJiB6aCk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gbWFqNjRfbG8oeGgsIHhsLCB5aCwgeWwsIHpoLCB6bCkge1xuICB2YXIgciA9ICh4bCAmIHlsKSBeICh4bCAmIHpsKSBeICh5bCAmIHpsKTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBzMF81MTJfaGkoeGgsIHhsKSB7XG4gIHZhciBjMF9oaSA9IHJvdHI2NF9oaSh4aCwgeGwsIDI4KTtcbiAgdmFyIGMxX2hpID0gcm90cjY0X2hpKHhsLCB4aCwgMik7ICAvLyAzNFxuICB2YXIgYzJfaGkgPSByb3RyNjRfaGkoeGwsIHhoLCA3KTsgIC8vIDM5XG5cbiAgdmFyIHIgPSBjMF9oaSBeIGMxX2hpIF4gYzJfaGk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gczBfNTEyX2xvKHhoLCB4bCkge1xuICB2YXIgYzBfbG8gPSByb3RyNjRfbG8oeGgsIHhsLCAyOCk7XG4gIHZhciBjMV9sbyA9IHJvdHI2NF9sbyh4bCwgeGgsIDIpOyAgLy8gMzRcbiAgdmFyIGMyX2xvID0gcm90cjY0X2xvKHhsLCB4aCwgNyk7ICAvLyAzOVxuXG4gIHZhciByID0gYzBfbG8gXiBjMV9sbyBeIGMyX2xvO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHMxXzUxMl9oaSh4aCwgeGwpIHtcbiAgdmFyIGMwX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgMTQpO1xuICB2YXIgYzFfaGkgPSByb3RyNjRfaGkoeGgsIHhsLCAxOCk7XG4gIHZhciBjMl9oaSA9IHJvdHI2NF9oaSh4bCwgeGgsIDkpOyAgLy8gNDFcblxuICB2YXIgciA9IGMwX2hpIF4gYzFfaGkgXiBjMl9oaTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBzMV81MTJfbG8oeGgsIHhsKSB7XG4gIHZhciBjMF9sbyA9IHJvdHI2NF9sbyh4aCwgeGwsIDE0KTtcbiAgdmFyIGMxX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgMTgpO1xuICB2YXIgYzJfbG8gPSByb3RyNjRfbG8oeGwsIHhoLCA5KTsgIC8vIDQxXG5cbiAgdmFyIHIgPSBjMF9sbyBeIGMxX2xvIF4gYzJfbG87XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gZzBfNTEyX2hpKHhoLCB4bCkge1xuICB2YXIgYzBfaGkgPSByb3RyNjRfaGkoeGgsIHhsLCAxKTtcbiAgdmFyIGMxX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgOCk7XG4gIHZhciBjMl9oaSA9IHNocjY0X2hpKHhoLCB4bCwgNyk7XG5cbiAgdmFyIHIgPSBjMF9oaSBeIGMxX2hpIF4gYzJfaGk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gZzBfNTEyX2xvKHhoLCB4bCkge1xuICB2YXIgYzBfbG8gPSByb3RyNjRfbG8oeGgsIHhsLCAxKTtcbiAgdmFyIGMxX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgOCk7XG4gIHZhciBjMl9sbyA9IHNocjY0X2xvKHhoLCB4bCwgNyk7XG5cbiAgdmFyIHIgPSBjMF9sbyBeIGMxX2xvIF4gYzJfbG87XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gZzFfNTEyX2hpKHhoLCB4bCkge1xuICB2YXIgYzBfaGkgPSByb3RyNjRfaGkoeGgsIHhsLCAxOSk7XG4gIHZhciBjMV9oaSA9IHJvdHI2NF9oaSh4bCwgeGgsIDI5KTsgIC8vIDYxXG4gIHZhciBjMl9oaSA9IHNocjY0X2hpKHhoLCB4bCwgNik7XG5cbiAgdmFyIHIgPSBjMF9oaSBeIGMxX2hpIF4gYzJfaGk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gZzFfNTEyX2xvKHhoLCB4bCkge1xuICB2YXIgYzBfbG8gPSByb3RyNjRfbG8oeGgsIHhsLCAxOSk7XG4gIHZhciBjMV9sbyA9IHJvdHI2NF9sbyh4bCwgeGgsIDI5KTsgIC8vIDYxXG4gIHZhciBjMl9sbyA9IHNocjY0X2xvKHhoLCB4bCwgNik7XG5cbiAgdmFyIHIgPSBjMF9sbyBeIGMxX2xvIF4gYzJfbG87XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciByb3RyMzIgPSB1dGlscy5yb3RyMzI7XG5cbmZ1bmN0aW9uIGZ0XzEocywgeCwgeSwgeikge1xuICBpZiAocyA9PT0gMClcbiAgICByZXR1cm4gY2gzMih4LCB5LCB6KTtcbiAgaWYgKHMgPT09IDEgfHwgcyA9PT0gMylcbiAgICByZXR1cm4gcDMyKHgsIHksIHopO1xuICBpZiAocyA9PT0gMilcbiAgICByZXR1cm4gbWFqMzIoeCwgeSwgeik7XG59XG5leHBvcnRzLmZ0XzEgPSBmdF8xO1xuXG5mdW5jdGlvbiBjaDMyKHgsIHksIHopIHtcbiAgcmV0dXJuICh4ICYgeSkgXiAoKH54KSAmIHopO1xufVxuZXhwb3J0cy5jaDMyID0gY2gzMjtcblxuZnVuY3Rpb24gbWFqMzIoeCwgeSwgeikge1xuICByZXR1cm4gKHggJiB5KSBeICh4ICYgeikgXiAoeSAmIHopO1xufVxuZXhwb3J0cy5tYWozMiA9IG1hajMyO1xuXG5mdW5jdGlvbiBwMzIoeCwgeSwgeikge1xuICByZXR1cm4geCBeIHkgXiB6O1xufVxuZXhwb3J0cy5wMzIgPSBwMzI7XG5cbmZ1bmN0aW9uIHMwXzI1Nih4KSB7XG4gIHJldHVybiByb3RyMzIoeCwgMikgXiByb3RyMzIoeCwgMTMpIF4gcm90cjMyKHgsIDIyKTtcbn1cbmV4cG9ydHMuczBfMjU2ID0gczBfMjU2O1xuXG5mdW5jdGlvbiBzMV8yNTYoeCkge1xuICByZXR1cm4gcm90cjMyKHgsIDYpIF4gcm90cjMyKHgsIDExKSBeIHJvdHIzMih4LCAyNSk7XG59XG5leHBvcnRzLnMxXzI1NiA9IHMxXzI1NjtcblxuZnVuY3Rpb24gZzBfMjU2KHgpIHtcbiAgcmV0dXJuIHJvdHIzMih4LCA3KSBeIHJvdHIzMih4LCAxOCkgXiAoeCA+Pj4gMyk7XG59XG5leHBvcnRzLmcwXzI1NiA9IGcwXzI1NjtcblxuZnVuY3Rpb24gZzFfMjU2KHgpIHtcbiAgcmV0dXJuIHJvdHIzMih4LCAxNykgXiByb3RyMzIoeCwgMTkpIF4gKHggPj4+IDEwKTtcbn1cbmV4cG9ydHMuZzFfMjU2ID0gZzFfMjU2O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxuZXhwb3J0cy5pbmhlcml0cyA9IGluaGVyaXRzO1xuXG5mdW5jdGlvbiBpc1N1cnJvZ2F0ZVBhaXIobXNnLCBpKSB7XG4gIGlmICgobXNnLmNoYXJDb2RlQXQoaSkgJiAweEZDMDApICE9PSAweEQ4MDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGkgPCAwIHx8IGkgKyAxID49IG1zZy5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChtc2cuY2hhckNvZGVBdChpICsgMSkgJiAweEZDMDApID09PSAweERDMDA7XG59XG5cbmZ1bmN0aW9uIHRvQXJyYXkobXNnLCBlbmMpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkobXNnKSlcbiAgICByZXR1cm4gbXNnLnNsaWNlKCk7XG4gIGlmICghbXNnKVxuICAgIHJldHVybiBbXTtcbiAgdmFyIHJlcyA9IFtdO1xuICBpZiAodHlwZW9mIG1zZyA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoIWVuYykge1xuICAgICAgLy8gSW5zcGlyZWQgYnkgc3RyaW5nVG9VdGY4Qnl0ZUFycmF5KCkgaW4gY2xvc3VyZS1saWJyYXJ5IGJ5IEdvb2dsZVxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9jbG9zdXJlLWxpYnJhcnkvYmxvYi84NTk4ZDg3MjQyYWY1OWFhYzIzMzI3MDc0MmM4OTg0ZTJiMmJkYmUwL2Nsb3N1cmUvZ29vZy9jcnlwdC9jcnlwdC5qcyNMMTE3LUwxNDNcbiAgICAgIC8vIEFwYWNoZSBMaWNlbnNlIDIuMFxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9jbG9zdXJlLWxpYnJhcnkvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICAgICAgdmFyIHAgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGMgPSBtc2cuY2hhckNvZGVBdChpKTtcbiAgICAgICAgaWYgKGMgPCAxMjgpIHtcbiAgICAgICAgICByZXNbcCsrXSA9IGM7XG4gICAgICAgIH0gZWxzZSBpZiAoYyA8IDIwNDgpIHtcbiAgICAgICAgICByZXNbcCsrXSA9IChjID4+IDYpIHwgMTkyO1xuICAgICAgICAgIHJlc1twKytdID0gKGMgJiA2MykgfCAxMjg7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNTdXJyb2dhdGVQYWlyKG1zZywgaSkpIHtcbiAgICAgICAgICBjID0gMHgxMDAwMCArICgoYyAmIDB4MDNGRikgPDwgMTApICsgKG1zZy5jaGFyQ29kZUF0KCsraSkgJiAweDAzRkYpO1xuICAgICAgICAgIHJlc1twKytdID0gKGMgPj4gMTgpIHwgMjQwO1xuICAgICAgICAgIHJlc1twKytdID0gKChjID4+IDEyKSAmIDYzKSB8IDEyODtcbiAgICAgICAgICByZXNbcCsrXSA9ICgoYyA+PiA2KSAmIDYzKSB8IDEyODtcbiAgICAgICAgICByZXNbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc1twKytdID0gKGMgPj4gMTIpIHwgMjI0O1xuICAgICAgICAgIHJlc1twKytdID0gKChjID4+IDYpICYgNjMpIHwgMTI4O1xuICAgICAgICAgIHJlc1twKytdID0gKGMgJiA2MykgfCAxMjg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVuYyA9PT0gJ2hleCcpIHtcbiAgICAgIG1zZyA9IG1zZy5yZXBsYWNlKC9bXmEtejAtOV0rL2lnLCAnJyk7XG4gICAgICBpZiAobXNnLmxlbmd0aCAlIDIgIT09IDApXG4gICAgICAgIG1zZyA9ICcwJyArIG1zZztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpICs9IDIpXG4gICAgICAgIHJlcy5wdXNoKHBhcnNlSW50KG1zZ1tpXSArIG1zZ1tpICsgMV0sIDE2KSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAoaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspXG4gICAgICByZXNbaV0gPSBtc2dbaV0gfCAwO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5leHBvcnRzLnRvQXJyYXkgPSB0b0FycmF5O1xuXG5mdW5jdGlvbiB0b0hleChtc2cpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKylcbiAgICByZXMgKz0gemVybzIobXNnW2ldLnRvU3RyaW5nKDE2KSk7XG4gIHJldHVybiByZXM7XG59XG5leHBvcnRzLnRvSGV4ID0gdG9IZXg7XG5cbmZ1bmN0aW9uIGh0b25sKHcpIHtcbiAgdmFyIHJlcyA9ICh3ID4+PiAyNCkgfFxuICAgICAgICAgICAgKCh3ID4+PiA4KSAmIDB4ZmYwMCkgfFxuICAgICAgICAgICAgKCh3IDw8IDgpICYgMHhmZjAwMDApIHxcbiAgICAgICAgICAgICgodyAmIDB4ZmYpIDw8IDI0KTtcbiAgcmV0dXJuIHJlcyA+Pj4gMDtcbn1cbmV4cG9ydHMuaHRvbmwgPSBodG9ubDtcblxuZnVuY3Rpb24gdG9IZXgzMihtc2csIGVuZGlhbikge1xuICB2YXIgcmVzID0gJyc7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHcgPSBtc2dbaV07XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2xpdHRsZScpXG4gICAgICB3ID0gaHRvbmwodyk7XG4gICAgcmVzICs9IHplcm84KHcudG9TdHJpbmcoMTYpKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy50b0hleDMyID0gdG9IZXgzMjtcblxuZnVuY3Rpb24gemVybzIod29yZCkge1xuICBpZiAod29yZC5sZW5ndGggPT09IDEpXG4gICAgcmV0dXJuICcwJyArIHdvcmQ7XG4gIGVsc2VcbiAgICByZXR1cm4gd29yZDtcbn1cbmV4cG9ydHMuemVybzIgPSB6ZXJvMjtcblxuZnVuY3Rpb24gemVybzgod29yZCkge1xuICBpZiAod29yZC5sZW5ndGggPT09IDcpXG4gICAgcmV0dXJuICcwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSA2KVxuICAgIHJldHVybiAnMDAnICsgd29yZDtcbiAgZWxzZSBpZiAod29yZC5sZW5ndGggPT09IDUpXG4gICAgcmV0dXJuICcwMDAnICsgd29yZDtcbiAgZWxzZSBpZiAod29yZC5sZW5ndGggPT09IDQpXG4gICAgcmV0dXJuICcwMDAwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSAzKVxuICAgIHJldHVybiAnMDAwMDAnICsgd29yZDtcbiAgZWxzZSBpZiAod29yZC5sZW5ndGggPT09IDIpXG4gICAgcmV0dXJuICcwMDAwMDAnICsgd29yZDtcbiAgZWxzZSBpZiAod29yZC5sZW5ndGggPT09IDEpXG4gICAgcmV0dXJuICcwMDAwMDAwJyArIHdvcmQ7XG4gIGVsc2VcbiAgICByZXR1cm4gd29yZDtcbn1cbmV4cG9ydHMuemVybzggPSB6ZXJvODtcblxuZnVuY3Rpb24gam9pbjMyKG1zZywgc3RhcnQsIGVuZCwgZW5kaWFuKSB7XG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydDtcbiAgYXNzZXJ0KGxlbiAlIDQgPT09IDApO1xuICB2YXIgcmVzID0gbmV3IEFycmF5KGxlbiAvIDQpO1xuICBmb3IgKHZhciBpID0gMCwgayA9IHN0YXJ0OyBpIDwgcmVzLmxlbmd0aDsgaSsrLCBrICs9IDQpIHtcbiAgICB2YXIgdztcbiAgICBpZiAoZW5kaWFuID09PSAnYmlnJylcbiAgICAgIHcgPSAobXNnW2tdIDw8IDI0KSB8IChtc2dbayArIDFdIDw8IDE2KSB8IChtc2dbayArIDJdIDw8IDgpIHwgbXNnW2sgKyAzXTtcbiAgICBlbHNlXG4gICAgICB3ID0gKG1zZ1trICsgM10gPDwgMjQpIHwgKG1zZ1trICsgMl0gPDwgMTYpIHwgKG1zZ1trICsgMV0gPDwgOCkgfCBtc2dba107XG4gICAgcmVzW2ldID0gdyA+Pj4gMDtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy5qb2luMzIgPSBqb2luMzI7XG5cbmZ1bmN0aW9uIHNwbGl0MzIobXNnLCBlbmRpYW4pIHtcbiAgdmFyIHJlcyA9IG5ldyBBcnJheShtc2cubGVuZ3RoICogNCk7XG4gIGZvciAodmFyIGkgPSAwLCBrID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKywgayArPSA0KSB7XG4gICAgdmFyIG0gPSBtc2dbaV07XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2JpZycpIHtcbiAgICAgIHJlc1trXSA9IG0gPj4+IDI0O1xuICAgICAgcmVzW2sgKyAxXSA9IChtID4+PiAxNikgJiAweGZmO1xuICAgICAgcmVzW2sgKyAyXSA9IChtID4+PiA4KSAmIDB4ZmY7XG4gICAgICByZXNbayArIDNdID0gbSAmIDB4ZmY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc1trICsgM10gPSBtID4+PiAyNDtcbiAgICAgIHJlc1trICsgMl0gPSAobSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgIHJlc1trICsgMV0gPSAobSA+Pj4gOCkgJiAweGZmO1xuICAgICAgcmVzW2tdID0gbSAmIDB4ZmY7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXM7XG59XG5leHBvcnRzLnNwbGl0MzIgPSBzcGxpdDMyO1xuXG5mdW5jdGlvbiByb3RyMzIodywgYikge1xuICByZXR1cm4gKHcgPj4+IGIpIHwgKHcgPDwgKDMyIC0gYikpO1xufVxuZXhwb3J0cy5yb3RyMzIgPSByb3RyMzI7XG5cbmZ1bmN0aW9uIHJvdGwzMih3LCBiKSB7XG4gIHJldHVybiAodyA8PCBiKSB8ICh3ID4+PiAoMzIgLSBiKSk7XG59XG5leHBvcnRzLnJvdGwzMiA9IHJvdGwzMjtcblxuZnVuY3Rpb24gc3VtMzIoYSwgYikge1xuICByZXR1cm4gKGEgKyBiKSA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtMzIgPSBzdW0zMjtcblxuZnVuY3Rpb24gc3VtMzJfMyhhLCBiLCBjKSB7XG4gIHJldHVybiAoYSArIGIgKyBjKSA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtMzJfMyA9IHN1bTMyXzM7XG5cbmZ1bmN0aW9uIHN1bTMyXzQoYSwgYiwgYywgZCkge1xuICByZXR1cm4gKGEgKyBiICsgYyArIGQpID4+PiAwO1xufVxuZXhwb3J0cy5zdW0zMl80ID0gc3VtMzJfNDtcblxuZnVuY3Rpb24gc3VtMzJfNShhLCBiLCBjLCBkLCBlKSB7XG4gIHJldHVybiAoYSArIGIgKyBjICsgZCArIGUpID4+PiAwO1xufVxuZXhwb3J0cy5zdW0zMl81ID0gc3VtMzJfNTtcblxuZnVuY3Rpb24gc3VtNjQoYnVmLCBwb3MsIGFoLCBhbCkge1xuICB2YXIgYmggPSBidWZbcG9zXTtcbiAgdmFyIGJsID0gYnVmW3BvcyArIDFdO1xuXG4gIHZhciBsbyA9IChhbCArIGJsKSA+Pj4gMDtcbiAgdmFyIGhpID0gKGxvIDwgYWwgPyAxIDogMCkgKyBhaCArIGJoO1xuICBidWZbcG9zXSA9IGhpID4+PiAwO1xuICBidWZbcG9zICsgMV0gPSBsbztcbn1cbmV4cG9ydHMuc3VtNjQgPSBzdW02NDtcblxuZnVuY3Rpb24gc3VtNjRfaGkoYWgsIGFsLCBiaCwgYmwpIHtcbiAgdmFyIGxvID0gKGFsICsgYmwpID4+PiAwO1xuICB2YXIgaGkgPSAobG8gPCBhbCA/IDEgOiAwKSArIGFoICsgYmg7XG4gIHJldHVybiBoaSA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtNjRfaGkgPSBzdW02NF9oaTtcblxuZnVuY3Rpb24gc3VtNjRfbG8oYWgsIGFsLCBiaCwgYmwpIHtcbiAgdmFyIGxvID0gYWwgKyBibDtcbiAgcmV0dXJuIGxvID4+PiAwO1xufVxuZXhwb3J0cy5zdW02NF9sbyA9IHN1bTY0X2xvO1xuXG5mdW5jdGlvbiBzdW02NF80X2hpKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wsIGRoLCBkbCkge1xuICB2YXIgY2FycnkgPSAwO1xuICB2YXIgbG8gPSBhbDtcbiAgbG8gPSAobG8gKyBibCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgYWwgPyAxIDogMDtcbiAgbG8gPSAobG8gKyBjbCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgY2wgPyAxIDogMDtcbiAgbG8gPSAobG8gKyBkbCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgZGwgPyAxIDogMDtcblxuICB2YXIgaGkgPSBhaCArIGJoICsgY2ggKyBkaCArIGNhcnJ5O1xuICByZXR1cm4gaGkgPj4+IDA7XG59XG5leHBvcnRzLnN1bTY0XzRfaGkgPSBzdW02NF80X2hpO1xuXG5mdW5jdGlvbiBzdW02NF80X2xvKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wsIGRoLCBkbCkge1xuICB2YXIgbG8gPSBhbCArIGJsICsgY2wgKyBkbDtcbiAgcmV0dXJuIGxvID4+PiAwO1xufVxuZXhwb3J0cy5zdW02NF80X2xvID0gc3VtNjRfNF9sbztcblxuZnVuY3Rpb24gc3VtNjRfNV9oaShhaCwgYWwsIGJoLCBibCwgY2gsIGNsLCBkaCwgZGwsIGVoLCBlbCkge1xuICB2YXIgY2FycnkgPSAwO1xuICB2YXIgbG8gPSBhbDtcbiAgbG8gPSAobG8gKyBibCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgYWwgPyAxIDogMDtcbiAgbG8gPSAobG8gKyBjbCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgY2wgPyAxIDogMDtcbiAgbG8gPSAobG8gKyBkbCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgZGwgPyAxIDogMDtcbiAgbG8gPSAobG8gKyBlbCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgZWwgPyAxIDogMDtcblxuICB2YXIgaGkgPSBhaCArIGJoICsgY2ggKyBkaCArIGVoICsgY2Fycnk7XG4gIHJldHVybiBoaSA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtNjRfNV9oaSA9IHN1bTY0XzVfaGk7XG5cbmZ1bmN0aW9uIHN1bTY0XzVfbG8oYWgsIGFsLCBiaCwgYmwsIGNoLCBjbCwgZGgsIGRsLCBlaCwgZWwpIHtcbiAgdmFyIGxvID0gYWwgKyBibCArIGNsICsgZGwgKyBlbDtcblxuICByZXR1cm4gbG8gPj4+IDA7XG59XG5leHBvcnRzLnN1bTY0XzVfbG8gPSBzdW02NF81X2xvO1xuXG5mdW5jdGlvbiByb3RyNjRfaGkoYWgsIGFsLCBudW0pIHtcbiAgdmFyIHIgPSAoYWwgPDwgKDMyIC0gbnVtKSkgfCAoYWggPj4+IG51bSk7XG4gIHJldHVybiByID4+PiAwO1xufVxuZXhwb3J0cy5yb3RyNjRfaGkgPSByb3RyNjRfaGk7XG5cbmZ1bmN0aW9uIHJvdHI2NF9sbyhhaCwgYWwsIG51bSkge1xuICB2YXIgciA9IChhaCA8PCAoMzIgLSBudW0pKSB8IChhbCA+Pj4gbnVtKTtcbiAgcmV0dXJuIHIgPj4+IDA7XG59XG5leHBvcnRzLnJvdHI2NF9sbyA9IHJvdHI2NF9sbztcblxuZnVuY3Rpb24gc2hyNjRfaGkoYWgsIGFsLCBudW0pIHtcbiAgcmV0dXJuIGFoID4+PiBudW07XG59XG5leHBvcnRzLnNocjY0X2hpID0gc2hyNjRfaGk7XG5cbmZ1bmN0aW9uIHNocjY0X2xvKGFoLCBhbCwgbnVtKSB7XG4gIHZhciByID0gKGFoIDw8ICgzMiAtIG51bSkpIHwgKGFsID4+PiBudW0pO1xuICByZXR1cm4gciA+Pj4gMDtcbn1cbmV4cG9ydHMuc2hyNjRfbG8gPSBzaHI2NF9sbztcbiIsImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogW2pzLXNoYTNde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9lbW4xNzgvanMtc2hhM31cbiAqXG4gKiBAdmVyc2lvbiAwLjguMFxuICogQGF1dGhvciBDaGVuLCBZaS1DeXVhbiBbZW1uMTc4QGdtYWlsLmNvbV1cbiAqIEBjb3B5cmlnaHQgQ2hlbiwgWWktQ3l1YW4gMjAxNS0yMDE4XG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuLypqc2xpbnQgYml0d2lzZTogdHJ1ZSAqL1xuKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBJTlBVVF9FUlJPUiA9ICdpbnB1dCBpcyBpbnZhbGlkIHR5cGUnO1xuICB2YXIgRklOQUxJWkVfRVJST1IgPSAnZmluYWxpemUgYWxyZWFkeSBjYWxsZWQnO1xuICB2YXIgV0lORE9XID0gdHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCc7XG4gIHZhciByb290ID0gV0lORE9XID8gd2luZG93IDoge307XG4gIGlmIChyb290LkpTX1NIQTNfTk9fV0lORE9XKSB7XG4gICAgV0lORE9XID0gZmFsc2U7XG4gIH1cbiAgdmFyIFdFQl9XT1JLRVIgPSAhV0lORE9XICYmIHR5cGVvZiBzZWxmID09PSAnb2JqZWN0JztcbiAgdmFyIE5PREVfSlMgPSAhcm9vdC5KU19TSEEzX05PX05PREVfSlMgJiYgdHlwZW9mIHByb2Nlc3MgPT09ICdvYmplY3QnICYmIHByb2Nlc3MudmVyc2lvbnMgJiYgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlO1xuICBpZiAoTk9ERV9KUykge1xuICAgIHJvb3QgPSBnbG9iYWw7XG4gIH0gZWxzZSBpZiAoV0VCX1dPUktFUikge1xuICAgIHJvb3QgPSBzZWxmO1xuICB9XG4gIHZhciBDT01NT05fSlMgPSAhcm9vdC5KU19TSEEzX05PX0NPTU1PTl9KUyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cztcbiAgdmFyIEFNRCA9IHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZDtcbiAgdmFyIEFSUkFZX0JVRkZFUiA9ICFyb290LkpTX1NIQTNfTk9fQVJSQVlfQlVGRkVSICYmIHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCc7XG4gIHZhciBIRVhfQ0hBUlMgPSAnMDEyMzQ1Njc4OWFiY2RlZicuc3BsaXQoJycpO1xuICB2YXIgU0hBS0VfUEFERElORyA9IFszMSwgNzkzNiwgMjAzMTYxNiwgNTIwMDkzNjk2XTtcbiAgdmFyIENTSEFLRV9QQURESU5HID0gWzQsIDEwMjQsIDI2MjE0NCwgNjcxMDg4NjRdO1xuICB2YXIgS0VDQ0FLX1BBRERJTkcgPSBbMSwgMjU2LCA2NTUzNiwgMTY3NzcyMTZdO1xuICB2YXIgUEFERElORyA9IFs2LCAxNTM2LCAzOTMyMTYsIDEwMDY2MzI5Nl07XG4gIHZhciBTSElGVCA9IFswLCA4LCAxNiwgMjRdO1xuICB2YXIgUkMgPSBbMSwgMCwgMzI4OTgsIDAsIDMyOTA2LCAyMTQ3NDgzNjQ4LCAyMTQ3NTE2NDE2LCAyMTQ3NDgzNjQ4LCAzMjkwNywgMCwgMjE0NzQ4MzY0OSxcbiAgICAwLCAyMTQ3NTE2NTQ1LCAyMTQ3NDgzNjQ4LCAzMjc3NywgMjE0NzQ4MzY0OCwgMTM4LCAwLCAxMzYsIDAsIDIxNDc1MTY0MjUsIDAsXG4gICAgMjE0NzQ4MzY1OCwgMCwgMjE0NzUxNjU1NSwgMCwgMTM5LCAyMTQ3NDgzNjQ4LCAzMjkwNSwgMjE0NzQ4MzY0OCwgMzI3NzEsXG4gICAgMjE0NzQ4MzY0OCwgMzI3NzAsIDIxNDc0ODM2NDgsIDEyOCwgMjE0NzQ4MzY0OCwgMzI3NzgsIDAsIDIxNDc0ODM2NTgsIDIxNDc0ODM2NDgsXG4gICAgMjE0NzUxNjU0NSwgMjE0NzQ4MzY0OCwgMzI4OTYsIDIxNDc0ODM2NDgsIDIxNDc0ODM2NDksIDAsIDIxNDc1MTY0MjQsIDIxNDc0ODM2NDhdO1xuICB2YXIgQklUUyA9IFsyMjQsIDI1NiwgMzg0LCA1MTJdO1xuICB2YXIgU0hBS0VfQklUUyA9IFsxMjgsIDI1Nl07XG4gIHZhciBPVVRQVVRfVFlQRVMgPSBbJ2hleCcsICdidWZmZXInLCAnYXJyYXlCdWZmZXInLCAnYXJyYXknLCAnZGlnZXN0J107XG4gIHZhciBDU0hBS0VfQllURVBBRCA9IHtcbiAgICAnMTI4JzogMTY4LFxuICAgICcyNTYnOiAxMzZcbiAgfTtcblxuICBpZiAocm9vdC5KU19TSEEzX05PX05PREVfSlMgfHwgIUFycmF5LmlzQXJyYXkpIHtcbiAgICBBcnJheS5pc0FycmF5ID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBBcnJheV0nO1xuICAgIH07XG4gIH1cblxuICBpZiAoQVJSQVlfQlVGRkVSICYmIChyb290LkpTX1NIQTNfTk9fQVJSQVlfQlVGRkVSX0lTX1ZJRVcgfHwgIUFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICBBcnJheUJ1ZmZlci5pc1ZpZXcgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgb2JqLmJ1ZmZlciAmJiBvYmouYnVmZmVyLmNvbnN0cnVjdG9yID09PSBBcnJheUJ1ZmZlcjtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGNyZWF0ZU91dHB1dE1ldGhvZCA9IGZ1bmN0aW9uIChiaXRzLCBwYWRkaW5nLCBvdXRwdXRUeXBlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICByZXR1cm4gbmV3IEtlY2NhayhiaXRzLCBwYWRkaW5nLCBiaXRzKS51cGRhdGUobWVzc2FnZSlbb3V0cHV0VHlwZV0oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBjcmVhdGVTaGFrZU91dHB1dE1ldGhvZCA9IGZ1bmN0aW9uIChiaXRzLCBwYWRkaW5nLCBvdXRwdXRUeXBlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtZXNzYWdlLCBvdXRwdXRCaXRzKSB7XG4gICAgICByZXR1cm4gbmV3IEtlY2NhayhiaXRzLCBwYWRkaW5nLCBvdXRwdXRCaXRzKS51cGRhdGUobWVzc2FnZSlbb3V0cHV0VHlwZV0oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBjcmVhdGVDc2hha2VPdXRwdXRNZXRob2QgPSBmdW5jdGlvbiAoYml0cywgcGFkZGluZywgb3V0cHV0VHlwZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAobWVzc2FnZSwgb3V0cHV0Qml0cywgbiwgcykge1xuICAgICAgcmV0dXJuIG1ldGhvZHNbJ2NzaGFrZScgKyBiaXRzXS51cGRhdGUobWVzc2FnZSwgb3V0cHV0Qml0cywgbiwgcylbb3V0cHV0VHlwZV0oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBjcmVhdGVLbWFjT3V0cHV0TWV0aG9kID0gZnVuY3Rpb24gKGJpdHMsIHBhZGRpbmcsIG91dHB1dFR5cGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGtleSwgbWVzc2FnZSwgb3V0cHV0Qml0cywgcykge1xuICAgICAgcmV0dXJuIG1ldGhvZHNbJ2ttYWMnICsgYml0c10udXBkYXRlKGtleSwgbWVzc2FnZSwgb3V0cHV0Qml0cywgcylbb3V0cHV0VHlwZV0oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBjcmVhdGVPdXRwdXRNZXRob2RzID0gZnVuY3Rpb24gKG1ldGhvZCwgY3JlYXRlTWV0aG9kLCBiaXRzLCBwYWRkaW5nKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBPVVRQVVRfVFlQRVMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciB0eXBlID0gT1VUUFVUX1RZUEVTW2ldO1xuICAgICAgbWV0aG9kW3R5cGVdID0gY3JlYXRlTWV0aG9kKGJpdHMsIHBhZGRpbmcsIHR5cGUpO1xuICAgIH1cbiAgICByZXR1cm4gbWV0aG9kO1xuICB9O1xuXG4gIHZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoYml0cywgcGFkZGluZykge1xuICAgIHZhciBtZXRob2QgPSBjcmVhdGVPdXRwdXRNZXRob2QoYml0cywgcGFkZGluZywgJ2hleCcpO1xuICAgIG1ldGhvZC5jcmVhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbmV3IEtlY2NhayhiaXRzLCBwYWRkaW5nLCBiaXRzKTtcbiAgICB9O1xuICAgIG1ldGhvZC51cGRhdGUgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgcmV0dXJuIG1ldGhvZC5jcmVhdGUoKS51cGRhdGUobWVzc2FnZSk7XG4gICAgfTtcbiAgICByZXR1cm4gY3JlYXRlT3V0cHV0TWV0aG9kcyhtZXRob2QsIGNyZWF0ZU91dHB1dE1ldGhvZCwgYml0cywgcGFkZGluZyk7XG4gIH07XG5cbiAgdmFyIGNyZWF0ZVNoYWtlTWV0aG9kID0gZnVuY3Rpb24gKGJpdHMsIHBhZGRpbmcpIHtcbiAgICB2YXIgbWV0aG9kID0gY3JlYXRlU2hha2VPdXRwdXRNZXRob2QoYml0cywgcGFkZGluZywgJ2hleCcpO1xuICAgIG1ldGhvZC5jcmVhdGUgPSBmdW5jdGlvbiAob3V0cHV0Qml0cykge1xuICAgICAgcmV0dXJuIG5ldyBLZWNjYWsoYml0cywgcGFkZGluZywgb3V0cHV0Qml0cyk7XG4gICAgfTtcbiAgICBtZXRob2QudXBkYXRlID0gZnVuY3Rpb24gKG1lc3NhZ2UsIG91dHB1dEJpdHMpIHtcbiAgICAgIHJldHVybiBtZXRob2QuY3JlYXRlKG91dHB1dEJpdHMpLnVwZGF0ZShtZXNzYWdlKTtcbiAgICB9O1xuICAgIHJldHVybiBjcmVhdGVPdXRwdXRNZXRob2RzKG1ldGhvZCwgY3JlYXRlU2hha2VPdXRwdXRNZXRob2QsIGJpdHMsIHBhZGRpbmcpO1xuICB9O1xuXG4gIHZhciBjcmVhdGVDc2hha2VNZXRob2QgPSBmdW5jdGlvbiAoYml0cywgcGFkZGluZykge1xuICAgIHZhciB3ID0gQ1NIQUtFX0JZVEVQQURbYml0c107XG4gICAgdmFyIG1ldGhvZCA9IGNyZWF0ZUNzaGFrZU91dHB1dE1ldGhvZChiaXRzLCBwYWRkaW5nLCAnaGV4Jyk7XG4gICAgbWV0aG9kLmNyZWF0ZSA9IGZ1bmN0aW9uIChvdXRwdXRCaXRzLCBuLCBzKSB7XG4gICAgICBpZiAoIW4gJiYgIXMpIHtcbiAgICAgICAgcmV0dXJuIG1ldGhvZHNbJ3NoYWtlJyArIGJpdHNdLmNyZWF0ZShvdXRwdXRCaXRzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgS2VjY2FrKGJpdHMsIHBhZGRpbmcsIG91dHB1dEJpdHMpLmJ5dGVwYWQoW24sIHNdLCB3KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIG1ldGhvZC51cGRhdGUgPSBmdW5jdGlvbiAobWVzc2FnZSwgb3V0cHV0Qml0cywgbiwgcykge1xuICAgICAgcmV0dXJuIG1ldGhvZC5jcmVhdGUob3V0cHV0Qml0cywgbiwgcykudXBkYXRlKG1lc3NhZ2UpO1xuICAgIH07XG4gICAgcmV0dXJuIGNyZWF0ZU91dHB1dE1ldGhvZHMobWV0aG9kLCBjcmVhdGVDc2hha2VPdXRwdXRNZXRob2QsIGJpdHMsIHBhZGRpbmcpO1xuICB9O1xuXG4gIHZhciBjcmVhdGVLbWFjTWV0aG9kID0gZnVuY3Rpb24gKGJpdHMsIHBhZGRpbmcpIHtcbiAgICB2YXIgdyA9IENTSEFLRV9CWVRFUEFEW2JpdHNdO1xuICAgIHZhciBtZXRob2QgPSBjcmVhdGVLbWFjT3V0cHV0TWV0aG9kKGJpdHMsIHBhZGRpbmcsICdoZXgnKTtcbiAgICBtZXRob2QuY3JlYXRlID0gZnVuY3Rpb24gKGtleSwgb3V0cHV0Qml0cywgcykge1xuICAgICAgcmV0dXJuIG5ldyBLbWFjKGJpdHMsIHBhZGRpbmcsIG91dHB1dEJpdHMpLmJ5dGVwYWQoWydLTUFDJywgc10sIHcpLmJ5dGVwYWQoW2tleV0sIHcpO1xuICAgIH07XG4gICAgbWV0aG9kLnVwZGF0ZSA9IGZ1bmN0aW9uIChrZXksIG1lc3NhZ2UsIG91dHB1dEJpdHMsIHMpIHtcbiAgICAgIHJldHVybiBtZXRob2QuY3JlYXRlKGtleSwgb3V0cHV0Qml0cywgcykudXBkYXRlKG1lc3NhZ2UpO1xuICAgIH07XG4gICAgcmV0dXJuIGNyZWF0ZU91dHB1dE1ldGhvZHMobWV0aG9kLCBjcmVhdGVLbWFjT3V0cHV0TWV0aG9kLCBiaXRzLCBwYWRkaW5nKTtcbiAgfTtcblxuICB2YXIgYWxnb3JpdGhtcyA9IFtcbiAgICB7IG5hbWU6ICdrZWNjYWsnLCBwYWRkaW5nOiBLRUNDQUtfUEFERElORywgYml0czogQklUUywgY3JlYXRlTWV0aG9kOiBjcmVhdGVNZXRob2QgfSxcbiAgICB7IG5hbWU6ICdzaGEzJywgcGFkZGluZzogUEFERElORywgYml0czogQklUUywgY3JlYXRlTWV0aG9kOiBjcmVhdGVNZXRob2QgfSxcbiAgICB7IG5hbWU6ICdzaGFrZScsIHBhZGRpbmc6IFNIQUtFX1BBRERJTkcsIGJpdHM6IFNIQUtFX0JJVFMsIGNyZWF0ZU1ldGhvZDogY3JlYXRlU2hha2VNZXRob2QgfSxcbiAgICB7IG5hbWU6ICdjc2hha2UnLCBwYWRkaW5nOiBDU0hBS0VfUEFERElORywgYml0czogU0hBS0VfQklUUywgY3JlYXRlTWV0aG9kOiBjcmVhdGVDc2hha2VNZXRob2QgfSxcbiAgICB7IG5hbWU6ICdrbWFjJywgcGFkZGluZzogQ1NIQUtFX1BBRERJTkcsIGJpdHM6IFNIQUtFX0JJVFMsIGNyZWF0ZU1ldGhvZDogY3JlYXRlS21hY01ldGhvZCB9XG4gIF07XG5cbiAgdmFyIG1ldGhvZHMgPSB7fSwgbWV0aG9kTmFtZXMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFsZ29yaXRobXMubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYWxnb3JpdGhtID0gYWxnb3JpdGhtc1tpXTtcbiAgICB2YXIgYml0cyA9IGFsZ29yaXRobS5iaXRzO1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgYml0cy5sZW5ndGg7ICsraikge1xuICAgICAgdmFyIG1ldGhvZE5hbWUgPSBhbGdvcml0aG0ubmFtZSArICdfJyArIGJpdHNbal07XG4gICAgICBtZXRob2ROYW1lcy5wdXNoKG1ldGhvZE5hbWUpO1xuICAgICAgbWV0aG9kc1ttZXRob2ROYW1lXSA9IGFsZ29yaXRobS5jcmVhdGVNZXRob2QoYml0c1tqXSwgYWxnb3JpdGhtLnBhZGRpbmcpO1xuICAgICAgaWYgKGFsZ29yaXRobS5uYW1lICE9PSAnc2hhMycpIHtcbiAgICAgICAgdmFyIG5ld01ldGhvZE5hbWUgPSBhbGdvcml0aG0ubmFtZSArIGJpdHNbal07XG4gICAgICAgIG1ldGhvZE5hbWVzLnB1c2gobmV3TWV0aG9kTmFtZSk7XG4gICAgICAgIG1ldGhvZHNbbmV3TWV0aG9kTmFtZV0gPSBtZXRob2RzW21ldGhvZE5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIEtlY2NhayhiaXRzLCBwYWRkaW5nLCBvdXRwdXRCaXRzKSB7XG4gICAgdGhpcy5ibG9ja3MgPSBbXTtcbiAgICB0aGlzLnMgPSBbXTtcbiAgICB0aGlzLnBhZGRpbmcgPSBwYWRkaW5nO1xuICAgIHRoaXMub3V0cHV0Qml0cyA9IG91dHB1dEJpdHM7XG4gICAgdGhpcy5yZXNldCA9IHRydWU7XG4gICAgdGhpcy5maW5hbGl6ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmJsb2NrID0gMDtcbiAgICB0aGlzLnN0YXJ0ID0gMDtcbiAgICB0aGlzLmJsb2NrQ291bnQgPSAoMTYwMCAtIChiaXRzIDw8IDEpKSA+PiA1O1xuICAgIHRoaXMuYnl0ZUNvdW50ID0gdGhpcy5ibG9ja0NvdW50IDw8IDI7XG4gICAgdGhpcy5vdXRwdXRCbG9ja3MgPSBvdXRwdXRCaXRzID4+IDU7XG4gICAgdGhpcy5leHRyYUJ5dGVzID0gKG91dHB1dEJpdHMgJiAzMSkgPj4gMztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNTA7ICsraSkge1xuICAgICAgdGhpcy5zW2ldID0gMDtcbiAgICB9XG4gIH1cblxuICBLZWNjYWsucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgaWYgKHRoaXMuZmluYWxpemVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoRklOQUxJWkVfRVJST1IpO1xuICAgIH1cbiAgICB2YXIgbm90U3RyaW5nLCB0eXBlID0gdHlwZW9mIG1lc3NhZ2U7XG4gICAgaWYgKHR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAodHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoSU5QVVRfRVJST1IpO1xuICAgICAgICB9IGVsc2UgaWYgKEFSUkFZX0JVRkZFUiAmJiBtZXNzYWdlLmNvbnN0cnVjdG9yID09PSBBcnJheUJ1ZmZlcikge1xuICAgICAgICAgIG1lc3NhZ2UgPSBuZXcgVWludDhBcnJheShtZXNzYWdlKTtcbiAgICAgICAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheShtZXNzYWdlKSkge1xuICAgICAgICAgIGlmICghQVJSQVlfQlVGRkVSIHx8ICFBcnJheUJ1ZmZlci5pc1ZpZXcobWVzc2FnZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihJTlBVVF9FUlJPUik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoSU5QVVRfRVJST1IpO1xuICAgICAgfVxuICAgICAgbm90U3RyaW5nID0gdHJ1ZTtcbiAgICB9XG4gICAgdmFyIGJsb2NrcyA9IHRoaXMuYmxvY2tzLCBieXRlQ291bnQgPSB0aGlzLmJ5dGVDb3VudCwgbGVuZ3RoID0gbWVzc2FnZS5sZW5ndGgsXG4gICAgICBibG9ja0NvdW50ID0gdGhpcy5ibG9ja0NvdW50LCBpbmRleCA9IDAsIHMgPSB0aGlzLnMsIGksIGNvZGU7XG5cbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmICh0aGlzLnJlc2V0KSB7XG4gICAgICAgIHRoaXMucmVzZXQgPSBmYWxzZTtcbiAgICAgICAgYmxvY2tzWzBdID0gdGhpcy5ibG9jaztcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGJsb2NrQ291bnQgKyAxOyArK2kpIHtcbiAgICAgICAgICBibG9ja3NbaV0gPSAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobm90U3RyaW5nKSB7XG4gICAgICAgIGZvciAoaSA9IHRoaXMuc3RhcnQ7IGluZGV4IDwgbGVuZ3RoICYmIGkgPCBieXRlQ291bnQ7ICsraW5kZXgpIHtcbiAgICAgICAgICBibG9ja3NbaSA+PiAyXSB8PSBtZXNzYWdlW2luZGV4XSA8PCBTSElGVFtpKysgJiAzXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChpID0gdGhpcy5zdGFydDsgaW5kZXggPCBsZW5ndGggJiYgaSA8IGJ5dGVDb3VudDsgKytpbmRleCkge1xuICAgICAgICAgIGNvZGUgPSBtZXNzYWdlLmNoYXJDb2RlQXQoaW5kZXgpO1xuICAgICAgICAgIGlmIChjb2RlIDwgMHg4MCkge1xuICAgICAgICAgICAgYmxvY2tzW2kgPj4gMl0gfD0gY29kZSA8PCBTSElGVFtpKysgJiAzXTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNvZGUgPCAweDgwMCkge1xuICAgICAgICAgICAgYmxvY2tzW2kgPj4gMl0gfD0gKDB4YzAgfCAoY29kZSA+PiA2KSkgPDwgU0hJRlRbaSsrICYgM107XG4gICAgICAgICAgICBibG9ja3NbaSA+PiAyXSB8PSAoMHg4MCB8IChjb2RlICYgMHgzZikpIDw8IFNISUZUW2krKyAmIDNdO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY29kZSA8IDB4ZDgwMCB8fCBjb2RlID49IDB4ZTAwMCkge1xuICAgICAgICAgICAgYmxvY2tzW2kgPj4gMl0gfD0gKDB4ZTAgfCAoY29kZSA+PiAxMikpIDw8IFNISUZUW2krKyAmIDNdO1xuICAgICAgICAgICAgYmxvY2tzW2kgPj4gMl0gfD0gKDB4ODAgfCAoKGNvZGUgPj4gNikgJiAweDNmKSkgPDwgU0hJRlRbaSsrICYgM107XG4gICAgICAgICAgICBibG9ja3NbaSA+PiAyXSB8PSAoMHg4MCB8IChjb2RlICYgMHgzZikpIDw8IFNISUZUW2krKyAmIDNdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb2RlID0gMHgxMDAwMCArICgoKGNvZGUgJiAweDNmZikgPDwgMTApIHwgKG1lc3NhZ2UuY2hhckNvZGVBdCgrK2luZGV4KSAmIDB4M2ZmKSk7XG4gICAgICAgICAgICBibG9ja3NbaSA+PiAyXSB8PSAoMHhmMCB8IChjb2RlID4+IDE4KSkgPDwgU0hJRlRbaSsrICYgM107XG4gICAgICAgICAgICBibG9ja3NbaSA+PiAyXSB8PSAoMHg4MCB8ICgoY29kZSA+PiAxMikgJiAweDNmKSkgPDwgU0hJRlRbaSsrICYgM107XG4gICAgICAgICAgICBibG9ja3NbaSA+PiAyXSB8PSAoMHg4MCB8ICgoY29kZSA+PiA2KSAmIDB4M2YpKSA8PCBTSElGVFtpKysgJiAzXTtcbiAgICAgICAgICAgIGJsb2Nrc1tpID4+IDJdIHw9ICgweDgwIHwgKGNvZGUgJiAweDNmKSkgPDwgU0hJRlRbaSsrICYgM107XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmxhc3RCeXRlSW5kZXggPSBpO1xuICAgICAgaWYgKGkgPj0gYnl0ZUNvdW50KSB7XG4gICAgICAgIHRoaXMuc3RhcnQgPSBpIC0gYnl0ZUNvdW50O1xuICAgICAgICB0aGlzLmJsb2NrID0gYmxvY2tzW2Jsb2NrQ291bnRdO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYmxvY2tDb3VudDsgKytpKSB7XG4gICAgICAgICAgc1tpXSBePSBibG9ja3NbaV07XG4gICAgICAgIH1cbiAgICAgICAgZihzKTtcbiAgICAgICAgdGhpcy5yZXNldCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnN0YXJ0ID0gaTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgS2VjY2FrLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiAoeCwgcmlnaHQpIHtcbiAgICB2YXIgbyA9IHggJiAyNTUsIG4gPSAxO1xuICAgIHZhciBieXRlcyA9IFtvXTtcbiAgICB4ID0geCA+PiA4O1xuICAgIG8gPSB4ICYgMjU1O1xuICAgIHdoaWxlIChvID4gMCkge1xuICAgICAgYnl0ZXMudW5zaGlmdChvKTtcbiAgICAgIHggPSB4ID4+IDg7XG4gICAgICBvID0geCAmIDI1NTtcbiAgICAgICsrbjtcbiAgICB9XG4gICAgaWYgKHJpZ2h0KSB7XG4gICAgICBieXRlcy5wdXNoKG4pO1xuICAgIH0gZWxzZSB7XG4gICAgICBieXRlcy51bnNoaWZ0KG4pO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZShieXRlcyk7XG4gICAgcmV0dXJuIGJ5dGVzLmxlbmd0aDtcbiAgfTtcblxuICBLZWNjYWsucHJvdG90eXBlLmVuY29kZVN0cmluZyA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICB2YXIgbm90U3RyaW5nLCB0eXBlID0gdHlwZW9mIHN0cjtcbiAgICBpZiAodHlwZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIGlmICh0eXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAoc3RyID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKElOUFVUX0VSUk9SKTtcbiAgICAgICAgfSBlbHNlIGlmIChBUlJBWV9CVUZGRVIgJiYgc3RyLmNvbnN0cnVjdG9yID09PSBBcnJheUJ1ZmZlcikge1xuICAgICAgICAgIHN0ciA9IG5ldyBVaW50OEFycmF5KHN0cik7XG4gICAgICAgIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkoc3RyKSkge1xuICAgICAgICAgIGlmICghQVJSQVlfQlVGRkVSIHx8ICFBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKElOUFVUX0VSUk9SKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihJTlBVVF9FUlJPUik7XG4gICAgICB9XG4gICAgICBub3RTdHJpbmcgPSB0cnVlO1xuICAgIH1cbiAgICB2YXIgYnl0ZXMgPSAwLCBsZW5ndGggPSBzdHIubGVuZ3RoO1xuICAgIGlmIChub3RTdHJpbmcpIHtcbiAgICAgIGJ5dGVzID0gbGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgY29kZSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICBpZiAoY29kZSA8IDB4ODApIHtcbiAgICAgICAgICBieXRlcyArPSAxO1xuICAgICAgICB9IGVsc2UgaWYgKGNvZGUgPCAweDgwMCkge1xuICAgICAgICAgIGJ5dGVzICs9IDI7XG4gICAgICAgIH0gZWxzZSBpZiAoY29kZSA8IDB4ZDgwMCB8fCBjb2RlID49IDB4ZTAwMCkge1xuICAgICAgICAgIGJ5dGVzICs9IDM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29kZSA9IDB4MTAwMDAgKyAoKChjb2RlICYgMHgzZmYpIDw8IDEwKSB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHgzZmYpKTtcbiAgICAgICAgICBieXRlcyArPSA0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGJ5dGVzICs9IHRoaXMuZW5jb2RlKGJ5dGVzICogOCk7XG4gICAgdGhpcy51cGRhdGUoc3RyKTtcbiAgICByZXR1cm4gYnl0ZXM7XG4gIH07XG5cbiAgS2VjY2FrLnByb3RvdHlwZS5ieXRlcGFkID0gZnVuY3Rpb24gKHN0cnMsIHcpIHtcbiAgICB2YXIgYnl0ZXMgPSB0aGlzLmVuY29kZSh3KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cnMubGVuZ3RoOyArK2kpIHtcbiAgICAgIGJ5dGVzICs9IHRoaXMuZW5jb2RlU3RyaW5nKHN0cnNbaV0pO1xuICAgIH1cbiAgICB2YXIgcGFkZGluZ0J5dGVzID0gdyAtIGJ5dGVzICUgdztcbiAgICB2YXIgemVyb3MgPSBbXTtcbiAgICB6ZXJvcy5sZW5ndGggPSBwYWRkaW5nQnl0ZXM7XG4gICAgdGhpcy51cGRhdGUoemVyb3MpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEtlY2Nhay5wcm90b3R5cGUuZmluYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuZmluYWxpemVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuZmluYWxpemVkID0gdHJ1ZTtcbiAgICB2YXIgYmxvY2tzID0gdGhpcy5ibG9ja3MsIGkgPSB0aGlzLmxhc3RCeXRlSW5kZXgsIGJsb2NrQ291bnQgPSB0aGlzLmJsb2NrQ291bnQsIHMgPSB0aGlzLnM7XG4gICAgYmxvY2tzW2kgPj4gMl0gfD0gdGhpcy5wYWRkaW5nW2kgJiAzXTtcbiAgICBpZiAodGhpcy5sYXN0Qnl0ZUluZGV4ID09PSB0aGlzLmJ5dGVDb3VudCkge1xuICAgICAgYmxvY2tzWzBdID0gYmxvY2tzW2Jsb2NrQ291bnRdO1xuICAgICAgZm9yIChpID0gMTsgaSA8IGJsb2NrQ291bnQgKyAxOyArK2kpIHtcbiAgICAgICAgYmxvY2tzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG4gICAgYmxvY2tzW2Jsb2NrQ291bnQgLSAxXSB8PSAweDgwMDAwMDAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCBibG9ja0NvdW50OyArK2kpIHtcbiAgICAgIHNbaV0gXj0gYmxvY2tzW2ldO1xuICAgIH1cbiAgICBmKHMpO1xuICB9O1xuXG4gIEtlY2Nhay5wcm90b3R5cGUudG9TdHJpbmcgPSBLZWNjYWsucHJvdG90eXBlLmhleCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZpbmFsaXplKCk7XG5cbiAgICB2YXIgYmxvY2tDb3VudCA9IHRoaXMuYmxvY2tDb3VudCwgcyA9IHRoaXMucywgb3V0cHV0QmxvY2tzID0gdGhpcy5vdXRwdXRCbG9ja3MsXG4gICAgICBleHRyYUJ5dGVzID0gdGhpcy5leHRyYUJ5dGVzLCBpID0gMCwgaiA9IDA7XG4gICAgdmFyIGhleCA9ICcnLCBibG9jaztcbiAgICB3aGlsZSAoaiA8IG91dHB1dEJsb2Nrcykge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGJsb2NrQ291bnQgJiYgaiA8IG91dHB1dEJsb2NrczsgKytpLCArK2opIHtcbiAgICAgICAgYmxvY2sgPSBzW2ldO1xuICAgICAgICBoZXggKz0gSEVYX0NIQVJTWyhibG9jayA+PiA0KSAmIDB4MEZdICsgSEVYX0NIQVJTW2Jsb2NrICYgMHgwRl0gK1xuICAgICAgICAgIEhFWF9DSEFSU1soYmxvY2sgPj4gMTIpICYgMHgwRl0gKyBIRVhfQ0hBUlNbKGJsb2NrID4+IDgpICYgMHgwRl0gK1xuICAgICAgICAgIEhFWF9DSEFSU1soYmxvY2sgPj4gMjApICYgMHgwRl0gKyBIRVhfQ0hBUlNbKGJsb2NrID4+IDE2KSAmIDB4MEZdICtcbiAgICAgICAgICBIRVhfQ0hBUlNbKGJsb2NrID4+IDI4KSAmIDB4MEZdICsgSEVYX0NIQVJTWyhibG9jayA+PiAyNCkgJiAweDBGXTtcbiAgICAgIH1cbiAgICAgIGlmIChqICUgYmxvY2tDb3VudCA9PT0gMCkge1xuICAgICAgICBmKHMpO1xuICAgICAgICBpID0gMDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGV4dHJhQnl0ZXMpIHtcbiAgICAgIGJsb2NrID0gc1tpXTtcbiAgICAgIGhleCArPSBIRVhfQ0hBUlNbKGJsb2NrID4+IDQpICYgMHgwRl0gKyBIRVhfQ0hBUlNbYmxvY2sgJiAweDBGXTtcbiAgICAgIGlmIChleHRyYUJ5dGVzID4gMSkge1xuICAgICAgICBoZXggKz0gSEVYX0NIQVJTWyhibG9jayA+PiAxMikgJiAweDBGXSArIEhFWF9DSEFSU1soYmxvY2sgPj4gOCkgJiAweDBGXTtcbiAgICAgIH1cbiAgICAgIGlmIChleHRyYUJ5dGVzID4gMikge1xuICAgICAgICBoZXggKz0gSEVYX0NIQVJTWyhibG9jayA+PiAyMCkgJiAweDBGXSArIEhFWF9DSEFSU1soYmxvY2sgPj4gMTYpICYgMHgwRl07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBoZXg7XG4gIH07XG5cbiAgS2VjY2FrLnByb3RvdHlwZS5hcnJheUJ1ZmZlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZpbmFsaXplKCk7XG5cbiAgICB2YXIgYmxvY2tDb3VudCA9IHRoaXMuYmxvY2tDb3VudCwgcyA9IHRoaXMucywgb3V0cHV0QmxvY2tzID0gdGhpcy5vdXRwdXRCbG9ja3MsXG4gICAgICBleHRyYUJ5dGVzID0gdGhpcy5leHRyYUJ5dGVzLCBpID0gMCwgaiA9IDA7XG4gICAgdmFyIGJ5dGVzID0gdGhpcy5vdXRwdXRCaXRzID4+IDM7XG4gICAgdmFyIGJ1ZmZlcjtcbiAgICBpZiAoZXh0cmFCeXRlcykge1xuICAgICAgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKChvdXRwdXRCbG9ja3MgKyAxKSA8PCAyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGJ5dGVzKTtcbiAgICB9XG4gICAgdmFyIGFycmF5ID0gbmV3IFVpbnQzMkFycmF5KGJ1ZmZlcik7XG4gICAgd2hpbGUgKGogPCBvdXRwdXRCbG9ja3MpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBibG9ja0NvdW50ICYmIGogPCBvdXRwdXRCbG9ja3M7ICsraSwgKytqKSB7XG4gICAgICAgIGFycmF5W2pdID0gc1tpXTtcbiAgICAgIH1cbiAgICAgIGlmIChqICUgYmxvY2tDb3VudCA9PT0gMCkge1xuICAgICAgICBmKHMpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZXh0cmFCeXRlcykge1xuICAgICAgYXJyYXlbaV0gPSBzW2ldO1xuICAgICAgYnVmZmVyID0gYnVmZmVyLnNsaWNlKDAsIGJ5dGVzKTtcbiAgICB9XG4gICAgcmV0dXJuIGJ1ZmZlcjtcbiAgfTtcblxuICBLZWNjYWsucHJvdG90eXBlLmJ1ZmZlciA9IEtlY2Nhay5wcm90b3R5cGUuYXJyYXlCdWZmZXI7XG5cbiAgS2VjY2FrLnByb3RvdHlwZS5kaWdlc3QgPSBLZWNjYWsucHJvdG90eXBlLmFycmF5ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZmluYWxpemUoKTtcblxuICAgIHZhciBibG9ja0NvdW50ID0gdGhpcy5ibG9ja0NvdW50LCBzID0gdGhpcy5zLCBvdXRwdXRCbG9ja3MgPSB0aGlzLm91dHB1dEJsb2NrcyxcbiAgICAgIGV4dHJhQnl0ZXMgPSB0aGlzLmV4dHJhQnl0ZXMsIGkgPSAwLCBqID0gMDtcbiAgICB2YXIgYXJyYXkgPSBbXSwgb2Zmc2V0LCBibG9jaztcbiAgICB3aGlsZSAoaiA8IG91dHB1dEJsb2Nrcykge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGJsb2NrQ291bnQgJiYgaiA8IG91dHB1dEJsb2NrczsgKytpLCArK2opIHtcbiAgICAgICAgb2Zmc2V0ID0gaiA8PCAyO1xuICAgICAgICBibG9jayA9IHNbaV07XG4gICAgICAgIGFycmF5W29mZnNldF0gPSBibG9jayAmIDB4RkY7XG4gICAgICAgIGFycmF5W29mZnNldCArIDFdID0gKGJsb2NrID4+IDgpICYgMHhGRjtcbiAgICAgICAgYXJyYXlbb2Zmc2V0ICsgMl0gPSAoYmxvY2sgPj4gMTYpICYgMHhGRjtcbiAgICAgICAgYXJyYXlbb2Zmc2V0ICsgM10gPSAoYmxvY2sgPj4gMjQpICYgMHhGRjtcbiAgICAgIH1cbiAgICAgIGlmIChqICUgYmxvY2tDb3VudCA9PT0gMCkge1xuICAgICAgICBmKHMpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZXh0cmFCeXRlcykge1xuICAgICAgb2Zmc2V0ID0gaiA8PCAyO1xuICAgICAgYmxvY2sgPSBzW2ldO1xuICAgICAgYXJyYXlbb2Zmc2V0XSA9IGJsb2NrICYgMHhGRjtcbiAgICAgIGlmIChleHRyYUJ5dGVzID4gMSkge1xuICAgICAgICBhcnJheVtvZmZzZXQgKyAxXSA9IChibG9jayA+PiA4KSAmIDB4RkY7XG4gICAgICB9XG4gICAgICBpZiAoZXh0cmFCeXRlcyA+IDIpIHtcbiAgICAgICAgYXJyYXlbb2Zmc2V0ICsgMl0gPSAoYmxvY2sgPj4gMTYpICYgMHhGRjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEttYWMoYml0cywgcGFkZGluZywgb3V0cHV0Qml0cykge1xuICAgIEtlY2Nhay5jYWxsKHRoaXMsIGJpdHMsIHBhZGRpbmcsIG91dHB1dEJpdHMpO1xuICB9XG5cbiAgS21hYy5wcm90b3R5cGUgPSBuZXcgS2VjY2FrKCk7XG5cbiAgS21hYy5wcm90b3R5cGUuZmluYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5lbmNvZGUodGhpcy5vdXRwdXRCaXRzLCB0cnVlKTtcbiAgICByZXR1cm4gS2VjY2FrLnByb3RvdHlwZS5maW5hbGl6ZS5jYWxsKHRoaXMpO1xuICB9O1xuXG4gIHZhciBmID0gZnVuY3Rpb24gKHMpIHtcbiAgICB2YXIgaCwgbCwgbiwgYzAsIGMxLCBjMiwgYzMsIGM0LCBjNSwgYzYsIGM3LCBjOCwgYzksXG4gICAgICBiMCwgYjEsIGIyLCBiMywgYjQsIGI1LCBiNiwgYjcsIGI4LCBiOSwgYjEwLCBiMTEsIGIxMiwgYjEzLCBiMTQsIGIxNSwgYjE2LCBiMTcsXG4gICAgICBiMTgsIGIxOSwgYjIwLCBiMjEsIGIyMiwgYjIzLCBiMjQsIGIyNSwgYjI2LCBiMjcsIGIyOCwgYjI5LCBiMzAsIGIzMSwgYjMyLCBiMzMsXG4gICAgICBiMzQsIGIzNSwgYjM2LCBiMzcsIGIzOCwgYjM5LCBiNDAsIGI0MSwgYjQyLCBiNDMsIGI0NCwgYjQ1LCBiNDYsIGI0NywgYjQ4LCBiNDk7XG4gICAgZm9yIChuID0gMDsgbiA8IDQ4OyBuICs9IDIpIHtcbiAgICAgIGMwID0gc1swXSBeIHNbMTBdIF4gc1syMF0gXiBzWzMwXSBeIHNbNDBdO1xuICAgICAgYzEgPSBzWzFdIF4gc1sxMV0gXiBzWzIxXSBeIHNbMzFdIF4gc1s0MV07XG4gICAgICBjMiA9IHNbMl0gXiBzWzEyXSBeIHNbMjJdIF4gc1szMl0gXiBzWzQyXTtcbiAgICAgIGMzID0gc1szXSBeIHNbMTNdIF4gc1syM10gXiBzWzMzXSBeIHNbNDNdO1xuICAgICAgYzQgPSBzWzRdIF4gc1sxNF0gXiBzWzI0XSBeIHNbMzRdIF4gc1s0NF07XG4gICAgICBjNSA9IHNbNV0gXiBzWzE1XSBeIHNbMjVdIF4gc1szNV0gXiBzWzQ1XTtcbiAgICAgIGM2ID0gc1s2XSBeIHNbMTZdIF4gc1syNl0gXiBzWzM2XSBeIHNbNDZdO1xuICAgICAgYzcgPSBzWzddIF4gc1sxN10gXiBzWzI3XSBeIHNbMzddIF4gc1s0N107XG4gICAgICBjOCA9IHNbOF0gXiBzWzE4XSBeIHNbMjhdIF4gc1szOF0gXiBzWzQ4XTtcbiAgICAgIGM5ID0gc1s5XSBeIHNbMTldIF4gc1syOV0gXiBzWzM5XSBeIHNbNDldO1xuXG4gICAgICBoID0gYzggXiAoKGMyIDw8IDEpIHwgKGMzID4+PiAzMSkpO1xuICAgICAgbCA9IGM5IF4gKChjMyA8PCAxKSB8IChjMiA+Pj4gMzEpKTtcbiAgICAgIHNbMF0gXj0gaDtcbiAgICAgIHNbMV0gXj0gbDtcbiAgICAgIHNbMTBdIF49IGg7XG4gICAgICBzWzExXSBePSBsO1xuICAgICAgc1syMF0gXj0gaDtcbiAgICAgIHNbMjFdIF49IGw7XG4gICAgICBzWzMwXSBePSBoO1xuICAgICAgc1szMV0gXj0gbDtcbiAgICAgIHNbNDBdIF49IGg7XG4gICAgICBzWzQxXSBePSBsO1xuICAgICAgaCA9IGMwIF4gKChjNCA8PCAxKSB8IChjNSA+Pj4gMzEpKTtcbiAgICAgIGwgPSBjMSBeICgoYzUgPDwgMSkgfCAoYzQgPj4+IDMxKSk7XG4gICAgICBzWzJdIF49IGg7XG4gICAgICBzWzNdIF49IGw7XG4gICAgICBzWzEyXSBePSBoO1xuICAgICAgc1sxM10gXj0gbDtcbiAgICAgIHNbMjJdIF49IGg7XG4gICAgICBzWzIzXSBePSBsO1xuICAgICAgc1szMl0gXj0gaDtcbiAgICAgIHNbMzNdIF49IGw7XG4gICAgICBzWzQyXSBePSBoO1xuICAgICAgc1s0M10gXj0gbDtcbiAgICAgIGggPSBjMiBeICgoYzYgPDwgMSkgfCAoYzcgPj4+IDMxKSk7XG4gICAgICBsID0gYzMgXiAoKGM3IDw8IDEpIHwgKGM2ID4+PiAzMSkpO1xuICAgICAgc1s0XSBePSBoO1xuICAgICAgc1s1XSBePSBsO1xuICAgICAgc1sxNF0gXj0gaDtcbiAgICAgIHNbMTVdIF49IGw7XG4gICAgICBzWzI0XSBePSBoO1xuICAgICAgc1syNV0gXj0gbDtcbiAgICAgIHNbMzRdIF49IGg7XG4gICAgICBzWzM1XSBePSBsO1xuICAgICAgc1s0NF0gXj0gaDtcbiAgICAgIHNbNDVdIF49IGw7XG4gICAgICBoID0gYzQgXiAoKGM4IDw8IDEpIHwgKGM5ID4+PiAzMSkpO1xuICAgICAgbCA9IGM1IF4gKChjOSA8PCAxKSB8IChjOCA+Pj4gMzEpKTtcbiAgICAgIHNbNl0gXj0gaDtcbiAgICAgIHNbN10gXj0gbDtcbiAgICAgIHNbMTZdIF49IGg7XG4gICAgICBzWzE3XSBePSBsO1xuICAgICAgc1syNl0gXj0gaDtcbiAgICAgIHNbMjddIF49IGw7XG4gICAgICBzWzM2XSBePSBoO1xuICAgICAgc1szN10gXj0gbDtcbiAgICAgIHNbNDZdIF49IGg7XG4gICAgICBzWzQ3XSBePSBsO1xuICAgICAgaCA9IGM2IF4gKChjMCA8PCAxKSB8IChjMSA+Pj4gMzEpKTtcbiAgICAgIGwgPSBjNyBeICgoYzEgPDwgMSkgfCAoYzAgPj4+IDMxKSk7XG4gICAgICBzWzhdIF49IGg7XG4gICAgICBzWzldIF49IGw7XG4gICAgICBzWzE4XSBePSBoO1xuICAgICAgc1sxOV0gXj0gbDtcbiAgICAgIHNbMjhdIF49IGg7XG4gICAgICBzWzI5XSBePSBsO1xuICAgICAgc1szOF0gXj0gaDtcbiAgICAgIHNbMzldIF49IGw7XG4gICAgICBzWzQ4XSBePSBoO1xuICAgICAgc1s0OV0gXj0gbDtcblxuICAgICAgYjAgPSBzWzBdO1xuICAgICAgYjEgPSBzWzFdO1xuICAgICAgYjMyID0gKHNbMTFdIDw8IDQpIHwgKHNbMTBdID4+PiAyOCk7XG4gICAgICBiMzMgPSAoc1sxMF0gPDwgNCkgfCAoc1sxMV0gPj4+IDI4KTtcbiAgICAgIGIxNCA9IChzWzIwXSA8PCAzKSB8IChzWzIxXSA+Pj4gMjkpO1xuICAgICAgYjE1ID0gKHNbMjFdIDw8IDMpIHwgKHNbMjBdID4+PiAyOSk7XG4gICAgICBiNDYgPSAoc1szMV0gPDwgOSkgfCAoc1szMF0gPj4+IDIzKTtcbiAgICAgIGI0NyA9IChzWzMwXSA8PCA5KSB8IChzWzMxXSA+Pj4gMjMpO1xuICAgICAgYjI4ID0gKHNbNDBdIDw8IDE4KSB8IChzWzQxXSA+Pj4gMTQpO1xuICAgICAgYjI5ID0gKHNbNDFdIDw8IDE4KSB8IChzWzQwXSA+Pj4gMTQpO1xuICAgICAgYjIwID0gKHNbMl0gPDwgMSkgfCAoc1szXSA+Pj4gMzEpO1xuICAgICAgYjIxID0gKHNbM10gPDwgMSkgfCAoc1syXSA+Pj4gMzEpO1xuICAgICAgYjIgPSAoc1sxM10gPDwgMTIpIHwgKHNbMTJdID4+PiAyMCk7XG4gICAgICBiMyA9IChzWzEyXSA8PCAxMikgfCAoc1sxM10gPj4+IDIwKTtcbiAgICAgIGIzNCA9IChzWzIyXSA8PCAxMCkgfCAoc1syM10gPj4+IDIyKTtcbiAgICAgIGIzNSA9IChzWzIzXSA8PCAxMCkgfCAoc1syMl0gPj4+IDIyKTtcbiAgICAgIGIxNiA9IChzWzMzXSA8PCAxMykgfCAoc1szMl0gPj4+IDE5KTtcbiAgICAgIGIxNyA9IChzWzMyXSA8PCAxMykgfCAoc1szM10gPj4+IDE5KTtcbiAgICAgIGI0OCA9IChzWzQyXSA8PCAyKSB8IChzWzQzXSA+Pj4gMzApO1xuICAgICAgYjQ5ID0gKHNbNDNdIDw8IDIpIHwgKHNbNDJdID4+PiAzMCk7XG4gICAgICBiNDAgPSAoc1s1XSA8PCAzMCkgfCAoc1s0XSA+Pj4gMik7XG4gICAgICBiNDEgPSAoc1s0XSA8PCAzMCkgfCAoc1s1XSA+Pj4gMik7XG4gICAgICBiMjIgPSAoc1sxNF0gPDwgNikgfCAoc1sxNV0gPj4+IDI2KTtcbiAgICAgIGIyMyA9IChzWzE1XSA8PCA2KSB8IChzWzE0XSA+Pj4gMjYpO1xuICAgICAgYjQgPSAoc1syNV0gPDwgMTEpIHwgKHNbMjRdID4+PiAyMSk7XG4gICAgICBiNSA9IChzWzI0XSA8PCAxMSkgfCAoc1syNV0gPj4+IDIxKTtcbiAgICAgIGIzNiA9IChzWzM0XSA8PCAxNSkgfCAoc1szNV0gPj4+IDE3KTtcbiAgICAgIGIzNyA9IChzWzM1XSA8PCAxNSkgfCAoc1szNF0gPj4+IDE3KTtcbiAgICAgIGIxOCA9IChzWzQ1XSA8PCAyOSkgfCAoc1s0NF0gPj4+IDMpO1xuICAgICAgYjE5ID0gKHNbNDRdIDw8IDI5KSB8IChzWzQ1XSA+Pj4gMyk7XG4gICAgICBiMTAgPSAoc1s2XSA8PCAyOCkgfCAoc1s3XSA+Pj4gNCk7XG4gICAgICBiMTEgPSAoc1s3XSA8PCAyOCkgfCAoc1s2XSA+Pj4gNCk7XG4gICAgICBiNDIgPSAoc1sxN10gPDwgMjMpIHwgKHNbMTZdID4+PiA5KTtcbiAgICAgIGI0MyA9IChzWzE2XSA8PCAyMykgfCAoc1sxN10gPj4+IDkpO1xuICAgICAgYjI0ID0gKHNbMjZdIDw8IDI1KSB8IChzWzI3XSA+Pj4gNyk7XG4gICAgICBiMjUgPSAoc1syN10gPDwgMjUpIHwgKHNbMjZdID4+PiA3KTtcbiAgICAgIGI2ID0gKHNbMzZdIDw8IDIxKSB8IChzWzM3XSA+Pj4gMTEpO1xuICAgICAgYjcgPSAoc1szN10gPDwgMjEpIHwgKHNbMzZdID4+PiAxMSk7XG4gICAgICBiMzggPSAoc1s0N10gPDwgMjQpIHwgKHNbNDZdID4+PiA4KTtcbiAgICAgIGIzOSA9IChzWzQ2XSA8PCAyNCkgfCAoc1s0N10gPj4+IDgpO1xuICAgICAgYjMwID0gKHNbOF0gPDwgMjcpIHwgKHNbOV0gPj4+IDUpO1xuICAgICAgYjMxID0gKHNbOV0gPDwgMjcpIHwgKHNbOF0gPj4+IDUpO1xuICAgICAgYjEyID0gKHNbMThdIDw8IDIwKSB8IChzWzE5XSA+Pj4gMTIpO1xuICAgICAgYjEzID0gKHNbMTldIDw8IDIwKSB8IChzWzE4XSA+Pj4gMTIpO1xuICAgICAgYjQ0ID0gKHNbMjldIDw8IDcpIHwgKHNbMjhdID4+PiAyNSk7XG4gICAgICBiNDUgPSAoc1syOF0gPDwgNykgfCAoc1syOV0gPj4+IDI1KTtcbiAgICAgIGIyNiA9IChzWzM4XSA8PCA4KSB8IChzWzM5XSA+Pj4gMjQpO1xuICAgICAgYjI3ID0gKHNbMzldIDw8IDgpIHwgKHNbMzhdID4+PiAyNCk7XG4gICAgICBiOCA9IChzWzQ4XSA8PCAxNCkgfCAoc1s0OV0gPj4+IDE4KTtcbiAgICAgIGI5ID0gKHNbNDldIDw8IDE0KSB8IChzWzQ4XSA+Pj4gMTgpO1xuXG4gICAgICBzWzBdID0gYjAgXiAofmIyICYgYjQpO1xuICAgICAgc1sxXSA9IGIxIF4gKH5iMyAmIGI1KTtcbiAgICAgIHNbMTBdID0gYjEwIF4gKH5iMTIgJiBiMTQpO1xuICAgICAgc1sxMV0gPSBiMTEgXiAofmIxMyAmIGIxNSk7XG4gICAgICBzWzIwXSA9IGIyMCBeICh+YjIyICYgYjI0KTtcbiAgICAgIHNbMjFdID0gYjIxIF4gKH5iMjMgJiBiMjUpO1xuICAgICAgc1szMF0gPSBiMzAgXiAofmIzMiAmIGIzNCk7XG4gICAgICBzWzMxXSA9IGIzMSBeICh+YjMzICYgYjM1KTtcbiAgICAgIHNbNDBdID0gYjQwIF4gKH5iNDIgJiBiNDQpO1xuICAgICAgc1s0MV0gPSBiNDEgXiAofmI0MyAmIGI0NSk7XG4gICAgICBzWzJdID0gYjIgXiAofmI0ICYgYjYpO1xuICAgICAgc1szXSA9IGIzIF4gKH5iNSAmIGI3KTtcbiAgICAgIHNbMTJdID0gYjEyIF4gKH5iMTQgJiBiMTYpO1xuICAgICAgc1sxM10gPSBiMTMgXiAofmIxNSAmIGIxNyk7XG4gICAgICBzWzIyXSA9IGIyMiBeICh+YjI0ICYgYjI2KTtcbiAgICAgIHNbMjNdID0gYjIzIF4gKH5iMjUgJiBiMjcpO1xuICAgICAgc1szMl0gPSBiMzIgXiAofmIzNCAmIGIzNik7XG4gICAgICBzWzMzXSA9IGIzMyBeICh+YjM1ICYgYjM3KTtcbiAgICAgIHNbNDJdID0gYjQyIF4gKH5iNDQgJiBiNDYpO1xuICAgICAgc1s0M10gPSBiNDMgXiAofmI0NSAmIGI0Nyk7XG4gICAgICBzWzRdID0gYjQgXiAofmI2ICYgYjgpO1xuICAgICAgc1s1XSA9IGI1IF4gKH5iNyAmIGI5KTtcbiAgICAgIHNbMTRdID0gYjE0IF4gKH5iMTYgJiBiMTgpO1xuICAgICAgc1sxNV0gPSBiMTUgXiAofmIxNyAmIGIxOSk7XG4gICAgICBzWzI0XSA9IGIyNCBeICh+YjI2ICYgYjI4KTtcbiAgICAgIHNbMjVdID0gYjI1IF4gKH5iMjcgJiBiMjkpO1xuICAgICAgc1szNF0gPSBiMzQgXiAofmIzNiAmIGIzOCk7XG4gICAgICBzWzM1XSA9IGIzNSBeICh+YjM3ICYgYjM5KTtcbiAgICAgIHNbNDRdID0gYjQ0IF4gKH5iNDYgJiBiNDgpO1xuICAgICAgc1s0NV0gPSBiNDUgXiAofmI0NyAmIGI0OSk7XG4gICAgICBzWzZdID0gYjYgXiAofmI4ICYgYjApO1xuICAgICAgc1s3XSA9IGI3IF4gKH5iOSAmIGIxKTtcbiAgICAgIHNbMTZdID0gYjE2IF4gKH5iMTggJiBiMTApO1xuICAgICAgc1sxN10gPSBiMTcgXiAofmIxOSAmIGIxMSk7XG4gICAgICBzWzI2XSA9IGIyNiBeICh+YjI4ICYgYjIwKTtcbiAgICAgIHNbMjddID0gYjI3IF4gKH5iMjkgJiBiMjEpO1xuICAgICAgc1szNl0gPSBiMzYgXiAofmIzOCAmIGIzMCk7XG4gICAgICBzWzM3XSA9IGIzNyBeICh+YjM5ICYgYjMxKTtcbiAgICAgIHNbNDZdID0gYjQ2IF4gKH5iNDggJiBiNDApO1xuICAgICAgc1s0N10gPSBiNDcgXiAofmI0OSAmIGI0MSk7XG4gICAgICBzWzhdID0gYjggXiAofmIwICYgYjIpO1xuICAgICAgc1s5XSA9IGI5IF4gKH5iMSAmIGIzKTtcbiAgICAgIHNbMThdID0gYjE4IF4gKH5iMTAgJiBiMTIpO1xuICAgICAgc1sxOV0gPSBiMTkgXiAofmIxMSAmIGIxMyk7XG4gICAgICBzWzI4XSA9IGIyOCBeICh+YjIwICYgYjIyKTtcbiAgICAgIHNbMjldID0gYjI5IF4gKH5iMjEgJiBiMjMpO1xuICAgICAgc1szOF0gPSBiMzggXiAofmIzMCAmIGIzMik7XG4gICAgICBzWzM5XSA9IGIzOSBeICh+YjMxICYgYjMzKTtcbiAgICAgIHNbNDhdID0gYjQ4IF4gKH5iNDAgJiBiNDIpO1xuICAgICAgc1s0OV0gPSBiNDkgXiAofmI0MSAmIGI0Myk7XG5cbiAgICAgIHNbMF0gXj0gUkNbbl07XG4gICAgICBzWzFdIF49IFJDW24gKyAxXTtcbiAgICB9XG4gIH07XG5cbiAgaWYgKENPTU1PTl9KUykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gbWV0aG9kcztcbiAgfSBlbHNlIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbWV0aG9kTmFtZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHJvb3RbbWV0aG9kTmFtZXNbaV1dID0gbWV0aG9kc1ttZXRob2ROYW1lc1tpXV07XG4gICAgfVxuICAgIGlmIChBTUQpIHtcbiAgICAgIGRlZmluZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBtZXRob2RzO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59KSgpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBhc3NlcnQ7XG5cbmZ1bmN0aW9uIGFzc2VydCh2YWwsIG1zZykge1xuICBpZiAoIXZhbClcbiAgICB0aHJvdyBuZXcgRXJyb3IobXNnIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7XG59XG5cbmFzc2VydC5lcXVhbCA9IGZ1bmN0aW9uIGFzc2VydEVxdWFsKGwsIHIsIG1zZykge1xuICBpZiAobCAhPSByKVxuICAgIHRocm93IG5ldyBFcnJvcihtc2cgfHwgKCdBc3NlcnRpb24gZmFpbGVkOiAnICsgbCArICcgIT0gJyArIHIpKTtcbn07XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1xuU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6NjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcseD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTgseT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtcbmZ1bmN0aW9uIHooYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIHQ6Y2FzZSByOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiBBKGEpe3JldHVybiB6KGEpPT09bX1leHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7XG5leHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIEEoYSl8fHooYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9QTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09dH07XG5leHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXB9O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14fHxhLiQkdHlwZW9mPT09eXx8YS4kJHR5cGVvZj09PXYpfTtleHBvcnRzLnR5cGVPZj16O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOlsiX3R5cGVvZiIsIl9yZWdlbmVyYXRvclJ1bnRpbWUiLCJtb2R1bGUiLCJleHBvcnRzIiwiX19lc01vZHVsZSIsIk9wIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCIkU3ltYm9sIiwiU3ltYm9sIiwiaXRlcmF0b3JTeW1ib2wiLCJpdGVyYXRvciIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsImRlZmluZSIsIm9iaiIsImtleSIsInZhbHVlIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJlcnIiLCJ3cmFwIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJzZWxmIiwidHJ5TG9jc0xpc3QiLCJwcm90b0dlbmVyYXRvciIsIkdlbmVyYXRvciIsImdlbmVyYXRvciIsImNyZWF0ZSIsImNvbnRleHQiLCJDb250ZXh0IiwiX2ludm9rZSIsInN0YXRlIiwibWV0aG9kIiwiYXJnIiwiRXJyb3IiLCJ1bmRlZmluZWQiLCJkb25lIiwiZGVsZWdhdGUiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJDb250aW51ZVNlbnRpbmVsIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJyZWNvcmQiLCJ0cnlDYXRjaCIsInR5cGUiLCJmbiIsImNhbGwiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJ0aGlzIiwiZ2V0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwidmFsdWVzIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJmb3JFYWNoIiwiQXN5bmNJdGVyYXRvciIsIlByb21pc2VJbXBsIiwiaW52b2tlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlc3VsdCIsIl9fYXdhaXQiLCJ0aGVuIiwidW53cmFwcGVkIiwiZXJyb3IiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsIlR5cGVFcnJvciIsImluZm8iLCJyZXN1bHROYW1lIiwibmV4dCIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiZW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJwdXNoIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsIml0ZXJhYmxlIiwiaXRlcmF0b3JNZXRob2QiLCJpc05hTiIsImxlbmd0aCIsImkiLCJkb25lUmVzdWx0IiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsImNvbnN0cnVjdG9yIiwibmFtZSIsIm1hcmsiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImF3cmFwIiwiYXN5bmMiLCJQcm9taXNlIiwiaXRlciIsImtleXMiLCJvYmplY3QiLCJyZXZlcnNlIiwicG9wIiwic2tpcFRlbXBSZXNldCIsInByZXYiLCJjaGFyQXQiLCJzbGljZSIsInN0b3AiLCJyb290UmVjb3JkIiwicnZhbCIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJ1bnRpbWUiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJhY2NpZGVudGFsU3RyaWN0TW9kZSIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsIl9wZXJtYW5lbnRDZW5zb3JFcnJvcnMiLCJfY2Vuc29yRXJyb3JzIiwiTG9nTGV2ZWxzIiwiZGVidWciLCJ3YXJuaW5nIiwib2ZmIiwiX2xvZ0xldmVsIiwiX2dsb2JhbExvZ2dlciIsIl9ub3JtYWxpemVFcnJvciIsIm1pc3NpbmciLCJmb3JtIiwibm9ybWFsaXplIiwiam9pbiIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsIm1lc3NhZ2UiLCJfY2hlY2tOb3JtYWxpemUiLCJMb2dMZXZlbCIsIkVycm9yQ29kZSIsIkhFWCIsInZlcnNpb24iLCJfbG9nIiwibG9nTGV2ZWwiLCJhcmdzIiwibGV2ZWwiLCJ0b0xvd2VyQ2FzZSIsInRocm93QXJndW1lbnRFcnJvciIsImNvbnNvbGUiLCJsb2ciLCJhcHBseSIsImxldmVscyIsIkRFQlVHIiwiSU5GTyIsIndhcm4iLCJXQVJOSU5HIiwibWFrZUVycm9yIiwiY29kZSIsInBhcmFtcyIsImVycm9ycyIsIlVOS05PV05fRVJST1IiLCJtZXNzYWdlRGV0YWlscyIsIlVpbnQ4QXJyYXkiLCJoZXgiLCJKU09OIiwic3RyaW5naWZ5IiwidG9TdHJpbmciLCJyZWFzb24iLCJ1cmwiLCJOVU1FUklDX0ZBVUxUIiwiZmF1bHQiLCJDQUxMX0VYQ0VQVElPTiIsIklOU1VGRklDSUVOVF9GVU5EUyIsIk1JU1NJTkdfTkVXIiwiTk9OQ0VfRVhQSVJFRCIsIlJFUExBQ0VNRU5UX1VOREVSUFJJQ0VEIiwiVFJBTlNBQ1RJT05fUkVQTEFDRUQiLCJVTlBSRURJQ1RBQkxFX0dBU19MSU1JVCIsInRocm93RXJyb3IiLCJJTlZBTElEX0FSR1VNRU5UIiwiYXJndW1lbnQiLCJhc3NlcnQiLCJjb25kaXRpb24iLCJhc3NlcnRBcmd1bWVudCIsImNoZWNrTm9ybWFsaXplIiwiVU5TVVBQT1JURURfT1BFUkFUSU9OIiwib3BlcmF0aW9uIiwiY2hlY2tTYWZlVWludDUzIiwiY2hlY2tBcmd1bWVudENvdW50IiwiY291bnQiLCJleHBlY3RlZENvdW50IiwiTUlTU0lOR19BUkdVTUVOVCIsIlVORVhQRUNURURfQVJHVU1FTlQiLCJjaGVja05ldyIsInRhcmdldCIsImtpbmQiLCJjaGVja0Fic3RyYWN0Iiwic3RhdGljIiwiY2Vuc29yc2hpcCIsInBlcm1hbmVudCIsImdsb2JhbExvZ2dlciIsImxvZ2dlciIsImdldFN0YXRpYyIsInJlc29sdmVQcm9wZXJ0aWVzIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJwcm9taXNlcyIsIm1hcCIsInYiLCJhbGwiLCJyZWR1Y2UiLCJhY2N1bSIsIlAiLCJmdWxmaWxsZWQiLCJzdGVwIiwiZSIsInJlamVjdGVkIiwic2hhbGxvd0NvcHkiLCJvcGFxdWUiLCJiaWdpbnQiLCJib29sZWFuIiwibnVtYmVyIiwic3RyaW5nIiwiX2lzRnJvemVuIiwiQXJyYXkiLCJpc0FycmF5IiwiaXNGcm96ZW4iLCJfZGVlcENvcHkiLCJmcmVlemUiLCJpdGVtIiwiZGVlcENvcHkiLCJhbGxvd2VkVHJhbnNhY3Rpb25LZXlzIiwiZm9yd2FyZEVycm9ycyIsIlNpZ25lciIsImdldEJhbGFuY2UiLCJibG9ja1RhZyIsIl9jaGVja1Byb3ZpZGVyIiwicHJvdmlkZXIiLCJnZXRBZGRyZXNzIiwiZ2V0VHJhbnNhY3Rpb25Db3VudCIsImVzdGltYXRlR2FzIiwidHJhbnNhY3Rpb24iLCJ0eCIsImNoZWNrVHJhbnNhY3Rpb24iLCJzZW5kVHJhbnNhY3Rpb24iLCJwb3B1bGF0ZVRyYW5zYWN0aW9uIiwic2lnbmVkVHgiLCJzaWduVHJhbnNhY3Rpb24iLCJnZXRDaGFpbklkIiwiZ2V0TmV0d29yayIsImNoYWluSWQiLCJnZXRHYXNQcmljZSIsImdldEZlZURhdGEiLCJyZXNvbHZlTmFtZSIsImluZGV4T2YiLCJmcm9tIiwidG8iLCJhZGRyZXNzIiwiY2F0Y2giLCJoYXNFaXAxNTU5IiwibWF4RmVlUGVyR2FzIiwibWF4UHJpb3JpdHlGZWVQZXJHYXMiLCJnYXNQcmljZSIsImZlZURhdGEiLCJub25jZSIsImdhc0xpbWl0IiwicmVzdWx0cyIsIl9pc1NpZ25lciIsImlzSGV4YWJsZSIsImFkZFNsaWNlIiwiYXJyYXkiLCJhcmd1bWVudHMiLCJpc0ludGVnZXIiLCJvcHRpb25zIiwidW5zaGlmdCIsInBhcnNlSW50IiwiYWxsb3dNaXNzaW5nUHJlZml4Iiwic3Vic3RyaW5nIiwidG9IZXhTdHJpbmciLCJoZXhQYWQiLCJpdGVtcyIsIm9iamVjdHMiLCJvZmZzZXQiLCJzZXQiLCJzdGFydCIsIm1hdGNoIiwiSGV4Q2hhcmFjdGVycyIsIk1hdGgiLCJmbG9vciIsImRhdGEiLCJlbmRPZmZzZXQiLCJoZXhDb25jYXQiLCJoZXhWYWx1ZSIsInRyaW1tZWQiLCJoZXhTdHJpcFplcm9zIiwiaGV4WmVyb1BhZCIsInNpZ25hdHVyZSIsInIiLCJzIiwiX3ZzIiwicmVjb3ZlcnlQYXJhbSIsInlQYXJpdHlBbmRTIiwiY29tcGFjdCIsImJ5dGVzIiwidnMiLCJ6ZXJvUGFkIiwicmVjSWQiLCJCTiIsIl9jb25zdHJ1Y3Rvckd1YXJkIiwiTUFYX1NBRkUiLCJfd2FybmVkVG9TdHJpbmdSYWRpeCIsImNvbnN0cnVjdG9yR3VhcmQiLCJfaGV4IiwiX2lzQmlnTnVtYmVyIiwiZnJvbVR3b3MiLCJ0b0JpZ051bWJlciIsInRvQk4iLCJ0b1R3b3MiLCJhYnMiLCJhZGQiLCJvdGhlciIsInN1YiIsImRpdiIsImlzWmVybyIsInRocm93RmF1bHQiLCJtdWwiLCJtb2QiLCJpc05lZyIsInVtb2QiLCJwb3ciLCJhbmQiLCJpc05lZ2F0aXZlIiwib3IiLCJ4b3IiLCJtYXNrIiwibWFza24iLCJzaGwiLCJzaGxuIiwic2hyIiwic2hybiIsImVxIiwibHQiLCJsdGUiLCJndCIsImd0ZSIsInRvTnVtYmVyIiwidG9CaWdJbnQiLCJCaWdJbnQiLCJ0b0pTT04iLCJ0b0hleCIsImFueVZhbHVlIiwiYXJyYXlpZnlJbnRlZ2VyIiwidW5hcnJheWlmeUludGVnZXIiLCJfZW5jb2RlIiwicGF5bG9hZCIsImNoaWxkIiwiY29uY2F0IiwiZW5jb2RlIiwiX2RlY29kZUNoaWxkcmVuIiwiY2hpbGRPZmZzZXQiLCJkZWNvZGVkIiwiX2RlY29kZSIsImNvbnN1bWVkIiwibGVuZ3RoTGVuZ3RoIiwiZGVjb2RlIiwiZ2V0Q2hlY2tzdW1BZGRyZXNzIiwiY2hhcnMiLCJzcGxpdCIsImV4cGFuZGVkIiwiY2hhckNvZGVBdCIsImhhc2hlZCIsInRvVXBwZXJDYXNlIiwiaWJhbkxvb2t1cCIsInNhZmVEaWdpdHMiLCJ4IiwibG9nMTAiLCJMTjEwIiwiYyIsImJsb2NrIiwiY2hlY2tzdW0iLCJpYmFuQ2hlY2tzdW0iLCJVbmljb2RlTm9ybWFsaXphdGlvbkZvcm0iLCJVdGY4RXJyb3JSZWFzb24iLCJpZ25vcmVGdW5jIiwib3V0cHV0IiwiYmFkQ29kZXBvaW50IiwiQkFEX1BSRUZJWCIsIlVORVhQRUNURURfQ09OVElOVUUiLCJvIiwiT1ZFUlJVTiIsIlV0ZjhFcnJvckZ1bmNzIiwiaWdub3JlIiwicmVwbGFjZSIsIk9WRVJMT05HIiwiZ2V0VXRmOENvZGVQb2ludHMiLCJvbkVycm9yIiwiZXh0cmFMZW5ndGgiLCJvdmVybG9uZ01hc2siLCJyZXMiLCJqIiwibmV4dENoYXIiLCJNSVNTSU5HX0NPTlRJTlVFIiwiT1VUX09GX1JBTkdFIiwiVVRGMTZfU1VSUk9HQVRFIiwidG9VdGY4Qnl0ZXMiLCJzdHIiLCJjdXJyZW50IiwiYzIiLCJwYWlyIiwiX3RvVXRmOFN0cmluZyIsImNvZGVQb2ludHMiLCJjb2RlUG9pbnQiLCJ0b1V0ZjhTdHJpbmciLCJ0b1V0ZjhDb2RlUG9pbnRzIiwiaWQiLCJ0ZXh0IiwicGFkZGluZyIsImZpbGwiLCJOZWdhdGl2ZU9uZSIsIlplcm8iLCJPbmUiLCJNYXhVaW50MjU2IiwiaGV4VHJ1ZSIsImhleEZhbHNlIiwiZG9tYWluRmllbGRUeXBlcyIsInZlcmlmeWluZ0NvbnRyYWN0Iiwic2FsdCIsImRvbWFpbkZpZWxkTmFtZXMiLCJjaGVja1N0cmluZyIsImRvbWFpbkNoZWNrcyIsImdldEJhc2VFbmNvZGVyIiwic2lnbmVkIiwid2lkdGgiLCJib3VuZHNVcHBlciIsImJvdW5kc0xvd2VyIiwicGFkT2Zmc2V0IiwiaGV4UGFkUmlnaHQiLCJlbmNvZGVUeXBlIiwiZmllbGRzIiwiVHlwZWREYXRhRW5jb2RlciIsInR5cGVzIiwibGlua3MiLCJwYXJlbnRzIiwic3VidHlwZXMiLCJ1bmlxdWVOYW1lcyIsImZpZWxkIiwiYmFzZVR5cGUiLCJwcmltYXJ5VHlwZXMiLCJmaWx0ZXIiLCJuIiwidCIsImNoZWNrQ2lyY3VsYXIiLCJmb3VuZCIsInN1YnR5cGUiLCJwcmltYXJ5VHlwZSIsInN0Iiwic29ydCIsIl90eXBlcyIsImdldEVuY29kZXIiLCJlbmNvZGVyIiwiX2VuY29kZXJDYWNoZSIsIl9nZXRFbmNvZGVyIiwic3ViRW5jb2RlciIsImVuY29kZWRUeXBlIiwiZW5jb2RlRGF0YSIsImhhc2hTdHJ1Y3QiLCJoYXNoIiwiX3Zpc2l0IiwiY2FsbGJhY2siLCJ2aXNpdCIsImRvbWFpbiIsImRvbWFpbkZpZWxkcyIsImEiLCJiIiwiRUlQNzEyRG9tYWluIiwiaGFzaERvbWFpbiIsImVuc0NhY2hlIiwiZG9tYWluVmFsdWVzIiwiZG9tYWluVHlwZXMiLCJ0eXBlc1dpdGhEb21haW4iLCJjcmVhdGVDb21tb25qc01vZHVsZSIsImJhc2VkaXIiLCJwYXRoIiwicmVxdWlyZSIsImJhc2UiLCJjb21tb25qc1JlcXVpcmUiLCJ3aW5kb3ciLCJnIiwibWluaW1hbGlzdGljQXNzZXJ0IiwidmFsIiwibXNnIiwiZXF1YWwiLCJsIiwidXRpbHNfMSIsInV0aWxzIiwiemVybzIiLCJ3b3JkIiwidG9BcnJheSIsImVuYyIsImhpIiwibG8iLCJhcnIiLCJ1dGlsc18xJDEiLCJnZXROQUYiLCJudW0iLCJ3IiwiYml0cyIsIm5hZiIsIm1heCIsImJpdExlbmd0aCIsIndzIiwiayIsImNsb25lIiwieiIsImFuZGxuIiwiaXNPZGQiLCJpc3VibiIsIml1c2hybiIsImdldEpTRiIsImsxIiwiazIiLCJqc2YiLCJtOCIsImQxIiwiZDIiLCJjbXBuIiwidTEiLCJ1MiIsIm0xNCIsIm0yNCIsImNhY2hlZFByb3BlcnR5IiwiY29tcHV0ZXIiLCJwYXJzZUJ5dGVzIiwiaW50RnJvbUxFIiwiYXNzZXJ0JDEiLCJCYXNlQ3VydmUiLCJjb25mIiwicCIsInJlZCIsInByaW1lIiwiemVybyIsInRvUmVkIiwib25lIiwidHdvIiwicG9pbnRGcm9tSlNPTiIsImdSZWQiLCJfd25hZlQxIiwiX3duYWZUMiIsIl93bmFmVDMiLCJfd25hZlQ0IiwiX2JpdExlbmd0aCIsImFkanVzdENvdW50IiwicmVkTiIsIl9tYXh3ZWxsVHJpY2siLCJCYXNlUG9pbnQiLCJjdXJ2ZSIsInByZWNvbXB1dGVkIiwicG9pbnQiLCJ2YWxpZGF0ZSIsIl9maXhlZE5hZk11bCIsImRvdWJsZXMiLCJfZ2V0RG91YmxlcyIsIkkiLCJuYWZXIiwicmVwciIsImpwb2ludCIsIm1peGVkQWRkIiwicG9pbnRzIiwibmVnIiwidG9QIiwiX3duYWZNdWwiLCJuYWZQb2ludHMiLCJfZ2V0TkFGUG9pbnRzIiwid25kIiwiYWNjIiwiZGJscCIsIl93bmFmTXVsQWRkIiwiZGVmVyIsImNvZWZmcyIsImxlbiIsImphY29iaWFuUmVzdWx0Iiwid25kV2lkdGgiLCJjb21iIiwieSIsImNtcCIsInRvSiIsInJlZE5lZyIsImluZGV4IiwiamEiLCJqYiIsInRtcCIsImRlY29kZVBvaW50IiwiYnl0ZUxlbmd0aCIsInBvaW50RnJvbVgiLCJlbmNvZGVDb21wcmVzc2VkIiwiZ2V0WCIsImdldFkiLCJpc0V2ZW4iLCJwcmVjb21wdXRlIiwicG93ZXIiLCJiZXRhIiwiX2dldEJldGEiLCJfaGFzRG91YmxlcyIsImNlaWwiLCJkYmwiLCJpbmhlcml0c19icm93c2VyIiwic3VwZXJDdG9yIiwic3VwZXJfIiwiVGVtcEN0b3IiLCJhc3NlcnQkMiIsIlNob3J0Q3VydmUiLCJ0aW52IiwicmVkSW52bSIsInplcm9BIiwiZnJvbVJlZCIsInRocmVlQSIsImVuZG8iLCJfZ2V0RW5kb21vcnBoaXNtIiwiX2VuZG9XbmFmVDEiLCJfZW5kb1duYWZUMiIsInNob3J0XzEiLCJQb2ludCIsImlzUmVkIiwiaW5mIiwiZm9yY2VSZWQiLCJKUG9pbnQiLCJ6T25lIiwibW9kbiIsImxhbWJkYSIsImJldGFzIiwiX2dldEVuZG9Sb290cyIsImxhbWJkYXMiLCJyZWRNdWwiLCJiYXNpcyIsInZlYyIsIl9nZXRFbmRvQmFzaXMiLCJudGludiIsInJlZFNxcnQiLCJyZWRBZGQiLCJyZWRTdWIiLCJhMCIsImIwIiwiYTEiLCJiMSIsImEyIiwiYjIiLCJwcmV2UiIsImFwcnhTcXJ0IiwidXNocm4iLCJ1IiwieDEiLCJ5MSIsIngyIiwieTIiLCJxIiwibGVuMSIsInNxciIsIm5lZ2F0aXZlIiwiX2VuZG9TcGxpdCIsInYxIiwidjIiLCJjMSIsImRpdlJvdW5kIiwicDEiLCJwMiIsInExIiwicTIiLCJvZGQiLCJyZWRTcXIiLCJyZWRJQWRkIiwiYXgiLCJyaHMiLCJyZWRJU3ViIiwiX2VuZG9XbmFmTXVsQWRkIiwibnBvaW50cyIsIm5jb2VmZnMiLCJpbmVnIiwiZnJvbUpTT04iLCJwcmUiLCJlbmRvTXVsIiwicGFyc2UiLCJvYmoycG9pbnQiLCJpbnNwZWN0IiwiaXNJbmZpbml0eSIsIm54IiwibnkiLCJ5czEiLCJkeWludiIsIm11bEFkZCIsImptdWxBZGQiLCJfcHJlY29tcHV0ZSIsIm5lZ2F0ZSIsInppbnYiLCJ6aW52MiIsImF5IiwicHoyIiwiejIiLCJzMSIsInMyIiwiaCIsImgyIiwiaDMiLCJueiIsImp4IiwiankiLCJqeiIsImp6NCIsImp5ZCIsImp4MiIsImp5ZDIiLCJqeWQ0IiwidDEiLCJ0MiIsImRueSIsIl96ZXJvRGJsIiwiX3RocmVlRGJsIiwiX2RibCIsInh4IiwieXkiLCJ5eXl5IiwibSIsInl5eXk4IiwiZCIsImYiLCJjOCIsImRlbHRhIiwiZ2FtbWEiLCJhbHBoYSIsImJldGE0IiwiYmV0YTgiLCJnZ2FtbWE4IiwiankyIiwianhkNCIsImp5ZDgiLCJ0cnBsIiwienoiLCJtbSIsImVlIiwieXl1NCIsImtiYXNlIiwiejMiLCJwejMiLCJlcVhUb1AiLCJ6cyIsInJ4IiwieGMiLCJpYWRkIiwiY3VydmVfMSIsInNob3J0IiwibW9udCIsImVkd2FyZHMiLCJjdXJ2ZXNfMSIsImN1cnZlcyIsIlByZXNldEN1cnZlIiwiZGVmaW5lQ3VydmUiLCJnZXQiLCJjcmFzaCIsIkhtYWNEUkJHIiwicHJlZFJlc2lzdCIsIm91dExlbiIsIm91dFNpemUiLCJtaW5FbnRyb3B5IiwiaG1hY1N0cmVuZ3RoIiwiX3Jlc2VlZCIsInJlc2VlZEludGVydmFsIiwiSyIsIlYiLCJlbnRyb3B5IiwiZW50cm9weUVuYyIsIm5vbmNlRW5jIiwicGVycyIsInBlcnNFbmMiLCJfaW5pdCIsImhtYWNEcmJnIiwic2VlZCIsIl91cGRhdGUiLCJfaG1hYyIsImttYWMiLCJ1cGRhdGUiLCJkaWdlc3QiLCJyZXNlZWQiLCJhZGRFbmMiLCJnZW5lcmF0ZSIsInRlbXAiLCJhc3NlcnQkMyIsIktleVBhaXIiLCJlYyIsInByaXYiLCJwdWIiLCJfaW1wb3J0UHJpdmF0ZSIsInByaXZFbmMiLCJfaW1wb3J0UHVibGljIiwicHViRW5jIiwiZnJvbVB1YmxpYyIsImZyb21Qcml2YXRlIiwiZ2V0UHVibGljIiwiZ2V0UHJpdmF0ZSIsImRlcml2ZSIsInNpZ24iLCJ2ZXJpZnkiLCJhc3NlcnQkNCIsIlNpZ25hdHVyZSIsIl9pbXBvcnRERVIiLCJQb3NpdGlvbiIsInBsYWNlIiwiZ2V0TGVuZ3RoIiwiYnVmIiwiaW5pdGlhbCIsIm9jdGV0TGVuIiwicm1QYWRkaW5nIiwiY29uc3RydWN0TGVuZ3RoIiwib2N0ZXRzIiwiTE4yIiwicmxlbiIsInNsZW4iLCJ0b0RFUiIsImJhY2tIYWxmIiwicmFuZCIsImFzc2VydCQ1IiwiRUMiLCJuaCIsImtleVBhaXIiLCJrZXlGcm9tUHJpdmF0ZSIsImtleUZyb21QdWJsaWMiLCJnZW5LZXlQYWlyIiwiZHJiZyIsIm5zMiIsImlhZGRuIiwiX3RydW5jYXRlVG9OIiwidHJ1bmNPbmx5IiwiYmtleSIsIm5zMSIsImtwIiwia3BYIiwiaW52bSIsImNhbm9uaWNhbCIsInNpZ25hdHVyZSQxIiwic2ludiIsInJlY292ZXJQdWJLZXkiLCJpc1lPZGQiLCJpc1NlY29uZEtleSIsInJJbnYiLCJnZXRLZXlSZWNvdmVyeVBhcmFtIiwiUSIsIlFwcmltZSIsIkVDJDEiLCJlbGxpcHRpYyIsImVkZHNhIiwiX2N1cnZlIiwiZ2V0Q3VydmUiLCJTaWduaW5nS2V5IiwicHJpdmF0ZUtleSIsIl9hZGRQb2ludCIsInAwIiwicHVibGljS2V5Iiwic2lnbkRpZ2VzdCIsImRpZ2VzdEJ5dGVzIiwiY29tcHV0ZVNoYXJlZFNlY3JldCIsIm90aGVyS2V5Iiwib3RoZXJLZXlQYWlyIiwiY29tcHV0ZVB1YmxpY0tleSIsIl9pc1NpZ25pbmdLZXkiLCJjb21wcmVzc2VkIiwic2lnbmluZ0tleSIsIlRyYW5zYWN0aW9uVHlwZXMiLCJoYW5kbGVBZGRyZXNzIiwiaGFuZGxlTnVtYmVyIiwicmVjb3ZlckFkZHJlc3MiLCJjb21wdXRlQWRkcmVzcyIsInNpZyIsInJzIiwicmVjb3ZlclB1YmxpY0tleSIsImZvcm1hdE51bWJlciIsImFjY2Vzc1NldGlmeSIsImFkZHIiLCJzdG9yYWdlS2V5cyIsInN0b3JhZ2VLZXkiLCJhY2Nlc3NMaXN0aWZ5IiwibG9jYWxlQ29tcGFyZSIsImZvcm1hdEFjY2Vzc0xpc3QiLCJfc2VyaWFsaXplRWlwMTU1OSIsImFjY2Vzc0xpc3QiLCJfc2VyaWFsaXplRWlwMjkzMCIsIl9wYXJzZUVpcFNpZ25hdHVyZSIsInNlcmlhbGl6ZSIsInJlY2lkIiwidGV4dERhdGEiLCJhdG9iIiwiYnRvYSIsImdldFVybCIsImhyZWYiLCJyZXF1ZXN0IiwiaGVhZGVycyIsImJvZHkiLCJza2lwRmV0Y2hTZXR1cCIsIm1vZGUiLCJjYWNoZSIsImNyZWRlbnRpYWxzIiwicmVkaXJlY3QiLCJyZWZlcnJlciIsInJlc3BvbnNlIiwiZmV0Y2giLCJhcnJheUJ1ZmZlciIsInN0YXR1c0NvZGUiLCJzdGF0dXMiLCJzdGF0dXNNZXNzYWdlIiwic3RhdHVzVGV4dCIsInN0YWxsZXIiLCJkdXJhdGlvbiIsInNldFRpbWVvdXQiLCJib2R5aWZ5IiwidHJpbSIsImZldGNoSnNvbiIsImNvbm5lY3Rpb24iLCJqc29uIiwicHJvY2Vzc0Z1bmMiLCJ1cGRhdGVkIiwiYXR0ZW1wdExpbWl0IiwidGhyb3R0bGVMaW1pdCIsInRocm90dGxlQ2FsbGJhY2siLCJ0aHJvdHRsZVNsb3RJbnRlcnZhbCIsImVycm9yUGFzc1Rocm91Z2giLCJhbGxvdzMwNCIsInRpbWVvdXQiLCJhbGxvd0d6aXAiLCJ1c2VyIiwicGFzc3dvcmQiLCJhbGxvd0luc2VjdXJlQXV0aGVudGljYXRpb24iLCJhdXRob3JpemF0aW9uIiwicmVEYXRhIiwiUmVnRXhwIiwiZGF0YU1hdGNoIiwicmVxdWVzdEJvZHkiLCJyZXF1ZXN0TWV0aG9kIiwiZmxhdEhlYWRlcnMiLCJoZWFkZXIiLCJydW5uaW5nVGltZW91dCIsInRpbWVyIiwicHJvbWlzZSIsImNhbmNlbCIsImNsZWFyVGltZW91dCIsInJ1bm5pbmdGZXRjaCIsImF0dGVtcHQiLCJsb2NhdGlvbiIsInRyeUFnYWluIiwic3RhbGwiLCJyZXRyeUFmdGVyIiwicmFuZG9tIiwic2VydmVyRXJyb3IiLCJ0aHJvdHRsZVJldHJ5IiwicmFjZSIsIl9mZXRjaERhdGEiLCJwb2xsIiwiZnVuYyIsImNlaWxpbmciLCJpbnRlcnZhbCIsInJldHJ5TGltaXQiLCJjaGVjayIsIm9uY2VQb2xsIiwib25jZSIsIm9uY2VCbG9jayIsIlByb3ZpZGVyIiwiZ2V0QmxvY2siLCJiYXNlRmVlUGVyR2FzIiwiYWRkTGlzdGVuZXIiLCJldmVudE5hbWUiLCJsaXN0ZW5lciIsIm9uIiwicmVtb3ZlTGlzdGVuZXIiLCJfaXNQcm92aWRlciIsIkJhc2VYIiwiYWxwaGFiZXQiLCJfYWxwaGFiZXRNYXAiLCJzb3VyY2UiLCJkaWdpdHMiLCJjYXJyeSIsIl9sZWFkZXIiLCJieXRlIiwiQmFzZTU4IiwiY3JlYXRlVGFibGUiLCJjb21wcyIsImNyZWF0ZVJhbmdlVGFibGUiLCJtYXRjaE1hcCIsInJhbmdlcyIsInJhbmdlIiwiVGFibGVfQV8xX3JhbmdlcyIsIlRhYmxlX0JfMV9mbGFncyIsIlRhYmxlX0JfMl9yYW5nZXMiLCJUYWJsZV9CXzJfbHV0X2FicyIsIlRhYmxlX0JfMl9sdXRfcmVsIiwiVGFibGVfQl8yX2NvbXBsZXgiLCJUYWJsZV9DX3JhbmdlcyIsImNvZGVzIiwiY29kZXNUYWJsZUIyIiwiY29kZXBvaW50Iiwic2hpZnQiLCJfbmFtZXByZXBUYWJsZUIyIiwiTkZLQyIsIlplcm9zIiwiUGFydGl0aW9uIiwibmFtZWhhc2giLCJwYXJ0aXRpb24iLCJldGhEZWZhdWx0UHJvdmlkZXIiLCJuZXR3b3JrIiwicHJvdmlkZXJzIiwicHJvdmlkZXJMaXN0IiwiSW5mdXJhUHJvdmlkZXIiLCJpbmZ1cmEiLCJFdGhlcnNjYW5Qcm92aWRlciIsImV0aGVyc2NhbiIsIkFsY2hlbXlQcm92aWRlciIsImFsY2hlbXkiLCJQb2NrZXRQcm92aWRlciIsInBvY2tldCIsInNraXAiLCJDbG91ZGZsYXJlUHJvdmlkZXIiLCJjbG91ZGZsYXJlIiwiQW5rclByb3ZpZGVyIiwiYW5rciIsIkZhbGxiYWNrUHJvdmlkZXIiLCJxdW9ydW0iLCJyZW5ldHdvcmsiLCJldGNEZWZhdWx0UHJvdmlkZXIiLCJKc29uUnBjUHJvdmlkZXIiLCJob21lc3RlYWQiLCJlbnNBZGRyZXNzIiwiX2RlZmF1bHRQcm92aWRlciIsInJvcHN0ZW4iLCJjbGFzc2ljTW9yZG9yIiwibmV0d29ya3MiLCJ1bnNwZWNpZmllZCIsIm1haW5uZXQiLCJtb3JkZW4iLCJ0ZXN0bmV0Iiwicmlua2VieSIsImtvdmFuIiwiZ29lcmxpIiwia2ludHN1Z2kiLCJjbGFzc2ljIiwiY2xhc3NpY01vcmRlbiIsImNsYXNzaWNUZXN0bmV0IiwiY2xhc3NpY0tvdHRpIiwieGRhaSIsIm1hdGljIiwibWF0aWNtdW0iLCJvcHRpbWlzbSIsImFyYml0cnVtIiwiYm5iIiwiYm5idCIsInNoYTI1NiIsIkZvcm1hdHRlciIsImZvcm1hdHMiLCJnZXREZWZhdWx0Rm9ybWF0cyIsImJpbmQiLCJiaWdOdW1iZXIiLCJhbGxvd051bGwiLCJibG9ja0hhc2giLCJibG9ja051bWJlciIsInRyYW5zYWN0aW9uSW5kZXgiLCJjb25maXJtYXRpb25zIiwidWludDI1NiIsImNyZWF0ZXMiLCJyYXciLCJ0cmFuc2FjdGlvblJlcXVlc3QiLCJyZWNlaXB0TG9nIiwidHJhbnNhY3Rpb25IYXNoIiwidG9waWNzIiwiYXJyYXlPZiIsImxvZ0luZGV4IiwicmVjZWlwdCIsImNvbnRyYWN0QWRkcmVzcyIsInJvb3QiLCJnYXNVc2VkIiwibG9nc0Jsb29tIiwibG9ncyIsImN1bXVsYXRpdmVHYXNVc2VkIiwiZWZmZWN0aXZlR2FzUHJpY2UiLCJwYXJlbnRIYXNoIiwidGltZXN0YW1wIiwiZGlmZmljdWx0eSIsIm1pbmVyIiwiZXh0cmFEYXRhIiwidHJhbnNhY3Rpb25zIiwiYmxvY2tXaXRoVHJhbnNhY3Rpb25zIiwidHJhbnNhY3Rpb25SZXNwb25zZSIsImZyb21CbG9jayIsInRvQmxvY2siLCJmaWx0ZXJMb2ciLCJyZW1vdmVkIiwiYWxsb3dGYWxzaXNoIiwic3RyaWN0IiwiY2FsbEFkZHJlc3MiLCJnZXRDb250cmFjdEFkZHJlc3MiLCJfYmxvY2siLCJmb3JtYXQiLCJhdXRob3IiLCJfZGlmZmljdWx0eSIsImdhcyIsImlucHV0IiwibmV0d29ya0lkIiwicmF3VHJhbnNhY3Rpb24iLCJfcGFyc2UiLCJfcGFyc2VFaXAyOTMwIiwiX3BhcnNlRWlwMTU1OSIsInRyYW5zYWN0aW9uVHlwZSIsImJ5emFudGl1bSIsImNoZWNrS2V5IiwiY2hlY2tWYWx1ZSIsIm51bGxWYWx1ZSIsInJlcGxhY2VWYWx1ZSIsImNoZWNrVG9waWMiLCJ0b3BpYyIsInNlcmlhbGl6ZVRvcGljcyIsInVuaXF1ZSIsInNvcnRlZCIsImdldEV2ZW50VGFnIiwiX2lzRm9ya0V2ZW50IiwiaXNGb3JrRXZlbnQiLCJnZXRUaW1lIiwiRGF0ZSIsIlBvbGxhYmxlRXZlbnRzIiwiRXZlbnQiLCJ0YWciLCJfbGFzdEJsb2NrTnVtYmVyIiwiX2luZmxpZ2h0IiwiZXZlbnQiLCJwb2xsYWJsZSIsImNvaW5JbmZvcyIsInN5bWJvbCIsInAycGtoIiwicDJzaCIsInByZWZpeCIsImlsayIsImJ5dGVzMzJpZnkiLCJiYXNlNThFbmNvZGUiLCJtYXRjaGVySXBmcyIsIm1hdGNoZXJzIiwiX3BhcnNlU3RyaW5nIiwiX3BhcnNlQnl0ZXMiLCJnZXRJcGZzTGluayIsImxpbmsiLCJudW1QYWQiLCJwYWRkZWQiLCJieXRlc1BhZCIsImVuY29kZUJ5dGVzIiwiZGF0YXMiLCJieXRlQ291bnQiLCJSZXNvbHZlciIsInJlc29sdmVkQWRkcmVzcyIsImZvcm1hdHRlciIsInN1cHBvcnRzV2lsZGNhcmQiLCJfc3VwcG9ydHNFaXAyNTQ0IiwiX2ZldGNoIiwic2VsZWN0b3IiLCJwYXJhbWV0ZXJzIiwiY2NpcFJlYWRFbmFibGVkIiwiY29tcCIsIl9mZXRjaEJ5dGVzIiwiX2dldEFkZHJlc3MiLCJjb2luVHlwZSIsImhleEJ5dGVzIiwiY29pbkluZm8iLCJ3b3JkcyIsImdldEF2YXRhciIsImxpbmthZ2UiLCJjb250ZW50IiwiYXZhdGFyIiwiZ2V0VGV4dCIsInNjaGVtZSIsIm93bmVyIiwiX3Jlc29sdmVkQWRkcmVzcyIsInRva2VuSWQiLCJ0b2tlbk93bmVyIiwiYmFsYW5jZSIsIm1ldGFkYXRhVXJsIiwibWV0YWRhdGEiLCJpbWFnZVVybCIsImltYWdlIiwiZ2V0Q29udGVudEhhc2giLCJpcGZzIiwiaXBucyIsInN3YXJtIiwic2t5bmV0IiwidXJsU2FmZSIsImtleUJ5dGVzIiwiZGVmYXVsdEZvcm1hdHRlciIsIm5leHRQb2xsSWQiLCJCYXNlUHJvdmlkZXIiLCJzdXBlciIsIl9ldmVudHMiLCJfZW1pdHRlZCIsImRpc2FibGVDY2lwUmVhZCIsImdldEZvcm1hdHRlciIsImFueU5ldHdvcmsiLCJkZXRlY3ROZXR3b3JrIiwiX25ldHdvcmtQcm9taXNlIiwiX3JlYWR5Iiwia25vd25OZXR3b3JrIiwiZW1pdCIsIl9tYXhJbnRlcm5hbEJsb2NrTnVtYmVyIiwiX21heEZpbHRlckJsb2NrUmFuZ2UiLCJfcG9sbGluZ0ludGVydmFsIiwiX2Zhc3RRdWVyeURhdGUiLCJfbmV0d29yayIsInJlYWR5Iiwic3RhbmRhcmQiLCJkZWZhdWx0UHJvdmlkZXIiLCJjY2lwUmVhZEZldGNoIiwiY2FsbGRhdGEiLCJ1cmxzIiwic2VuZGVyIiwiZXJyb3JNZXNzYWdlcyIsImVycm9yTWVzc2FnZSIsIl9nZXRJbnRlcm5hbEJsb2NrTnVtYmVyIiwibWF4QWdlIiwiX2ludGVybmFsQmxvY2tOdW1iZXIiLCJpbnRlcm5hbEJsb2NrTnVtYmVyIiwicmVzcFRpbWUiLCJyZXFUaW1lIiwiY2hlY2tJbnRlcm5hbEJsb2NrTnVtYmVyIiwicGVyZm9ybSIsIm5ldHdvcmtFcnJvciIsIl9zZXRGYXN0QmxvY2tOdW1iZXIiLCJwb2xsSWQiLCJydW5uZXJzIiwicG9sbGluZ0ludGVydmFsIiwicHJldmlvdXNCbG9ja051bWJlciIsImV2ZW50QmxvY2tOdW1iZXIiLCJydW5uZXIiLCJnZXRUcmFuc2FjdGlvblJlY2VpcHQiLCJnZXRMb2dzIiwicmVzZXRFdmVudHNCbG9jayIsInBvbGxpbmciLCJjdXJyZW50TmV0d29yayIsIl9mYXN0QmxvY2tOdW1iZXIiLCJfZmFzdEJsb2NrTnVtYmVyUHJvbWlzZSIsImRldGVjdGVkTmV0d29yayIsIl9wb2xsZXIiLCJzZXRJbnRlcnZhbCIsIl9ib290c3RyYXBQb2xsIiwiY2xlYXJJbnRlcnZhbCIsIl9nZXRGYXN0QmxvY2tOdW1iZXIiLCJub3ciLCJnZXRCbG9ja051bWJlciIsIndhaXRGb3JUcmFuc2FjdGlvbiIsIl93YWl0Rm9yVHJhbnNhY3Rpb24iLCJyZXBsYWNlYWJsZSIsImNhbmNlbEZ1bmNzIiwiYWxyZWFkeURvbmUiLCJtaW5lZEhhbmRsZXIiLCJsYXN0QmxvY2tOdW1iZXIiLCJzdGFydEJsb2NrIiwic2Nhbm5lZEJsb2NrIiwicmVwbGFjZUhhbmRsZXIiLCJtaW5lZCIsImdldFRyYW5zYWN0aW9uIiwiZ2V0QmxvY2tXaXRoVHJhbnNhY3Rpb25zIiwidGkiLCJjYW5jZWxsZWQiLCJyZXBsYWNlbWVudCIsIl93cmFwVHJhbnNhY3Rpb24iLCJ1bnJlZiIsImFkZHJlc3NPck5hbWUiLCJfZ2V0QmxvY2tUYWciLCJnZXRDb2RlIiwiZ2V0U3RvcmFnZUF0IiwicG9zaXRpb24iLCJleHBlY3RlZEhhc2giLCJyZXR1cm5lZEhhc2giLCJ3YWl0IiwiY29uZmlybXMiLCJzaWduZWRUcmFuc2FjdGlvbiIsImhleFR4IiwiX2dldFRyYW5zYWN0aW9uUmVxdWVzdCIsIl9nZXRGaWx0ZXIiLCJfY2FsbCIsInJlZGlyZWN0cyIsInR4U2VuZGVyIiwidXJsc09mZnNldCIsInVybHNMZW5ndGgiLCJ1cmxzRGF0YSIsImNhbGxiYWNrU2VsZWN0b3IiLCJjY2lwUmVzdWx0IiwicmVzb2x2ZWQiLCJfZ2V0QmxvY2siLCJibG9ja0hhc2hPckJsb2NrVGFnIiwiaW5jbHVkZVRyYW5zYWN0aW9ucyIsImJsb2NrV2l0aFR4cyIsImdldEV0aGVyUHJpY2UiLCJnZXRSZXNvbHZlciIsImN1cnJlbnROYW1lIiwiX2dldFJlc29sdmVyIiwicmVzb2x2ZXIiLCJhZGRyRGF0YSIsImxvb2t1cEFkZHJlc3MiLCJub2RlIiwicmVzb2x2ZXJBZGRyIiwibmFtZU9yQWRkcmVzcyIsInJlc29sdmVyQWRkcmVzcyIsIl9zdGFydEV2ZW50IiwiX3N0b3BFdmVudCIsIl9hZGRFdmVudExpc3RlbmVyIiwic3RvcHBlZCIsImV2ZW50VGFnIiwibGlzdGVuZXJDb3VudCIsImxpc3RlbmVycyIsInJlbW92ZUFsbExpc3RlbmVycyIsImVycm9yR2FzIiwic3BlbHVuayIsInJlcXVpcmVEYXRhIiwiY2hlY2tFcnJvciIsInJlc3BvbnNlVGV4dCIsImdldFJlc3VsdCIsImdldExvd2VyQ2FzZSIsIkpzb25ScGNTaWduZXIiLCJhZGRyZXNzT3JJbmRleCIsImNvbm5lY3QiLCJjb25uZWN0VW5jaGVja2VkIiwiVW5jaGVja2VkSnNvblJwY1NpZ25lciIsIl9hZGRyZXNzIiwiX2luZGV4Iiwic2VuZCIsImFjY291bnRzIiwic2VuZFVuY2hlY2tlZFRyYW5zYWN0aW9uIiwiZnJvbUFkZHJlc3MiLCJlc3RpbWF0ZSIsImhleGxpZnlUcmFuc2FjdGlvbiIsInNpZ25NZXNzYWdlIiwiX2xlZ2FjeVNpZ25NZXNzYWdlIiwiX3NpZ25UeXBlZERhdGEiLCJwb3B1bGF0ZWQiLCJ1bmxvY2siLCJuZXR3b3JrT3JSZWFkeSIsIl9uZXh0SWQiLCJfY2FjaGUiLCJfZXZlbnRMb29wQ2FjaGUiLCJfdW5jYWNoZWREZXRlY3ROZXR3b3JrIiwiZ2V0U2lnbmVyIiwiZ2V0VW5jaGVja2VkU2lnbmVyIiwibGlzdEFjY291bnRzIiwianNvbnJwYyIsImFjdGlvbiIsInByZXBhcmVSZXF1ZXN0IiwiX3N0YXJ0UGVuZGluZyIsIl9wZW5kaW5nRmlsdGVyIiwicGVuZGluZ0ZpbHRlciIsImZpbHRlcklkIiwiaGFzaGVzIiwic2VxIiwiYWxsb3dFeHRyYSIsImFsbG93ZWQiLCJwcm9wZXJ0aWVzIiwiYnVpbGRXZWIzTGVnYWN5RmV0Y2hlciIsInNlbmRGdW5jIiwiZmV0Y2hlciIsIldlYjNQcm92aWRlciIsImpzb25ScGNGZXRjaEZ1bmMiLCJzdWJwcm92aWRlciIsImhvc3QiLCJpc01ldGFNYXNrIiwiYnVpbGRFaXAxMTkzRmV0Y2hlciIsInNlbmRBc3luYyIsImFzc2lnbiIsIl9kZWZpbmVQcm9wZXJ0eSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsInNvdXJjZVN5bWJvbEtleXMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIm93bktleXMiLCJlbnVtZXJhYmxlT25seSIsInN5bWJvbHMiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfb2JqZWN0U3ByZWFkMiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJkZXNjcmlwdG9yIiwiX2NyZWF0ZUNsYXNzIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX3NldFByb3RvdHlwZU9mIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiX2dldFByb3RvdHlwZU9mIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIlJlZmVyZW5jZUVycm9yIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJfY3JlYXRlU3VwZXIiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJzaGFtIiwiUHJveHkiLCJCb29sZWFuIiwidmFsdWVPZiIsIlN1cGVyIiwiTmV3VGFyZ2V0IiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiZ2VuIiwiX25leHQiLCJfdGhyb3ciLCJfYXN5bmNUb0dlbmVyYXRvciIsImNyZWF0ZVJvb3QiLCJmdWxsQ2xvbmUiLCJyZWFjdFJlbmRlciIsInJlbmRlciIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJOdW1iZXIiLCJ0b2dnbGVXYXJuaW5nIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJ1c2luZ0NsaWVudEVudHJ5UG9pbnQiLCJNQVJLIiwibW9kZXJuVW5tb3VudCIsIl94IiwiX21vZGVyblVubW91bnQiLCJfY2FsbGVlIiwiY29udGFpbmVyIiwiX2NvbnRleHQiLCJfY29udGFpbmVyJE1BUksiLCJ1bm1vdW50IiwibGVnYWN5VW5tb3VudCIsIl91bm1vdW50IiwiX2NhbGxlZTIiLCJfY29udGV4dDIiLCJfYXJyYXlXaXRoSG9sZXMiLCJfYXJyYXlMaWtlVG9BcnJheSIsImFycjIiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJtaW5MZW4iLCJ0ZXN0IiwiX25vbkl0ZXJhYmxlUmVzdCIsIl9zbGljZWRUb0FycmF5IiwiX2kiLCJfcyIsIl9lIiwiX2FyciIsIl9uIiwiX2QiLCJjYW5Vc2VEb20iLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJtYWtlUHJlZml4TWFwIiwic3R5bGVQcm9wIiwicHJlZml4ZXMiLCJkb21TdXBwb3J0Iiwid2luIiwidmVuZG9yUHJlZml4ZXMiLCJhbmltYXRpb25lbmQiLCJ0cmFuc2l0aW9uZW5kIiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsInN0eWxlIiwiX2RvY3VtZW50JGNyZWF0ZUVsZW1lIiwicHJlZml4ZWRFdmVudE5hbWVzIiwiZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUiLCJwcmVmaXhNYXAiLCJzdHlsZVByb3BMaXN0IiwiaW50ZXJuYWxBbmltYXRpb25FbmROYW1lIiwiaW50ZXJuYWxUcmFuc2l0aW9uRW5kTmFtZSIsInN1cHBvcnRUcmFuc2l0aW9uIiwiYW5pbWF0aW9uRW5kTmFtZSIsInRyYW5zaXRpb25FbmROYW1lIiwiZ2V0VHJhbnNpdGlvbk5hbWUiLCJ0cmFuc2l0aW9uTmFtZSIsInRyYW5zaXRpb25UeXBlIiwiU1RBVFVTX05PTkUiLCJTVEFUVVNfQVBQRUFSIiwiU1RBVFVTX0VOVEVSIiwiU1RBVFVTX0xFQVZFIiwiU1RFUF9OT05FIiwiU1RFUF9QUkVQQVJFIiwiU1RFUF9TVEFSVCIsIlNURVBfQUNUSVZFIiwiU1RFUF9BQ1RJVkFURUQiLCJ1c2VTYWZlU3RhdGUiLCJkZWZhdWx0VmFsdWUiLCJkZXN0cm95UmVmIiwiX1JlYWN0JHVzZVN0YXRlMiIsInNldFZhbHVlIiwidXBkYXRlciIsImlnbm9yZURlc3Ryb3kiLCJyYWYiLCJjYWYiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJhZlVVSUQiLCJyYWZJZHMiLCJNYXAiLCJjbGVhbnVwIiwiZGVsZXRlIiwid3JhcHBlclJhZiIsInRpbWVzIiwiY2FsbFJlZiIsImxlZnRUaW1lcyIsInJlYWxJZCIsInVzZUxheW91dEVmZmVjdCIsInVzZUVmZmVjdCIsIlNURVBfUVVFVUUiLCJpc0FjdGl2ZSIsInVzZVN0YXR1cyIsInN1cHBvcnRNb3Rpb24iLCJ2aXNpYmxlIiwiZ2V0RWxlbWVudCIsIl9yZWYiLCJfcmVmJG1vdGlvbkVudGVyIiwibW90aW9uRW50ZXIiLCJfcmVmJG1vdGlvbkFwcGVhciIsIm1vdGlvbkFwcGVhciIsIl9yZWYkbW90aW9uTGVhdmUiLCJtb3Rpb25MZWF2ZSIsIm1vdGlvbkRlYWRsaW5lIiwibW90aW9uTGVhdmVJbW1lZGlhdGVseSIsIm9uQXBwZWFyUHJlcGFyZSIsIm9uRW50ZXJQcmVwYXJlIiwib25MZWF2ZVByZXBhcmUiLCJvbkFwcGVhclN0YXJ0Iiwib25FbnRlclN0YXJ0Iiwib25MZWF2ZVN0YXJ0Iiwib25BcHBlYXJBY3RpdmUiLCJvbkVudGVyQWN0aXZlIiwib25MZWF2ZUFjdGl2ZSIsIm9uQXBwZWFyRW5kIiwib25FbnRlckVuZCIsIm9uTGVhdmVFbmQiLCJvblZpc2libGVDaGFuZ2VkIiwiX3VzZVN0YXRlMiIsImFzeW5jVmlzaWJsZSIsInNldEFzeW5jVmlzaWJsZSIsIl91c2VTdGF0ZTQiLCJzZXRTdGF0dXMiLCJfdXNlU3RhdGU2Iiwic2V0U3R5bGUiLCJtb3VudGVkUmVmIiwidXNlUmVmIiwiZGVhZGxpbmVSZWYiLCJnZXREb21FbGVtZW50IiwiYWN0aXZlUmVmIiwib25JbnRlcm5hbE1vdGlvbkVuZCIsImVsZW1lbnQiLCJkZWFkbGluZSIsImNhbkVuZCIsImN1cnJlbnRBY3RpdmUiLCJfdXNlRG9tTW90aW9uRXZlbnRzIiwiY2FjaGVFbGVtZW50UmVmIiwiY2FsbGJhY2tSZWYiLCJyZW1vdmVNb3Rpb25FdmVudHMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsInVzZURvbU1vdGlvbkV2ZW50cyIsInBhdGNoTW90aW9uRXZlbnRzIiwiZXZlbnRIYW5kbGVycyIsIl9yZWYyIiwiX3JlZjMiLCJfcmVmNCIsIl91c2VTdGVwUXVldWUyIiwic2V0U3RlcCIsIl91c2VOZXh0RnJhbWUiLCJuZXh0RnJhbWVSZWYiLCJjYW5jZWxOZXh0RnJhbWUiLCJuZXh0RnJhbWUiLCJkZWxheSIsIm5leHRGcmFtZUlkIiwiaXNDYW5jZWxlZCIsInVzZU5leHRGcmFtZSIsIl91c2VOZXh0RnJhbWUyIiwibmV4dFN0ZXAiLCJkb05leHQiLCJ1c2VTdGVwUXVldWUiLCJuZXdTdGVwIiwib25QcmVwYXJlIiwiX2V2ZW50SGFuZGxlcnMkc3RlcCIsInN0YXJ0U3RlcCIsImFjdGl2ZSIsIm5leHRTdGF0dXMiLCJpc01vdW50ZWQiLCJtZXJnZWRTdHlsZSIsIl9SZWFjdCRDb21wb25lbnQiLCJEb21XcmFwcGVyIiwiX3N1cGVyIiwiY2hpbGRyZW4iLCJjb25maWciLCJ0cmFuc2l0aW9uU3VwcG9ydCIsImlzU3VwcG9ydFRyYW5zaXRpb24iLCJtb3Rpb25OYW1lIiwiQ1NTTW90aW9uIiwicmVmIiwiX3Byb3BzJHZpc2libGUiLCJfcHJvcHMkcmVtb3ZlT25MZWF2ZSIsInJlbW92ZU9uTGVhdmUiLCJmb3JjZVJlbmRlciIsImxlYXZlZENsYXNzTmFtZSIsImV2ZW50UHJvcHMiLCJub2RlUmVmIiwid3JhcHBlck5vZGVSZWYiLCJfdXNlU3RhdHVzMiIsIkhUTUxFbGVtZW50Iiwic3RhdHVzU3RlcCIsInN0YXR1c1N0eWxlIiwibWVyZ2VkVmlzaWJsZSIsInJlbmRlcmVkUmVmIiwibW90aW9uQ2hpbGRyZW4iLCJzZXROb2RlUmVmIiwiZmlsbFJlZiIsIm1lcmdlZFByb3BzIiwiX2NsYXNzTmFtZXMiLCJzdGF0dXNTdWZmaXgiLCJjbGFzc05hbWUiLCJkaXNwbGF5Iiwibm9kZU9yQ29tcG9uZW50IiwiX3R5cGUkcHJvdG90eXBlIiwiX25vZGVPckNvbXBvbmVudCRwcm90IiwiaXNNZW1vIiwic3VwcG9ydFJlZiIsIlNUQVRVU19BREQiLCJTVEFUVVNfS0VFUCIsIlNUQVRVU19SRU1PVkUiLCJTVEFUVVNfUkVNT1ZFRCIsIndyYXBLZXlUb09iamVjdCIsImtleU9iaiIsInBhcnNlS2V5cyIsImRpZmZLZXlzIiwicHJldktleXMiLCJjdXJyZW50S2V5cyIsImxpc3QiLCJjdXJyZW50SW5kZXgiLCJjdXJyZW50TGVuIiwicHJldktleU9iamVjdHMiLCJjdXJyZW50S2V5T2JqZWN0cyIsImhpdCIsImN1cnJlbnRLZXlPYmoiLCJkdXBsaWNhdGVkS2V5cyIsIm1hdGNoS2V5IiwiX2V4Y2x1ZGVkIiwiX2V4Y2x1ZGVkMiIsIk1PVElPTl9QUk9QX05BTUVTIiwiQ1NTTW90aW9uTGlzdCIsIl90aGlzIiwiX2xlbiIsIl9rZXkiLCJrZXlFbnRpdGllcyIsInJlbW92ZUtleSIsIm5leHRLZXlFbnRpdGllcyIsImVudGl0eSIsInNldFN0YXRlIiwiX3RoaXMyIiwiX3RoaXMkcHJvcHMiLCJjb21wb25lbnQiLCJfb25WaXNpYmxlQ2hhbmdlZCIsIm9uQWxsUmVtb3ZlZCIsInJlc3RQcm9wcyIsIkNvbXBvbmVudCIsIm1vdGlvblByb3BzIiwicHJvcCIsImNoYW5nZWRWaXNpYmxlIiwicGFyc2VkS2V5T2JqZWN0cyIsInByZXZFbnRpdHkiLCJmaW5kIiwiX3JlZjUiLCJkZWZhdWx0UHJvcHMiLCJOb3RpY2UiLCJfQ29tcG9uZW50IiwiY2xvc2VUaW1lciIsImNsb3NlIiwic3RvcFByb3BhZ2F0aW9uIiwiY2xlYXJDbG9zZVRpbWVyIiwib25DbG9zZSIsIm5vdGljZUtleSIsInN0YXJ0Q2xvc2VUaW1lciIsInByZXZQcm9wcyIsInVwZGF0ZU1hcmsiLCJyZXN0YXJ0Q2xvc2VUaW1lciIsIl90aGlzJHByb3BzMiIsInByZWZpeENscyIsImNsb3NhYmxlIiwiY2xvc2VJY29uIiwib25DbGljayIsImhvbGRlciIsImNvbXBvbmVudENsYXNzIiwiZGF0YU9yQXJpYUF0dHJpYnV0ZVByb3BzIiwic3Vic3RyIiwib25Nb3VzZUVudGVyIiwib25Nb3VzZUxlYXZlIiwidGFiSW5kZXgiLCJfaXRlcmFibGVUb0FycmF5IiwiX3RvQ29uc3VtYWJsZUFycmF5Iiwibm90aWZpY2F0aW9uSW5zdGFuY2UiLCJjcmVhdGVkUmVmIiwiZWxlbWVudHMiLCJzZXRFbGVtZW50cyIsIm5vdGljZVByb3BzIiwiZmlyc3RNb3VudCIsIm5vdGljZUVsZSIsIm9yaWdpbkVsZW1lbnRzIiwiZmluZEluZGV4IiwiZWxlIiwiY2xvbmVMaXN0IiwiZ2V0VXVpZCIsIk5vdGlmaWNhdGlvbiIsIm5vdGljZXMiLCJob29rUmVmcyIsIm9yaWdpbk5vdGljZSIsImhvbGRlckNhbGxiYWNrIiwibm90aWNlIiwibWF4Q291bnQiLCJwcmV2aW91c1N0YXRlIiwibm90aWNlSW5kZXgiLCJ1cGRhdGVkTm90aWNlcyIsInNwbGljZSIsInVzZXJQYXNzS2V5IiwicmVtb3ZlIiwiX3JlZjIkbm90aWNlIiwibm90aWNlUHJvcHNNYXAiLCJub3RpY2VLZXlzIiwiX25vdGljZSRvbkNsb3NlIiwibW90aW9uQ2xhc3NOYW1lIiwibW90aW9uU3R5bGUiLCJfdGhpczIkbm90aWNlUHJvcHNNYXAiLCJuZXdJbnN0YW5jZSIsInRvcCIsImxlZnQiLCJfcmVmNiIsImdldENvbnRhaW5lciIsImFwcGVuZENoaWxkIiwiY2FsbGVkIiwibm90aWZpY2F0aW9uIiwicmVtb3ZlTm90aWNlIiwiZGVzdHJveSIsIl94MiIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInVzZU5vdGlmaWNhdGlvbiIsIm1vZGVyblJlbmRlciIsImxlZ2FjeVJlbmRlciIsImNyZWF0ZUNvbnRleHQiLCJib3VuZDAxIiwicGFyc2VGbG9hdCIsImlzT25lUG9pbnRaZXJvIiwiaXNQZXJjZW50IiwiaXNQZXJjZW50YWdlIiwibWluIiwiY2xhbXAwMSIsImJvdW5kQWxwaGEiLCJjb252ZXJ0VG9QZXJjZW50YWdlIiwicmdiVG9Ic2wiLCJodWUycmdiIiwicmdiVG9Ic3YiLCJyZ2JUb0hleCIsImFsbG93M0NoYXIiLCJyb3VuZCIsInN0YXJ0c1dpdGgiLCJjb252ZXJ0SGV4VG9EZWNpbWFsIiwicGFyc2VJbnRGcm9tSGV4IiwibmFtZXMiLCJhbGljZWJsdWUiLCJhbnRpcXVld2hpdGUiLCJhcXVhIiwiYXF1YW1hcmluZSIsImF6dXJlIiwiYmVpZ2UiLCJiaXNxdWUiLCJibGFjayIsImJsYW5jaGVkYWxtb25kIiwiYmx1ZSIsImJsdWV2aW9sZXQiLCJicm93biIsImJ1cmx5d29vZCIsImNhZGV0Ymx1ZSIsImNoYXJ0cmV1c2UiLCJjaG9jb2xhdGUiLCJjb3JhbCIsImNvcm5mbG93ZXJibHVlIiwiY29ybnNpbGsiLCJjcmltc29uIiwiY3lhbiIsImRhcmtibHVlIiwiZGFya2N5YW4iLCJkYXJrZ29sZGVucm9kIiwiZGFya2dyYXkiLCJkYXJrZ3JlZW4iLCJkYXJrZ3JleSIsImRhcmtraGFraSIsImRhcmttYWdlbnRhIiwiZGFya29saXZlZ3JlZW4iLCJkYXJrb3JhbmdlIiwiZGFya29yY2hpZCIsImRhcmtyZWQiLCJkYXJrc2FsbW9uIiwiZGFya3NlYWdyZWVuIiwiZGFya3NsYXRlYmx1ZSIsImRhcmtzbGF0ZWdyYXkiLCJkYXJrc2xhdGVncmV5IiwiZGFya3R1cnF1b2lzZSIsImRhcmt2aW9sZXQiLCJkZWVwcGluayIsImRlZXBza3libHVlIiwiZGltZ3JheSIsImRpbWdyZXkiLCJkb2RnZXJibHVlIiwiZmlyZWJyaWNrIiwiZmxvcmFsd2hpdGUiLCJmb3Jlc3RncmVlbiIsImZ1Y2hzaWEiLCJnYWluc2Jvcm8iLCJnaG9zdHdoaXRlIiwiZ29sZGVucm9kIiwiZ29sZCIsImdyYXkiLCJncmVlbiIsImdyZWVueWVsbG93IiwiZ3JleSIsImhvbmV5ZGV3IiwiaG90cGluayIsImluZGlhbnJlZCIsImluZGlnbyIsIml2b3J5Iiwia2hha2kiLCJsYXZlbmRlcmJsdXNoIiwibGF2ZW5kZXIiLCJsYXduZ3JlZW4iLCJsZW1vbmNoaWZmb24iLCJsaWdodGJsdWUiLCJsaWdodGNvcmFsIiwibGlnaHRjeWFuIiwibGlnaHRnb2xkZW5yb2R5ZWxsb3ciLCJsaWdodGdyYXkiLCJsaWdodGdyZWVuIiwibGlnaHRncmV5IiwibGlnaHRwaW5rIiwibGlnaHRzYWxtb24iLCJsaWdodHNlYWdyZWVuIiwibGlnaHRza3libHVlIiwibGlnaHRzbGF0ZWdyYXkiLCJsaWdodHNsYXRlZ3JleSIsImxpZ2h0c3RlZWxibHVlIiwibGlnaHR5ZWxsb3ciLCJsaW1lIiwibGltZWdyZWVuIiwibGluZW4iLCJtYWdlbnRhIiwibWFyb29uIiwibWVkaXVtYXF1YW1hcmluZSIsIm1lZGl1bWJsdWUiLCJtZWRpdW1vcmNoaWQiLCJtZWRpdW1wdXJwbGUiLCJtZWRpdW1zZWFncmVlbiIsIm1lZGl1bXNsYXRlYmx1ZSIsIm1lZGl1bXNwcmluZ2dyZWVuIiwibWVkaXVtdHVycXVvaXNlIiwibWVkaXVtdmlvbGV0cmVkIiwibWlkbmlnaHRibHVlIiwibWludGNyZWFtIiwibWlzdHlyb3NlIiwibW9jY2FzaW4iLCJuYXZham93aGl0ZSIsIm5hdnkiLCJvbGRsYWNlIiwib2xpdmUiLCJvbGl2ZWRyYWIiLCJvcmFuZ2UiLCJvcmFuZ2VyZWQiLCJvcmNoaWQiLCJwYWxlZ29sZGVucm9kIiwicGFsZWdyZWVuIiwicGFsZXR1cnF1b2lzZSIsInBhbGV2aW9sZXRyZWQiLCJwYXBheWF3aGlwIiwicGVhY2hwdWZmIiwicGVydSIsInBpbmsiLCJwbHVtIiwicG93ZGVyYmx1ZSIsInB1cnBsZSIsInJlYmVjY2FwdXJwbGUiLCJyb3N5YnJvd24iLCJyb3lhbGJsdWUiLCJzYWRkbGVicm93biIsInNhbG1vbiIsInNhbmR5YnJvd24iLCJzZWFncmVlbiIsInNlYXNoZWxsIiwic2llbm5hIiwic2lsdmVyIiwic2t5Ymx1ZSIsInNsYXRlYmx1ZSIsInNsYXRlZ3JheSIsInNsYXRlZ3JleSIsInNub3ciLCJzcHJpbmdncmVlbiIsInN0ZWVsYmx1ZSIsInRhbiIsInRlYWwiLCJ0aGlzdGxlIiwidG9tYXRvIiwidHVycXVvaXNlIiwidmlvbGV0Iiwid2hlYXQiLCJ3aGl0ZSIsIndoaXRlc21va2UiLCJ5ZWxsb3ciLCJ5ZWxsb3dncmVlbiIsImlucHV0VG9SR0IiLCJjb2xvciIsInJnYiIsIm9rIiwibmFtZWQiLCJleGVjIiwicmdiYSIsImhzbCIsImhzbGEiLCJoc3YiLCJoc3ZhIiwiaGV4OCIsImhleDYiLCJoZXg0IiwiaGV4MyIsInN0cmluZ0lucHV0VG9PYmplY3QiLCJpc1ZhbGlkQ1NTVW5pdCIsImhzdlRvUmdiIiwiaHNsVG9SZ2IiLCJDU1NfVU5JVCIsIlBFUk1JU1NJVkVfTUFUQ0gzIiwiUEVSTUlTU0lWRV9NQVRDSDQiLCJkYXJrQ29sb3JNYXAiLCJvcGFjaXR5IiwidG9Ic3YiLCJtaXgiLCJyZ2IxIiwicmdiMiIsImFtb3VudCIsImdldEh1ZSIsImxpZ2h0IiwiaHVlIiwiZ2V0U2F0dXJhdGlvbiIsInNhdHVyYXRpb24iLCJ0b0ZpeGVkIiwiZ2V0VmFsdWUiLCJvcHRzIiwicGF0dGVybnMiLCJwQ29sb3IiLCJjb2xvclN0cmluZyIsIl9oc3YiLCJfY29sb3JTdHJpbmciLCJ0aGVtZSIsImJhY2tncm91bmRDb2xvciIsInByZXNldFByaW1hcnlDb2xvcnMiLCJ2b2xjYW5vIiwiZ2Vla2JsdWUiLCJwcmVzZXRQYWxldHRlcyIsInByZXNldERhcmtQYWxldHRlcyIsInByaW1hcnkiLCJ3YXJuZWQiLCJ2YWxpZCIsIk1BUktfS0VZIiwiZ2V0TWFyayIsIm9wdGlvbiIsImF0dGFjaFRvIiwicXVlcnlTZWxlY3RvciIsImluamVjdENTUyIsImNzcyIsIl9vcHRpb24kY3NwIiwiX29wdGlvbiRjc3AyIiwic3R5bGVOb2RlIiwiY3NwIiwiaW5uZXJIVE1MIiwiZmlyc3RDaGlsZCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJjb250YWluZXJDYWNoZSIsImZpbmRFeGlzdE5vZGUiLCJ0YWdOYW1lIiwiZ2V0QXR0cmlidXRlIiwidXBkYXRlQ1NTIiwiaGFzIiwicGxhY2Vob2xkZXJTdHlsZSIsIl9vcHRpb24kY3NwMyIsIl9vcHRpb24kY3NwNCIsIl9vcHRpb24kY3NwNSIsImV4aXN0Tm9kZSIsIm5ld05vZGUiLCJzZXRBdHRyaWJ1dGUiLCJpc0ljb25EZWZpbml0aW9uIiwiaWNvbiIsIm5vcm1hbGl6ZUF0dHJzIiwiYXR0cnMiLCJjbGFzcyIsInJvb3RQcm9wcyIsImdldFNlY29uZGFyeUNvbG9yIiwicHJpbWFyeUNvbG9yIiwibm9ybWFsaXplVHdvVG9uZUNvbG9ycyIsInR3b1RvbmVDb2xvciIsImljb25TdHlsZXMiLCJ0d29Ub25lQ29sb3JQYWxldHRlIiwic2Vjb25kYXJ5Q29sb3IiLCJjYWxjdWxhdGVkIiwiSWNvbkJhc2UiLCJjb2xvcnMiLCJzdHlsZVN0ciIsInVzZUNvbnRleHQiLCJ1c2VJbnNlcnRTdHlsZXMiLCJoZWlnaHQiLCJnZXRUd29Ub25lQ29sb3JzIiwic2V0VHdvVG9uZUNvbG9ycyIsInNldFR3b1RvbmVDb2xvciIsIl9ub3JtYWxpemVUd29Ub25lQ29sbzIiLCJJY29uIiwic3BpbiIsInJvdGF0ZSIsIl9SZWFjdCR1c2VDb250ZXh0JHByZSIsImNsYXNzU3RyaW5nIiwiaWNvblRhYkluZGV4Iiwic3ZnU3R5bGUiLCJtc1RyYW5zZm9ybSIsInRyYW5zZm9ybSIsInJvbGUiLCJnZXRUd29Ub25lQ29sb3IiLCJBbnRkSWNvbiIsIkNvbmZpZ0NvbnRleHQiLCJnZXRQcmVmaXhDbHMiLCJzdWZmaXhDbHMiLCJjdXN0b21pemVQcmVmaXhDbHMiLCJDb25maWdDb25zdW1lciIsIkNvbnN1bWVyIiwicmV0Iiwia2VlcEVtcHR5IiwiaXNGcmFnbWVudCIsIkhPT0tfTUFSSyIsIndhcm5pbmdGdW5jIiwiZ2V0RmllbGRWYWx1ZSIsImdldEZpZWxkc1ZhbHVlIiwiZ2V0RmllbGRFcnJvciIsImdldEZpZWxkV2FybmluZyIsImdldEZpZWxkc0Vycm9yIiwiaXNGaWVsZHNUb3VjaGVkIiwiaXNGaWVsZFRvdWNoZWQiLCJpc0ZpZWxkVmFsaWRhdGluZyIsImlzRmllbGRzVmFsaWRhdGluZyIsInJlc2V0RmllbGRzIiwic2V0RmllbGRzIiwic2V0RmllbGRzVmFsdWUiLCJ2YWxpZGF0ZUZpZWxkcyIsInN1Ym1pdCIsImdldEludGVybmFsSG9va3MiLCJkaXNwYXRjaCIsImluaXRFbnRpdHlWYWx1ZSIsInJlZ2lzdGVyRmllbGQiLCJ1c2VTdWJzY3JpYmUiLCJzZXRJbml0aWFsVmFsdWVzIiwiZGVzdHJveUZvcm0iLCJzZXRDYWxsYmFja3MiLCJyZWdpc3RlcldhdGNoIiwiZ2V0RmllbGRzIiwic2V0VmFsaWRhdGVNZXNzYWdlcyIsInNldFByZXNlcnZlIiwiZ2V0SW5pdGlhbFZhbHVlIiwiX2NvbnN0cnVjdCIsIlBhcmVudCIsIkNsYXNzIiwiX3dyYXBOYXRpdmVTdXBlciIsIldyYXBwZXIiLCJmb3JtYXRSZWdFeHAiLCJjb252ZXJ0RmllbGRzRXJyb3IiLCJ0ZW1wbGF0ZSIsIl8iLCJpc0VtcHR5VmFsdWUiLCJpc05hdGl2ZVN0cmluZ1R5cGUiLCJhc3luY1NlcmlhbEFycmF5IiwiYXJyTGVuZ3RoIiwib3JpZ2luYWwiLCJwcm9jZXNzIiwiZW52IiwiQXN5bmNWYWxpZGF0aW9uRXJyb3IiLCJfRXJyb3IiLCJjb21wbGVtZW50RXJyb3IiLCJydWxlIiwib2UiLCJmaWVsZFZhbHVlIiwiZnVsbEZpZWxkcyIsImZ1bGxGaWVsZCIsImRlZXBNZXJnZSIsInVybFJlZyIsInJlcXVpcmVkJDEiLCJyZXF1aXJlZCIsIm1lc3NhZ2VzIiwicGF0dGVybiQyIiwiaW50ZWdlciIsInJlZ2V4cCIsImRhdGUiLCJnZXRNb250aCIsImdldFllYXIiLCJlbWFpbCIsImluY2x1ZGVCb3VuZGFyaWVzIiwidjQiLCJ2NnNlZyIsInY2IiwidjQ2RXhhY3QiLCJ2NGV4YWN0IiwidjZleGFjdCIsImlwIiwiZXhhY3QiLCJpcHY0IiwiaXB2NiIsImdldFVybFJlZ2V4IiwicnVsZXMiLCJ3aGl0ZXNwYWNlIiwicnVsZVR5cGUiLCJwYXR0ZXJuIiwibGFzdEluZGV4IiwibWlzbWF0Y2giLCJ2YWxpZGF0b3JzIiwiZGF0ZU9iamVjdCIsImFueSIsIm5ld01lc3NhZ2VzIiwiaW52YWxpZCIsImNsb25lZCIsIlNjaGVtYSIsIl9tZXNzYWdlcyIsIl9wcm90byIsInNvdXJjZV8iLCJvYyIsIm1lc3NhZ2VzJDEiLCJzZXJpZXMiLCJ2YWxpZGF0b3IiLCJnZXRWYWxpZGF0aW9uTWV0aG9kIiwiZ2V0VHlwZSIsImVycm9yRmllbGRzIiwib2JqQXJyIiwiZmlyc3QiLCJfcGVuZGluZyIsImZsYXR0ZW5BcnIiLCJmbGF0dGVuT2JqQXJyIiwiZmlyc3RGaWVsZHMiLCJvYmpBcnJLZXlzIiwib2JqQXJyTGVuZ3RoIiwidG90YWwiLCJwZW5kaW5nIiwiYXN5bmNQYXJhbGxlbEFycmF5IiwiYXN5bmNNYXAiLCJkb0l0IiwiZGVlcCIsImRlZmF1bHRGaWVsZCIsImFkZEZ1bGxGaWVsZCIsInNjaGVtYSIsImNiIiwiZXJyb3JMaXN0Iiwic3VwcHJlc3NXYXJuaW5nIiwiZmlsbGVkRXJyb3JzIiwiZmllbGRzU2NoZW1hIiwicGFyZWRGaWVsZHNTY2hlbWEiLCJmaWVsZFNjaGVtYSIsImZpZWxkU2NoZW1hTGlzdCIsImVycnMiLCJmaW5hbEVycm9ycyIsImFzeW5jVmFsaWRhdG9yIiwic3VwcHJlc3NWYWxpZGF0b3JFcnJvciIsIl9lcnJvcnMiLCJtZXNzYWdlSW5kZXgiLCJyZWdpc3RlciIsInR5cGVUZW1wbGF0ZSIsImRlZmF1bHRWYWxpZGF0ZU1lc3NhZ2VzIiwiZGVmYXVsdCIsImVudW0iLCJmbG9hdCIsImludGVybmFsU2V0IiwicGF0aHMiLCJyZW1vdmVJZlVuZGVmaW5lZCIsIl9wYXRocyIsInJlc3RQYXRoIiwiY2xvbmVEZWVwIiwiY2xvbmVBcnJheURlZXAiLCJjbG9uZU9iamVjdERlZXAiLCJnZXROYW1lUGF0aCIsInN0b3JlIiwibmFtZVBhdGgiLCJuZXdTdG9yZSIsImNsb25lQnlOYW1lUGF0aExpc3QiLCJuYW1lUGF0aExpc3QiLCJjb250YWluc05hbWVQYXRoIiwic29tZSIsIm1hdGNoTmFtZVBhdGgiLCJpc09iamVjdCIsImludGVybmFsU2V0VmFsdWVzIiwicHJldlZhbHVlIiwicmVjdXJzaXZlIiwic2V0VmFsdWVzIiwicmVzdFZhbHVlcyIsImNoYW5nZWROYW1lUGF0aCIsImV2ZXJ5IiwibmFtZVVuaXQiLCJkZWZhdWx0R2V0VmFsdWVGcm9tRXZlbnQiLCJ2YWx1ZVByb3BOYW1lIiwibW92ZUluZGV4IiwidG9JbmRleCIsImRpZmYiLCJBc3luY1ZhbGlkYXRvciIsInJlcGxhY2VNZXNzYWdlIiwia3YiLCJDT0RFX0xPR0lDX0VSUk9SIiwidmFsaWRhdGVSdWxlIiwiX3gzIiwiX3g0IiwiX3g1IiwiX3ZhbGlkYXRlUnVsZSIsIm1lc3NhZ2VWYXJpYWJsZXMiLCJjbG9uZVJ1bGUiLCJvcmlnaW5WYWxpZGF0b3IiLCJzdWJSdWxlRmllbGQiLCJzdWJSZXN1bHRzIiwiZmlsbFZhcmlhYmxlUmVzdWx0IiwicnVsZUluZGV4IiwidmFsaWRhdGVNZXNzYWdlcyIsInQwIiwibWVyZ2VkTWVzc2FnZSIsInN1YlZhbHVlIiwiX2ZpbmlzaE9uQWxsRmFpbGVkIiwiX2NhbGxlZTMiLCJydWxlUHJvbWlzZXMiLCJfY29udGV4dDMiLCJlcnJvcnNMaXN0IiwiX2ZpbmlzaE9uRmlyc3RGYWlsZWQiLCJfY2FsbGVlNCIsIl9jb250ZXh0NCIsInJ1bGVFcnJvciIsIkVNUFRZX0VSUk9SUyIsInJlcXVpcmVVcGRhdGUiLCJzaG91bGRVcGRhdGUiLCJuZXh0VmFsdWUiLCJGaWVsZCIsInJlc2V0Q291bnQiLCJjYW5jZWxSZWdpc3RlckZ1bmMiLCJtb3VudGVkIiwidG91Y2hlZCIsImRpcnR5IiwidmFsaWRhdGVQcm9taXNlIiwicHJldlZhbGlkYXRpbmciLCJ3YXJuaW5ncyIsImNhbmNlbFJlZ2lzdGVyIiwicHJlc2VydmUiLCJpc0xpc3RGaWVsZCIsIl9maWVsZENvbnRleHQkcHJlZml4TiIsImZpZWxkQ29udGV4dCIsInByZWZpeE5hbWUiLCJnZXRSdWxlcyIsIl90aGlzJHByb3BzMyIsIl90aGlzJHByb3BzMyRydWxlcyIsInJlZnJlc2giLCJ0cmlnZ2VyTWV0YUV2ZW50Iiwib25NZXRhQ2hhbmdlIiwiZ2V0TWV0YSIsIm9uU3RvcmVDaGFuZ2UiLCJwcmV2U3RvcmUiLCJfdGhpcyRwcm9wczQiLCJfdGhpcyRwcm9wczQkZGVwZW5kZW4iLCJkZXBlbmRlbmNpZXMiLCJvblJlc2V0IiwiY3VyVmFsdWUiLCJuYW1lUGF0aE1hdGNoIiwicmVSZW5kZXIiLCJ2YWxpZGF0aW5nIiwiZGVwZW5kZW5jeSIsInJlbGF0ZWRGaWVsZHMiLCJ2YWxpZGF0ZVJ1bGVzIiwiY3VycmVudFZhbHVlIiwicm9vdFByb21pc2UiLCJfdGhpcyRwcm9wczUiLCJfdGhpcyRwcm9wczUkdmFsaWRhdGUiLCJ2YWxpZGF0ZUZpcnN0IiwidHJpZ2dlck5hbWUiLCJmaWx0ZXJlZFJ1bGVzIiwidmFsaWRhdGVUcmlnZ2VyIiwiaW5jbHVkZXMiLCJzdW1tYXJ5UHJvbWlzZSIsImZpbGxlZFJ1bGVzIiwiY3VycmVudFJ1bGUiLCJvcmlnaW5WYWxpZGF0b3JGdW5jIiwiaGFzUHJvbWlzZSIsIncxIiwid2FybmluZ09ubHkiLCJpMSIsIncyIiwiaTIiLCJfeDYiLCJfeDciLCJfeDkiLCJmaW5pc2hPbkZpcnN0RmFpbGVkIiwiX3g4IiwiZmluaXNoT25BbGxGYWlsZWQiLCJydWxlRXJyb3JzIiwibmV4dEVycm9ycyIsIm5leHRXYXJuaW5ncyIsIl9yZWYzJGVycm9ycyIsImlzRmllbGREaXJ0eSIsImluaXRpYWxWYWx1ZSIsImdldEVycm9ycyIsImdldFdhcm5pbmdzIiwiaXNMaXN0IiwiaXNQcmVzZXJ2ZSIsImdldE9ubHlDaGlsZCIsIm1ldGEiLCJnZXRDb250cm9sbGVkIiwiaXNGdW5jdGlvbiIsImNoaWxkTGlzdCIsImNoaWxkUHJvcHMiLCJfdGhpcyRwcm9wczYiLCJ0cmlnZ2VyIiwiZ2V0VmFsdWVGcm9tRXZlbnQiLCJnZXRWYWx1ZVByb3BzIiwibWVyZ2VkVmFsaWRhdGVUcmlnZ2VyIiwiX2dldEludGVybmFsSG9va3MiLCJtZXJnZWRHZXRWYWx1ZVByb3BzIiwib3JpZ2luVHJpZ2dlckZ1bmMiLCJjb250cm9sIiwibmV3VmFsdWUiLCJ2YWxpZGF0ZVRyaWdnZXJMaXN0Iiwib3JpZ2luVHJpZ2dlciIsIl90aGlzJHByb3BzNyIsImZvcmNlVXBkYXRlIiwicmV0dXJuQ2hpbGROb2RlIiwiX3RoaXMkZ2V0T25seUNoaWxkIiwiY29udGV4dFR5cGUiLCJGaWVsZENvbnRleHQiLCJTUExJVCIsImNlbGwiLCJOYW1lTWFwIiwia3ZzIiwiZW50cmllcyIsImNlbGxzIiwiX2NlbGwkbWF0Y2gyIiwidW5pdCIsIkZvcm1TdG9yZSIsImZvcmNlUm9vdFVwZGF0ZSIsImZvcm1Ib29rZWQiLCJzdWJzY3JpYmFibGUiLCJmaWVsZEVudGl0aWVzIiwiaW5pdGlhbFZhbHVlcyIsImNhbGxiYWNrcyIsImxhc3RWYWxpZGF0ZVByb21pc2UiLCJnZXRGb3JtIiwicHJldldpdGhvdXRQcmVzZXJ2ZXMiLCJpbml0IiwiX3RoaXMkcHJldldpdGhvdXRQcmVzIiwibmV4dFN0b3JlIiwidXBkYXRlU3RvcmUiLCJnZXRGaWVsZEVudGl0aWVzIiwiaXNNZXJnZWRQcmVzZXJ2ZSIsImluaXRWYWx1ZSIsIndhdGNoTGlzdCIsIm5vdGlmeVdhdGNoIiwidGltZW91dElkIiwid2FybmluZ1VuaG9va2VkIiwicHVyZSIsImdldEZpZWxkc01hcCIsImdldEZpZWxkRW50aXRpZXNGb3JOYW1lUGF0aExpc3QiLCJuYW1lTGlzdCIsIklOVkFMSURBVEVfTkFNRV9QQVRIIiwiZmlsdGVyRnVuYyIsImZpbHRlcmVkTmFtZUxpc3QiLCJfZW50aXR5JGlzTGlzdEZpZWxkIiwiYXJnMCIsImFyZzEiLCJpc0FsbEZpZWxkc1RvdWNoZWQiLCJzaG9ydE5hbWVQYXRoIiwiZmllbGROYW1lUGF0aCIsImlzTmFtZVBhdGhMaXN0VG91Y2hlZCIsImVudGl0aWVzIiwibmFtZVBhdGhMaXN0RW50aXRpZXMiLCJ0ZXN0RmllbGQiLCJyZXNldFdpdGhGaWVsZEluaXRpYWxWYWx1ZSIsInJlY29yZHMiLCJTZXQiLCJyZXF1aXJlZEZpZWxkRW50aXRpZXMiLCJyZXNldFdpdGhGaWVsZHMiLCJzaXplIiwib3JpZ2luVmFsdWUiLCJza2lwRXhpc3QiLCJfcmVxdWlyZWRGaWVsZEVudGl0aWUiLCJub3RpZnlPYnNlcnZlcnMiLCJmaWVsZERhdGEiLCJmaWVsZFByZXNlcnZlIiwibWVyZ2VkUHJlc2VydmUiLCJzdWJOYW1lUGF0aCIsIl9wcmV2U3RvcmUiLCJ0cmlnZ2VyRGVwZW5kZW5jaWVzVXBkYXRlIiwidXBkYXRlVmFsdWUiLCJfbmFtZVBhdGgiLCJtZXJnZWRJbmZvIiwiY2hpbGRyZW5GaWVsZHMiLCJnZXREZXBlbmRlbmN5Q2hpbGRyZW5GaWVsZHMiLCJvblZhbHVlc0NoYW5nZSIsInRyaWdnZXJPbkZpZWxkc0NoYW5nZSIsInJvb3ROYW1lUGF0aCIsImRlcGVuZGVuY2llczJmaWVsZHMiLCJkZXBlbmRlbmN5TmFtZVBhdGgiLCJmaWxsQ2hpbGRyZW4iLCJmaWxlZEVycm9ycyIsIm9uRmllbGRzQ2hhbmdlIiwiZmllbGROYW1lIiwicHJvdmlkZU5hbWVMaXN0IiwicHJvbWlzZUxpc3QiLCJtZXJnZWRFcnJvcnMiLCJtZXJnZWRXYXJuaW5ncyIsImhhc0Vycm9yIiwiYWxsUHJvbWlzZUZpbmlzaCIsInJlc3VsdE5hbWVQYXRoTGlzdCIsIl9yZWY3IiwicmV0dXJuUHJvbWlzZSIsIm91dE9mRGF0ZSIsIm9uRmluaXNoIiwib25GaW5pc2hGYWlsZWQiLCJmb3JtUmVmIiwiZm9ybVN0b3JlIiwiRm9ybUNvbnRleHQiLCJ0cmlnZ2VyRm9ybUNoYW5nZSIsInRyaWdnZXJGb3JtRmluaXNoIiwicmVnaXN0ZXJGb3JtIiwidW5yZWdpc3RlckZvcm0iLCJGb3JtUHJvdmlkZXIiLCJvbkZvcm1DaGFuZ2UiLCJvbkZvcm1GaW5pc2giLCJmb3JtQ29udGV4dCIsImZvcm1zUmVmIiwiY2hhbmdlZEZpZWxkcyIsImZvcm1zIiwibmV3Rm9ybXMiLCJfcmVmJGNvbXBvbmVudCIsIl9yZWYkdmFsaWRhdGVUcmlnZ2VyIiwiX29uRmllbGRzQ2hhbmdlIiwiX29uRmluaXNoIiwiZm9ybUluc3RhbmNlIiwiX2Zvcm1JbnN0YW5jZSRnZXRJbnRlIiwicmVzdCIsImNoaWxkcmVuTm9kZSIsIm1vdW50UmVmIiwiY2hpbGRyZW5SZW5kZXJQcm9wcyIsInByZXZGaWVsZHNSZWYiLCJ0YXJnZXRLZXlzIiwic291cmNlVmFsdWUiLCJ0YXJnZXRWYWx1ZSIsImlzU2ltaWxhciIsImZvcm1Db250ZXh0VmFsdWUiLCJ3cmFwcGVyTm9kZSIsIm9uU3VibWl0IiwicHJldmVudERlZmF1bHQiLCJfcmVzdFByb3BzJG9uUmVzZXQiLCJSZWZGb3JtIiwiTGlzdCIsImtleU1hbmFnZXIiLCJwYXJlbnRQcmVmaXhOYW1lIiwibGlzdENvbnRleHQiLCJnZXRLZXkiLCJwYXRoTmFtZSIsIl9yZWYzJHZhbHVlIiwib25DaGFuZ2UiLCJnZXROZXdWYWx1ZSIsIm9wZXJhdGlvbnMiLCJpbmRleFNldCIsImtleXNJbmRleCIsInZhbHVlSW5kZXgiLCJtb3ZlIiwibGlzdFZhbHVlIiwiX18iLCJ1c2VGb3JtIiwidXNlV2F0Y2giLCJfdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsInZhbHVlU3RyIiwidXNlTWVtbyIsInZhbHVlU3RyUmVmIiwiaXNWYWxpZEZvcm0iLCJuYW1lUGF0aFJlZiIsIm5leHRWYWx1ZVN0ciIsInNhZmVJc05hTiIsImFyZUlucHV0c0VxdWFsIiwibmV3SW5wdXRzIiwibGFzdElucHV0cyIsInNlY29uZCIsInBsYWNlaG9sZGVyIiwicmFuZ2VQbGFjZWhvbGRlciIsImxhbmciLCJ5ZWFyUGxhY2Vob2xkZXIiLCJxdWFydGVyUGxhY2Vob2xkZXIiLCJtb250aFBsYWNlaG9sZGVyIiwid2Vla1BsYWNlaG9sZGVyIiwicmFuZ2VZZWFyUGxhY2Vob2xkZXIiLCJyYW5nZVF1YXJ0ZXJQbGFjZWhvbGRlciIsInJhbmdlTW9udGhQbGFjZWhvbGRlciIsInJhbmdlV2Vla1BsYWNlaG9sZGVyIiwibG9jYWxlIiwidG9kYXkiLCJiYWNrVG9Ub2RheSIsImNsZWFyIiwibW9udGgiLCJ5ZWFyIiwidGltZVNlbGVjdCIsImRhdGVTZWxlY3QiLCJ3ZWVrU2VsZWN0IiwibW9udGhTZWxlY3QiLCJ5ZWFyU2VsZWN0IiwiZGVjYWRlU2VsZWN0IiwieWVhckZvcm1hdCIsImRhdGVGb3JtYXQiLCJkYXlGb3JtYXQiLCJkYXRlVGltZUZvcm1hdCIsIm1vbnRoQmVmb3JlWWVhciIsInByZXZpb3VzTW9udGgiLCJuZXh0TW9udGgiLCJwcmV2aW91c1llYXIiLCJuZXh0WWVhciIsInByZXZpb3VzRGVjYWRlIiwibmV4dERlY2FkZSIsInByZXZpb3VzQ2VudHVyeSIsIm5leHRDZW50dXJ5IiwidGltZVBpY2tlckxvY2FsZSIsIlBhZ2luYXRpb24iLCJpdGVtc19wZXJfcGFnZSIsImp1bXBfdG8iLCJqdW1wX3RvX2NvbmZpcm0iLCJwYWdlIiwicHJldl9wYWdlIiwibmV4dF9wYWdlIiwicHJldl81IiwibmV4dF81IiwicHJldl8zIiwibmV4dF8zIiwicGFnZV9zaXplIiwiRGF0ZVBpY2tlciIsIlRpbWVQaWNrZXIiLCJDYWxlbmRhciIsImdsb2JhbCIsIlRhYmxlIiwiZmlsdGVyVGl0bGUiLCJmaWx0ZXJDb25maXJtIiwiZmlsdGVyUmVzZXQiLCJmaWx0ZXJFbXB0eVRleHQiLCJmaWx0ZXJDaGVja2FsbCIsImZpbHRlclNlYXJjaFBsYWNlaG9sZGVyIiwiZW1wdHlUZXh0Iiwic2VsZWN0QWxsIiwic2VsZWN0SW52ZXJ0Iiwic2VsZWN0Tm9uZSIsInNlbGVjdGlvbkFsbCIsInNvcnRUaXRsZSIsImV4cGFuZCIsImNvbGxhcHNlIiwidHJpZ2dlckRlc2MiLCJ0cmlnZ2VyQXNjIiwiY2FuY2VsU29ydCIsIk1vZGFsIiwib2tUZXh0IiwiY2FuY2VsVGV4dCIsImp1c3RPa1RleHQiLCJQb3Bjb25maXJtIiwiVHJhbnNmZXIiLCJ0aXRsZXMiLCJzZWFyY2hQbGFjZWhvbGRlciIsIml0ZW1Vbml0IiwiaXRlbXNVbml0Iiwic2VsZWN0Q3VycmVudCIsInJlbW92ZUN1cnJlbnQiLCJyZW1vdmVBbGwiLCJVcGxvYWQiLCJ1cGxvYWRpbmciLCJyZW1vdmVGaWxlIiwidXBsb2FkRXJyb3IiLCJwcmV2aWV3RmlsZSIsImRvd25sb2FkRmlsZSIsIkVtcHR5IiwiZGVzY3JpcHRpb24iLCJUZXh0IiwiZWRpdCIsImNvcHkiLCJjb3BpZWQiLCJQYWdlSGVhZGVyIiwiYmFjayIsIkZvcm0iLCJvcHRpb25hbCIsIkltYWdlIiwicHJldmlldyIsInJ1bnRpbWVMb2NhbGUiLCJjaGFuZ2VDb25maXJtTG9jYWxlIiwibmV3TG9jYWxlIiwiTG9jYWxlUHJvdmlkZXIiLCJnZXRNZW1vaXplZENvbnRleHRWYWx1ZSIsInJlc3VsdEZuIiwiaXNFcXVhbCIsIm1lbW9pemVkIiwibmV3QXJncyIsImxhc3RUaGlzIiwibGFzdEFyZ3MiLCJsYXN0UmVzdWx0IiwibWVtb2l6ZU9uZSIsImxvY2FsZVZhbHVlIiwiZXhpc3QiLCJjb250ZXh0VmFsdWUiLCJMb2NhbGVSZWNlaXZlciIsImNvbXBvbmVudE5hbWUiLCJkZWZhdWx0TG9jYWxlIiwiYW50TG9jYWxlIiwibG9jYWxlRnJvbUNvbnRleHQiLCJsb2NhbGVDb2RlIiwiZ2V0TG9jYWxlIiwiZ2V0TG9jYWxlQ29kZSIsIm1lc3NhZ2VJbnN0YW5jZSIsImRlZmF1bHRUb3AiLCJkZWZhdWx0RHVyYXRpb24iLCJsb2NhbFByZWZpeENscyIsImhhc1RyYW5zaXRpb25OYW1lIiwicnRsIiwiZ2V0S2V5VGhlbkluY3JlYXNlS2V5IiwiZ2V0UkNOb3RpZmljYXRpb25JbnN0YW5jZSIsImdldENvbnRleHRQb3B1cENvbnRhaW5lciIsImdldFBvcHVwQ29udGFpbmVyIiwiX2dsb2JhbENvbmZpZyIsImdsb2JhbENvbmZpZyIsImdldFJvb3RQcmVmaXhDbHMiLCJnZXRJY29uUHJlZml4Q2xzIiwicm9vdFByZWZpeENscyIsImljb25QcmVmaXhDbHMiLCJpbnN0YW5jZUNvbmZpZyIsInR5cGVUb0ljb24iLCJzdWNjZXNzIiwibG9hZGluZyIsInR5cGVMaXN0IiwiZ2V0UkNOb3RpY2VQcm9wcyIsIkljb25Db21wb25lbnQiLCJtZXNzYWdlQ2xhc3MiLCJhcGkiLCJvcGVuIiwiY2xvc2VQcm9taXNlIiwiZmlsbGVkIiwibWVzc2FnZUtleSIsImF0dGFjaFR5cGVBcGkiLCJvcmlnaW5hbEFwaSIsImlzQXJnc1Byb3BzIiwidXNlTWVzc2FnZSIsImdldFJjTm90aWZpY2F0aW9uSW5zdGFuY2UiLCJpbm5lckluc3RhbmNlIiwiX3VzZVJDTm90aWZpY2F0aW9uMiIsImhvb2tOb3RpZnkiLCJob29rQXBpUmVmIiwibWVyZ2VkUHJlZml4Q2xzIiwiY3JlYXRlVXNlTWVzc2FnZSIsIlRpbnlDb2xvciIsIl9hIiwibnVtYmVySW5wdXRUb09iamVjdCIsIm9yaWdpbmFsSW5wdXQiLCJyb3VuZEEiLCJncmFkaWVudFR5cGUiLCJpc1ZhbGlkIiwiaXNEYXJrIiwiZ2V0QnJpZ2h0bmVzcyIsImlzTGlnaHQiLCJ0b1JnYiIsImdldEx1bWluYW5jZSIsIlJzUkdCIiwiR3NSR0IiLCJCc1JHQiIsImdldEFscGhhIiwic2V0QWxwaGEiLCJ0b0hzdlN0cmluZyIsInRvSHNsIiwidG9Ic2xTdHJpbmciLCJ0b0hleDgiLCJhbGxvdzRDaGFyIiwicmdiYVRvSGV4IiwidG9IZXg4U3RyaW5nIiwidG9SZ2JTdHJpbmciLCJ0b1BlcmNlbnRhZ2VSZ2IiLCJmbXQiLCJ0b1BlcmNlbnRhZ2VSZ2JTdHJpbmciLCJybmQiLCJ0b05hbWUiLCJfYiIsImZvcm1hdFNldCIsImZvcm1hdHRlZFN0cmluZyIsImhhc0FscGhhIiwibGlnaHRlbiIsImJyaWdodGVuIiwiZGFya2VuIiwidGludCIsInNoYWRlIiwiZGVzYXR1cmF0ZSIsInNhdHVyYXRlIiwiZ3JleXNjYWxlIiwiYW5hbG9nb3VzIiwic2xpY2VzIiwicGFydCIsImNvbXBsZW1lbnQiLCJtb25vY2hyb21hdGljIiwibW9kaWZpY2F0aW9uIiwic3BsaXRjb21wbGVtZW50Iiwib25CYWNrZ3JvdW5kIiwiYmFja2dyb3VuZCIsImZnIiwiYmciLCJ0cmlhZCIsInBvbHlhZCIsInRldHJhZCIsImluY3JlbWVudCIsImVxdWFscyIsImR5bmFtaWNTdHlsZU1hcmsiLCJEaXNhYmxlZENvbnRleHQiLCJEaXNhYmxlZENvbnRleHRQcm92aWRlciIsImRpc2FibGVkIiwib3JpZ2luRGlzYWJsZWQiLCJTaXplQ29udGV4dCIsIlNpemVDb250ZXh0UHJvdmlkZXIiLCJvcmlnaW5TaXplIiwiZ2xvYmFsUHJlZml4Q2xzIiwiZ2xvYmFsSWNvblByZWZpeENscyIsIlBBU1NFRF9QUk9QUyIsImdldEdsb2JhbFByZWZpeENscyIsImdldEdsb2JhbEljb25QcmVmaXhDbHMiLCJQcm92aWRlckNoaWxkcmVuIiwiYXV0b0luc2VydFNwYWNlSW5CdXR0b24iLCJjb21wb25lbnRTaXplIiwiZGlyZWN0aW9uIiwic3BhY2UiLCJ2aXJ0dWFsIiwiZHJvcGRvd25NYXRjaFNlbGVjdFdpZHRoIiwibGVnYWN5TG9jYWxlIiwicGFyZW50Q29udGV4dCIsImNvbXBvbmVudERpc2FibGVkIiwicHJvcE5hbWUiLCJwcm9wVmFsdWUiLCJwcmV2Q29uZmlnIiwiY3VycmVudENvbmZpZyIsImNhY2hlUmVmIiwibWVtb2VkQ29uZmlnIiwibWVtb0ljb25Db250ZXh0VmFsdWUiLCJjaGlsZE5vZGUiLCJfQU5UX01BUktfXyIsIkNvbmZpZ1Byb3ZpZGVyIiwidmFyaWFibGVzIiwiZm9ybWF0Q29sb3IiLCJmaWxsQ29sb3IiLCJjb2xvclZhbCIsImJhc2VDb2xvciIsImNvbG9yUGFsZXR0ZXMiLCJwcmltYXJ5Q29sb3JzIiwicHJpbWFyeUFjdGl2ZUNvbG9yIiwic3VjY2Vzc0NvbG9yIiwid2FybmluZ0NvbG9yIiwiZXJyb3JDb2xvciIsImluZm9Db2xvciIsImNzc0xpc3QiLCJnZXRTdHlsZSIsInJlZ2lzdGVyVGhlbWUiLCJkZWZhdWx0R2V0Q29udGFpbmVyIiwiZGVmYXVsdENsb3NlSWNvbiIsImRlZmF1bHRCb3R0b20iLCJkZWZhdWx0UGxhY2VtZW50IiwiZ2V0UGxhY2VtZW50U3R5bGUiLCJwbGFjZW1lbnQiLCJib3R0b20iLCJyaWdodCIsImdldE5vdGlmaWNhdGlvbkluc3RhbmNlIiwiX2FyZ3MkcGxhY2VtZW50IiwiX2FyZ3MkZ2V0Q29udGFpbmVyIiwiY2FjaGVLZXkiLCJjYWNoZUluc3RhbmNlIiwibm90aWZpY2F0aW9uQ2xhc3MiLCJkdXJhdGlvbkFyZyIsImJ0biIsIl9hcmdzJGNsb3NlSWNvbiIsImljb25Ob2RlIiwiY2xvc2VJY29uVG9SZW5kZXIiLCJhdXRvTWFyZ2luVGFnIiwiY3JlYXRlVXNlTm90aWZpY2F0aW9uIiwiQUxQSEFCRVQiLCJBTFBIQUJFVF9NQVAiLCJwb2x5bW9kU3RlcCIsInByZWZpeENoayIsImNoayIsIl9fZGVjb2RlIiwiTElNSVQiLCJsb3dlcmVkIiwidXBwZXJlZCIsImxhc3RJbmRleE9mIiwid29yZENoYXJzIiwiY29udmVydCIsImluQml0cyIsIm91dEJpdHMiLCJwYWQiLCJtYXhWIiwiZGVjb2RlVW5zYWZlIiwidG9Xb3Jkc1Vuc2FmZSIsInRvV29yZHMiLCJmcm9tV29yZHNVbnNhZmUiLCJmcm9tV29yZHMiLCJpbmhlcml0cyIsImVuZGlhbiIsImlzQk4iLCJCdWZmZXIiLCJ3b3JkU2l6ZSIsInBhcnNlSGV4NEJpdHMiLCJwYXJzZUhleEJ5dGUiLCJsb3dlckJvdW5kIiwicGFyc2VCYXNlIiwiZW5kIiwiZGVzdCIsInNyYyIsIl9pbml0TnVtYmVyIiwiX2luaXRBcnJheSIsIl9wYXJzZUhleCIsIl9wYXJzZUJhc2UiLCJfc3RyaXAiLCJsaW1iTGVuIiwibGltYlBvdyIsImltdWxuIiwiX2lhZGRuIiwiX21vdmUiLCJfZXhwYW5kIiwiX25vcm1TaWduIiwiZm9yIiwiemVyb3MiLCJncm91cFNpemVzIiwiZ3JvdXBCYXNlcyIsInNtYWxsTXVsVG8iLCJvdXQiLCJuY2FycnkiLCJyd29yZCIsIm1heEoiLCJncm91cFNpemUiLCJncm91cEJhc2UiLCJtb2RybiIsImlkaXZuIiwidG9CdWZmZXIiLCJ0b0FycmF5TGlrZSIsIkFycmF5VHlwZSIsInJlcUxlbmd0aCIsImFsbG9jVW5zYWZlIiwiYWxsb2NhdGUiLCJfdG9BcnJheUxpa2VMRSIsIl90b0FycmF5TGlrZUJFIiwiY2x6MzIiLCJfY291bnRCaXRzIiwiX3plcm9CaXRzIiwiemVyb0JpdHMiLCJpbm90biIsInRlc3RuIiwibm90biIsIml1b3IiLCJpb3IiLCJ1b3IiLCJpdWFuZCIsImlhbmQiLCJ1YW5kIiwiaXV4b3IiLCJpeG9yIiwidXhvciIsImJ5dGVzTmVlZGVkIiwiYml0c0xlZnQiLCJzZXRuIiwiYml0Iiwid2JpdCIsImlzdWIiLCJjb21iMTBNdWxUbyIsIm1pZCIsImFsMCIsImFoMCIsImFsMSIsImFoMSIsImFsMiIsImFoMiIsImEzIiwiYWwzIiwiYWgzIiwiYTQiLCJhbDQiLCJhaDQiLCJhNSIsImFsNSIsImFoNSIsImE2IiwiYWw2IiwiYWg2IiwiYTciLCJhbDciLCJhaDciLCJhOCIsImFsOCIsImFoOCIsImE5IiwiYWw5IiwiYWg5IiwiYmwwIiwiYmgwIiwiYmwxIiwiYmgxIiwiYmwyIiwiYmgyIiwiYjMiLCJibDMiLCJiaDMiLCJiNCIsImJsNCIsImJoNCIsImI1IiwiYmw1IiwiYmg1IiwiYjYiLCJibDYiLCJiaDYiLCJiNyIsImJsNyIsImJoNyIsImI4IiwiYmw4IiwiYmg4IiwiYjkiLCJibDkiLCJiaDkiLCJ3MCIsImltdWwiLCJ3MyIsInc0IiwidzUiLCJ3NiIsInc3IiwidzgiLCJ3OSIsIncxMCIsIncxMSIsIncxMiIsIncxMyIsIncxNCIsIncxNSIsIncxNiIsIncxNyIsIncxOCIsImJpZ011bFRvIiwiaG5jYXJyeSIsImp1bWJvTXVsVG8iLCJGRlRNIiwibXVsVG8iLCJtYWtlUkJUIiwiTiIsInJldkJpbiIsInJiIiwicGVybXV0ZSIsInJidCIsInJ3cyIsIml3cyIsInJ0d3MiLCJpdHdzIiwicnR3ZGYiLCJjb3MiLCJQSSIsIml0d2RmIiwic2luIiwicnR3ZGZfIiwiaXR3ZGZfIiwicmUiLCJpZSIsInJvIiwiaW8iLCJndWVzc0xlbjEzYiIsImNvbmp1Z2F0ZSIsIm5vcm1hbGl6ZTEzYiIsImNvbnZlcnQxM2IiLCJzdHViIiwicGgiLCJtdWxwIiwicndzdCIsIml3c3QiLCJucndzIiwibnJ3c3QiLCJuaXdzdCIsInJtd3MiLCJtdWxmIiwiaXNOZWdOdW0iLCJtdWxuIiwiaXNxciIsInRvQml0QXJyYXkiLCJpdXNobG4iLCJjYXJyeU1hc2siLCJuZXdDYXJyeSIsImlzaGxuIiwiaGludCIsImV4dGVuZGVkIiwibWFza2VkV29yZHMiLCJpc2hybiIsInVzaGxuIiwiaW1hc2tuIiwiYWRkbiIsInN1Ym4iLCJpYWJzIiwiX2lzaGxuc3VibXVsIiwiX3dvcmREaXYiLCJiaGkiLCJxaiIsImRpdm1vZCIsInBvc2l0aXZlIiwiZGl2biIsImRtIiwiaGFsZiIsInIyIiwiZWdjZCIsIkEiLCJCIiwiQyIsIkQiLCJ5cCIsInhwIiwiaW0iLCJqbSIsImdjZCIsIl9pbnZtcCIsImJpbmNuIiwidWNtcCIsImd0biIsImd0ZW4iLCJsdG4iLCJsdGVuIiwiZXFuIiwiUmVkIiwiY3R4IiwiY29udmVydFRvIiwiX2ZvcmNlUmVkIiwiY29udmVydEZyb20iLCJyZWRTaGwiLCJfdmVyaWZ5MiIsInJlZElNdWwiLCJfdmVyaWZ5MSIsInJlZElTcXIiLCJzcXJ0IiwicmVkUG93IiwicHJpbWVzIiwiazI1NiIsInAyMjQiLCJwMTkyIiwicDI1NTE5IiwiTVByaW1lIiwiX3RtcCIsIksyNTYiLCJQMjI0IiwiUDE5MiIsIlAyNTUxOSIsIl9wcmltZSIsIk1vbnQiLCJpbW9kIiwicmludiIsIm1pbnYiLCJpcmVkdWNlIiwiaW11bEsiLCJzdHJpcCIsIm1vZDMiLCJuT25lIiwibHBvdyIsImludiIsImNsYXNzTmFtZXMiLCJjbGFzc2VzIiwiYXJnVHlwZSIsImlubmVyIiwiY29tbW9uIiwic2hhIiwicmlwZW1kIiwiaG1hYyIsInNoYTEiLCJzaGEyMjQiLCJzaGEzODQiLCJzaGE1MTIiLCJyaXBlbWQxNjAiLCJCbG9ja0hhc2giLCJwZW5kaW5nVG90YWwiLCJibG9ja1NpemUiLCJwYWRMZW5ndGgiLCJfZGVsdGE4IiwiX2RlbHRhMzIiLCJqb2luMzIiLCJfcGFkIiwiX2RpZ2VzdCIsIkhtYWMiLCJIYXNoIiwib3V0ZXIiLCJyb3RsMzIiLCJzdW0zMiIsInN1bTMyXzMiLCJzdW0zMl80IiwiUklQRU1EMTYwIiwiS2giLCJFIiwiQWgiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIlQiLCJyaCIsInNoIiwidG9IZXgzMiIsInNwbGl0MzIiLCJzaGFDb21tb24iLCJzdW0zMl81IiwiZnRfMSIsInNoYTFfSyIsIlNIQTEiLCJXIiwiU0hBMjU2IiwiU0hBMjI0IiwiY2gzMiIsIm1hajMyIiwiczBfMjU2IiwiczFfMjU2IiwiZzBfMjU2IiwiZzFfMjU2Iiwic2hhMjU2X0siLCJUMSIsIlQyIiwiU0hBNTEyIiwiU0hBMzg0Iiwicm90cjY0X2hpIiwicm90cjY0X2xvIiwic2hyNjRfaGkiLCJzaHI2NF9sbyIsInN1bTY0Iiwic3VtNjRfaGkiLCJzdW02NF9sbyIsInN1bTY0XzRfaGkiLCJzdW02NF80X2xvIiwic3VtNjRfNV9oaSIsInN1bTY0XzVfbG8iLCJzaGE1MTJfSyIsImNoNjRfaGkiLCJ4aCIsInhsIiwieWgiLCJ5bCIsInpoIiwiY2g2NF9sbyIsInpsIiwibWFqNjRfaGkiLCJtYWo2NF9sbyIsInMwXzUxMl9oaSIsInMwXzUxMl9sbyIsInMxXzUxMl9sbyIsImcwXzUxMl9oaSIsImcwXzUxMl9sbyIsImcxXzUxMl9sbyIsIl9wcmVwYXJlQmxvY2siLCJjMF9oaSIsImMwX2xvIiwiYzFfaGkiLCJjMV9sbyIsImMyX2hpIiwiYzJfbG8iLCJjM19oaSIsImMzX2xvIiwiYWgiLCJhbCIsImJoIiwiYmwiLCJjaCIsImNsIiwiZGgiLCJkbCIsImVoIiwiZWwiLCJmaCIsImZsIiwiZ2giLCJnbCIsImhoIiwiaGwiLCJjNF9oaSIsImM0X2xvIiwiVDFfaGkiLCJUMV9sbyIsIlQyX2hpIiwiVDJfbG8iLCJyb3RyMzIiLCJwMzIiLCJpc1N1cnJvZ2F0ZVBhaXIiLCJodG9ubCIsInplcm84IiwicG9zIiwiSU5QVVRfRVJST1IiLCJXSU5ET1ciLCJKU19TSEEzX05PX1dJTkRPVyIsIldFQl9XT1JLRVIiLCJKU19TSEEzX05PX05PREVfSlMiLCJ2ZXJzaW9ucyIsIkNPTU1PTl9KUyIsIkpTX1NIQTNfTk9fQ09NTU9OX0pTIiwiQU1EIiwiQVJSQVlfQlVGRkVSIiwiSlNfU0hBM19OT19BUlJBWV9CVUZGRVIiLCJBcnJheUJ1ZmZlciIsIkhFWF9DSEFSUyIsIkNTSEFLRV9QQURESU5HIiwiU0hJRlQiLCJSQyIsIkJJVFMiLCJTSEFLRV9CSVRTIiwiT1VUUFVUX1RZUEVTIiwiQ1NIQUtFX0JZVEVQQUQiLCJKU19TSEEzX05PX0FSUkFZX0JVRkZFUl9JU19WSUVXIiwiaXNWaWV3IiwiYnVmZmVyIiwiY3JlYXRlT3V0cHV0TWV0aG9kIiwib3V0cHV0VHlwZSIsIktlY2NhayIsImNyZWF0ZVNoYWtlT3V0cHV0TWV0aG9kIiwib3V0cHV0Qml0cyIsImNyZWF0ZUNzaGFrZU91dHB1dE1ldGhvZCIsIm1ldGhvZHMiLCJjcmVhdGVLbWFjT3V0cHV0TWV0aG9kIiwiY3JlYXRlT3V0cHV0TWV0aG9kcyIsImNyZWF0ZU1ldGhvZCIsImFsZ29yaXRobXMiLCJieXRlcGFkIiwiS21hYyIsIm1ldGhvZE5hbWVzIiwiYWxnb3JpdGhtIiwibWV0aG9kTmFtZSIsIm5ld01ldGhvZE5hbWUiLCJibG9ja3MiLCJmaW5hbGl6ZWQiLCJibG9ja0NvdW50Iiwib3V0cHV0QmxvY2tzIiwiZXh0cmFCeXRlcyIsIm5vdFN0cmluZyIsImxhc3RCeXRlSW5kZXgiLCJlbmNvZGVTdHJpbmciLCJzdHJzIiwicGFkZGluZ0J5dGVzIiwiZmluYWxpemUiLCJVaW50MzJBcnJheSIsImMwIiwiYzMiLCJjNCIsImM1IiwiYzYiLCJjNyIsImM5IiwiYjEwIiwiYjExIiwiYjEyIiwiYjEzIiwiYjE0IiwiYjE1IiwiYjE2IiwiYjE3IiwiYjE4IiwiYjE5IiwiYjIwIiwiYjIxIiwiYjIyIiwiYjIzIiwiYjI0IiwiYjI1IiwiYjI2IiwiYjI3IiwiYjI4IiwiYjI5IiwiYjMwIiwiYjMxIiwiYjMyIiwiYjMzIiwiYjM0IiwiYjM1IiwiYjM2IiwiYjM3IiwiYjM4IiwiYjM5IiwiYjQwIiwiYjQxIiwiYjQyIiwiYjQzIiwiYjQ0IiwiYjQ1IiwiYjQ2IiwiYjQ3IiwiYjQ4IiwiYjQ5IiwiJCR0eXBlb2YiXSwic291cmNlUm9vdCI6IiJ9